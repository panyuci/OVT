{
  "@VERSION" : {
    "CROSSASSET" : "20.1.1.0",
    "TOOLKIT" : "2.5.1794",
    "NXT" : "1.0"
  },
  "CAIL_LOOKUPS.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "TYPE" : ["StartsWith","StartsWith","StartsWith","StartsWith","StartsWith","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","Parameter","Parameter","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","NameExtract","Parameter","NameExtract","NameExtract","Parameter","NameExtract","Parameter","NameExtract","Parameter","NameExtract","Parameter","NameExtract","Parameter","Parameter","NameExtract","NameExtract","Parameter","Parameter","NameExtract","NameExtract","NameExtract","NameExtract","Parameter","NameExtract","Parameter","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","Parameter","NameExtract","Parameter","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","NameExtract","NameExtract","Parameter","Parameter","NameExtract","NameExtract","NameExtract","NameExtract","Parameter","NameExtract","Parameter","Parameter","NameExtract","NameExtract","NameExtract","Parameter","Parameter","NameExtract","Parameter","Parameter","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","Parameter","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","Parameter","Parameter","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","Parameter","NameExtract","Parameter","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract","NameExtract"],
      "PARAM1" : ["CONV.","SETTINGS.","SCRIPT.","CALENDAR.","CREDITINDEX.","CUSTOM.CURRENCY","REPORT.CASHPAYMENT.<CashFlowName>","REPORT.CONSOLIDATEDPAYMENT.<NAME>","IR.<Currency>-<IRIndex>-<IRIndexTenor>.VOL.<Ignore>","IR.<Currency>-<IRIndex>-<IRIndexTenor>.CDS.<Ignore>","CR.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>.CDS.RECOVERY","IR.<TargetCurrency>-<TargetIRIndex>-<TargetIRIndexTenor>/<KnownCurrency>-<KnownIRIndex>-<KnownIRIndexTenor>.BASIS-<Tenor>.<QuoteType>","IR.<TargetCurrency>-<TargetIRIndex>-<TargetIRIndexTenor>/<KnownCurrency>-<KnownIRIndex>-<KnownIRIndexTenor>.BASIS.SPREAD","FX.Spot-Strategy.<CCYPAIR>.FWD","SPOTRULE","CONVENTION","IR.SPOT-STRATEGY.T+0","IR.Spot-Strategy.<Currency>-<IRIndex>.<SpotRule>","IR.Rate-Settings.<Currency>-<IRIndex>-<IRIndexTenor>.FALLBACK","IR.Rate-Settings.<Currency>-<IRIndex>-<IRIndexTenor>","<ForeignCurve>.CSA.<BaseCcy>/<FxCcy>","IRINDEX","FUTURESTENORCUTOFF","IR.<Currency>-SOFR-<IRIndexTenor>.ARR.<QuoteType>","IRINDEX","FUTURESTENORCUTOFF","IR.<Currency>-SOFRADDON-<IRIndexTenor>.ARR.<QuoteType>","IRINDEX","FUTURESTENORCUTOFF","IR.<Currency>-SONIA-<IRIndexTenor>.ARR.<QuoteType>","IR.<Currency>-ISDA-STDRATES.<QUOTETYPE>","IRINDEXTENOR","IR.<Currency>-<IRIndex>-ON.<QuoteType>","IR.VOL.CAP.<Currency>-<IRIndex>-<IRIndexTenor>.<QuoteType>","VOLQUOTETYPE","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<StrikeType>.<SWAPTIONSTRIKE>.LOGNORMAL.<QuoteType>","VOLQUOTETYPE","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<StrikeType>.<SWAPTIONSTRIKE>.NORMAL.<QuoteType>","VOLQUOTETYPE","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<StrikeType>.<SWAPTIONSTRIKE>.TRUNCATEDNORMALNORMAL.<QuoteType>","VOLQUOTETYPE","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<StrikeType>.<SWAPTIONSTRIKE>.SHIFTEDLOGNORMAL.<QuoteType>","CURRENCY","VOLQUOTETYPE","IR.VOL.SWPT.CHF-<IRIndex>-<IRIndexTenor>.ATM.<QuoteType>","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.ATM.<QuoteType>","SWAPTIONQUOTETYPE","TARGETQUOTETYPE","IR.VOLCUBE.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<QuoteType>","REPO.<Currency>-<BondType>-<BondMaturity>.<QuoteType>","IR.<TargetCurrency>-<TargetIRIndex>-<TargetIRIndexTenor>/<KnownCurrency>-<KnownIRIndex>-<KnownIRIndexTenor>.<QuoteType>","IR.<FixedCurrency>-FIXED/<FloatCurrency>-<FloatIRIndex>-<FloatIRIndexTenor>.<MarketType>.<QUOTETYPE>","MATURITYTYPE","FX.<TargetCurrency>/<KnownCurrency>.FWD.<QuoteType>","CURRENCY","IRINDEX","IRINDEXTENOR","IR.CNY-REPO-7D.<QuoteType>","CURRENCY","IRINDEXTENOR","IR.CAD-<IRIndex>-3M.OISDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IR.USD-LIBOR-1M.OISDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IRINDEX","IR.CAD-CDOR-1M.OISDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IR.USD-LIBOR-6M.OISDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IR.JPY-LIBOR-3M.OISDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IR.JPY-LIBOR-1M.OISDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IR.NOK-NIBOR-3M.SWAPDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","DISCOUNTCURVE","IR.NOK-NIBOR-1M.SWAPDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IR.DKK-CIBOR-3M.SWAPDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IR.PLN-WIBOR-3M.SWAPDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","KNOWNLEGIRINDEXTENOR","IR.GBP-LIBOR-12M.OISDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","KNOWNLEGIRINDEXTENOR","IR.EUR-EURIBOR-12M.OISDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IR.SEK-STIBOR-1M.SWAPDISCOUNTING.<QuoteType>","CURRENCY","TARGETLEGIRINDEXTENOR","IR.SEK-STIBOR-6M.SWAPDISCOUNTING.<QuoteType>","IR.REPORT.YIELDRISK","IR.MODEL.DET.<Currency>.<QuoteType>","MEANREVERSION.CALIBRATE","MEANREVERSION.VALUE","IR.MODEL.HW1F.<Currency>.<QuoteType>","IR.MODEL.HW2F.<Currency>.<QuoteType>","IR.MODEL.LMM.<Currency>.<QuoteType>","IR.<Currency>-<BondType>-<Issuer>.SOVEREIGN.<QuoteType>","DUALCURVE","IR.<Currency>-<IRIndex>-<IRIndexTenor>.SWAPDISCOUNTING.<QuoteType>","SWAPSTARTTENOR","DUALCURVE","IR.<Currency>-<IRIndex>-<IRIndexTenor>.OISDISCOUNTING.<QuoteType>","IR.<BaseCcy>/<FxCcy>.CSA.<QuoteType>","IR.<Currency>.<Counterparty>.<LegalEntity>.<NettingSet>.<MarginSet>","BASECURVE","COUNTERPARTY","IR.<Currency>-LENDINGCURVE-USD-SELF_SNRFOR_XR.<QuoteType>","BASECURVE","COUNTERPARTY","IR.<Currency>-BORROWINGCURVE-USD-SELF_SNRFOR_XR.<QuoteType>","IR.<Currency>-<Issuer>.ZERORATE.<QuoteType>","IR.<Currency>-<Issuer>.<QuoteType>","FX.SPOT.<Currencies>.<QuoteType>","FX.SPOT.<QuoteType>","FX.VOL.<BaseCurrency>/<TermCurrency>.<QuoteType>","FX.MODEL.BLACK.<BaseCurrency>/<TermCurrency>.<QuoteType>","FX.MODEL.DUPIRE.<BaseCurrency>/<TermCurrency>.<QuoteType>","FX.MODEL.HESTON.<BaseCurrency>/<TermCurrency>.<QuoteType>","FX.MODEL.DET.<BaseCurrency>/<TermCurrency>.<QuoteType>","FX.MODEL.LVSV.<BaseCurrency>/<TermCurrency>.<QuoteType>","FX.REPORT.GREEKS","CMDTY.<Currency>-<Exchange>-<Symbol>.FWD.<QuoteType>","CMDTY.MODEL.BLACK.<Currency>-<Exchange>-<Symbol>.<QuoteType>","VOLQUOTETYPE","CMDTY.VOL.<Currency>-<Exchange>-<Symbol>.DELTAVOL.<QuoteType>","CMDTY.VOL.<Currency>-<Exchange>-<Symbol>.STRIKE-<STRIKEDEFINITION>.<QuoteType>","CR.MODEL.DET.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>.<QuoteType>","CR.MODEL.CT.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>.<QuoteType>","CR.CURVES.<Currency>-<CreditIndex>.<QuoteType>","CR.SCALEDCURVES.<Currency>-<CreditIndex>.<QuoteType>","CR.BASECORRSURFACE.<Currency>-<CreditIndex>.<QuoteType>","CR.<Currency>-<CDSINDEX>.CREDITCURVEFACTORY.<QUOTETYPE>","CR.<Currency>.CREDITCURVEFACTORY.<QuoteType>","CR.<Currency>-<CDSINDEX>-<SCALEFACTOR>.BASECORRELATIONSURFACE.<QUOTETYPE>","CDSINDEX","MAPPINGINDEX","CR.<Currency>-CDXPROTOTYPEB.BASECORRELATIONSURFACE.<QUOTETYPE>","CR.<Currency>-<CDSINDEX>.BASECORRELATIONSURFACE.<QUOTETYPE>","CR.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>_<CDSIndexSpread>-.<QuoteType>","CR.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>.<QuoteType>","CR.<Currency>-<Issuer>.<QuoteType>","EQ.VOL.<Currency>-<Exchange>-<Ticker>.<QuoteType>","EQ.MODEL.DUPIRE.<Currency>-<Exchange>-<Ticker>.<QuoteType>","EQ.MODEL.BATES.<Currency>-<Exchange>-<Ticker>.<QuoteType>","EQ.MODEL.HESTON.<Currency>-<Exchange>-<Ticker>.<QuoteType>","EQ.MODEL.BLACKSCHOLES.<Currency>-<Exchange>-<Ticker>.<QuoteType>","EQ.MODEL.DET.<Currency>-<Exchange>-<Ticker>.<QuoteType>","EQ.MODEL.CONVERTIBLE.<Currency>-<Exchange>-<Ticker>.<QuoteType>","EQ.MODEL.QUANTO.<PayoutCurrency>.<Currency>-<Exchange>-<Ticker>.<QuoteType>","EQ.<Currency>-<Exchange>-<Ticker>.DIV","DIVIDENDTYPE","EQ.<Currency>-<Exchange>-<Ticker>.DIV.ABSLT","DIVIDENDTYPE","EQ.<Currency>-<Exchange>-<Ticker>.DIV.CONT","INFL.ZCIIS.<Currency>-<InflationIndex>.<QuoteType>","INFL.BOND.<CURRENCY>-<BONDTYPE>-<ISSUER>-<INFLATIONINDEX>.<QUOTETYPE>","INFL.MODEL.IMM.<Currency>-<INFLATIONINDEX>.<QuoteType>","HY.MODEL.CCEQB.<PayoutCurrency>.<QuoteType>","INFL.MODEL.REALRATEHW1F.<Currency>-<INFLATIONINDEX>.<QuoteType>","INFL.MODEL.CPIBLACK.<Currency>-<INFLATIONINDEX>.<QuoteType>","HY.MODEL.UNIVERSAL2.<PayoutCurrency>.<QuoteType>","HY.MODEL.UNIVERSAL.<PayoutCurrency>.<QuoteType>"],
      "PARAM2" : [null,null,null,null,null,"TRADE.UTILITY.CUSTOMCURRENCY","TRADE.UTILITY.CASHPAYMENTSCRIPT","TRADE.UTILITY.CONSOLIDATEDPAYMENT","DUMMY.TEMPLATE","DUMMY.TEMPLATE","DUMMY.TEMPLATE","DUMMY.TEMPLATE","MDE.XCCY.SPREAD","MDE.FXSPOTSTRATEGY","String","String","MDE.RATESPOTSTRATEGY","MDE.RATESPOTSTRATEGY","MDE.FALLBACKRATESETTINGS","MDE.RATESETTINGS","MDE.CURVE.CSA","Tenor","Tenor","MDE.CURVE.ARR","Tenor","Tenor","MDE.CURVE.ARRADDON","Tenor","Tenor","MDE.CURVE.ARR","MDE.CURVE.ISDA","Tenor","MDE.CURVE.OIS","MDE.VOLATILITY.CAP","String","MDE.VOLATILITY.SWAPTION","String","MDE.VOLATILITY.SWAPTION","String","MDE.VOLATILITY.SWAPTION","String","MDE.VOLATILITY.SWAPTION","Currency","String","MDE.VOLATILITY.SWAPTION","MDE.VOLATILITY.SWAPTION","String","String","MDE.VOLATILITYCUBE.SWAPTION","MDE.CURVE.REPO","MDE.CURVE.XCCYBASIS","MDE.CURVE.XCCYSWAP","String","MDE.CURVE.FXFWD","String","String","Tenor","MDE.CURVE.OIS","String","Tenor","MDE.CURVE.CIS","String","Tenor","MDE.CURVE.BASIS","String","Tenor","String","MDE.CURVE.BASIS","String","Tenor","MDE.CURVE.BASIS","String","Tenor","MDE.CURVE.BASIS","String","Tenor","MDE.CURVE.BASIS","String","Tenor","MDE.CURVE.BASIS","String","Tenor","ID","MDE.CURVE.BASIS","String","Tenor","MDE.CURVE.BASIS","String","Tenor","MDE.CURVE.BASIS","String","Tenor","Tenor","MDE.CURVE.BASIS","String","Tenor","Tenor","MDE.CURVE.BASIS","String","Tenor","MDE.CURVE.BASIS","String","Tenor","MDE.CURVE.BASIS","REPORT.YIELDRISK","MODEL.IR.DET","Boolean","Double","MODEL.IR.HW1F","MODEL.IR.HW2F","MODEL.IR.LMM","MDE.CURVE.SOVEREIGN","Boolean","MDE.CURVE.YIELD","String","Boolean","MDE.CURVE.YIELD","MDE.CURVE.CSA","MDE.CURVE.CTD","ID","String","MDE.CURVE.SPREAD","ID","String","MDE.CURVE.SPREAD","MDE.CURVE.ZERORATE","MDE.CURVE.SOVEREIGN","MDE.SPOT.FX","MDE.SPOT.FX","MDE.VOLATILITY.FX","MODEL.FX.BS","MODEL.FX.DUPIRE","MODEL.FX.HESTON","MODEL.FX.DET","MODEL.FX.LVSV","REPORT.FXGREEKS","MDE.CURVE.CMDTYFWD","MODEL.CMDTY.BS","String","MDE.VOLATILITY.CMDTY","MDE.VOLATILITY.CMDTY","MODEL.CR.DET","MODEL.CR.CT","MDE.CREDITCURVES.BASKET","MDE.CREDITCURVES.INDEXMATCHED","MDE.BASECORRSURF","MDE.CURVEFACTORY.IM","MDE.CURVEFACTORY","MDE.BASECORRELATIONSURFACE","String","String","MDE.BASECORRELATIONSURFACE","MDE.BASECORRELATIONSURFACE","MDE.CREDITCURVE.CDS","MDE.CREDITCURVE.CDS","MDE.CREDITCURVE.BOND","MDE.VOLATILITY.EQ","MODEL.EQ.DUPIRE","MODEL.EQ.BATES","MODEL.EQ.HESTON","MODEL.EQ.BS","MODEL.EQ.DET","MODEL.EQ.CONVERTIBLE","MODEL.EQ.QUANTO","MDE.CURVE.DIVIDEND","String","MDE.CURVE.DIVIDEND","String","MDE.CURVE.DIVIDEND","MDE.CURVE.ZCIISWAP","MDE.CURVE.ILBOND","MODEL.INFL.IMM","MODEL.HY.CCEQB","MODEL.INFL.HW1F","MODEL.INFL.BS","MODEL.HY.UNIVERSAL2","MODEL.HY.BASKET"],
      "V1" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,"T+0","CONV.IR.T+0.SPOTSTRATEGY",null,null,null,null,null,"SOFR","2Y",null,"SOFR","2Y",null,"SONIA","3Y",null,null,"ON",null,null,"LOGNORMAL",null,"NORMAL",null,"TRUNCATEDNORMAL",null,"SHIFTEDLOGNORMAL",null,"CHF","NORMAL",null,null,"Normal Vol","Normal Vol",null,null,null,null,"Tenor",null,"CNY","REPO","7D",null,"CAD","3M",null,"USD","1M",null,"CAD","1M","CDOR",null,"USD","6M",null,"JPY","3M",null,"JPY","1M",null,"NOK","3M",null,"NOK","1M","IR.NOK-NIBOR-3M.MID",null,"DKK","3M",null,"PLN","3M",null,"GBP","12M","3M",null,"EUR","12M","6M",null,"SEK","1M",null,"SEK","6M",null,null,null,false,0.0299999999999999989,null,null,null,null,false,null,"3Y",true,null,null,null,"IR.USD-LIBOR-3M.OISDISCOUNTING.MID","CR.USD-SELF_SNRFOR_XR",null,"IR.USD-LIBOR-3M.OISDISCOUNTING.MID","CR.USD-SELF_SNRFOR_XR",null,null,null,null,null,null,null,null,null,null,null,null,null,null,"\"Delta\"",null,null,null,null,null,null,null,null,null,null,"CDXPROTOTYPEB","CDXPROTOTYPE",null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ABSLT",null,"CONT",null,null,null,null,null,null,null,null,null]
    }
  },
  "CAIL_LOOKUPS": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "OBJECT" : "CLASS",
      "TYPE" : "LOOKUP RULES",
      "ID" : "CAIL_LOOKUPS",
      "RULETABLE" : "CAIL_LOOKUPS.DATA"
    }
  },
  "CONTEXT": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "OBJECT" : "MARKET",
      "TYPE" : "CONTAINER",
      "ID" : "Context"
    }
  },
  "SCRIPT.NXGLOBAL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DEFINITIONS" : [
        "// Creates a set of swaptions used for calibration.",
        null,
        "// Wrap Numerix::Query to return an empty list if the table has no rows.",
        null,
        "constfunction MarketQuery(marketData, a, b)",
        "{",
        "    id =  Numerix::Query(marketData, a, b)",
        "    return if Numerix::TableRowCount(id) ? id : {}",
        "}",
        null,
        "// Return true if the specified key exists in the table.",
        null,
        "constfunction KeyExists(tableId, rowInput)",
        "{",
        "    call = Numerix::Load(TableId)",
        "    i = call.Key.Find(rowInput.Canonical)",
        "	",
        "    if i :",
        "        return true",
        null,
        "    return false",
        "}",
        null,
        "//=============================================================================",
        "// STANDARD MARKET DATA ELEMENT ACCESS FUNCTIONS",
        "//=============================================================================",
        null,
        "constfunction CommoditySpotPriceID(market, QuoteType, cmdty_currency, cmdty_exchange, cmdty_symbol, cmdty_variant)",
        "{",
        "    cp = \"CMDTY.\" + cmdty_currency + \"-\" + cmdty_exchange + \"-\" + cmdty_symbol + \".SPOT.\" + QuoteType",
        "    return cp.Canonical",
        "}",
        null,
        null,
        "constfunction CommodityForwardCurveID(market, QuoteType, cmdty_currency, cmdty_exchange, cmdty_symbol, cmdty_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market+\"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "	    return policy._CommodityForwardCurveID(cmdty_currency.Canonical, cmdty_exchange.Canonical, cmdty_symbol.Canonical, cmdty_variant.Canonical)",
        "    ",
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        "   ",
        "    cf = \"CMDTY.\" + cmdty_currency + \"-\" + cmdty_exchange + \"-\" + cmdty_symbol + \".FWD.\" + QuoteType",
        "    return cf.Canonical",
        "}",
        null,
        "// Returns the ID of the CMDTY volatility surface to use.",
        null,
        "constfunction CommodityVolatilitySurfaceID(market, QuoteType, cmdty_currency, cmdty_exchange, cmdty_symbol, cmdty_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market+\"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._CommodityVolatilitySurfaceID(cmdty_currency.Canonical, cmdty_exchange.Canonical, cmdty_symbol.Canonical, cmdty_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "    cv = \"CMDTY.VOL.\" + cmdty_currency + \"-\" + cmdty_exchange + \"-\" + cmdty_symbol + \".STRIKE-RLTV.\" + QuoteType",
        "    return cv.Canonical",
        "}",
        null,
        "constfunction CommodityFutureSpotPriceID(market, QuoteType, cmdty_fut_currency, cmdty_fut_exchange, cmdty_fut_ticker, cmdty_fut_maturityCode, cmdty_variant)",
        "{",
        "    dc = \"CMDTY.\" + cmdty_fut_currency + \"-\" + cmdty_fut_exchange + \"-\" + cmdty_fut_ticker + \".FUT.\" + cmdty_fut_maturityCode + \".\" + QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        "//",
        "//  EQ",
        "//",
        null,
        "constfunction EquitySpotPriceID(market, QuoteType, eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "{",
        "    dc = \"EQ.\" + eq_currency + \"-\" + eq_exchange + \"-\" + eq_ticker + \".SPOT.\"+QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        null,
        "constfunction EquityFutureSpotPriceID(market, QuoteType, eq_fut_currency, eq_fut_exchange, eq_fut_ticker, eq_fut_maturityCode, eq_variant)",
        "{",
        "    dc = \"EQ.\" + eq_fut_currency + \"-\" + eq_fut_exchange + \"-\" + eq_fut_ticker + \".FUT.\" + eq_fut_maturityCode + \".\" + QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        null,
        "// Returns the ID of the EQ dividend curve to use.",
        null,
        "constfunction DividendCurveID(market, QuoteType, eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market+\"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "	    return policy._DividendCurveID(eq_currency.Canonical, eq_exchange.Canonical, eq_ticker.Canonical, eq_variant.Canonical)",
        "    ",
        "    // If we cannot use a market policy, fall back on settings.",
        "    ",
        "	if eq_variant ==\"CONT\" :",
        "		dc = \"EQ.\" + eq_currency + \"-\" + eq_exchange + \"-\" + eq_ticker + \".DIV.CONT\"",
        "	else :",
        "		dc = \"EQ.\" + eq_currency + \"-\" + eq_exchange + \"-\" + eq_ticker + \".DIV\"",
        "    return dc.Canonical",
        "}",
        null,
        "// Returns the ID of the EQ volatility surface to use.",
        null,
        "constfunction EquityVolatilitySurfaceID(market, QuoteType, eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market+\"^MARKETPOLICY.INSTANCE\"",
        " 	if Numerix::Exists(policy) :",
        "       return policy._EquityVolatilitySurfaceID(eq_currency.Canonical, eq_exchange.Canonical, eq_ticker.Canonical, eq_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "    ev = \"EQ.VOL.\" + eq_currency + \"-\" + eq_exchange + \"-\" + eq_ticker + \".\" + QuoteType",
        "    return ev.Canonical",
        "}",
        null,
        "// Returns the ID of the EQ volatility spread curve to use.",
        null,
        "constfunction VolatilitySpreadCurveID(market, QuoteType, eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "{",
        null,
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    policy = market+\"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "	    return policy._VolatilitySpreadCurveID(eq_currency.Canonical, eq_exchange.Canonical, eq_ticker.Canonical, eq_variant.Canonical)",
        "    ",
        "    // If we cannot use a market policy, fall back on settings.",
        "    ",
        "    vs = \"EQ.\" + eq_currency + \"-\" + eq_exchange + \"-\" + eq_ticker + \".\" + QuoteType + \".VOLSPREAD\"",
        "    return vs.Canonical",
        "}",
        null,
        "//",
        "// FX",
        "//",
        null,
        "// Returns the ID of FX Spot object. Stable for a given currency pair.",
        null,
        "constfunction FXSpotID(market, QuoteType, fx_base_currency, fx_term_currency, fx_variant)",
        "{",
        null,
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._FXSpotID(fx_base_currency.Canonical, fx_term_currency.Canonical, fx_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "    if KeyExists(\"Settings.CurrencyPair\", fx_base_currency + fx_term_currency) : ",
        "        fxr = \"FX.SPOT.\" + fx_term_currency + \"_\" + fx_base_currency",
        "    else:",
        "	    fxr = \"FX.SPOT.\" + fx_base_currency + \"_\" + fx_term_currency",
        "    ",
        "    if fx_variant == \"SYNTHETIC\":",
        "        fxr = fxr + \"_USD\"",
        "    ",
        "    fxr = fxr + \".\" + QuoteType",
        "    ",
        "	return fxr.Canonical",
        "}",
        null,
        "// Returns the ID of FX Discount Curve.",
        null,
        "constfunction FXDiscountCurveID(market, QuoteType, dc_currency, dc_counter_currency, dc_index, dc_index_tenor, fx_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._FXDiscountCurveID(dc_currency.Canonical, dc_counter_currency.Canonical, dc_index.Canonical, dc_index_tenor.Canonical, fx_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "	dc = \"\"",
        null,
        "	if Numerix::GetSettings(\"SETTINGS.ASSETDISCOUNTING\",\"FX\",\"SWAPCURVE\") :",
        "		dc = if Numerix::GetSettings(\"Settings.Currency\",dc_currency,\"Rank\")>Numerix::GetSettings(\"Settings.Currency\",dc_counter_currency,\"Rank\") ? \"FX.\"+dc_currency+\"/\"+dc_counter_currency+\".FWD.\"+QuoteType : \"IR.\"+dc_currency+\"-\"+dc_index+\"-\"+dc_index_tenor+\".SWAPDISCOUNTING.\"+QuoteType",
        "	else :",
        "		dc = if Numerix::GetSettings(\"Settings.Currency\",dc_currency,\"Rank\")>Numerix::GetSettings(\"Settings.Currency\",dc_counter_currency,\"Rank\") ? \"FX.\"+dc_currency+\"/\"+dc_counter_currency+\".FWD.\"+QuoteType : \"IR.\"+dc_currency+\"-\"+dc_index+\"-\"+dc_index_tenor+\".SWAPDISCOUNTING\"+QuoteType",
        null,
        "	return dc.Canonical",
        "}",
        null,
        "// Returns the ID of FX Volatility Surface",
        null,
        "constfunction FXVolatilitySurfaceID(market, QuoteType, fx_base_currency, fx_term_currency, fx_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._FXVolatilitySurfaceID(fx_base_currency.Canonical, fx_term_currency.Canonical, fx_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "	fxv = \"FX.VOL.\"+fx_base_currency+\"/\"+fx_term_currency+\".\"+QuoteType",
        null,
        "	return fxv.Canonical",
        "}",
        null,
        "//",
        "// CC",
        "//",
        null,
        "// Returns the ID of Cross Currency Discount Curve object to use.",
        null,
        "constfunction CCDiscountCurveID(market, QuoteType, dc_currency, dc_counter_currency, dc_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._CCDiscountCurveID(dc_currency.Canonical, dc_counter_currency.Canonical, dc_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        "	",
        null,
        "	if Numerix::GetSettings(\"Settings.Currency\", dc_currency, \"Rank\") < Numerix::GetSettings(\"Settings.Currency\", dc_counter_currency, \"Rank\")",
        "	{",
        "		cc = \"IR.\"+dc_currency+\"-\"+Numerix::GetSettings(\"Settings.Currency\", dc_currency, \"IRINDEX\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\", dc_currency, \"IRINDEXTENOR\")+\".SWAPDISCOUNTING.\"+QuoteType	 ",
        "		return cc.Canonical",
        "	}",
        "	",
        "	if KeyExists(\"Settings.CurrencyPair\", dc_currency + dc_counter_currency)",
        "	{",
        "		cc = \"IR.\" + Numerix::GetSettings(\"Settings.CurrencyPair\", dc_currency + dc_counter_currency, \"CCBasisCurve\") + \".\" + QuoteType",
        "		return cc.Canonical",
        "	}",
        "	cc = \"IR.\" + Numerix::GetSettings(\"Settings.CurrencyPair\", dc_counter_currency + dc_currency, \"CCBasisCurve\") + \".\" + QuoteType",
        "	",
        "	return cc.Canonical",
        "}",
        null,
        "constfunction XccySpreadInterpID(market, QuoteType, std_currency, std_index, std_index_tenor, tgt_currency, tgt_index, tgt_index_tenor, cc_variant)",
        "{",
        "	c = \"IR.\"+tgt_currency+\"-\"+tgt_index+\"-\"+tgt_index_tenor+\"/\"+std_currency+\"-\"+std_index+\"-\"+std_index_tenor+\".BASIS.SPREAD\"",
        "	",
        "	return c.Canonical",
        "}",
        null,
        null,
        "//",
        "//  IR",
        "//",
        null,
        "// Returns the ID of the IR discount curve to use.",
        null,
        "constfunction DiscountCurveID(market, QuoteType, dc_currency, dc_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "	    return policy._DiscountCurveID(dc_currency.Canonical, dc_variant.Canonical)",
        "    ",
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        "    ",
        "	dc = \"\"",
        "        ",
        "        ",
        "    if Numerix::GetSettings(\"SETTINGs.CURRENCY\",dc_currency,\"DualCurve\") :",
        "        dc = Numerix::GetSettings(\"Settings.Currency\", dc_currency, \"DiscountCurve\") + \".\" + QuoteType",
        "    else :",
        "		dc = \"IR.\"+dc_currency+\"-\"+Numerix::GetSettings(\"Settings.Currency\", dc_currency, \"IRINDEX\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\", dc_currency, \"IRINDEXTENOR\")+\".SWAPDISCOUNTING.\"+QuoteType	        ",
        "	",
        "	if dc_variant <> \"\"",
        "    {",
        "		if Numerix::GetSettings(\"SETTINGS.ASSETDISCOUNTING\",dc_variant,\"SWAPCURVE\") :",
        "				dc = \"IR.\"+dc_currency+\"-\"+Numerix::GetSettings(\"Settings.Currency\", dc_currency, \"IRINDEX\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\", dc_currency, \"IRINDEXTENOR\")+\".SWAPDISCOUNTING.\"+QuoteType	",
        "        ",
        "    	if dc_variant ==#\"CR\"",
        "    	{",
        "    		if dc_currency ==#\"USD\" || dc_currency ==#\"GBP\" || dc_currency=#\"JPY\" :",
        "    			dc = \"IR.\"+dc_currency+\"-ISDA-STDRATES.\"+QuoteType",
        "    	}          ",
        "    }",
        "    ",
        "    return dc.Canonical",
        "}",
        null,
        "// Returns the ID of the IR projection curve to use.",
        null,
        "constfunction ProjectionCurveID(market, QuoteType, pc_currency, pc_index, pc_index_tenor, pc_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "	    return policy._ProjectionCurveID(pc_currency.Canonical, pc_index.Canonical, pc_index_tenor.Canonical, pc_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "    pc = \"\"",
        "        ",
        "    if Numerix::GetSettings(\"SETTINGs.CURRENCY\",pc_currency,\"DualCurve\") :",
        "        pc = \"IR.\" + pc_currency + \"-\" + pc_index + \"-\" + pc_index_tenor + \".OISDISCOUNTING.\" + QuoteType",
        "    else :",
        "        pc = \"IR.\" + pc_currency + \"-\" + pc_index + \"-\" + pc_index_tenor + \".SWAPDISCOUNTING.\" + QuoteType",
        "    ",
        "    if pc_index_tenor == Numerix::GetSettings(\"SETTINGs.CURRENCY\",pc_currency,\"OvernightIndexTenor\"):",
        "        pc = \"IR.\" + pc_currency + \"-\" + pc_index + \"-\" + pc_index_tenor + \".\" + QuoteType",
        null,
        "    return pc.Canonical",
        "}",
        null,
        "constfunction RateFutureSpotPriceID(market, QuoteType, ir_fut_currency, ua_index, ua_index_tenor, ir_fut_exchange, ir_fut_ticker, ir_fut_maturityCode, ir_variant)",
        "{",
        "    dc = \"IR.\" + ir_fut_currency + \"-\" + ua_index + \"-\" + ua_index_tenor + \".\" + ir_fut_exchange + \"-\" + ir_fut_ticker + \".STIR-FUT.\" + ir_fut_maturityCode + \".PRICE.\" + QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        "constfunction BondFutureSpotPriceID(market, QuoteType, bd_fut_currency, bd_fut_exchange, bd_fut_ticker, bd_fut_maturityCode, bd_countryCode, bd_variant)",
        "{",
        "    if bd_variant == \"\"",
        "    {",
        "        iso2 = bd_countrycode",
        "        bond_type = Numerix::GetSettings(\"Settings.Currency\",bd_fut_currency,\"BONDTYPE\")",
        "    }",
        "    else",
        "    {",
        "        iso2 = bd_countrycode",
        "        bond_type = bd_variant",
        "    }",
        "    ",
        "    dc = \"IR.\" + bd_fut_currency + \"-\" + iso2 + \"-\" + bond_type + \".\" + bd_fut_exchange + \"-\" + bd_fut_ticker + \".BOND-FUT.\" + bd_fut_maturityCode + \".PRICE.\" + QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        null,
        "//Returns the ID of the Bond Curve to use",
        null,
        "constfunction BondCurveID(market, QuoteType, bc_currency,bc_issuer, bc_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "	    return policy._BondCurveID(bc_currency.Canonical, bc_issuer.Canonical,bc_variant.Canonical)",
        "    ",
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        "    ",
        "	if KeyExists(\"SETTINGS.PROXY\",bc_currency+bc_issuer) :",
        "		bond_issuer = Numerix::GetSettings(\"SETTINGS.PROXY\",bc_currency+bc_issuer,\"PROXYNAME\")",
        "	else :",
        "		bond_issuer = bc_issuer",
        "	",
        "	mxn_bond_types = {\"BONOSM\", \"UDIBONOS\", \"BPAG28\", \"BPAG91\", \"BPA182\", \"BONDESD\"} // Mexico Sovereign Bond Types",
        "	if bc_variant ==#\"ZERORATE\" :",
        "		bc = \"IR.\"+bc_currency+\"-\"+bond_issuer+\".ZERORATE.\"+QuoteType",
        "	elseif bc_variant.Canonical in mxn_bond_types :",
        "        bc = \"IR.\"+bc_currency+\"-\"+bc_variant+\"-\"+bond_issuer+\".SOVEREIGN.\"+QuoteType",
        "	else :",
        "		bc = \"IR.\"+bc_currency+\"-\"+bond_issuer+\".\"+QuoteType",
        "	",
        "    return bc.Canonical",
        "}",
        null,
        null,
        "// Returns the ID of the IR cap volatility surface to use.",
        null,
        "constfunction CapVolatilitySurfaceID(market, QuoteType, cv_currency, cv_index, cv_index_tenor, cv_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "    if Numerix::Exists(policy) :",
        "        return policy._CapVolatilitySurfaceID(cv_currency.Canonical, cv_index.Canonical, cv_index_tenor.Canonical, cv_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "    cv = \"IR.VOL.CAP.\" + cv_currency + \"-\" + cv_index + \"-\" + cv_index_tenor + \".\" + QuoteType",
        "    return cv.Canonical",
        "}",
        null,
        "// Returns the ID of the IR swaption volatility surface to use.",
        null,
        "constfunction SwaptionVolatilitySurfaceID(market, QuoteType, sv_currency, sv_index, sv_index_tenor, sv_strike, sv_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "    if Numerix::Exists(policy) :",
        "	    return policy._SwaptionVolatilitySurfaceID(sv_currency.Canonical, sv_index.Canonical, sv_index_tenor.Canonical, sv_strike.Canonical, sv_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "    sv = \"IR.VOL.SWPT.\" + sv_currency+\"-\"+Numerix::GetSettings(\"Settings.Currency\",sv_currency,\"IRINDEX\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\",sv_currency,\"IRINDEXTENOR\") + \".\" + sv_strike + \".\" + QuoteType",
        "    return sv.Canonical",
        "}",
        null,
        "//",
        "// INFL",
        "//",
        null,
        "// Returns the ID of Zero Coupon Inflation Swap Curve object to use.",
        null,
        "constfunction ZCIISCurveID(market, QuoteType, infl_currency, infl_index, dc_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._ZCIISCurveID(infl_currency.Canonical, infl_index.Canonical, dc_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        "	zc = \"INFL.ZCIIS.\" + infl_currency+\"-\"+infl_index+\".\"+ QuoteType",
        "	",
        "	return zc.Canonical",
        "}",
        null,
        "//",
        "// CR",
        "//",
        null,
        "// Returns the ID of CDS Curve object to use.",
        null,
        "constfunction CDSCurveID(market, QuoteType, cc_currency, cc_reference_entity, cc_debt_type, cc_restructuring_clause, cc_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._CDSCurveID(cc_currency.Canonical, cc_reference_entity.Canonical, cc_debt_type.Canonical, cc_restructuring_clause.Canonical, cc_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        "    ",
        "    if cc_variant : // variant is CDX spread (double value)",
        "		cc = \"CR.\"+cc_currency+\"-\"+cc_reference_entity+\"_\"+cc_debt_type+\"_\"+cc_restructuring_clause+\"_\"+cc_variant+\"-.\"+QuoteType",
        "	else :",
        "		cc = \"CR.\"+cc_currency+\"-\"+cc_reference_entity+\"_\"+cc_debt_type+\"_\"+cc_restructuring_clause+\".\"+QuoteType",
        "    ",
        "	",
        null,
        "	return cc.Canonical",
        "}",
        null,
        "constfunction CDSRecoveryID(market, QuoteType, cc_currency, cc_reference_entity, cc_debt_type, cc_restructuring_clause, cc_variant)",
        "{",
        "    if cc_variant : // variant is CDX spread (double value)",
        "		cc = \"CR.\"+cc_currency+\"-\"+cc_reference_entity+\"_\"+cc_debt_type+\"_\"+cc_restructuring_clause+\"_\"+cc_variant+\"-.\"+QuoteType",
        "	else :",
        "		cc = \"CR.\"+cc_currency+\"-\"+cc_reference_entity+\"_\"+cc_debt_type+\"_\"+cc_restructuring_clause+\".\"+QuoteType",
        "    return cc",
        "}",
        null,
        "// Returns the ID of Bond Curve object to use.",
        null,
        "constfunction CreditBondCurveID(market, QuoteType, cr_currency, cr_issuer, cc_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._CreditBondCurveID(cr_currency.Canonical, cr_issuer.Canonical, cc_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "	cc = \"CR.\"+cr_currency+\"-\"+cr_issuer+\".\"+QuoteType",
        null,
        "	return cc.Canonical",
        "}",
        null,
        "// Returns the ID of Credit Curve Factory object to use.",
        null,
        "constfunction CreditCurveFactoryID(market, QuoteType, ccf_currency, ccf_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._CreditCurveFactoryID(ccf_currency.Canonical, ccf_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "	if ccf_variant : ",
        null,
        "		cc = \"CR.\"+ccf_currency+\"-\"+ccf_variant+\".CreditCurveFactory.\"+QuoteType",
        "	",
        "	else :",
        "		cc = \"CR.\"+ccf_currency+\".CreditCurveFactory.\"+QuoteType",
        null,
        "	return cc.Canonical",
        "}",
        null,
        "constfunction IMCreditCurveFactoryID(market, QuoteType, ccf_currency,ccf_index, ccf_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._IMCreditCurveFactoryID(ccf_currency.Canonical,ccf_index.Canonical, ccf_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "	cc = \"CR.\"+ccf_currency+\"-\"+ccf_index+\".CreditCurveFactory.\"+QuoteType",
        null,
        "	return cc.Canonical",
        "}",
        null,
        "constfunction BaseCorrelationSurfaceID(market, QuoteType, ccf_currency,ccf_index, ccf_variant)",
        "{",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.",
        "    ",
        "    policy = market + \"^MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "        return policy._BaseCorrelationSurfaceID(ccf_currency.Canonical,ccf_index.Canonical, ccf_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        "    // This assumes a context where the quote type is defined.",
        null,
        "    if ccf_variant : ",
        "    	cc = \"CR.\"+ccf_currency+\"-\"+ccf_index+\"-\"+ccf_variant+\".BaseCorrelationSurface.\"+QuoteType",
        null,
        "    else :",
        "    	cc = \"CR.\"+ccf_currency+\"-\"+ccf_index+\".BaseCorrelationSurface.\"+QuoteType",
        null,
        "	return cc.Canonical",
        "}",
        null,
        "//=============================================================================",
        "// STANDARD MODEL ACCESS FUNCTIONS",
        "//=============================================================================",
        null,
        "//",
        "// CC",
        "//",
        null,
        "constfunction CCMODELID(market, QuoteType, md_bc,md_tc,md_modelType)",
        "{",
        "	model = \"CC.MODEL.\"+md_modelType+\".\"+md_bc+\"/\"+md_tc+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// IR",
        "//",
        null,
        "constfunction IRMODELID(market, QuoteType, md_currency,md_modelType)",
        "{",
        "	model = \"IR.MODEL.\"+md_modelType+\".\"+md_currency+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// FX",
        "//",
        null,
        "constfunction FXModelID(market, QuoteType, md_bc,md_tc,md_modelType)",
        "{",
        "	model = \"FX.MODEL.\"+md_modelType+\".\"+md_bc+\"/\"+md_tc+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// CMDTY",
        "//",
        null,
        "constfunction CMDTYModelID(market, QuoteType, md_currency,md_exchange,md_symbol,md_modelType)",
        "{",
        "	model = \"CMDTY.MODEL.\"+md_modelType+\".\"+md_currency+\"-\"+md_exchange+\"-\"+md_symbol+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// EQ",
        "//",
        null,
        "constfunction EQModelID(market, QuoteType, md_currency,md_exchange,md_ticker,md_modelType)",
        "{",
        "	model = \"EQ.MODEL.\"+md_modelType+\".\"+md_currency+\"-\"+md_exchange+\"-\"+md_ticker+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// INFL",
        "//",
        null,
        "constfunction INFLModelID(market, QuoteType, md_currency,md_index,md_modelType)",
        "{",
        "	model = \"INFL.MODEL.\"+md_modelType+\".\"+md_currency+\"-\"+md_index+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// CR",
        "//",
        null,
        "constfunction CRModelID(market, QuoteType, md_currency,md_re,md_dt,md_rc,md_modelType)",
        "{",
        "	model = \"CR.MODEL.\"+md_modelType+\".\"+md_currency+\"-\"+md_re+\"_\"+md_dt+\"_\"+md_rc+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        null,
        "// Creates a set of swaptions used for calibration.",
        null,
        "constfunction CreateCalibratingDiagonalSwaptions(mat, strike)",
        "{",
        "    calibTable = Numerix::Table(\"DiagonalSwaptions_\" + Numerix::UniqueNumber, {\"Calibration Strategy\"}, {{\"DiagonalSwaptions(\\\"\"+strike+\"\\\",\\\"\"+mat+\"\\\",\\\"Call\\\")\"}})",
        "    id = Numerix::Create(calibTable)",
        "    return { \"INSTCOLL.INSTRUMENTSWAPTION\", id }",
        "}",
        null,
        "// Creates a set of swaptions used for calibration.",
        null,
        "constfunction CreateCalibratingFullSwaptions(mat, strike)",
        "{",
        "    maturity = Numerix::Tenor(mat)",
        null,
        "    values = {}",
        null,
        "    // Create list of option tenors, swap tenors, and strikes.",
        null,
        "    for i = 1 to maturity.Multiplier",
        "    {",
        "        for j = 1 to maturity.Multiplier :",
        "            values @= {i.Format(\"1\") + \"Y\",  j.Format(\"1\") + \"Y\", strike, \"call\"}",
        "    }",
        null,
        "    // Create table and load into registry.",
        null,
        "    calibTable = Numerix::Table(\"FullSwaptions_\" + Numerix::UniqueNumber, {\"Swap Tenor\", \"Option Maturity\", \"Strike\", \"Flavor\"}, values.Transpose)",
        "    id = Numerix::Create(calibTable)",
        null,
        "    return {\"INSTRUMENTSWAPTION\", id}",
        "}",
        null,
        "// Create a set of calibrating EQ options with a single strike.",
        null,
        "constfunction CreateEQCalibratingSingleStrikeOptions(list) ",
        "{",
        "    calibtable = Numerix::Table(\"SingleStrikeOptions_\" + Numerix::UniqueNumber, {\"Maturity\", \"Strike\", \"Flavor\"}, list.Transpose) ",
        "    id = calibtable.Create",
        null,
        "    return {\"INSTRUMENTEUROPEAN\", id}",
        "}",
        null,
        "// Creates a set of options used for calibration.",
        null,
        "constfunction CreateCalibratingOptions(tenors, strike)",
        "{",
        "     values = {}",
        "     foreach tenor in tenors :",
        "        values @= {strike, tenor, \"call\"}",
        null,
        "    // Create table and load into registry.",
        null,
        "    calibTable = Numerix::Table(\"Options_\" + Numerix::UniqueNumber, {\"Strike\", \"Maturity\", \"Flavor\"}, values.Transpose)",
        "    id = Numerix::Create(calibTable)",
        null,
        "    return { \"INSTRUMENTEUROPEAN\", id }",
        "}",
        null,
        "// Sets the mean reversion.",
        null,
        "constfunction CalibrateMeanReversion(mr)",
        "{",
        "    return { \"MEANREVERSION.Value\", Numerix::Double(mr) }",
        "}",
        null,
        "// Sets Initial Rating.",
        null,
        "constfunction CalibrateInitialRating(ir)",
        "{",
        "    return {\"initial rating\", ir}",
        "}",
        null,
        "// Sets Asset Name.",
        null,
        "constfunction CalibrateAssetName(an)",
        "{",
        "    return {\"asset name\", an} ",
        "}",
        null,
        "// Sets the correlation.",
        null,
        "constfunction CalibrateCorrelation(mr)",
        "{",
        "    return { \"Correlation\", Numerix::Double(mr) }",
        "}",
        null,
        "// Creates model parameters.",
        null,
        "constfunction CreateModelParameters(modelParameters)",
        "{",
        "    nameValues = Numerix::Execute(\"{ \" + modelParameters + \" }\")",
        "	paramsTable = Numerix::Table(\"Parameters_\" + Numerix::UniqueNumber, {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "	parameters = Numerix::Create(paramsTable)",
        "    return parameters",
        "}",
        null,
        "//=============================================================================",
        "// STANDARD CONVENTION ACCESS FUNCTIONS",
        "//=============================================================================",
        null,
        "//",
        "// IR,CC",
        "//",
        null,
        "// Returns the Convention string for a Basis Swap.",
        null,
        "constfunction BasisSwapConventionID(market, QuoteType, std_currency, std_index, std_index_tenor,tgt_currency, tgt_index,tgt_index_tenor, cc_variant)",
        "{",
        "    if tgt_currency == std_currency:",
        "	    bc = \"CONV.IR.\"+tgt_currency+\"-\"+tgt_index+\"-\"+tgt_index_tenor+\"/\"+std_currency+\"-\"+std_index+\"-\"+std_index_tenor+\".BASIS\"",
        "    else:",
        "	    bc = \"CONV.IR.\"+tgt_currency+\"-\"+tgt_index+\"-\"+tgt_index_tenor+\"/\"+std_currency+\"-\"+std_index+\"-\"+std_index_tenor+\".CCBASIS\"        ",
        "    ",
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for a CC Fixed Swap.",
        null,
        "constfunction CCFixedFloatSwapConventionID(market, QuoteType, std_currency, std_index, std_index_tenor,tgt_currency, cc_variant)",
        "{",
        "	bc = \"CONV.IR.\"+tgt_currency+\"-FIXED/\"+std_currency+\"-\"+std_index+\"-\"+std_index_tenor+\".SWAP\"",
        null,
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for an IR futures contract.",
        "// Exchange and ticker are used solely for retrieving convention thus can be undefined.  In that case, all default headers should be supplied.",
        "constfunction RateFuturesConventionID(market, QuoteType, conv_currency, conv_index, conv_index_tenor,conv_exchange, conv_ticker, conv_variant)",
        "{",
        "	conv = \"\"",
        null,
        "	if conv_exchange : if conv_ticker :	",
        "		conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\"-\"+conv_exchange+\"-\"+conv_ticker+\".STIR-FUT\"",
        "		",
        "	if not conv :",
        "		Numerix::SetNormal(\"Rate futures Exchange and Ticker undefined, no convention object is used; please specify values for the default headers.\")",
        "	",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "constfunction OvernightFuturesConventionID(market, QuoteType, conv_currency, conv_index, conv_index_tenor,conv_exchange, conv_ticker, conv_variant)",
        "{",
        "	conv = \"\"",
        null,
        "	if conv_exchange : if conv_ticker :	",
        "		conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".\"+conv_exchange+\"-\"+conv_ticker+\".OVERNIGHTFUTURES-\"+conv_variant",
        "		",
        "	if not conv :",
        "		Numerix::SetNormal(\"Rate futures Exchange and Ticker undefined, no convention object is used; please specify values for the default headers.\")",
        "		",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for Bond Futures",
        "// to ensure backward compatibility, this function can also be used as NxStd::BondFuturesConventionID(conv_currency, conv_exchange, conv_ticker, bond_type, fn_issuer)",
        "// if 5 arguments are supplied, it uses Currency, Exchange, Ticker, Bond Type, and Issuer to concatenate the convention ID",
        "// if 4 arguments are supplied, it uses Currency, Exchange, Ticker, CountryCode, the convention is looked up by countrycode.",
        "constfunction BondFuturesConventionID(market, QuoteType, conv_currency, conv_exchange, conv_ticker, conv_countrycode, conv_variant)",
        "{",
        "	conv = \"\"",
        "	",
        "	if conv_variant ==\"\"",
        "	{",
        "		iso2 = conv_countrycode",
        "		bond_type = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"BONDTYPE\")",
        "	}",
        "	else",
        "	{",
        "		bond_type = conv_countrycode",
        "		fn_issuer = conv_variant",
        "	}",
        null,
        "	if conv_exchange : if conv_ticker :",
        "		conv = \"CONV.IR.\"+conv_currency+\"-\"+iso2+\"-\"+bond_type+\".\"+conv_exchange+\"-\"+conv_ticker+\".BOND-FUT\"",
        "	",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for a cash deposit.",
        null,
        "constfunction CashConventionID(market, QuoteType, conv_currency, conv_index,conv_tenor, conv_variant)",
        "{",
        "    if conv_variant:",
        "       conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_tenor+\".\"+conv_variant+\".CASH\" ",
        "    else:",
        "	    conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_tenor+\".CASH\"+conv_variant",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        null,
        "    standard_tenor = Numerix::GetSettings(\"Settings.Currency\", conv_currency, \"IRIndexTenor\")",
        "    ",
        "    conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+standard_tenor+\".CASH\"",
        "    //try if this is the standard IR Index or the OIS Index",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    ",
        "    conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-ON.CASH\"",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the Convention string for a swap.",
        null,
        "constfunction SwapShortConventionID(market, QuoteType, conv_currency, conv_index,conv_index_tenor)",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".SWAP-SHORT\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for a swaption.",
        null,
        "constfunction SwaptionConventionID(market, QuoteType, conv_currency, conv_index,conv_index_tenor,conv_variant)",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".SWAPTION\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for an FRA.",
        null,
        "constfunction FRAConventionID(market, QuoteType, conv_currency, conv_index,conv_index_tenor,conv_variant)",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".FRA\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for CAPs.",
        null,
        "constfunction CapConventionID(market, QuoteType, conv_currency, conv_index,conv_index_tenor,conv_variant)",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".CAP\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the convention string for Constant Maturity Swaps (CMS).",
        null,
        "constfunction CMSConventionID(market, QuoteType, conv_currency,conv_variant)",
        "{",
        "	irIndex = numerix::GetSettings(\"Settings.Currency\", conv_currency, \"IRIndex\")",
        "	irIndexTenor = numerix::GetSettings(\"Settings.Currency\", conv_currency, \"IRIndexTenor\")",
        "	",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+irIndex+\"-\"+irIndexTenor+\".CMSSWAP\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for T-Bills.",
        "// to ensure backward compatibility, this function can also be used as NxStd::TBillConventionID(conv_currency,conv_bill_type,conv_issuer)",
        "// if 3 arguments are supplied, it uses Currency, Bill Type, and Issuer to concatenate the convention ID",
        "// if 2 arguments are supplied, the convention is looked up by countrycode.",
        "constfunction TBillConventionID(market, QuoteType, conv_currency,conv_countrycode,conv_variant)",
        "{",
        "	if conv_variant ==\"\"",
        "	{",
        "		bill_type = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"BONDTYPE\")",
        "		fn_issuer = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"ISSUER\")	",
        "	}",
        null,
        "	else",
        "	{",
        "		bill_type = conv_countrycode",
        "		fn_issuer = conv_variant",
        "	}",
        null,
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+bill_type+\"-\"+fn_issuer+\".BILL\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for Treasury Bonds.",
        "// to ensure backward compatibility, this function can also be used as NxStd::TreasuryBondConventionID(conv_currency,conv_bond_type,conv_issuer)",
        "// if 3 arguments are supplied, it uses Currency, Bill Type, and Issuer to concatenate the convention ID",
        "// if 2 arguments are supplied, the convention is looked up by countrycode.",
        "constfunction TreasuryBondConventionID(market, QuoteType, conv_currency, conv_countrycode,conv_variant)",
        "{",
        "    iso2 = \"\"",
        "    sovereign_bond_type = \"\"",
        "	if conv_variant ==\"\"",
        "	{",
        "		bond_type = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"BONDTYPE\")",
        "		fn_issuer = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"ISSUER\")",
        "        iso2 = conv_countrycode",
        "        sovereign_bond_type = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"BONDTYPE\")",
        "	}",
        "	else",
        "	{",
        "        country_code = Numerix::GetSettings(\"Settings.Currency\", conv_currency, \"Country\")",
        "		bond_type = Numerix::GetSettings(\"Settings.Currency\", conv_currency,\"BONDTYPE\")",
        "		fn_issuer = Numerix::GetSettings(\"Settings.Currency\", conv_currency,\"ISSUER\")",
        "        iso2 = country_code",
        "        sovereign_bond_type = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"BONDTYPE\")",
        "	}",
        "	",
        "    if conv_currency == \"MXN\":",
        "    	conv = \"CONV.IR.\"+conv_currency+\"-\"+bond_type+\"-\"+fn_issuer+\".BOND\"",
        "    else: ",
        "        conv = \"CONV.IR.\"+conv_currency+\"-\"+iso2+\"-\"+sovereign_bond_type+\".BOND\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        null,
        "//return the convention ID for Corporate Bond using country code",
        "constfunction CorporateBondConventionID(market, QuoteType, conv_currency,conv_countrycode,conv_variant=\"\")",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_countrycode+\"CORPORATE.BOND\"",
        "	",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        null,
        "// Returns the Convention string for Bonds.",
        null,
        "constfunction BondConventionID(market, QuoteType, conv_currency, conv_bond_type,conv_variant)",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_bond_type+\".BOND\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "constfunction AssetSwapConventionID(market, QuoteType, conv_currency, cc_variant)",
        "{",
        "	bc = \"CONV.IR.\"+conv_currency+\".ASSETSWAP\"",
        null,
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "constfunction RatesSpotStrategyConventionID(market, QuoteType, conv_ccy,conv_irindex,conv_spotrule,conv_variant=\"\")",
        "{",
        "    conv = \"CONV.IR.\"+conv_ccy+\"-\"+conv_irindex+\".\"+conv_spotrule+\".SPOTSTRATEGY\"",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "constfunction RateSettingsConventionID(market, QuoteType, conv_ccy,conv_irindex,conv_irindextenor,conv_variant=\"\")",
        "{",
        "    conv = \"CONV.IR.\"+conv_ccy+\"-\"+conv_irindex+\"-\"+conv_irindextenor+\".RATESETTINGS\"",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "//",
        "// FX",
        "//",
        null,
        "// Returns the Convention string for FX Option.",
        null,
        "constfunction FXOptionConventionID(market, QuoteType, conv_base, conv_term, conv_variant)",
        "{",
        "	conv = if numerix::TryResolve(\"CONV.FX.\"+conv_base+conv_term+\".OPTION\") ? \"CONV.FX.\"+conv_base+conv_term+\".OPTION\" : \"CONV.FX.\"+conv_term+conv_base+\".OPTION\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "constfunction FXSpotStrategyID(market, QuoteType, conv_base, conv_term, conv_variant)",
        "{",
        "    if Numerix::KeyExists(\"Settings.CurrencyPair\", conv_base + conv_term) :",
        "        fx_pair = conv_base+conv_term",
        "    else :",
        "        fx_pair = conv_term+conv_base",
        "    ",
        "    conv = \"FX.SPOT-STRATEGY.\"+fx_pair+\".FWD\"",
        "    ",
        "    //for backward compatibility reasons, check if the object exists, if not, create one",
        "   if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "//",
        "// EQ",
        "//",
        null,
        "// Returns the Convention string for EQ European Option.",
        null,
        "constfunction EQOptionConventionID(market, QuoteType, conv_currency, conv_variant)",
        "{",
        "	conv = \"CONV.EQ.\"+conv_currency+\".EUROPEAN.OPTION\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "       ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention for an EQ future.",
        null,
        "constfunction EQFutureConventionID(market, QuoteType, conv_currency,conv_exchange,conv_ticker, conv_variant)",
        "{",
        "	conv = \"CONV.EQ.\" + conv_currency + \"-\" + conv_exchange + \"-\" + conv_ticker + \".FUTURE\"",
        null,
        "   if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "//",
        "// CMDTY",
        "//",
        null,
        "// Returns the Convention string for an exchange traded commodity.",
        null,
        "constfunction CMDTYConventionID(market, QuoteType, conv_currency,conv_exchange,conv_symbol, conv_variant)",
        "{",
        "	conv = \"CONV.CMDTY.\"+conv_currency+\"-\"+conv_exchange+\"-\"+conv_symbol",
        null,
        "   if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "//",
        "// INFL",
        "//",
        null,
        "// Returns the Convention string for an inflation bond.",
        "// to ensure backward compatibility, this function can also be used as NxStd::InflationBondConventionID(conv_currency,conv_inflation_type,conv_issuer)",
        "// if 3 arguments are supplied, it uses Currency, Inflation Type, and Issuer to concatenate the convention ID",
        "// if 2 arguments are supplied, the convention is looked up by countrycode.",
        "constfunction InflationBondConventionID(market, QuoteType, conv_currency, conv_countrycode,conv_variant)",
        "{",
        "	if conv_variant ==\"\"",
        "	{",
        "		// There is no counterpart for this input in Settings.Currency",
        "		inflation_type = Numerix::GetSettings(\"Settings.SovereignSecurity\",conv_countrycode,\"INFLATIONTYPE\")",
        "		fn_issuer = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"ISSUER\")",
        "	}",
        "	else",
        "	{",
        "		inflation_type = conv_countrycode",
        "		fn_issuer = conv_variant",
        "	}",
        "	",
        "	conv = \"CONV.INFL.\"+conv_currency+\"-\"+inflation_type+\"-\"+fn_issuer+\".BOND\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        null,
        "// Returns the Convention string for a zero coupon inflation index swap.",
        null,
        "constfunction ZCIISConventionID(market, QuoteType, conv_currency,conv_index, conv_variant)",
        "{",
        "	conv = \"CONV.INFL.\"+conv_currency+\"-\"+conv_index+\".ZCIIS\"",
        null,
        "   if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")    ",
        null,
        "	return \"\"",
        "}",
        null,
        "//",
        "// IR",
        "//",
        null,
        "// Returns the ID of the rate convention to use.",
        null,
        "constfunction RateConventionID(market, QuoteType, rc_currency, rc_index, rc_index_tenor)",
        "{",
        "    conv = \"CONV.IR.\" + rc_currency + \"-\" + rc_index + \"-\" + rc_index_tenor",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the ID of the swap convention to use.",
        null,
        "constfunction SwapConventionID(market, QuoteType, sc_currency, sc_index, sc_index_tenor,sc_append=\"\")",
        "{",
        "    swap_conv_short = \"CONV.IR.\" + sc_currency + \"-\" + sc_index + \"-\" + sc_index_tenor + \".SWAP-SHORT\"",
        "    swap_conv_avg = \"CONV.IR.\" + sc_currency + \"-\" + sc_index + \"-\" + sc_index_tenor + \".SWAP-AVG\"",
        "    swap_conv = \"CONV.IR.\" + sc_currency + \"-\" + sc_index + \"-\" + sc_index_tenor + \".SWAP\"",
        "    if sc_append ==#\"SHORT\": ",
        "        swap_conv = if Numerix::TryResolve(swap_conv_short) ? swap_conv_short : swap_conv",
        "    else:",
        "        swap_conv = \"CONV.IR.\" + sc_currency + \"-\" + sc_index + \"-\" + sc_index_tenor + \".SWAP\"+sc_append",
        null,
        "    if sc_append ==#\"AVG\":",
        "        swap_conv = swap_conv_avg",
        "    ",
        "    if Numerix::TryResolve(swap_conv):",
        "        return swap_conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(swap_conv + \" Not Found. Please check \" + swap_conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the Convention string for a DMO Loan.",
        null,
        "constfunction DMOLoanConventionID(market, QuoteType, conv_currency, cc_variant)",
        "{",
        "	bc = \"CONV.IR.\"+conv_currency+\".DMOLOAN\"",
        null,
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the ID of the Average Overnight Futures (USD Fedfunds futures) convention to use.",
        null,
        "constfunction FedFundsFuturesConventionID(market, QuoteType, conv_currency, conv_irindex, conv_irindextenor, conv_exchange, conv_ticker, conv_variant)",
        "{",
        "	bc = \"CONV.IR.\"+conv_currency+\"-\"+conv_irindex+\"-\"+conv_irindextenor+\".\"+conv_exchange+\"-\"+conv_ticker+\".FUT\"",
        "	",
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "//",
        "// CR",
        "//",
        null,
        "// Returns the ID of the ISDA Cash Deposit convention to use.",
        null,
        "constfunction ISDACashConventionID(market, QuoteType, icc_currency)",
        "{",
        "	icc = \"CONV.CR.\" + icc_currency + \"-ISDA-STDRATES.CASH\"",
        "    ",
        "    if Numerix::TryResolve(icc):",
        "        return icc.Canonical",
        "    else:",
        "        Numerix::SetMajor(icc + \" Not Found. Please check \" + icc + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the ID of the ISDA Swap convention to use.",
        null,
        "constfunction ISDASwapConventionID(market, QuoteType, icc_currency)",
        "{",
        "	icc = \"CONV.CR.\" + icc_currency + \"-ISDA-STDRATES.SWAP\"",
        "    ",
        "    if Numerix::TryResolve(icc):",
        "        return icc.Canonical",
        "    else:",
        "        Numerix::SetMajor(icc + \" Not Found. Please check \" + icc + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "//",
        "// Fixings",
        "//",
        null,
        "// Returns the ID of the floating rate fixings to use.",
        null,
        "constfunction RateFixingsID(market, QuoteType, fr_currency, fr_index, fr_index_tenor, fr_source)",
        "{",
        "    if fr_source:",
        "        return \"FIXINGS.\" + fr_currency + \"-\" + fr_index + \"-\" + fr_source + \"-\" + fr_index_tenor",
        "    ",
        "    return \"FIXINGS.\" + fr_currency + \"-\" + fr_index + \"-\" + fr_index_tenor ",
        "}",
        null,
        "constfunction CISFixingsID(market, QuoteType, cis_currency, cis_tenor, cis_source)",
        "{",
        "    if cis_source:",
        "        return \"FIXINGS.\" + cis_currency + \"-CIS-\" + cis_source + \"-\" + cis_tenor",
        "    ",
        "    return \"FIXINGS.\" + cis_currency + \"-CIS-\" + cis_tenor",
        "}",
        null,
        "constfunction CMSFixingsID(market, QuoteType, cms_currency, cms_tenor, cms_source)",
        "{",
        "    if cms_source:",
        "        return \"FIXINGS.\" + cms_currency + \"-CMS-\" + cms_source + \"-\" + cms_tenor",
        "    ",
        "    return \"FIXINGS.\" + cms_currency + \"-CMS-\" + cms_tenor",
        "}",
        null,
        "constfunction FXFixingsID(market, QuoteType, fx_bc, fx_tc, fx_source)",
        "{",
        "    if fx_source:",
        "        return \"FIXINGS.\" + fx_bc + fx_tc + \"-\" + fx_source + \"-SPOT\"",
        "    ",
        "    return \"FIXINGS.\" + fx_bc + fx_tc + \"-SPOT\"",
        "}",
        null,
        "constfunction EQFixingsID(market, QuoteType, eq_c, eq_ex, eq_t, eq_source)",
        "{",
        "    if eq_source:",
        "        return \"FIXINGS.\" + eq_c + \"-\" + eq_ex + \"-\" + eq_source + \"-\" + eq_t",
        "    ",
        "    return \"FIXINGS.\" + eq_c + \"-\" + eq_ex + \"-\" + eq_t",
        "}",
        null,
        "constfunction CMDTYFixingsID(market, QuoteType, cmdty_c, cmdty_ex, cmdty_t, cmdty_source)",
        "{",
        "    if cmdty_source:",
        "        return \"FIXINGS.\" + cmdty_c + \"-\" + cmdty_ex + \"-\" + cmdty_source + \"-\" + cmdty_t",
        "    ",
        "    return \"FIXINGS.\" + cmdty_c + \"-\" + cmdty_ex + \"-\" + cmdty_t",
        "}",
        null,
        "// Returns the ID of inflation fixings.",
        null,
        "constfunction INFLFixingsID(market, QuoteType, fixings_currency, fixings_index, fixings_source)",
        "{",
        "    if fixings_source:",
        "        return \"Fixings.\" + fixings_currency + \"-\" + fixings_index + \"-\" + fixings_source",
        "    ",
        "    return \"Fixings.\" + fixings_currency + \"-\" + fixings_index",
        "}",
        null,
        "//Returns the CPI Fixings Object",
        "constfunction CPIFixingsID(market, QuoteType, fixings_currency, fixings_index, fixings_source)",
        "{",
        "    x = Numerix::INFLFixingsID(fixings_currency, fixings_index, fixings_source)",
        "    fixings = Numerix::Load(market + \"^\" + x)",
        "    ",
        "    call = Numerix::Object({\"cpi_fixings\", \"market data\", \"cpi fixings\"}) & {\"fixings\" : fixings.Fixings}",
        "    call &= {\"override container\": market}",
        "    return call.Create",
        "}",
        null,
        null,
        "//",
        "// Underlying Assets",
        "//",
        null,
        "constfunction CRUnderlyingAsset(market, quotetype, currency, reference_entity, debt_type, restructuring_clause)",
        "{",
        "    return \"CR.\" + currency + \"-\" + reference_entity + \"_\" + debt_type + \"_\" + restructuring_clause",
        "}",
        null,
        "constfunction CMDTYUnderlyingAsset(market, quotetype, currency, exchange, ticker)",
        "{",
        "    return \"CMDTY.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "}",
        null,
        "constfunction EQUnderlyingAsset(market, quotetype, currency, exchange, ticker)",
        "{",
        "    return \"EQ.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "}",
        null,
        "constfunction FXUnderlyingAsset(market, quotetype, base_currency, term_currency)",
        "{",
        "    return \"FX.\" + base_currency + \"/\" + term_currency",
        "}",
        null,
        "constfunction IRUnderlyingAsset(market, quotetype, currency)",
        "{",
        "    return \"IR.\" + currency",
        "}",
        null,
        "constfunction RegulatoryCapital(market, QuoteType, rc_terms,rc_pricer, rc_variant)",
        "{",
        "    // If we have a regulatory policy, use it. Else, it will throw if no policy match is obtained.",
        "    policy = \"POLICY.SACCR\"",
        "	if Numerix::Exists(policy) : ",
        "        return policy._GetPolicy(rc_terms, rc_pricer)",
        null,
        "    return \"\"",
        "}",
        null,
        "constfunction MarketQuoteISINId(market, QuoteType, pr_currency, pr_isin, pr_type)",
        "{",
        "    return \"IR.\"+pr_currency+\"-\"+pr_isin+\".\"+pr_type+\".\"+QUOTETYPE",
        "}",
        null,
        "constfunction GetConventions(market, QuoteType, id, key)",
        "{",
        "    conv_value = \"\"",
        "    if Numerix::TryResolve(id)",
        "    {",
        "        defs = id.defaultValuesInput ",
        "        i = defs.Name.find(key.canonical)",
        "	    if i :",
        "	        conv_value =  defs.value(\"Value\")[i]",
        "        ",
        "        else:",
        "            Numerix::SetMajor(key + \" not found in \" + id + \". Please check \" + id + \".\")",
        "    }",
        "    else",
        "    {",
        "        Numerix::SetMajor(\"Convention \" + id + \" not found\")   ",
        "    ",
        "    }",
        "    ",
        "    return conv_value",
        "}",
        "	",
        "// For AD",
        "// Create a table of index curves from the list passed from the hybrid model builder. ",
        "// This is required for ad greeks with sensitivities by instrument (as opposed to sensitivity by tenor) with additional index curves sensitivities ",
        null,
        "constfunction IndexCurveListFunc(curve1= \"\", curve2 = \"\", curve3 = \"\", curve4 = \"\")",
        "{",
        null,
        "    values = {}",
        "    values &=curve1",
        "    values &=curve2",
        "    Table = Numerix::Table(\"CurveList_\" + Numerix::UniqueNumber, {\"ID\"}, {values})",
        "    id = Numerix::Create(Table)",
        "    return { \"INDEXCURVELIST2\", id }",
        "}",
        null,
        "// For AD",
        "// Extract the foreign basis curve passed from the hybrid model builder. ",
        "// This is required for ad greeks with sensitivities by instrument (as opposed to sensitivity by tenor) with additional index curves sensitivities ",
        null,
        "constfunction ForeignBasisCurveFunc(curve=\"\")",
        "{",
        "    values = {}",
        "    values &=curve",
        null,
        "    Table = Numerix::Table(\"CurveList_\" + Numerix::UniqueNumber, {\"ID\"}, {values})",
        "    id = Numerix::Create(Table)",
        "    return { \"FOREIGNBASISCURVE2\", id }",
        "}"]
    }
  },
  "GLOBALOBJECT.NXGLOBAL": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "ID" : "GLOBALOBJECT.NXGLOBAL",
      "SCRIPT" : "SCRIPT.NXGLOBAL"
    }
  },
  "NXGLOBAL": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "NXGLOBAL",
      "DEFINITION" : "GLOBALOBJECT.NXGLOBAL"
    }
  },
  "PRICINGPOLICY.DEFAULT.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["IR Pricing Rules","Pricing Policy ID","Quote Type","FX Pricing Rules","CC Pricing Rules","EQ Pricing Rules","CMDTY Pricing Rules","Options","CR Pricing Rules","INFL Pricing Rules","HY Pricing Rules","Policy Type","Use CSA Discounting","Reporting Currency"],
      "TYPE" : ["Table(PRICINGPOLICY.DEFAULT.IR_PRICING_RULES_SPEC)","String","String","Table(PRICINGPOLICY.DEFAULT.FX_PRICING_RULES_SPEC)","Table(PRICINGPOLICY.DEFAULT.CC_PRICING_RULES_SPEC)","Table(PRICINGPOLICY.DEFAULT.CMDTY_EQ_PRICING_RULES_SPEC)","Table(PRICINGPOLICY.DEFAULT.CMDTY_EQ_PRICING_RULES_SPEC)","Table(PRICINGPOLICY.DEFAULT.NAME_VALUE_SPEC)","Table(PRICINGPOLICY.DEFAULT.CR_PRICING_RULES_SPEC)","Table(PRICINGPOLICY.DEFAULT.INFL_PRICING_RULES_SPEC)","Table(PRICINGPOLICY.DEFAULT.HY_PRICING_RULES_SPEC)","String","Boolean","Currency"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,null,"MID",null,null,null,null,null,null,null,null,"Pricing",false,null],
      "GROUPING" : ["Rules","Standard","Options","Rules","Rules","Rules","Rules","Options","Rules","Rules","Rules","Options","Options","Options"],
      "DESCRIPTION" : ["Table of rules for selecting and configuring IR pricers and models.",null,null,"Table of rules for selecting and configuring FX pricers and models.","Table of rules for selecting and configuring CC pricers and models.","Table of rules for selecting and configuring EQ pricers and models.","Table of rules for selecting and configuring CMDTY pricers and models.","An arbitrary set of named values that can be used to customize the behavior of the pricing policy.","Table of rules for selecting and configuring CR pricers and models.","Table of rules for selecting and configuring INFL pricers and models.","Table of rules for selecting and configuring HY pricers and models.","Used to indicate whether the policy is used for Pricing or for Exposures.","Use to indicate whether CSA Discounting is enabled or not.",null]
    }
  },
  "PRICINGPOLICY.DEFAULT.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["PricingPolicy"],
      "TYPE" : ["ID"],
      "REQUIRED" : [true],
      "ID" : [null],
      "HEADER" : [null],
      "VALUE" : [
        ">ImplementedObject"],
      "CURRENCY" : [null],
      "CATEGORY" : ["Price"],
      "DESCRIPTION" : [null],
      "PRI" : [null]
    }
  },
  "PRICINGPOLICY.DEFAULT.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name"],
      "TYPE" : ["String"],
      "VALUE" : ["Default Table-based Pricing Policy"]
    }
  },
  "PRICINGPOLICY.DEFAULT.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Policy Type"],
      "TYPE" : ["String"],
      "VALUE" : [
        ">PolicyType"]
    }
  },
  "PRICINGPOLICY.DEFAULT.FUNCTIONS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DEFINITIONS" : [
        "import \"script.nxpolicy\"",
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Utility functions",
        "//================================================================================",
        null,
        "// Looks for the specified property name in the trade terms instance and returns the value.",
        null,
        "function EvaluateProperty(terms, propertyName)",
        "{",
        "    // Get list of trade terms properties.",
        null,
        "    props = terms.PropertyNamesOutput.Canonical",
        null,
        "	// Attempt to find the property. If not found, log error.",
        null,
        "	property = props.Find(propertyName.Canonical)",
        "    ifnot property :",
        "	    throw terms + \": could not evaluate '\" + propertyName + \"' property which is required for pricing policy resolution.\"",
        null,
        "	property = terms.PropertyValuesOutput[property]",
        "	return property",
        "}",
        null,
        "//================================================================================",
        "// CC-related functions",
        "//================================================================================",
        null,
        "// Resolve a CC pricer by referencing our CC Pricer Rules table.",
        null,
        "function ResolveCCPricer(terms, productCode, underlyingAssets, termsAssetClass = \"CC\")",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	if CCPricingRules",
        "	{",
        "        // Remove any spaces in the underlying assets.",
        null,
        "        trimmed = underlyingAssets.Remove(\" \")",
        null,
        "        // CC underlying assets consist of a comma-delimited set of FX underlying assets. Get a list of these.",
        null,
        "        fxAssets = trimmed.Split(\",\")",
        null,
        "        // FX underlying assets have the form FX.<BaseCurrency>/<TermCurrency>. Look for these.",
        null,
        "        parts = Numerix::CreateMetaData(fxAssets) == \"FX.<BaseCurrency>/<TermCurrency>\"",
        "        if parts isnot \"TABLE\" :",
        "            throw \"Default pricing policy: could not parse CC underlying assets '\" + underlyingAssets + \"'.\" ",
        null,
        "		// Resolve some parameters that we will use for matching.",
        null,
        "		currencyPair1 = \"\"",
        "		currencyPair2 = \"\"",
        "		currencyPair3 = \"\"",
        " 		basecurrency1 = \"\"",
        "		termcurrency1 = \"\"",
        "		basecurrency2 = \"\"",
        "		termcurrency2 = \"\"",
        "		basecurrency3 = \"\"",
        "		termcurrency3 = \"\"       ",
        null,
        "        if parts.Size > 0",
        "        {",
        "            basecurrency1 = parts[1].BaseCurrency",
        "            termcurrency1 = parts[1].TermCurrency",
        "            currencyPair1 = basecurrency1 + \"/\" + termcurrency1",
        null,
        "            if parts.Size > 1",
        "            {",
        "                basecurrency2 = parts[2].BaseCurrency",
        "                termcurrency2 = parts[2].TermCurrency",
        "                currencyPair2 = basecurrency2 + \"/\" + termcurrency2",
        null,
        "                if parts.Size > 2",
        "                {",
        "                    basecurrency3 = parts[3].BaseCurrency",
        "                    termcurrency3 = parts[3].TermCurrency",
        "                    currencyPair3 = basecurrency3 + \"/\" + termcurrency3",
        "                }",
        "            }",
        "        }",
        "        else :               ",
        "            throw \"Default pricing policy: could not parse CC underlying assets (found no currency pairs) '\" + underlyingAssets + \"'.\" ",
        null,
        "        // Access terms and trade ID.",
        null,
        "		tradeID = terms.TradeID",
        "		tradeTerms = terms",
        null,
        "        // Proceed through the set of CC rules and see if we match any of these.",
        null,
        "	    rules = Numerix::Load(CCPricingRules)",
        "        foreach row in rules",
        "		{",
        "            // Start by checking (1) the product code, (2) the trade ID, and (3) the currency pairs.",
        null,
        "	        if Match(productCode, row.ProductCode) : if Match(tradeID, row.tradeID) : if MatchCurrencyPair(currencyPair1, row.CurrencyPair1) : if MatchCurrencyPair(currencyPair2, row.currencyPair2) : if MatchCurrencyPair(currencyPair3, row.currencyPair3)",
        "			{",
        "                // If we don't have a predicate, we have a match; otherwise, evaluate the predicate to see if we proceed.",
        null,
        "				matched = true",
        "				if row.Predicate",
        "				{",
        "				   try",
        "					{",
        "					    matched = Numerix::Execute(row.Predicate)",
        "						if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched						",
        "                    }",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad predicate for CC pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        "                }",
        null,
        "                if matched		",
        "				{	",
        "				    // Only first currency pair is enabled.",
        null,
        "					currency = TermCurrency1",
        "					foreignCurrencies = {BaseCurrency1}",
        "                    if BaseCurrency2:",
        "                        foreignCurrencies @= BaseCurrency2",
        "                    if BaseCurrency3:",
        "                        foreignCurrencies @= BaseCurrency3",
        null,
        "					// If we are using a global hybrid model to compute exposure, we",
        "					// need to skip all of the logic to create factor models. Maybe",
        "					// we should find a better way to do this.",
        null,
        "					if row.PricerTemplate != #\"PRICER.HY.EXPOSURE\" : if row.ModelTemplate",
        "					{",
        "    					// We know all of the currencies at this point, both domestic and foreign.				",
        "    					// At minimum, we need to construct an IR Model for the domestic currency.",
        null,
        "    					irModelData = {}",
        "    					fxModelData = {}",
        null,
        "    					irKey = NxStd::IRUnderlyingAsset(currency)",
        "    					domesticModelData = ResolveIRPricer((terms), (productCode), irKey, \"CC\")",
        "    					    Numerix::SetNormal(\"+++\" + domesticModelData[2].ModelParameters)",
        "    					if domesticModelData is \"LIST\" : if domesticModelData.Size == 2 :",
        "    					    irModelData @= { irKey, currency, domesticModelData[1].ModelTemplate, domesticModelData[2].ModelParameters }",
        "    					else :",
        "    						throw \"Default pricing policy: could not determine IR model for domestic currency '\" + currency + \"' in CC deal.\"",
        null,
        "    					// Now, we need to iterate through any foreign currencies and construct an IR model and an FX model (relative to domestic).",
        null,
        "    					foreach fc in foreignCurrencies",
        "    					{",
        "    					    // Handle the IR model.",
        null,
        "    					    irKey = NxStd::IRUnderlyingAsset(fc)",
        "    					    foreignModelData = ResolveIRPricer((terms), (productCode), irKey, \"CC\")",
        "    					    if foreignModelData is \"LIST\" : if foreignModelData.Size == 2 :",
        "    					        irModelData @= { irKey, fc, foreignModelData[1].ModelTemplate, foreignModelData[2].ModelParameters }",
        "    					    else :",
        "    						    throw \"Default pricing policy: could not determine IR model for foreign currency '\" + fc + \"' in CC deal.\"",
        null,
        "    						// Handle the FX model.",
        null,
        "    						fxKey = NxStd::FXUnderlyingAsset(fc, currency)",
        "    					    fxAssetData = ResolveFXPricer((terms), (productCode), fxKey, \"CC\")",
        "    					    if fxAssetData is \"LIST\" : if fxAssetData.Size == 2 :",
        "    					        fxModelData @= { fxKey, fc, currency, fxAssetData[1].ModelTemplate, fxAssetData[2].ModelParameters }",
        "    					    else :",
        "    						    throw \"Default pricing policy: could not determine FX model for foreign currency '\" + fc + \"' in CC deal.\"",
        "    					}",
        null,
        "    					// Create tables we can access from the model.",
        null,
        "    					irModels = Numerix::Table(\"IRModels_\" + productCode, { \"KEY\", \"CURRENCY\", \"MODEL TEMPLATE\", \"MODEL PARAMETERS\" }, irModelData.Transpose)",
        "    					irModels = irModels.Create",
        null,
        "    					if fxModelData",
        "    					{",
        "    					    fxModels = Numerix::Table(\"FXModels_\" + productCode, { \"KEY\", \"BASE CURRENCY\", \"TERM CURRENCY\", \"MODEL TEMPLATE\", \"MODEL PARAMETERS\" }, fxModelData.Transpose)",
        "    					    fxModels = fxModels.Create",
        "    					}",
        "                    }",
        null,
        "					// We have identified the pricer. Start accumulating parameters.",
        null,
        "					pricerParameters = {}",
        "					if row.PricerTemplate",
        "                    {",
        "                        pricer = if row.PricerTemplate == #\"DEFAULTPRICER\" ? EvaluateProperty(terms, \"Default Pricer\").canonical : row.PricerTemplate.canonical",
        "					    if pricer.Find(\"PRICER.\") != 1 :",
        "						    pricerParameters = { \"PRICER\" : \"PRICER.CC.\" + pricer }",
        "                        else :",
        "					        pricerParameters = { \"PRICER\" : pricer }",
        "                    }",
        null,
        "				    // Resolve the specified pricer parameters.",
        null,
        "					try",
        "					{",
        "						if row.PricerParameters",
        "						{",
        "					        parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        "						    foreach param in parameters :",
        "						        pricerParameters &= { param[1] : param[2] }",
        "						}",
        "				    }",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad pricer parameters for CC pricing rule '\" + row.Name + \"'. \" + error",
        "				    }",
        null,
        "					// Now, identify the model.",
        null,
        "			        if row.ModelTemplate",
        "                    {",
        "					    if row.ModelTemplate.Find(\"MODEL.\") != 1 :",
        "                            pricerParameters &= { \"MODEL TEMPLATE\" : \"MODEL.HY.\" + row.ModelTemplate }",
        "                        else :",
        "                            pricerParameters &= { \"MODEL TEMPLATE\" : row.ModelTemplate }",
        null,
        "                        // Resolve the model parameters by translating to script and executing.",
        null,
        "						try",
        "						{   ",
        "						    nameValues = Numerix::Execute(\"{ \" + row.ModelParameters + \" }\")",
        "						    modelParameters = Numerix::Table(\"ModelParameters_\"+Numerix::UniqueNumber(\"PP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "							pricerParameters &= { \"MODEL PARAMETERS\" : modelParameters.String }",
        "						}",
        "						catch error",
        "						{",
        "						    throw \"Default pricing policy: bad model parameters for CC pricing rule '\" + row.Name + \"'. \" + error",
        "						}",
        "					}					",
        null,
        "                    //------------------------------------------------------",
        "                    //determines whether CSA Discounting should be applied",
        "                    //------------------------------------------------------",
        null,
        "                    //determines whether CSA Discounting is turned on/off by the Use CSA Discounting flag",
        "                    uses_flag = false",
        null,
        "                    //a model is being specified, this is a KERNEL; it uses the flag",
        "                    if row.ModelTemplate :",
        "                        uses_flag = true",
        null,
        "                    //Universal swap pricer also uses the flag",
        "                    if terms.ImplementedObject.TypeInput ==#\"UNIVERSALSWAP\" :",
        "                        uses_flag = true",
        null,
        "                    if row.PricerTemplate ==#\"PRICER.HY.EXPOSURE\" :",
        "                        uses_flag = true",
        null,
        "                    //only applies if there is a pricer specified",
        "                    if pp_usecsadiscounting : if row.PricerTemplate : ",
        "                    {",
        "                        if uses_flag : if row.PricerTemplate",
        "                        {",
        "                            explicitflag = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the flag has been overriden by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"USECSADISCOUNTING\" :",
        "                                        explicitflag = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit is not provided, set it to true",
        "                            ifnot explicitflag :",
        "                                pricerParameters &= {\"UseCSADiscounting\" : true}",
        null,
        "                        }",
        null,
        "                        //no model is explicitly provided. Provide the CSA Curve as the Discount Curve",
        "                        //NOTE:  THIS ASSUMES THAT THE PRICER TEMPLATE NAMES THE DOMESTIC YIELD CURVE \"DISCOUNT CURVE\".  If it's named something else, this won't work.",
        "                        if row.PricerTemplate : ifnot row.ModelTemplate : if pp_usecsadiscounting : ifnot uses_flag",
        "                        {",
        "                            explicitcurve_dom = false",
        "                            explicitcurve_for = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the Discount Curve has been explicitly provided by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"DomesticDiscountCurve\" :",
        "                                        explicitcurve_dom = true",
        "                                    if param[1] ==#\"ForeignDiscountCurve\" :",
        "                                        explicitcurve_for = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit curve is not provided, provide it.",
        "                            ifnot explicitcurve_dom :",
        "                                pricerParameters &= {\"Domestic Discount Curve\" : NxStd::CSADiscountCurveID(currency,terms.Counterparty,terms.LegalEntity,terms.NettingSet,terms.MarginSet)}                            ",
        null,
        "                            ifnot explicitcurve_for :",
        "                                pricerParameters &= {\"Foreign Discount Curve\" : NxStd::CSADiscountCurveID(basecurrency1,terms.Counterparty,terms.LegalEntity,terms.NettingSet,terms.MarginSet)}",
        "                        }",
        "                    }",
        null,
        "                    //------------------------------------------------------",
        "                    //pass in reporting currency",
        "                    //------------------------------------------------------",
        "                    if row.PricerTemplate:",
        "                        if ReportingCurrency",
        "                        {",
        "                            explicit_ccy = false",
        "                            parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                            //find out if the Reporting Currency has been explicitly provided by pricing policy rule",
        "                            foreach param in parameters",
        "                            {",
        "                                if param[1] ==#\"ReportingCurrency\" :",
        "                                    explicit_ccy = true",
        "                            }",
        "                            ifnot explicit_ccy:",
        "                                pricerParameters &= {\"Reporting Currency\": ReportingCurrency}",
        "                        }",
        null,
        "					// Return the parameters.",
        null,
        "            		return pricerParameters",
        "				}",
        "			}",
        "	    }",
        "	}",
        null,
        "	return \"\"",
        "}",
        null,
        "//================================================================================",
        "// CMDTY-related functions",
        "//================================================================================",
        null,
        "// Resolve a CMDTY pricer by referencing our CMDTY Pricer Rules table.",
        null,
        "function ResolveCMDTYPricer(terms, productCode, underlyingAssets, termsAssetClass = \"CMDTY\")",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	if CMDTYPricingRules",
        "	{",
        "        // CMDTY underlying assets have the form CMDTY.<Currency>-<Exchange>-<Ticker>. Crack this.",
        null,
        "        parts = Numerix::CreateMetaData(underlyingAssets) == \"CMDTY.<Currency>-<Exchange>-<Ticker>\"",
        "        if parts isnot \"TABLE\" :",
        "            throw \"Default pricing policy: could not parse CMDTY underlying asset '\" + underlyingAssets + \"'.\"",
        null,
        "		currency = parts[1].Currency",
        "		exchange = parts[1].Exchange",
        "		ticker = parts[1].Ticker",
        null,
        "        // Access terms and trade ID.",
        null,
        "		tradeID = terms.TradeID",
        "		tradeTerms = terms",
        null,
        "        // Proceed through the set of CMDTY rules and see if we match any of these.",
        null,
        "	    rules = Numerix::Load(CMDTYPricingRules)",
        "        foreach row in rules",
        "		{",
        "            // Start by checking (1) the product code, (2) the trade ID, and (3) currency/exchange/ticker.",
        null,
        "	        if Match(productCode, row.ProductCode) : if  Match(tradeID, row.tradeID) : if Match(currency, row.Currency) : if Match(exchange, row.Exchange) : if Match(ticker, row.Ticker)",
        "			{",
        "			    // If we don't have a predicate, we have a match; otherwise, evaluate the predicate to see if we proceed.",
        null,
        "				matched = true",
        "				if row.Predicate",
        "				{",
        "				    try",
        "					{",
        "					    matched = Numerix::Execute(row.Predicate)",
        "						if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched								",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad predicate for CMDTY pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        "				}",
        null,
        "				if matched		",
        "				{	",
        "				    // We have identified the pricer. Start accumulating parameters.",
        null,
        "                    pricerParameters = {}",
        "					if row.PricerTemplate",
        "                    {",
        "                        pricer = if row.PricerTemplate == #\"DEFAULTPRICER\" ? EvaluateProperty(terms, \"Default Pricer\").canonical : row.PricerTemplate.canonical",
        "					    if pricer.Find(\"PRICER.\") != 1 :",
        "						    pricerParameters = { \"PRICER\" : \"PRICER.CMDTY.\" + pricer }",
        "                        else :",
        "					        pricerParameters = { \"PRICER\" : pricer }",
        "                    }",
        null,
        "				    // Resolve the specified pricer parameters.",
        null,
        "					try",
        "					{",
        "						if row.PricerParameters",
        "						{",
        "						    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        "							foreach param in parameters :",
        "							    pricerParameters &= { param[1] : param[2] }",
        "						}",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad pricer parameters for CMDTY pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        null,
        "					// Now, identify the model.",
        null,
        "					if row.ModelTemplate",
        "					{",
        "					    pricerParameters &= { \"MODEL TEMPLATE\" : \"MODEL.CMDTY.\" + row.ModelTemplate }",
        null,
        "                        // Resolve the model parameters by translating to script and executing.",
        null,
        "						try",
        "						{   ",
        "						    nameValues = Numerix::Execute(\"{ \" + row.ModelParameters + \" }\")",
        "							modelParameters = Numerix::Table(\"ModelParameters_\"+Numerix::UniqueNumber(\"PP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "							pricerParameters &= { \"MODEL PARAMETERS\" : modelParameters.String }",
        "						}",
        "						catch error",
        "						{",
        "						    throw \"Default pricing policy: bad model parameters for CMDTY pricing rule '\" + row.Name + \"'. \" + error",
        "						}",
        "					}",
        null,
        "                    //------------------------------------------------------",
        "                    //determines whether CSA Discounting should be applied",
        "                    //------------------------------------------------------",
        null,
        "                    //only applies if there is a pricer specified",
        "                    if pp_usecsadiscounting : if row.PricerTemplate : ",
        "                    {",
        null,
        "                        //determines whether the pricer uses the flag Use CSA Discounting.",
        "                        //there are two cases, a kernel pricing case that has a model and a kernel exposure case that uses PRICER.HY.EXPOSURE",
        "                        uses_flag = false",
        null,
        "                        if row.ModelTemplate :",
        "                            uses_flag = true",
        null,
        "                        if row.PricerTemplate ==#\"PRICER.HY.EXPOSURE\" :",
        "                            uses_flag = true",
        null,
        "                        //if a model is used, pass in the boolean to turn on CSA Discounting for KERNEL",
        "                        if uses_flag : if row.PricerTemplate",
        "                        {",
        "                            explicitflag = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the flag has been overriden by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"USECSADISCOUNTING\" :",
        "                                        explicitflag = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit is not provided, set it to true",
        "                            ifnot explicitflag :",
        "                                pricerParameters &= {\"Use CSA Discounting\" : true}",
        null,
        "                        }",
        null,
        "                        //no model is explicitly provided. Provide the CSA Curve as the Discount Curve",
        "                        //NOTE:  THIS ASSUMES THAT THE PRICER TEMPLATE NAMES THE DOMESTIC YIELD CURVE \"DISCOUNT CURVE\".  If it's named something else, this won't work.",
        "                        if row.PricerTemplate : ifnot uses_flag",
        "                        {",
        "                            explicitcurve = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the Discount Curve has been explicitly provided by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"DiscountCurve\" :",
        "                                        explicitcurve = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit curve is not provided, provide it.",
        "                            ifnot explicitcurve :",
        "                                pricerParameters &= {\"Discount Curve\" : NxStd::CSADiscountCurveID(currency,terms.Counterparty,terms.LegalEntity,terms.NettingSet,terms.MarginSet)}                            ",
        null,
        "                        }",
        "                    }",
        null,
        "                    //------------------------------------------------------",
        "                    //pass in reporting currency",
        "                    //------------------------------------------------------",
        "                    if row.PricerTemplate:",
        "                        if ReportingCurrency",
        "                        {",
        "                            explicit_ccy = false",
        "                            parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                            //find out if the Reporting Currency has been explicitly provided by pricing policy rule",
        "                            foreach param in parameters",
        "                            {",
        "                                if param[1] ==#\"ReportingCurrency\" :",
        "                                    explicit_ccy = true",
        "                            }",
        "                            ifnot explicit_ccy:",
        "                                pricerParameters &= {\"Reporting Currency\": ReportingCurrency}",
        "                        }",
        null,
        "			        // Return the parameters.",
        null,
        "                    return pricerParameters",
        "				}",
        "			}",
        "	    }",
        "	}",
        null,
        "	return \"\"",
        "}",
        null,
        "//================================================================================",
        "// CR-related functions",
        "//================================================================================",
        null,
        "// Resolve a CR pricer by referencing our CR Pricer Rules table.",
        null,
        "function ResolveCRPricer(terms, productCode, underlyingAssets, termsAssetClass = \"CR\")",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	if CRPricingRules",
        "	{",
        "		// Resolve some parameters that we will use for matching.",
        null,
        "        // CR underlying assets have the form CR.<Currency>-<ReferenceEntity>-<DebtType>-<RestructuringClause>. Crack this.",
        null,
        "        parts = Numerix::CreateMetaData(underlyingAssets) == \"CR.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>\"",
        "        if parts isnot \"TABLE\" :",
        "            throw \"Default pricing policy: could not parse CR underlying asset '\" + underlyingAssets + \"'.\"",
        null,
        "		currency = parts[1].Currency",
        "		referenceentity = parts[1].ReferenceEntity",
        "		debttype = parts[1].DebtType",
        "        restructuringclause = parts[1].RestructuringClause",
        null,
        "        // Access terms and trade ID.",
        null,
        "		tradeID = terms.TradeID",
        "		tradeTerms = terms",
        null,
        "        // Proceed through the set of CR rules and see if we match any of these.",
        null,
        "	    rules = Numerix::Load(CRPricingRules)",
        "        foreach row in rules",
        "		{",
        "            // Start by checking (1) the product code, (2) the trade ID, and (3) currency/reference entity/debt type/restructuring clause.",
        null,
        "	        if Match(productCode, row.ProductCode) : if  Match(tradeID, row.tradeID) : if Match(currency, row.Currency) : if Match(referenceentity, row.ReferenceEntity) : if Match(debttype, row.DebtType) : if Match(restructuringclause, row.RestructuringClause) ",
        "			{",
        "			    // If we don't have a predicate, we have a match; otherwise, evaluate the predicate to see if we proceed.",
        null,
        "				matched = true",
        "				if row.Predicate",
        "				{",
        "				    try",
        "					{",
        "					    matched = Numerix::Execute(row.Predicate)",
        "						if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched								",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad predicate for CR pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        "				}",
        null,
        "				if matched		",
        "				{	",
        "				    // We have identified the pricer. Start accumulating parameters.",
        null,
        "					pricerParameters = {}",
        "					if row.PricerTemplate",
        "                    {",
        "                        pricer = if row.PricerTemplate == #\"DEFAULTPRICER\" ? EvaluateProperty(terms, \"Default Pricer\").canonical : row.PricerTemplate.canonical",
        "					    if pricer.Find(\"PRICER.\") != 1 :",
        "						    pricerParameters = { \"PRICER\" : \"PRICER.CR.\" + pricer }",
        "                        else :",
        "					        pricerParameters = { \"PRICER\" : pricer }",
        "                    }",
        null,
        "				    // Resolve the specified pricer parameters.",
        null,
        "					try",
        "					{",
        "						if row.PricerParameters",
        "						{",
        "						    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        "							foreach param in parameters :",
        "							    pricerParameters &= { param[1] : param[2] }",
        "						}",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad pricer parameters for CR pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        null,
        "					// Now, identify the model.",
        null,
        "					if row.ModelTemplate",
        "					{",
        "					    pricerParameters &= { \"MODEL TEMPLATE\" : \"MODEL.CR.\" + row.ModelTemplate }",
        null,
        "                        // Resolve the model parameters by translating to script and executing.",
        null,
        "						try",
        "						{   ",
        "						    nameValues = Numerix::Execute(\"{ \" + row.ModelParameters + \" }\")",
        "							modelParameters = Numerix::Table(\"ModelParameters_\"+Numerix::UniqueNumber(\"PP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "							pricerParameters &= { \"MODEL PARAMETERS\" : modelParameters.String }",
        "						}",
        "						catch error",
        "						{",
        "						    throw \"Default pricing policy: bad model parameters for CR pricing rule '\" + row.Name + \"'. \" + error",
        "						}",
        "					}",
        "                    //------------------------------------------------------",
        "                    //pass in reporting currency",
        "                    //------------------------------------------------------",
        "                    if row.PricerTemplate:",
        "                        if ReportingCurrency",
        "                        {",
        "                            explicit_ccy = false",
        "                            parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                            //find out if the Reporting Currency has been explicitly provided by pricing policy rule",
        "                            foreach param in parameters",
        "                            {",
        "                                if param[1] ==#\"ReportingCurrency\" :",
        "                                    explicit_ccy = true",
        "                            }",
        "                            ifnot explicit_ccy:",
        "                                pricerParameters &= {\"Reporting Currency\": ReportingCurrency}",
        "                        }",
        null,
        "			        // Return the parameters.",
        null,
        "                    return pricerParameters",
        "				}",
        "			}",
        "	    }",
        "	}",
        null,
        "	return \"\"",
        "}",
        null,
        "//================================================================================",
        "// EQ-related functions",
        "//================================================================================",
        null,
        "// Resolve a EQ pricer by referencing our EQ Pricer Rules table.",
        null,
        "function ResolveEQPricer(terms, productCode, underlyingAssets, termsAssetClass = \"EQ\")",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	if EQPricingRules",
        "	{",
        "        // EQ underlying assets have the form EQ.<Currency>-<Exchange>-<Ticker>. Crack this.",
        null,
        "        parts = Numerix::CreateMetaData(underlyingAssets) == \"EQ.<Currency>-<Exchange>-<Ticker>\"",
        "        if parts isnot \"TABLE\" :",
        "            throw \"Default pricing policy: could not parse EQ underlying asset '\" + underlyingAssets + \"'.\"",
        null,
        "		currency = parts[1].Currency",
        "		exchange = parts[1].Exchange",
        "		ticker = parts[1].Ticker",
        null,
        "        // Access terms and trade ID.",
        null,
        "		tradeID = terms.TradeID",
        "		tradeTerms = terms",
        null,
        "        // Proceed through the set of EQ rules and see if we match any of these.",
        null,
        "	    rules = Numerix::Load(EQPricingRules)",
        "        foreach row in rules",
        "		{",
        "            // Start by checking (1) the product code, (2) the trade ID, and (3) currency/exchange/ticker.",
        null,
        "	        if Match(productCode, row.ProductCode) : if  Match(tradeID, row.tradeID) : if Match(currency, row.Currency) : if Match(exchange, row.Exchange) : if Match(ticker, row.Ticker)",
        "			{",
        "			    // If we don't have a predicate, we have a match; otherwise, evaluate the predicate to see if we proceed.",
        null,
        "				matched = true",
        "				if row.Predicate",
        "				{",
        "				    try",
        "					{",
        "					    matched = Numerix::Execute(row.Predicate)",
        "						if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched								",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad predicate for EQ pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        "				}",
        null,
        "				if matched		",
        "				{	",
        "				    // We have identified the pricer. Start accumulating parameters.",
        null,
        "					pricerParameters = {}",
        "					if row.PricerTemplate",
        "                    {",
        "                        pricer = if row.PricerTemplate == #\"DEFAULTPRICER\" ? EvaluateProperty(terms, \"Default Pricer\").canonical : row.PricerTemplate.canonical",
        "					    if pricer.Find(\"PRICER.\") != 1 :",
        "						    pricerParameters = { \"PRICER\" : \"PRICER.EQ.\" + pricer }",
        "                        else :",
        "					        pricerParameters = { \"PRICER\" : pricer }",
        "                    }",
        null,
        "				    // Resolve the specified pricer parameters.",
        null,
        "					try",
        "					{",
        "						if row.PricerParameters",
        "						{",
        "					        parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        "						    foreach param in parameters :",
        "						        pricerParameters &= { param[1] : param[2] }",
        "						}",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad pricer parameters for EQ pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        null,
        "					// Now, identify the model.",
        null,
        "					if row.ModelTemplate",
        "					{",
        "					    pricerParameters &= { \"MODEL TEMPLATE\" : \"MODEL.EQ.\" + row.ModelTemplate }",
        null,
        "                        // Resolve the model parameters by translating to script and executing.",
        null,
        "						try",
        "						{   ",
        "						    nameValues = Numerix::Execute(\"{ \" + row.ModelParameters + \" }\")",
        "							modelParameters = Numerix::Table(\"ModelParameters_\"+Numerix::UniqueNumber(\"PP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "							pricerParameters &= { \"MODEL PARAMETERS\" : modelParameters.String }",
        "						}",
        "						catch error",
        "						{",
        "						    throw \"Default pricing policy: bad model parameters for EQ pricing rule '\" + row.Name + \"'. \" + error",
        "						}",
        "					}",
        null,
        "                    //------------------------------------------------------",
        "                    //determines whether CSA Discounting should be applied",
        "                    //------------------------------------------------------",
        null,
        "                    //only applies if there is a pricer specified",
        "                    if pp_usecsadiscounting : if row.PricerTemplate : ",
        "                    {",
        null,
        "                        //determines whether the pricer uses the flag Use CSA Discounting.",
        "                        //there are two cases, a kernel pricing case that has a model and a kernel exposure case that uses PRICER.HY.EXPOSURE",
        "                        uses_flag = false",
        null,
        "                        if row.ModelTemplate :",
        "                            uses_flag = true",
        null,
        "                        if row.PricerTemplate ==#\"PRICER.HY.EXPOSURE\" :",
        "                            uses_flag = true",
        null,
        "                        //if a model is used, pass in the boolean to turn on CSA Discounting for KERNEL",
        "                        if uses_flag : if row.PricerTemplate",
        "                        {",
        "                            explicitflag = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the flag has been overriden by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"USECSADISCOUNTING\" :",
        "                                        explicitflag = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit is not provided, set it to true",
        "                            ifnot explicitflag :",
        "                                pricerParameters &= {\"Use CSA Discounting\" : true}",
        null,
        "                        }",
        null,
        "                        //no model is explicitly provided. Provide the CSA Curve as the Discount Curve",
        "                        //NOTE:  THIS ASSUMES THAT THE PRICER TEMPLATE NAMES THE DOMESTIC YIELD CURVE \"DISCOUNT CURVE\".  If it's named something else, this won't work.",
        "                        if row.PricerTemplate : ifnot uses_flag",
        "                        {",
        "                            explicitcurve = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the Discount Curve has been explicitly provided by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"DiscountCurve\" :",
        "                                        explicitcurve = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit curve is not provided, provide it.",
        "                            ifnot explicitcurve :",
        "                                pricerParameters &= {\"Discount Curve\" : NxStd::CSADiscountCurveID(currency,terms.Counterparty,terms.LegalEntity,terms.NettingSet,terms.MarginSet)}                            ",
        null,
        "                        }",
        "                    }",
        null,
        "                    //------------------------------------------------------",
        "                    //pass in reporting currency",
        "                    //------------------------------------------------------",
        "                    if row.PricerTemplate:",
        "                        if ReportingCurrency",
        "                        {",
        "                            explicit_ccy = false",
        "                            parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                            //find out if the Reporting Currency has been explicitly provided by pricing policy rule",
        "                            foreach param in parameters",
        "                            {",
        "                                if param[1] ==#\"ReportingCurrency\" :",
        "                                    explicit_ccy = true",
        "                            }",
        "                            ifnot explicit_ccy:",
        "                                pricerParameters &= {\"Reporting Currency\": ReportingCurrency}",
        "                        }",
        "			        // Return the parameters.",
        null,
        "                    return pricerParameters",
        "				}",
        "			}",
        "	    }",
        "	}",
        null,
        "	return \"\"",
        "}",
        null,
        "//================================================================================",
        "// FX-related functions",
        "//================================================================================",
        null,
        "// Resolve an FX pricer by referencing our FX Pricer Rules table.",
        null,
        "function ResolveFXPricer(terms, productCode, underlyingAssets, termsAssetClass = \"FX\")",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	if FXPricingRules",
        "	{",
        "        // FX underlying assets have the form FX.<BaseCurrency>/<TermCurrency>. Crack this.",
        null,
        "        parts = Numerix::CreateMetaData(underlyingAssets) == \"FX.<BaseCurrency>/<TermCurrency>\"",
        "        if parts isnot \"TABLE\" :",
        "            throw \"Default pricing policy: could not parse FX underlying asset '\" + underlyingAssets + \"'.\"",
        null,
        "		basecurrency = parts[1].BaseCurrency",
        "		termcurrency = parts[1].TermCurrency",
        null,
        "        // Access terms and trade ID.",
        null,
        "		tradeID = terms.TradeID",
        "		tradeTerms = terms",
        null,
        "        // Proceed through the set of FX rules and see if we match any of these.",
        null,
        "	    rules = Numerix::Load(FXPricingRules)",
        "        foreach row in rules",
        "		{",
        "            // Start by checking (1) the product code, (2) the trade ID, and (3) the currencies.",
        null,
        "	        if Match(productCode, row.ProductCode) : if  Match(tradeID, row.tradeID) : if Match(baseCurrency, row.BaseCurrency) : if Match(termCurrency, row.TermCurrency)",
        "			{",
        "			    // If we don't have a predicate, we have a match; otherwise, evaluate the predicate to see if we proceed.",
        null,
        "				matched = true",
        "				if row.Predicate",
        "				{",
        "				    try",
        "					{",
        "					    matched = Numerix::Execute(row.Predicate)",
        "						if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched								",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad predicate for FX pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        "				}",
        null,
        "                if matched		",
        "				{	",
        "				    // We have identified the pricer. Start accumulating parameters.",
        "					pricerParameters = {}",
        "					if row.PricerTemplate",
        "                    {",
        "                        pricer = if row.PricerTemplate == #\"DEFAULTPRICER\" ? EvaluateProperty(terms, \"Default Pricer\").canonical : row.PricerTemplate.canonical",
        "					    if pricer.Find(\"PRICER.\") != 1 :",
        "						    pricerParameters = { \"PRICER\" : \"PRICER.FX.\" + pricer }",
        "                        else :",
        "					        pricerParameters = { \"PRICER\" : pricer }",
        "                    }",
        null,
        "				    // Resolve the specified pricer parameters.",
        null,
        "					try",
        "					{",
        "						if row.PricerParameters",
        "						{",
        "						    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        "							foreach param in parameters :",
        "							    pricerParameters &= { param[1] : param[2] }",
        "						}",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad pricer parameters for FX pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        null,
        "					// Now, identify the model.",
        null,
        "					if row.ModelTemplate",
        "					{",
        "					    pricerParameters &= { \"MODEL TEMPLATE\" : \"MODEL.FX.\" + row.ModelTemplate }",
        null,
        "                        // Resolve the model parameters by translating to script and executing.",
        null,
        "						try",
        "						{   ",
        "						    nameValues = Numerix::Execute(\"{ \" + row.ModelParameters + \" }\")",
        "							modelParameters = Numerix::Table(\"ModelParameters_\"+Numerix::UniqueNumber(\"PP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "							pricerParameters &= { \"MODEL PARAMETERS\" : modelParameters.String }",
        "						}",
        "						catch error",
        "						{",
        "						    throw \"Default pricing policy: bad model parameters for FX pricing rule '\" + row.Name + \"'. \" + error",
        "						}",
        "					}",
        null,
        "                    //------------------------------------------------------",
        "                    //determines whether CSA Discounting should be applied",
        "                    //------------------------------------------------------",
        null,
        "                    //only applies if there is a pricer specified",
        "                    if pp_usecsadiscounting : if row.PricerTemplate : ",
        "                    {",
        "                        //determines whether the pricer uses the flag Use CSA Discounting.",
        "                        //there are two cases, a kernel pricing case that has a model and a kernel exposure case that uses PRICER.HY.EXPOSURE",
        "                        uses_flag = false",
        null,
        "                        if row.ModelTemplate :",
        "                            uses_flag = true",
        null,
        "                        if row.PricerTemplate ==#\"PRICER.HY.EXPOSURE\" :",
        "                            uses_flag = true",
        null,
        "                        //if a model is used, pass in the boolean to turn on CSA Discounting for KERNEL",
        "                        if uses_flag : if row.PricerTemplate",
        "                        {",
        "                            explicitflag = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the flag has been overriden by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"USECSADISCOUNTING\" :",
        "                                        explicitflag = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit is not provided, set it to true",
        "                            ifnot explicitflag :",
        "                                pricerParameters &= {\"Use CSA Discounting\" : true}",
        null,
        "                        }",
        null,
        "                        //no model is explicitly provided. Provide the CSA Curve as the Discount Curve",
        "                        //NOTE:  THIS ASSUMES THAT THE PRICER TEMPLATE NAMES THE DOMESTIC YIELD CURVE \"TERM DISCOUNT CURVE\".  If it's named something else, this won't work.",
        "                        if row.PricerTemplate : ifnot uses_flag",
        "                        {",
        "                            explicitcurve = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the Discount Curve has been explicitly provided by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"Term DiscountCurve\" :",
        "                                        explicitcurve = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit curve is not provided, provide it.",
        "                            ifnot explicitcurve :",
        "                                pricerParameters &= {\"Term Discount Curve\" : NxStd::CSADiscountCurveID(termcurrency,terms.Counterparty,terms.LegalEntity,terms.NettingSet,terms.MarginSet)}                            ",
        null,
        "                        }",
        "                    }",
        "                    //------------------------------------------------------",
        "                    //pass in reporting currency",
        "                    //------------------------------------------------------",
        "                    if row.PricerTemplate:",
        "                        if ReportingCurrency",
        "                        {",
        "                            explicit_ccy = false",
        "                            parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                            //find out if the Reporting Currency has been explicitly provided by pricing policy rule",
        "                            foreach param in parameters",
        "                            {",
        "                                if param[1] ==#\"ReportingCurrency\" :",
        "                                    explicit_ccy = true",
        "                            }",
        "                            ifnot explicit_ccy:",
        "                                pricerParameters &= {\"Reporting Currency\": ReportingCurrency}",
        "                        }",
        null,
        "			        // Return the parameters.",
        null,
        "                    return pricerParameters",
        "				}",
        "			}",
        "	    }",
        "	}",
        null,
        "	return \"\"",
        "}",
        null,
        "//================================================================================",
        "// HY-related functions",
        "//================================================================================",
        null,
        "// Resolve an HY pricer by referencing our HY Pricer Rules table.",
        null,
        "function ResolveHYPricer(terms, productCode, underlyingAssets)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	if HYPricingRules",
        "	{",
        "        // Remove any spaces in the underlying assets.",
        null,
        "        trimmed = underlyingAssets.Remove(\" \")",
        null,
        "        // HY underlying assets consist of a comma-delimited set of underlying assets of various types. Get a list of these.",
        null,
        "        hyAssets = trimmed.Split(\",\")",
        null,
        "        // Iterate through the list and harvest the various types of underlying assets.",
        null,
        "		cmdtyAssets = {}",
        "		crAssets = {}",
        "		eqAssets = {}",
        "		fxAssets = {}",
        "		inflAssets = {}",
        "		irAssets = {}",
        "		foreach hy in hyAssets",
        "		{",
        "		    hyAsset = hy.Canonical",
        null,
        "		    // Check for CMDTY underlyings.",
        null,
        "		    if hyAsset.Find(\"CMDTY.\") == 1",
        "			{",
        "			    cmdtyAssets @= hyAsset",
        "			    continue",
        "			}",
        null,
        "		    // Check for CR underlyings.",
        null,
        "		    if hyAsset.Find(\"CR.\") == 1",
        "			{",
        "			    crAssets @= hyAsset",
        "			    continue",
        "			}		    ",
        null,
        "			// Check for EQ underlyings.",
        null,
        "		    if hyAsset.Find(\"EQ.\") == 1",
        "			{",
        "			    eqAssets @= hyAsset",
        "			    continue",
        "			}		    ",
        null,
        "			// Check for FX underlyings.",
        null,
        "		    if hyAsset.Find(\"FX.\") == 1",
        "			{",
        "			    fxAssets @= hyAsset",
        "			    continue",
        "			}		    ",
        null,
        "			// Check for INFL underlyings.",
        null,
        "		    if hyAsset.Find(\"INFL.\") == 1",
        "			{",
        "			    inflAssets @= hyAsset",
        "			    continue",
        "			}		    ",
        null,
        "			// Check for IR underlyings.",
        null,
        "		    if hyAsset.Find(\"IR.\") == 1",
        "			{",
        "			    irAssets @= hyAsset",
        "			    continue",
        "			}",
        null,
        "			throw \"Default pricing policy: could not parse HY underlying asset '\" + hyAsset + \"'.\"",
        "		}",
        null,
        "		// Set flags.",
        null,
        "		hasCMDTYAssets = cmdtyAssets.Size > 0",
        "		hasCRAssets = crAssets.Size > 0",
        "		hasEQAssets = eqAssets.Size > 0",
        "		hasFXAssets = fxAssets.Size > 0",
        "		hasINFLAssets = inflAssets.Size > 0",
        "		hasIRAssets = irAssets.Size > 0",
        null,
        "        // Access terms, currency, trade ID.",
        null,
        "		tradeID = terms.TradeIDInput",
        "		currency = terms.Currency.Canonical",
        "		tradeTerms = terms",
        null,
        "        // Proceed through the set of HY rules and see if we match any of these.",
        null,
        "	    rules = Numerix::Load(HYPricingRules)",
        "        foreach row in rules",
        "		{",
        "            // Start by checking (1) the product code, (2) the trade ID, (3) the currency, and (4) flags.",
        null,
        "	        if Match(productCode, row.ProductCode) : if  Match(tradeID, row.tradeID) : if Match(currency, row.Currency) : if MatchBool(hasCMDTYAssets, row.HasCMDTYAssets) : if MatchBool(hasCRAssets, row.HasCRAssets) : if MatchBool(hasEQAssets, row.HasEQAssets) : if MatchBool(hasFXAssets, row.HasFXAssets) : if MatchBool(hasINFLAssets, row.HasINFLAssets) : if MatchBool(hasIRAssets, row.HasIRAssets)",
        "			{",
        "			    // If we don't have a predicate, we have a match; otherwise, evaluate the predicate to see if we proceed.",
        null,
        "				matched = true",
        "				if row.Predicate",
        "				{",
        "				    try",
        "					{",
        "					    matched = Numerix::Execute(row.Predicate)",
        "						if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched								",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad predicate for HY pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        "				}",
        null,
        "				if matched		",
        "				{	",
        "				    // If we are using a global hybrid model to compute exposure, we",
        "					// need to skip all of the logic to create factor models. Maybe",
        "					// we should find a better way to do this.",
        null,
        "					if row.PricerTemplate != #\"PRICER.HY.EXPOSURE\"",
        "					{",
        "			        // We will need to accumulate a list of currencies other than the deal (domestic) currency.",
        null,
        "					foreignCurrencies = {}",
        null,
        "			        // Crack the various types of underlying assets.",
        null,
        "					cmdtyModels = \"\"",
        "					if hasCMDTYAssets",
        "					{",
        "					    // Crack the presumed CMDTY underlying assets. Report an error if we don't get any.",
        null,
        "			            cmdtyAssets = Numerix::CreateMetaData(cmdtyAssets) == \"CMDTY.<Currency>-<Exchange>-<Ticker>\"",
        "			            if cmdtyAssets isnot \"TABLE\" :",
        "			                throw \"Default pricing policy: could not parse CMDTY underlying assets '\" + underlyingAssets + \"' in HY deal.\"",
        null,
        "						// Iterate through the assets we found.",
        null,
        "						cmdtyModelData = {}",
        "						foreach asset in cmdtyAssets",
        "						{",
        "						    // Identify any foreign currencies.",
        null,
        "						    if asset.Currency != currency : ifnot asset.Currency in foreignCurrencies :",
        "							    foreignCurrencies @= asset.Currency",
        null,
        "							// Discover the model template and model parameters to use for this asset.",
        null,
        "							assetModelData = ResolveCMDTYPricer((terms), (productCode), (asset.Key), \"HY\")",
        "							if assetModelData is \"LIST\" : if assetModelData.Size == 2 :",
        "							    cmdtyModelData @= { asset.Key, asset.Currency, asset.Exchange, asset.Ticker, assetModelData[1].ModelTemplate, assetModelData[2].ModelParameters }",
        "							else :",
        "							    throw \"Default pricing policy: could not determine CMDTY model for underlying '\" + asset.Key + \"' in HY deal.\"",
        "						}",
        null,
        "						// Create a table we can access from the model.",
        null,
        "						    cmdtyModels = Numerix::Table(\"CMDTYModels_\" + productCode, { \"KEY\", \"CURRENCY\", \"EXCHANGE\", \"TICKER\", \"MODEL TEMPLATE\", \"MODEL PARAMETERS\" }, cmdtyModelData.Transpose)",
        "						cmdtyModels = cmdtyModels.Create",
        "					}",
        null,
        "					crModels = \"\"",
        "					if hasCRAssets",
        "					{",
        "			 		    // Crack the presumed CR underlying assets. Report an error if we don't get any.",
        null,
        "			            crAssets = Numerix::CreateMetaData(crAssets) == \"CR.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>\"",
        "			            if crAssets isnot \"TABLE\" :",
        "			                throw \"Default pricing policy: could not parse CR underlying assets '\" + underlyingAssets + \"' in HY deal.\"",
        null,
        "						// Iterate through the assets we found.",
        null,
        "						crModelData = {}",
        "						foreach asset in crAssets",
        "						{",
        "						    // Identify any foreign currencies.",
        null,
        "						    if asset.Currency != currency : ifnot asset.Currency in foreignCurrencies :",
        "							    foreignCurrencies @= asset.Currency",
        null,
        "							// Discover the model template and model parameters to use for this asset.",
        null,
        "							assetModelData = ResolveCRPricer((terms), (productCode), (asset.Key), \"HY\")",
        "							if assetModelData is \"LIST\" : if assetModelData.Size == 2 :",
        "							    crModelData @= { asset.Key, asset.Currency, asset.ReferenceEntity, asset.DebtType, asset.RestructuringClause, assetModelData[1].ModelTemplate, assetModelData[2].ModelParameters }",
        "							else :",
        "							    throw \"Default pricing policy: could not determine CR model for underlying '\" + asset.Key + \"' in HY deal.\"",
        "						}",
        null,
        "						// Create a table we can access from the model.",
        null,
        "						    crModels = Numerix::Table(\"CRModels_\" + productCode, { \"KEY\", \"CURRENCY\", \"REFERENCE ENTITY\", \"DEBT TYPE\", \"RESTRUCTURING CLAUSE\", \"MODEL TEMPLATE\", \"MODEL PARAMETERS\" }, crModelData.Transpose)",
        "						crModels = crModels.Create",
        "					}",
        null,
        "					eqModels = \"\"",
        "					if hasEQAssets",
        "					{",
        "					    // Crack the presumed EQ underlying assets. Report an error if we don't get any.",
        null,
        "			            eqAssets = Numerix::CreateMetaData(eqAssets) == \"EQ.<Currency>-<Exchange>-<Ticker>\"",
        "			            if eqAssets isnot \"TABLE\" :",
        "			                throw \"Default pricing policy: could not parse EQ underlying assets '\" + underlyingAssets + \"' in HY deal.\"",
        null,
        "						// Iterate through the assets we found.",
        null,
        "						eqModelData = {}",
        "						foreach asset in eqAssets",
        "						{",
        "						    // Identify any foreign currencies.",
        null,
        "						    if asset.Currency != currency : ifnot asset.Currency in foreignCurrencies :",
        "							    foreignCurrencies @= asset.Currency",
        null,
        "							// Discover the model template and model parameters to use for this asset.",
        null,
        "							assetModelData = ResolveEQPricer((terms), (productCode), (asset.Key), \"HY\")",
        "							if assetModelData is \"LIST\" : if assetModelData.Size == 2 :",
        "							    eqModelData @= { asset.Key, asset.Currency, asset.Exchange, asset.Ticker, assetModelData[1].ModelTemplate, assetModelData[2].ModelParameters }",
        "							else :",
        "							    throw \"Default pricing policy: could not determine EQ model for underlying '\" + asset.Key + \"' in HY deal.\"",
        "						}",
        null,
        "						// Create a table we can access from the model.",
        null,
        "						    eqModels = Numerix::Table(\"EQModels_\" + productCode, { \"KEY\", \"CURRENCY\", \"EXCHANGE\", \"TICKER\", \"MODEL TEMPLATE\", \"MODEL PARAMETERS\" }, eqModelData.Transpose)",
        "						eqModels = eqModels.Create",
        "					}",
        null,
        "					fxModels = \"\"",
        "					if hasFXAssets",
        "					{",
        "					    // Crack the presumed FX underlying assets. Report an error if we don't get any.",
        null,
        "			            fxAssets = Numerix::CreateMetaData(fxAssets) == \"FX.<BaseCurrency>/<TermCurrency>\"",
        "			            if fxAssets isnot \"TABLE\" :",
        "			                throw \"Default pricing policy: could not parse FX underlying assets '\" + underlyingAssets + \"' in HY deal.\"",
        null,
        "						// Iterate through the assets we found.",
        null,
        "						foreach asset in fxAssets",
        "						{",
        "						    // Identify any foreign currencies.",
        null,
        "						    if asset.BaseCurrency != currency : ifnot asset.BaseCurrency in foreignCurrencies :",
        "							    foreignCurrencies @= asset.BaseCurrency",
        "							if asset.TermCurrency != currency : ifnot asset.TermCurrency in foreignCurrencies :",
        "							    foreignCurrencies @= asset.TermCurrency",
        "						}",
        "					}",
        null,
        "					inflModels = \"\"",
        "					if hasINFLAssets",
        "					{",
        "					    // Crack the presumed INFL underlying assets. Report an error if we don't get any.",
        null,
        "			            inflAssets = Numerix::CreateMetaData(inflAssets) == \"INFL.<Currency>-<InflationIndex>\"",
        "			            if inflAssets isnot \"TABLE\" :",
        "			                throw \"Default pricing policy: could not parse INFL underlying assets '\" + underlyingAssets + \"'. in HY deal\"",
        null,
        "						// Iterate through the assets we found.",
        null,
        "						foreach asset in inflAssets",
        "						{",
        "						    // Identify any foreign currencies.",
        null,
        "						    if asset.Currency != currency : ifnot asset.Currency in foreignCurrencies :",
        "							    foreignCurrencies @= asset.Currency",
        "						}",
        "					}",
        null,
        "					irModels = \"\"",
        "					if hasIRAssets",
        "					{",
        "					    // Crack the presumed IR underlying assets. Report an error if we don't get any.",
        null,
        "			            irAssets = Numerix::CreateMetaData(irAssets) == \"IR.<Currency>\"",
        "			            if irAssets isnot \"TABLE\" :",
        "			                throw \"Default pricing policy: could not parse IR underlying assets '\" + underlyingAssets + \"'. in HY deal\"",
        null,
        "						// Iterate through the assets we found.",
        null,
        "						foreach asset in irAssets",
        "						{",
        "						    // Identify any foreign currencies.",
        null,
        "						    if asset.Currency != currency : ifnot asset.Currency in foreignCurrencies :",
        "							    foreignCurrencies @= asset.Currency",
        "						}",
        "					}",
        null,
        "					// We know all of the currencies at this point, both domestic and foreign.				",
        "					// At minimum, we need to construct an IR Model for the domestic currency.",
        null,
        "					irModelData = {}",
        "					fxModelData = {}",
        null,
        "					irKey = NxStd::IRUnderlyingAsset(currency)",
        "					domesticModelData = ResolveIRPricer((terms), (productCode), irKey, \"HY\")",
        "					if domesticModelData is \"LIST\" : if domesticModelData.Size == 2 :",
        "					    irModelData @= { irKey, currency, domesticModelData[1].ModelTemplate, domesticModelData[2].ModelParameters }",
        "					else :",
        "						throw \"Default pricing policy: could not determine IR model for domestic currency '\" + currency + \"' in HY deal.\"",
        null,
        "					// Now, we need to iterate through any foreign currencies and construct an IR model and an FX model (relative to domestic).",
        null,
        "					foreach fc in foreignCurrencies",
        "					{",
        "					    // Handle the IR model.",
        null,
        "					    irKey = NxStd::IRUnderlyingAsset(fc)",
        "					    foreignModelData = ResolveIRPricer((terms), (productCode), irKey, \"HY\")",
        "					    if foreignModelData is \"LIST\" : if foreignModelData.Size == 2 :",
        "					        irModelData @= { irKey, fc, foreignModelData[1].ModelTemplate, foreignModelData[2].ModelParameters }",
        "					    else :",
        "						    throw \"Default pricing policy: could not determine IR model for foreign currency '\" + fc + \"' in HY deal.\"",
        null,
        "						// Handle the FX model.",
        null,
        "						fxKey = NxStd::FXUnderlyingAsset(fc, currency)",
        "					    fxAssetData = ResolveFXPricer((terms), (productCode), fxKey, \"HY\")",
        "					    if fxAssetData is \"LIST\" : if fxAssetData.Size == 2 :",
        "					        fxModelData @= { fxKey, fc, currency, fxAssetData[1].ModelTemplate, fxAssetData[2].ModelParameters }",
        "					    else :",
        "						    throw \"Default pricing policy: could not determine FX model for foreign currency '\" + fc + \"' in HY deal.\"",
        "					}",
        null,
        "					// Create tables we can access from the model.",
        null,
        "					    irModels = Numerix::Table(\"IRModels_\" + productCode, { \"KEY\", \"CURRENCY\", \"MODEL TEMPLATE\", \"MODEL PARAMETERS\" }, irModelData.Transpose)",
        "					irModels = irModels.Create",
        null,
        "					if fxModelData",
        "					{",
        "					        fxModels = Numerix::Table(\"FXModels_\" + productCode, { \"KEY\", \"BASE CURRENCY\", \"TERM CURRENCY\", \"MODEL TEMPLATE\", \"MODEL PARAMETERS\" }, fxModelData.Transpose)",
        "					        fxModels = fxModels.Create",
        "					}",
        "					}",
        null,
        "				    // We have identified the pricer. Start accumulating parameters.",
        null,
        "					pricerParameters = {}",
        "					if row.PricerTemplate",
        "                    {",
        "                        pricer = if row.PricerTemplate == #\"DEFAULTPRICER\" ? EvaluateProperty(terms, \"Default Pricer\").canonical : row.PricerTemplate.canonical",
        "					     if pricer.Find(\"PRICER.\") != 1 :",
        "						    pricerParameters = { \"PRICER\" : \"PRICER.HY.\" + pricer }",
        "                        else :",
        "					        pricerParameters = { \"PRICER\" : pricer }",
        "                    }",
        null,
        "				    // Resolve the specified pricer parameters.",
        null,
        "					try",
        "					{",
        "					    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        "						foreach param in parameters :",
        "						    pricerParameters &= { param[1] : param[2] }",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad pricer parameters for HY pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        null,
        "					// Now, identify the model.",
        null,
        "					if row.ModelTemplate",
        "					{",
        "					    pricerParameters &= { \"MODEL TEMPLATE\" : \"MODEL.HY.\" + row.ModelTemplate }",
        null,
        "                        // Resolve the model parameters by translating to script and executing.",
        null,
        "						try",
        "						{   ",
        "						    nameValues = Numerix::Execute(\"{ \" + row.ModelParameters + \" }\")",
        "							modelParameters = Numerix::Table(\"ModelParameters_\"+Numerix::UniqueNumber(\"PP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "							pricerParameters &= { \"MODEL PARAMETERS\" : modelParameters.String }",
        "						}",
        "						catch error",
        "						{",
        "						    throw \"Default pricing policy: bad model parameters for HY pricing rule '\" + row.Name + \"'. \" + error",
        "						}",
        "					}",
        null,
        "                    //------------------------------------------------------",
        "                    //determines whether CSA Discounting should be applied",
        "                    //------------------------------------------------------",
        null,
        "                    //only applies if there is a pricer specified",
        "                    if pp_usecsadiscounting : if row.PricerTemplate : ",
        "                    {",
        "                        //determines whether the pricer uses the flag Use CSA Discounting.",
        "                        //there are two cases, a kernel pricing case that has a model and a kernel exposure case that uses PRICER.HY.EXPOSURE",
        "                        uses_flag = false",
        null,
        "                        if row.ModelTemplate :",
        "                            uses_flag = true",
        null,
        "                        if row.PricerTemplate ==#\"PRICER.HY.EXPOSURE\" :",
        "                            uses_flag = true",
        null,
        "                        //if a model is used, pass in the boolean to turn on CSA Discounting for KERNEL",
        "                        if uses_flag : if row.PricerTemplate",
        "                        {",
        "                            explicitflag = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the flag has been overriden by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"USECSADISCOUNTING\" :",
        "                                        explicitflag = true",
        "                                }",
        "						    }",
        "                            //if an explicit is not provided, set it to true",
        "                            ifnot explicitflag :",
        "                                pricerParameters &= {\"Use CSA Discounting\" : true}",
        "                        }",
        "                    }",
        "                    //------------------------------------------------------",
        "                    //pass in reporting currency",
        "                    //------------------------------------------------------",
        null,
        "                    if ReportingCurrency",
        "                    {",
        "                        explicit_ccy = false",
        "                        parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                        //find out if the Reporting Currency has been explicitly provided by pricing policy rule",
        "                        foreach param in parameters",
        "                        {",
        "                            if param[1] ==#\"ReportingCurrency\" :",
        "                                explicit_ccy = true",
        "                        }",
        "                        ifnot explicit_ccy:",
        "                            pricerParameters &= {\"Reporting Currency\": ReportingCurrency}",
        "                    }",
        "			        // Return the parameters.",
        null,
        "                    return pricerParameters",
        "				}",
        "			}",
        "	    }",
        "	}",
        null,
        "	return \"\"",
        "}",
        null,
        "//================================================================================",
        "// INFL-related functions",
        "//================================================================================",
        null,
        "// Resolve an INFL pricer by referencing our INFL Pricer Rules table.",
        null,
        "function ResolveINFLPricer(terms, productCode, underlyingAssets, termsAssetClass = \"INFL\")",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	if INFLPricingRules",
        "	{",
        "		// Resolve some parameters that we will use for matching.",
        null,
        "        // INFL underlying assets have the form INFL.<Currency>-<InflationIndex>. Crack this.",
        null,
        "        parts = Numerix::CreateMetaData(underlyingAssets) == \"INFL.<Currency>-<InflationIndex>\"",
        "        if parts isnot \"TABLE\" :",
        "            throw \"Default pricing policy: could not parse INFL underlying asset '\" + underlyingAssets + \"'.\"",
        null,
        "		currency = parts[1].Currency",
        "		inflationindex = parts[1].InflationIndex",
        null,
        "        // Access terms and trade ID.",
        null,
        "		tradeID = terms.TradeIDInput",
        "		tradeTerms = terms",
        null,
        "        // Proceed through the set of INFL rules and see if we match any of these.",
        null,
        "	    rules = Numerix::Load(INFLPricingRules)",
        "        foreach row in rules",
        "		{",
        "            // Start by checking (1) the product code, (2) the trade ID, and (3) currency/inflation index.",
        null,
        "	        if Match(productCode, row.ProductCode) : if  Match(tradeID, row.tradeID) : if Match(currency, row.Currency) : if Match(inflationindex, row.InflationIndex) ",
        "			{",
        "			    // If we don't have a predicate, we have a match; otherwise, evaluate the predicate to see if we proceed.",
        null,
        "				matched = true",
        "				if row.Predicate",
        "				{",
        "				    try",
        "					{",
        "					    matched = Numerix::Execute(row.Predicate)",
        "						if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched								",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad predicate for INFL pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        "				}",
        null,
        "				if matched		",
        "				{	",
        "				    // We have identified the pricer. Start accumulating parameters.",
        null,
        "					pricerParameters = {}",
        "					if row.PricerTemplate",
        "                    {",
        "                        pricer = if row.PricerTemplate == #\"DEFAULTPRICER\" ? EvaluateProperty(terms, \"Default Pricer\").canonical : row.PricerTemplate.canonical",
        "					     if pricer.Find(\"PRICER.\") != 1 :",
        "						    pricerParameters = { \"PRICER\" : \"PRICER.INFL.\" + pricer }",
        "                        else :",
        "					        pricerParameters = { \"PRICER\" : pricer }",
        "                    }",
        null,
        "				    // Resolve the specified pricer parameters.",
        null,
        "					try",
        "					{",
        "						if row.PricerParameters",
        "						{",
        "					    	parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        "							foreach param in parameters :",
        "						    	pricerParameters &= { param[1] : param[2] }",
        "						}",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad pricer parameters for INFL pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        null,
        "					// Now, identify the model.",
        null,
        "					if row.ModelTemplate",
        "					{",
        "					    pricerParameters &= { \"MODEL TEMPLATE\" : \"MODEL.INFL.\" + row.ModelTemplate }",
        null,
        "                        // Resolve the model parameters by translating to script and executing.",
        null,
        "						try",
        "						{   ",
        "						    nameValues = Numerix::Execute(\"{ \" + row.ModelParameters + \" }\")",
        "							modelParameters = Numerix::Table(\"ModelParameters_\"+Numerix::UniqueNumber(\"PP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "							pricerParameters &= { \"MODEL PARAMETERS\" : modelParameters.String }",
        "						}",
        "						catch error",
        "						{",
        "						    throw \"Default pricing policy: bad model parameters for INFL pricing rule '\" + row.Name + \"'. \" + error",
        "						}",
        "					}",
        null,
        "                    //------------------------------------------------------",
        "                    //determines whether CSA Discounting should be applied",
        "                    //------------------------------------------------------",
        null,
        "                    //only applies if there is a pricer specified",
        "                    if pp_usecsadiscounting : if row.PricerTemplate : ",
        "                    {",
        "                        //determines whether the pricer uses the flag Use CSA Discounting.",
        "                        //there are two cases, a kernel pricing case that has a model and a kernel exposure case that uses PRICER.HY.EXPOSURE",
        "                        uses_flag = false",
        null,
        "                        if row.ModelTemplate :",
        "                            uses_flag = true",
        null,
        "                        if row.PricerTemplate ==#\"PRICER.HY.EXPOSURE\" :",
        "                            uses_flag = true",
        null,
        "                        //if a model is used, pass in the boolean to turn on CSA Discounting for KERNEL",
        "                        if uses_flag : if row.PricerTemplate",
        "                        {",
        "                            explicitflag = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the flag has been overriden by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"USECSADISCOUNTING\" :",
        "                                        explicitflag = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit is not provided, set it to true",
        "                            ifnot explicitflag :",
        "                                pricerParameters &= {\"Use CSA Discounting\" : true}",
        null,
        "                        }",
        null,
        "                        //no model is explicitly provided. Provide the CSA Curve as the Discount Curve",
        "                        //NOTE:  THIS ASSUMES THAT THE PRICER TEMPLATE NAMES THE DOMESTIC YIELD CURVE \"DISCOUNT CURVE\".  If it's named something else, this won't work.",
        "                        if row.PricerTemplate : ifnot uses_flag",
        "                        {",
        "                            explicitcurve = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the Discount Curve has been explicitly provided by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"DiscountCurve\" :",
        "                                        explicitcurve = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit curve is not provided, provide it.",
        "                            ifnot explicitcurve :",
        "                                pricerParameters &= {\"Discount Curve\" : NxStd::CSADiscountCurveID(currency,terms.Counterparty,terms.LegalEntity,terms.NettingSet,terms.MarginSet)}                            ",
        null,
        "                        }",
        null,
        "                    }                    ",
        "                    //------------------------------------------------------",
        "                    //pass in reporting currency",
        "                    //------------------------------------------------------",
        "                    if row.PricerTemplate:",
        "                        if ReportingCurrency",
        "                        {",
        "                            explicit_ccy = false",
        "                            parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                            //find out if the Reporting Currency has been explicitly provided by pricing policy rule",
        "                            foreach param in parameters",
        "                            {",
        "                                if param[1] ==#\"ReportingCurrency\" :",
        "                                    explicit_ccy = true",
        "                            }",
        "                            ifnot explicit_ccy:",
        "                                pricerParameters &= {\"Reporting Currency\": ReportingCurrency}",
        "                        }",
        null,
        null,
        "			        // Return the parameters.",
        null,
        "                    return pricerParameters",
        "				}",
        "			}",
        "	    }",
        "	}",
        null,
        "	return \"\"",
        "}",
        null,
        "//================================================================================",
        "// IR-related functions",
        "//================================================================================",
        null,
        "// Confirms that the specified string represents a single IR underlying asset",
        "// and extracts the currency.",
        null,
        "function GetIRCurrency(underlyingAssets)",
        "{",
        "    // TODO: Add error checking.",
        null,
        "	return underlyingAssets.Canonical[4..6]",
        "}",
        null,
        "// Resolve an IR pricer by referencing our IR Pricer Rules table.",
        null,
        "function ResolveIRPricer(terms, productCode, underlyingAssets, termsAssetClass = \"IR\")",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	if IRPricingRules",
        "	{",
        "        // IR underlying assets have the form IR.<Currency>. Crack this.",
        null,
        "        parts = Numerix::CreateMetaData(underlyingAssets) == \"IR.<Currency>\"",
        "        if parts isnot \"TABLE\" :",
        "            throw \"Default pricing policy: could not parse IR underlying asset '\" + underlyingAssets + \"'.\"",
        null,
        "		currency = parts[1].Currency[1..3]",
        null,
        "        // Access terms and trade ID.",
        null,
        "		tradeID = terms.TradeID",
        "		tradeTerms = terms",
        null,
        "        // Proceed through the set of IR rules and see if we match any of these.",
        null,
        "	    rules = Numerix::Load(IRPricingRules)",
        null,
        "        foreach row in rules",
        "		{",
        "            // Start by checking (1) the product code, (2) the trade ID, and (3) the currency.",
        null,
        "	        if Match(productCode, row.ProductCode) : if  Match(tradeID, row.tradeID) : if Match(currency, row.Currency)",
        "			{",
        "			    // If we don't have a predicate, we have a match; otherwise, evaluate the predicate to see if we proceed.",
        null,
        "				matched = true",
        "				if row.Predicate",
        "				{",
        "				    try",
        "					{",
        "					    matched = Numerix::Execute(row.Predicate)",
        "						if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched								",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad predicate for IR pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        "				}",
        null,
        "				if matched		",
        "				{	",
        "				    // We have identified the pricer. Start accumulating parameters.",
        null,
        "					pricerParameters = {}",
        "					if row.PricerTemplate",
        "                    {",
        "                        pricer = if row.PricerTemplate == #\"DEFAULTPRICER\" ? EvaluateProperty(terms, \"Default Pricer\").canonical : row.PricerTemplate.canonical",
        "					     if pricer.Find(\"PRICER.\") != 1 :",
        "						    pricerParameters = { \"PRICER\" : \"PRICER.IR.\" + pricer }",
        "                        else :",
        "					        pricerParameters = { \"PRICER\" : pricer }",
        "                    }",
        null,
        "				    // Resolve the specified pricer parameters.",
        null,
        "					try",
        "					{",
        "						if row.PricerParameters",
        "						{",
        "					    	parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        "							foreach param in parameters :",
        "						    	pricerParameters &= { param[1] : param[2] }",
        "						}",
        "					}",
        "					catch error",
        "					{",
        "					    throw \"Default pricing policy: bad pricer parameters for IR pricing rule '\" + row.Name + \"'. \" + error",
        "					}",
        null,
        "					// Now, identify the model.",
        null,
        "					if row.ModelTemplate",
        "					{",
        "					    pricerParameters &= { \"MODEL TEMPLATE\" : \"MODEL.IR.\" + row.ModelTemplate }",
        null,
        "                        // Resolve the model parameters by translating to script and executing.",
        null,
        "						try",
        "						{   ",
        "						    nameValues = Numerix::Execute(\"{ \" + row.ModelParameters + \" }\")",
        "							modelParameters = Numerix::Table(\"ModelParameters_\"+Numerix::UniqueNumber(\"PP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "							pricerParameters &= { \"MODEL PARAMETERS\" : modelParameters.String }",
        "						}",
        "						catch error",
        "						{",
        "						    throw \"Default pricing policy: bad model parameters for IR pricing rule '\" + row.Name + \"'. \" + error",
        "						}",
        "					}",
        null,
        "                    //------------------------------------------------------",
        "                    //determines whether CSA Discounting should be applied",
        "                    //------------------------------------------------------",
        null,
        "                    //only applies if there is a pricer specified",
        "                    if pp_usecsadiscounting : if row.PricerTemplate : ",
        "                    {",
        "                        //determines whether the pricer uses the flag Use CSA Discounting.",
        "                        //there are two cases, a kernel pricing case that has a model and a kernel exposure case that uses PRICER.HY.EXPOSURE",
        "                        uses_flag = false",
        null,
        "                        if row.ModelTemplate :",
        "                            uses_flag = true",
        null,
        "                        if row.PricerTemplate ==#\"PRICER.HY.EXPOSURE\" :",
        "                            uses_flag = true",
        null,
        "                        //if a model is used, pass in the boolean to turn on CSA Discounting for KERNEL",
        "                        if uses_flag : if row.PricerTemplate",
        "                        {",
        "                            explicitflag = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the flag has been overriden by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"USECSADISCOUNTING\" :",
        "                                        explicitflag = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit is not provided, set it to true",
        "                            ifnot explicitflag :",
        "                                pricerParameters &= {\"Use CSA Discounting\" : true}",
        null,
        "                        }",
        null,
        "                        //no model is explicitly provided. Provide the CSA Curve as the Discount Curve",
        "                        //NOTE:  THIS ASSUMES THAT THE PRICER TEMPLATE NAMES THE DOMESTIC YIELD CURVE \"DISCOUNT CURVE\".  If it's named something else, this won't work.",
        "                        if row.PricerTemplate : ifnot uses_flag",
        "                        {",
        "                            explicitcurve = false",
        null,
        "						    if row.PricerParameters",
        "						    {",
        "					    	    parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                                //find out if the Discount Curve has been explicitly provided by pricing policy rule",
        "                                foreach param in parameters",
        "                                {",
        "                                    if param[1] ==#\"DiscountCurve\" :",
        "                                        explicitcurve = true",
        "                                }",
        "						    }",
        null,
        "                            //if an explicit curve is not provided, provide it.",
        "                            ifnot explicitcurve :",
        "                                pricerParameters &= {\"Discount Curve\" : NxStd::CSADiscountCurveID(currency,terms.Counterparty,terms.LegalEntity,terms.NettingSet,terms.MarginSet)}                            ",
        null,
        "                        }",
        null,
        "                    }",
        "                    //------------------------------------------------------",
        "                    //pass in reporting currency",
        "                    //------------------------------------------------------",
        "                    if row.PricerTemplate:",
        "                        if ReportingCurrency",
        "                        {",
        "                            explicit_ccy = false",
        "                            parameters = Numerix::Execute(\"{ \" + row.PricerParameters + \" }\")",
        null,
        "                            //find out if the Discount Curve has been explicitly provided by pricing policy rule",
        "                            foreach param in parameters",
        "                            {",
        "                                if param[1] ==#\"ReportingCurrency\" :",
        "                                    explicit_ccy = true",
        "                            }",
        "                            ifnot explicit_ccy:",
        "                                pricerParameters &= {\"Reporting Currency\": ReportingCurrency}",
        "                        }",
        "				    // Return the parameters.",
        null,
        "                    return pricerParameters",
        "			    }",
        "			}",
        "	    }",
        "	}",
        null,
        "	return \"\"",
        "}",
        null,
        "//================================================================================",
        "// Shared functions",
        "//================================================================================",
        null,
        "// Use our input tables to resolve the pricer by asset class.",
        null,
        "function ResolvePricer(terms, assetClass, productCode, underlyingAssets)",
        "{",
        "    // Filter by asset class.",
        null,
        "	switch on assetClass",
        "	{",
        "    	case \"CC\"",
        "    	    return ResolveCCPricer(terms, productCode, underlyingAssets)",
        "    	case \"CMDTY\"",
        "    	    return ResolveCMDTYPricer(terms, productCode, underlyingAssets)",
        "    	case \"CR\"",
        "    	    return ResolveCRPricer(terms, productCode, underlyingAssets)",
        "    	case \"EQ\"",
        "    	    return ResolveEQPricer(terms, productCode, underlyingAssets)",
        "    	case \"FX\"",
        "    	    return ResolveFXPricer(terms, productCode, underlyingAssets)",
        "     	case \"HY\"",
        "    	    return ResolveHYPricer(terms, productCode, underlyingAssets)",
        "   	    case \"INFL\"",
        "    	    return ResolveINFLPricer(terms, productCode, underlyingAssets)",
        "    	case \"IR\"",
        "    	    return ResolveIRPricer(terms, productCode, underlyingAssets)",
        "    	default",
        "    	    throw terms + \": unknown asset class '\" + assetClass + \"'. Allowed values are 'CC', 'CMDTY', 'CR', 'EQ', 'FX', 'HY', 'INFL', and 'IR'.\"",
        "	}",
        "}",
        null,
        "//determines whether to use CSA Discounting or Not",
        null,
        "function pp_usecsadiscounting",
        "{   ",
        "    //if it is not turned on, don't do anything",
        "    ifnot UseCSADiscounting :",
        "        return false",
        null,
        "    return NxStd::CheckCounterparty(terms.TradeID,terms.Counterparty,terms.LegalEntity,terms.NettingSet,terms.MarginSet)",
        "}",
        null,
        null,
        null,
        "//================================================================================",
        "// External functions",
        "//================================================================================",
        null,
        "// Standard entry point to pricing policy. Will eventually be deprecated in favor of GetXPricer below.",
        null,
        "function GetPricer(terms, constants = \"\")",
        "{",
        "	// Find the asset class, product code, and underlying assets in the properties.",
        "	// We will use these for resolving the pricing policy and creating parameters.",
        null,
        "	assetClass = EvaluateProperty(terms, \"Asset Class\")",
        "	productCode = EvaluateProperty(terms, \"Product Code\")",
        "	underlyingAssets = EvaluateProperty(terms, \"Underlying Assets\")",
        null,
        "    // Attempt to resolve the pricer and parameters.",
        null,
        "	pricer = ResolvePricer(terms, (assetClass), (productCode), (underlyingAssets))",
        "    if pricer :",
        "        return pricer",
        null,
        "    // We had no luck to this point. Attempt to find the default pricer identified by the terms.",
        null,
        "    pricer = EvaluateProperty(terms, \"Default Pricer\")",
        "    return pricer",
        "}",
        null,
        "// Alternative high-performance entry point to pricing policy.",
        null,
        "function GetXPricer(constants = \"\")",
        "{",
        "    // Find the asset class, product code, and underlying assets in the properties.",
        "    // We will use these for resolving the pricing policy and creating parameters.",
        null,
        "    view = terms.View(\"PROPERTY NAMES\", \"PROPERTY VALUES\")",
        "    props = view.PropertyNames",
        "    values = view.PropertyValues",
        null,
        "    idx = props.Find(#\"Asset Class\")",
        "    ifnot idx :",
        "        throw terms + \": could not evaluate 'Asset Class' property which is required for pricing policy resolution.\"",
        null,
        "    assetClass = values[idx]",
        null,
        "    idx = props.Find(#\"Product Code\")",
        "    ifnot idx :",
        "        throw terms + \": could not evaluate 'Product Code' property which is required for pricing policy resolution.\"",
        null,
        "    productCode = values[idx]",
        null,
        "    idx = props.Find(#\"Underlying Assets\")",
        "    ifnot idx :",
        "        throw terms + \": could not evaluate 'Underlying Assets' property which is required for pricing policy resolution.\"",
        null,
        "    underlyingAssets = values[idx]",
        null,
        "    // Attempt to resolve the pricer and parameters.",
        null,
        "    pricer = ResolvePricer(terms, (assetClass), (productCode), (underlyingAssets))",
        "    if pricer :",
        "        return pricer",
        null,
        "    // We had no luck to this point. Attempt to find the default pricer identified by the terms.",
        null,
        "    idx = props.Find(#\"Default Pricer\")",
        "    ifnot idx :",
        "        throw terms + \": could not evaluate 'Default Pricer' property which is required for pricing policy resolution.\"",
        null,
        "    pricer = values[idx]",
        "    return pricer",
        "}"]
    }
  },
  "PRICINGPOLICY.DEFAULT.CC_PRICING_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "Product Code" : ["String"],
      "Trade ID" : ["ID"],
      "Currency Pair 1" : ["String"],
      "Currency Pair 2" : ["String"],
      "Currency Pair 3" : ["String"],
      "Predicate" : ["String"],
      "Pricer Template" : ["ID"],
      "Pricer Parameters" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"],
      "Comment" : ["String"]
    }
  },
  "PRICINGPOLICY.DEFAULT.CMDTY_EQ_PRICING_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "Product Code" : ["String"],
      "Trade ID" : ["ID"],
      "Currency" : ["Currency"],
      "Exchange" : ["String"],
      "Ticker" : ["String"],
      "Predicate" : ["String"],
      "Pricer Template" : ["ID"],
      "Pricer Parameters" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"],
      "Comment" : ["String"]
    }
  },
  "PRICINGPOLICY.DEFAULT.FX_PRICING_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "Product Code" : ["String"],
      "Trade ID" : ["ID"],
      "Base Currency" : ["Currency"],
      "Term Currency" : ["Currency"],
      "Predicate" : ["String"],
      "Pricer Template" : ["ID"],
      "Pricer Parameters" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"],
      "Comment" : ["String"]
    }
  },
  "PRICINGPOLICY.DEFAULT.IR_PRICING_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "Product Code" : ["String"],
      "Trade ID" : ["ID"],
      "Currency" : ["Currency"],
      "Predicate" : ["String"],
      "Pricer Template" : ["ID"],
      "Pricer Parameters" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"],
      "Comment" : ["String"]
    }
  },
  "PRICINGPOLICY.DEFAULT.NAME_VALUE_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "Option Type" : ["String"],
      "Value" : ["String"]
    }
  },
  "PRICINGPOLICY.DEFAULT.CR_PRICING_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "Product Code" : ["String"],
      "Trade ID" : ["ID"],
      "Currency" : ["Currency"],
      "Reference Entity" : ["String"],
      "Debt Type" : ["String"],
      "Restructuring Clause" : ["String"],
      "Predicate" : ["String"],
      "Pricer Template" : ["ID"],
      "Pricer Parameters" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"],
      "Comment" : ["String"]
    }
  },
  "PRICINGPOLICY.DEFAULT.INFL_PRICING_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "Product Code" : ["String"],
      "Trade ID" : ["ID"],
      "Currency" : ["Currency"],
      "Inflation Index" : ["String"],
      "Predicate" : ["String"],
      "Pricer Template" : ["ID"],
      "Pricer Parameters" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"],
      "Comment" : ["String"]
    }
  },
  "PRICINGPOLICY.DEFAULT.HY_PRICING_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "Product Code" : ["String"],
      "Trade ID" : ["ID"],
      "Currency" : ["Currency"],
      "Has CMDTY Assets" : ["String"],
      "Has CR Assets" : ["String"],
      "Has EQ Assets" : ["String"],
      "Has FX Assets" : ["String"],
      "Has INFL Assets" : ["String"],
      "Has IR Assets" : ["String"],
      "Predicate" : ["String"],
      "Pricer Template" : ["ID"],
      "Pricer Parameters" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"],
      "Comment" : ["String"]
    }
  },
  "PRICINGPOLICY.DEFAULT.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Main Function: Script Context",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "function main",
        "{",
        "    policy = Numerix::Object({\"policy\", \"script\", \"context\"}) & ",
        "	{",
        "       \"script definitions\" : \"pricingpolicy.default.functions\" ",
        "	}",
        null,
        "    id = policy.Create",
        "    return id",
        "}"]
    }
  },
  "SCRIPT.NXSTD": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DEFINITIONS" : [
        "//*****************************************************************************",
        "// Copyright (c) 1996-2016 Numerix LLC.  All rights reserved.",
        "// This software comprises valuable trade secrets and may be used,",
        "// copied, transmitted, stored, and distributed only in accordance",
        "// with the terms of a written license or trial agreement and with the",
        "// inclusion of this copyright notice.",
        "//*****************************************************************************",
        "  ",
        "//=============================================================================",
        "// STANDARD UTILITY FUNCTIONS AND MACROS",
        "//=============================================================================",
        null,
        "// Process TenorLT.",
        null,
        "define NxStd::TenorLT(d, t1, t2) = Numerix::Function(\"TenorLT\", d, t1, t2)",
        null,
        "// Process TenorEQ.",
        null,
        "define NxStd::TenorEQ(d, t1, t2) = Numerix::Function(\"TenorEQ\", d, t1, t2) ",
        null,
        "// Process GetImpliedVol.",
        null,
        "define NxStd::GetImpliedVol(id, d, strike) = Numerix::Function(\"GetImpliedVol\", id, d, strike)",
        null,
        "// Process GetImpliedVolByDelta.",
        null,
        "define NxStd::GetImpliedVolByVol(id, d, delta, typ, flavor) = Numerix::Function(\"GetImpliedVol\", id, d, delta, typ, flavor)",
        null,
        "// Process GetMatrix.",
        null,
        "define NxStd::GetMatrix(id, d1, d2) = Numerix::Function(\"GetMatrix\", id, d1, d2)",
        null,
        "// Returns a unique name given a base ID.",
        null,
        "define NxStd::MakeID(id) = id + Numerix::UniqueNumber",
        null,
        "// Returns value when value is positive otherwise zero",
        null,
        "function NxStd::StepFunction(in_value)",
        "{",
        "    return if in_value > 0? in_value: 0",
        "}",
        null,
        "// Return true if the specified key exists in the table.",
        null,
        "function NxStd::KeyExists(tableId, rowInput)",
        "{",
        "    call = Numerix::Load(TableId)",
        "    i = call.Key.Find(rowInput.Canonical)",
        "	",
        "    if i :",
        "        return true",
        null,
        "    return false",
        "}",
        null,
        "// Wrap Numerix::Query to return an empty list if the table has no rows.",
        null,
        "function NxStd::Query(a, b)",
        "{",
        "    id =  Numerix::Query(Numerix::MarketData, a, b)",
        "    return if Numerix::TableRowCount(id) ? id : {}",
        "}",
        null,
        "// Used to create a set of instruments.",
        null,
        "function NxStd::Instruments(id, type, currency, convention = \"\")",
        "{",
        "	currency_heading = \"currency\"",
        "    if type.Canonical == \"CCSWAP\" : currency_heading = \"float currency\"",
        null,
        "    result = Numerix::Table(\"\", ",
        "        {",
        "            \"id\"         		: id,",
        "            \"object\"     		: \"instrument\",",
        "            \"type\"       		: type,",
        "            currency_heading 	: currency,",
        "            \"convention\" 		: convention",
        "        })",
        "    return result",
        "}",
        null,
        "// Returns spot quote as a double if not provided directly in parameters.",
        "// Note: must be used in a context where 'SpotPrice' is appropriately defined.",
        null,
        "function NxStd::GetSpotPrice()",
        "{",
        "    return if SpotPrice is \"string\" ? Numerix::Quote(SpotPrice).Value : SpotPrice",
        "}",
        null,
        "// Returns recovery rate quote as a double if not provided directly in parameters.",
        "// Note: must be used in a context where 'Recovery Rate' is appropriately defined.",
        null,
        "function NxStd::GetRecoveryRate()",
        "{",
        "    return if RecoveryRate is \"string\" ? Numerix::Quote(RecoveryRate).Value : RecoveryRate",
        "}",
        null,
        "// Get the value corresponding to the convention key from the ",
        "// conventions object identified by ID.",
        null,
        "function NxStd::GetConventions(id, key)",
        "{",
        "    conv_value = \"\"",
        "    if Numerix::TryResolve(id)",
        "    {",
        "        defs = id.defaultValuesInput ",
        "        i = defs.Name.find(key.canonical)",
        "	    if i :",
        "	        conv_value =  defs.value(\"Value\")[i]",
        "        ",
        "        else:",
        "            Numerix::SetMajor(key + \" not found in \" + id + \". Please check \" + id + \".\")",
        "    }",
        "    else",
        "    {",
        "        Numerix::SetMajor(\"Convention \" + id + \" not found\")   ",
        "    ",
        "    }",
        "    ",
        "    return conv_value",
        null,
        "}",
        null,
        null,
        "// Return true if the specified table has rows.",
        null,
        "function NxStd::HasRows(TableId) ",
        "{",
        "    return Numerix::TableRowCount(tableID)",
        "}",
        null,
        "// Examine a tenor string and returns the units of the tenor as a string.",
        null,
        "function NxStd::TenorType(TTT) ",
        "{",
        "    t = TTT.Canonical",
        "    ",
        "    if t.Find(\"D\") :",
        "        return \"D\" ",
        "        ",
        "    if t.Find(\"W\") :",
        "        return \"W\" ",
        "        ",
        "    if t.Find(\"M\") :",
        "        return \"M\" ",
        "        ",
        "    if t.Find(\"Y\") :",
        "        return \"Y\"",
        "        ",
        "    return \"NO TENOR TYPE\"",
        "}",
        null,
        "// Returns the day of the week for a particular date, where Sunday == 1.",
        null,
        "function NxStd::DayOfWeek(date)",
        "{",
        "    d = Numerix::Double(date)",
        "	dd7  = d / 7",
        "	rem = d - dd7.Type(\"INTEGER\") * 7",
        "	dow = rem.Type(\"INTEGER\")",
        "	return if dow == 0 ? 7 : dow",
        "}",
        null,
        "// Get the type of dividend.",
        null,
        "function NxStd::GetDividendType(dividend)",
        "{",
        "    type = dividend.NAMEINPUT",
        "    return type",
        "}",
        null,
        "// Create a set of diagonal Swaptions up to the specified maturity with the ",
        "// specified strike.",
        null,
        "function NxStd::CreateCalibratingDiagonalSwaptions(mat, strike)",
        "{",
        "    maturity = Numerix::Tenor(mat)",
        "    values = {}",
        null,
        "    // Create list of option tenors, swap tenors, and strikes.",
        null,
        "    span = maturity.Multiplier - 1",
        "    for i = 1 to span",
        "    {",
        "        smi = span - i + 1",
        "        values @= {i.Format(\"1\") + \"Y\",  smi.Format(\"1\") + \"Y\", strike}",
        "    }",
        null,
        "    // Create table and load into registry.",
        null,
        "    calibTable = Numerix::Table(\"DiagonalSwaptions_\" + Numerix::UniqueNumber, {\"Swap Tenor\", \"Option Tenor\", \"Strike\"}, values.Transpose)",
        "    id = calibTable.Create",
        null,
        "    return id",
        "}",
        null,
        "// Create a set of column Swaptions up to the specified maturity with the ",
        "// specified swap tenors and strike.",
        null,
        "function NxStd::CreateCalibratingColumnSwaptions(optiontenor, swaptenor1, swaptenor2, strike)",
        "{",
        "    optionmat = Numerix::Tenor(optiontenor)",
        "    values = {}",
        null,
        "    // Create list of option tenors, swap tenors, and strikes.",
        null,
        "    span = optionmat.Multiplier",
        "    for i = 1 to span",
        "    {",
        "        values @= {i.Format(\"1\") + \"Y\", swaptenor1,strike}",
        "        values @= {i.Format(\"1\") + \"Y\", swaptenor2,strike}",
        "    }",
        "    ",
        "    // Create table and load into registry.",
        null,
        "    calibTable = Numerix::Table(\"ColumnSwaptions_\" + Numerix::UniqueNumber, {\"Option Tenor\", \"Swap Tenor\", \"Strike\"}, values.Transpose)",
        "    id = calibTable.Create",
        null,
        "    return id",
        "}",
        null,
        "// Create a set of column Swaptions up to the specified maturity with the ",
        "// specified swap tenors and strike.",
        null,
        "function NxStd::CreateCalibratingOneColumnSwaptions(optiontenor, swaptenor1, strike)",
        "{",
        "    optionmat = Numerix::Tenor(optiontenor)",
        "    values = {}",
        null,
        "    // Create list of option tenors, swap tenor, and strikes.",
        null,
        "    span = optionmat.Multiplier",
        "    for i = 1 to span :",
        "        values @= {i.Format(\"1\") + \"Y\", swaptenor1,strike}",
        "    ",
        "    // Create table and load into registry.",
        null,
        "    calibTable = Numerix::Table(\"ColumnSwaptions_\" + Numerix::UniqueNumber, {\"Option Tenor\", \"Swap Tenor\", \"Strike\"}, values.Transpose)",
        "    id = calibTable.Create",
        null,
        "    return id",
        "}",
        null,
        "// Create a set of calibrating EQ options with a single strike.",
        null,
        "function NxStd::CreateEQCalibratingSingleStrikeOptions(strike, currency, exchange, ticker, quoteType) ",
        "{",
        "    // Ensure EQ VOL instance has been created by CAIL.",
        "  ",
        "    obj = (\"EQ.VOL.\" + currency + \"-\" + exchange + \"-\" + ticker + \".\" + quoteType).ID",
        "    ",
        "    // Access the actual surface and get its DATES output.",
        "    ",
        "    surface = obj + \"^SURFACE\"",
        "    dates = surface.DATESOUTPUT",
        null,
        "    // Accumulate options.",
        "    ",
        "    list = {}",
        "    foreach row in dates :",
        "        list @= {row, strike}",
        "    ",
        "    calibtable = Numerix::Table(\"SingleStrikeOptions_\" + Numerix::UniqueNumber, {\"End Date\", \"Strike\"}, list.Transpose) ",
        "    id = calibtable.Create",
        "    ",
        "    return id",
        "}",
        null,
        "// Create a correlation matrix for CC Models.",
        null,
        "function NxStd::CreateCCModelCorrelation(domesticCurrency,foreignCurrency,domesticForeignCorr,domesticFXCorr,foreignFXCorr)",
        "{",
        "    List1={domesticCurrency,foreignCurrency,foreignCurrency+\"/\"+DomesticCurrency}",
        null,
        "    corrRow1={1,domesticForeignCorr,domesticFXCorr}",
        "    corrRow2={domesticForeignCorr,1,foreignFXCorr}",
        "    corrRow3={domesticFXCorr,foreignFXCorr,1}",
        null,
        "    corrList={}",
        "    corrList@=corrRow1",
        "    corrList@=corrRow2",
        "    corrList@=corrRow3",
        null,
        "    matrix=Numerix::Matrix(NxStd::MakeID(\"Matrix\"), List1, List1, corrList)",
        "    id = matrix.create",
        "    ",
        "    return id",
        "}",
        null,
        "// Get value from output header.",
        null,
        "function NxStd::GetOutputValue(objectID, header)",
        "{",
        "    // Verify object and header access.",
        "    ",
        "    ifnot objectID.Exists :",
        "        throw \"\\\"\" + objectID + \"\\\" not found\"",
        null,
        "    ifnot header is \"string\" :",
        "        throw \"\\\"\" + header + \"\\\" used on \\\"\" + objectID + \"\\\" not string\"",
        null,
        "    ifnot objectID.Implements(header + \"Output\") :",
        "        throw \"\\\"\" + header + \"\\\" used on \\\"\" + objectID + \"\\\" not output header\"",
        null,
        "    // Get value",
        "    return objectID.value(header + \"Output\")",
        "}",
        null,
        "// Get value from input header.",
        "function NxStd::GetInputValue(objectID, header)",
        "{",
        "    // Verify object and header access.",
        null,
        "    ifnot objectID.Exists :",
        "        throw \"\\\"\" + objectID + \"\\\" not found\"",
        null,
        "    ifnot header is \"string\" :",
        "        throw \"\\\"\" + header + \"\\\" used on \\\"\" + objectID + \"\\\" not string\"",
        null,
        "    ifnot objectID.Implements(header + \"Input\") :",
        "        return {}",
        null,
        "    // Get value",
        "    return objectID.value(header + \"Input\").canonical",
        "}",
        null,
        "// Create a single index equity.",
        null,
        "function NxStd::MakeInitIndex(Currency,Exchange,Ticker,initial)",
        "{",
        "    obj  = ",
        "	{",
        "        \"id\"     : \"INIT\"+Currency+Exchange+ticker,",
        "        \"name\"   : \"INIT\"+Currency+Exchange+ticker,",
        "        \"object\" : \"INDEX\",",
        "        \"type\"   : \"DATA\",",
        "        //instead of initial, make it look up spot or fixing",
        "        \"DATA\"   : initial",
        "	}",
        null,
        "    // Put in registry and return ID.",
        "    ",
        "    return obj.Create",
        "}",
        null,
        "// Parse table and create list of equities from it (ID is used as an accessor, ",
        "// so do not use as parameter).",
        null,
        "function NxStd::MakeInitialFromTable(tableID)",
        "{",
        "    // Verify table.",
        "    ifnot tableID.exists :",
        "        throw \"\\\"\" + tableID + \"\\\" table not found\"",
        null,
        "    columns = tableID.ColumnHeaders.Canonical",
        null,
        "    ifnot columns.Find(\"EXCHANGE\") :",
        "        throw \"Exchange not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"TICKER\") :",
        "        throw \"Ticker not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"CURRENCY\") :",
        "        throw \"Currency not found in \" + tableID + \"\\\" table\"",
        "    ",
        "	table = Numerix::Load(tableID)",
        "    // Build objects and record IDs.",
        "	",
        "    ids = {}",
        "    foreach row IN table",
        "    {",
        "        // If initial value not provided then look in Spot quote or fixings appropriately.",
        "        ifnot row.Initial",
        "        {",
        "            ",
        "            if TradeDate == Numerix::MarketDate",
        "            {",
        "                //check if a market exists before accessing it",
        "                ifnot NxStd::IsEmptyMarket :",
        "                    rowInitial = Numerix::Quote(\"EQ.\" + row.Currency + \"-\" + row.Exchange + \"-\" + row.Ticker + \".SPOT.\" + QuoteType).Value",
        "                else :",
        "                    rowInitial = 100",
        "            }",
        "            else :",
        "                rowInitial = NxStd::GetFixings(NxStd::EQFixingsID(row.Currency,row.Exchange,row.Ticker),TradeDate)",
        "        }",
        "        else :",
        "            rowInitial = row.Initial",
        null,
        "        ids &= { NxStd::MakeInitIndex(row.Currency, row.Exchange, row.Ticker, rowInitial) }",
        "    }",
        null,
        "    table = Numerix::Table(NxStd::MakeID(\"table\"), {\"ID\"}, {ids})",
        "    id = table.create",
        "    ",
        "    return id",
        "}",
        null,
        "// Create a single index equity.",
        null,
        "function NxStd::MakeSingleEquity(currency,ticker,exchange)",
        "{",
        "    obj  = ",
        "        {",
        "            \"ID\"       : Currency+Exchange+Ticker,",
        "            \"NAME\"     : Currency+Exchange+Ticker,",
        "            \"OBJECT\"   : \"INDEX\",",
        "            \"TYPE\"     : \"EQUITY\",",
        "            \"CURRENCY\" : currency,",
        "            \"FIXINGS\"  : NxStd::EQFixingsID(Currency,Exchange,Ticker)",
        "        }",
        null,
        "    // Put in registry and return ID.",
        null,
        "    id = obj.create",
        "    ",
        "    return id",
        "}",
        null,
        "// Parse table and create list of equities from it (ID is used as an accessor, ",
        "// so do not use as parameter).",
        null,
        "function NxStd::MakeEquitiesFromTable(tableID)",
        "{",
        "    // Verify table.",
        "	",
        "    ifnot tableID.exists :",
        "        throw \"\\\"\" + tableID + \"\\\" table not found\"",
        null,
        "    columns = tableID.ColumnHeaders.Canonical",
        "    ",
        "    ifnot columns.Find(\"EXCHANGE\") :",
        "        throw \"Exchange not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"TICKER\") :",
        "        throw \"Ticker not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"CURRENCY\") :",
        "        throw \"Currency not found in \" + tableID + \"\\\" table\"",
        null,
        "     // Build objects and record IDs.",
        null,
        "	table = Numerix::Load(tableID)	",
        "    ids = {}",
        "    foreach row in table :",
        "        ids &= {NxStd::MakeSingleEquity(row.Currency, row.Ticker, row.Exchange)}",
        null,
        "    table = Numerix::Table(NxStd::MakeID(\"table\"), {\"ID\"}, {ids})",
        "    id = table.create",
        "    ",
        "    return id",
        "}",
        null,
        "// Count number of rows in basket table.",
        null,
        "function NxStd::GetBasketSize(tableID)",
        "{",
        "	table = Numerix::Load(tableID)	",
        "	",
        "	i = 0",
        "	",
        "	foreach row in table :",
        "		i+=1",
        "	",
        "    return i",
        "}",
        null,
        "// Get fixings at a data from a Fixings object.",
        null,
        "function NxStd::GetFixings(objectID, dateValue)",
        "{",
        "     date = dateValue // Create local version that can be queried",
        null,
        "     // Verify object.",
        "	 ",
        "    fixings = Numerix::Registry(objectID)",
        "    if not fixings",
        "	{",
        "        return Numerix::SetFatal(\"\\\"\" + objectID + \"\\\" fixings object not found\")",
        "    }",
        "    if date.Type <> \"DATE\"",
        "	{",
        "        date = Numerix::Date(date)",
        "        if date.Type <> \"DATE\"",
        "		{",
        "            return Numerix::SetFatal(\"\\\"\" + date + \"\\\" not date\")",
        "        }",
        "    }",
        "	 ",
        "    // Find specific date and return value.",
        "	 ",
        "    dates = fixings.Dates",
        "    ifnot dates is \"LIST\":",
        "        dates = {dates}",
        "    loc = dates.Find(date)",
        "    if not loc",
        "	{",
        "        return Numerix::SetFatal(\"\\\"\" + date +  \"\\\" not found in fixings object  \\\"\" + objectID + \"\\\"\")",
        "    }",
        null,
        "    return fixings.At[loc].FixingValue",
        "}",
        null,
        null,
        "// Returns true if the the specified version is before or equal to the current ",
        "// CrossAsset version.",
        null,
        "function NxStd::CompareVersion(ver)",
        "{",
        "    nx_ver = Numerix::Version().Split(\" \")[1]",
        "    if nx_ver[1..1] == \"v\" :",
        "        nx_ver = nx_ver[2..nx_ver.Size]",
        "    ",
        "	nx_version_strs = nx_ver.Split(\".\")",
        "	version_strs = ver.Split(\".\")",
        "	",
        "	nx_version = {0, 0, 0, 0}",
        "	version = {0, 0, 0, 0}",
        "	for i = 1 to nx_version_strs.Size",
        "	{",
        "	    try",
        "		{",
        "		    val = nx_version_strs[i].Type(\"integer\")",
        "			nx_version[i] = val",
        "		}",
        "		catch ",
        "		{",
        "		}",
        "	}",
        "	for i = 1 to version_strs.Size",
        "	{",
        "	    try ",
        "		{",
        "		    val = version_strs[i].Type(\"integer\")",
        "			version[i] = val",
        "		}",
        "		catch ",
        "		{",
        "		}",
        "	}",
        "    for i = 1 to 4",
        "	{",
        "	    if version[i] < nx_version[i] :",
        "		    return true ",
        null,
        "	    if version[i] > nx_version[i] :",
        "		    return false",
        "    }",
        "	",
        "	return true",
        "}",
        null,
        "// Creates a Data Index object.",
        null,
        "function NxStd::DataIndexObj(fn_indexName, fn_dataValue, fn_eventName=\"\", fn_interp=\"FLATRIGHT\")",
        "{",
        "    call = Numerix::Object({\"DataIndex\" + Numerix::UniqueNumber, \"INDEX\", \"DATA\"}) & ",
        "    {",
        "		\"name\" : fn_indexName,",
        "        \"data\" : fn_dataValue",
        "    }",
        null,
        "    ifnot fn_dataValue IS \"DOUBLE\"",
        "    {",
        "        if fn_eventName:",
        "            call &= {\"events\" : fn_eventName}",
        "        else:",
        "            call &= {\"interp\" : fn_interp}",
        "    }",
        "        ",
        "    return call.Create		",
        "}",
        null,
        "// Create a date linked table.",
        null,
        "function NxStd::DateLinkedTable(fn_Refevent, fn_dataValue, DateString=\"FIXDATE\")",
        "{",
        "    ifnot fn_Refevent:",
        "        throw \"\\\"\" + fn_Refevent + \"\\\" not found\"",
        "    ",
        "    try{",
        "       refDates = Numerix::Date(Numerix::query(fn_Refevent, DateString + \"=<Date>\", \"Date\").DATE)",
        "    }",
        "    catch error",
        "    {",
        "        throw \"\\\"\" + fn_Refevent + \"\\\" format not supoorted\"",
        "    }",
        "    ",
        "    ifnot refDates is \"LIST\":",
        "        refDates = {refDates}",
        "    else:",
        "        refDates = refDates.sort()",
        "    ",
        "    if fn_dataValue is \"DOUBLE\":",
        "        vals = fn_dataValue.copy(refDates.size)",
        "    else:",
        "        vals = fn_dataValue.load.value",
        "    ",
        "    if vals.size != refDates.size:",
        "        throw \"\\\"\" + fn_Refevent + \"\\\" is not match the size of the data\"",
        "        ",
        "    return Numerix::Table(NxStd::MakeID(\"table\"), {\"DATE\",\"VALUE\"}, {refDates, vals}).create",
        "}",
        null,
        "// Creates a Formula Index object.",
        null,
        "function NxStd::FormulaIndexObj(fn_indexName, fn_Formula, fn_eventName=\"\")",
        "{",
        "    call = Numerix::Object({fn_indexName + Numerix::UniqueNumber, \"INDEX\", \"FORMULA\"}) &",
        "    {",
        "        \"name\"     : fn_indexName,",
        "        \"formula\"  : fn_Formula,",
        "        \"events\"   : fn_eventName",
        "    }",
        "    return call.Create",
        "}",
        null,
        "// Creates a split Formula Index object.",
        null,
        "function NxStd::SplitFormulaIndexObj(fn_indexName, fn_Formula_table_id, fn_currency, fn_eventName=\"\")",
        "{",
        "    call = Numerix::Object({fn_indexName + Numerix::UniqueNumber, \"INDEX\", \"SPLIT FORMULA\"}) &",
        "    {",
        "        \"name\"          : fn_indexName,",
        "        \"formula table\" : fn_Formula_table_id,",
        "        \"currency\"      : fn_currency,",
        "        \"events\"        : fn_eventName",
        "    }",
        "    return call.Create",
        "}",
        null,
        "// Creates a Memory Index object.",
        null,
        "constfunction NxStd::MemoryIndexObj(fn_indexName, fn_currency, fn_obs_index, fn_obs_event, fn_FirstFixingOnly, fn_periodsBack=\"\")",
        "{",
        "    call = Numerix::Object({fn_indexName + Numerix::UniqueNumber, \"INDEX\", \"MEMORY\"}) &",
        "    {",
        "        \"name\"              : fn_indexName,",
        "        \"currency\"          : fn_currency,",
        "        \"observed index\"    : fn_obs_index,",
        "        \"observation events\": fn_obs_event,",
        "        \"first fixing only\" : fn_FirstFixingOnly,",
        "        \"periods back\"      : fn_periodsBack",
        "    }",
        "    return call.Create",
        "}",
        null,
        "// Create an index array object",
        "function NxStd::ArrayIndexObj(fn_indexname, fn_indices)",
        "{",
        "    call = Numerix::Object({fn_indexname + \"ArrayIndex\", \"INDEX\", \"ARRAY\"}) &",
        "    {",
        "        \"name\"    : fn_indexname,",
        "        \"indices\" : fn_indices",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        null,
        "//Creates a single events object",
        null,
        "function NxStd::SingleEventObj(fn_eventName, fn_date, fn_settlementdate=\"\")",
        "{",
        "    if not fn_settlementdate:",
        "    {",
        "        call = Numerix::Object({fn_eventName + Numerix::UniqueNumber, \"EVENTS\", \"SINGLE DATE\"}) & ",
        "        {",
        "        \"name\" : fn_eventName,",
        "        \"dates\" : fn_date",
        "        }",
        "    }",
        "    else:",
        "    {",
        "        call = Numerix::Object({fn_eventName + Numerix::UniqueNumber, \"EVENTS\", \"OPTION DATES\"}) & ",
        "        {",
        "        \"name\" : fn_eventName,",
        "        \"start date\" :fn_date,",
        "        \"paydate\"   : fn_settlementdate",
        "        }",
        "    }",
        "    return call.Create",
        "}",
        null,
        null,
        "//Creates a simple insterest events object",
        null,
        "function NxStd::SimpleInterestEventObj(fn_eventname, fn_date, fn_settlementdate=\"\", fn_schedule=\"\", fn_basis=\"\", fn_freq=\"\", fn_conv=\"\", fn_arrearsreset=false)",
        "{",
        "    if fn_schedule:",
        "        call = Numerix::Object({fn_eventname, \"EVENTS\", \"INTEREST DATES\"}) &",
        "        {",
        "            \"name\"                     : fn_eventname,",
        "            \"basis\"                    : fn_basis,",
        "            \"dates\"                    : fn_schedule",
        "        }",
        "    else:",
        "        call = Numerix::Object({fn_eventname, \"EVENTS\", \"INTEREST DATES\"}) &",
        "        {",
        "            \"name\"                     : fn_eventname,",
        "            \"basis\"                    : fn_basis,",
        "            \"startdate\"                : fn_date,",
        "            \"end date\"                 : fn_settlementdate,",
        "            \"freq\"                     : fn_freq,",
        "            \"arrears reset\"            : fn_arrearsreset,",
        "            \"convention\"               : fn_conv",
        "        }",
        "    return call.create",
        "}",
        null,
        "// Create a composite events object",
        null,
        "function NxStd::CompositeEventObj(fn_eventName, fn_EventList, fn_allow_duplicates = true)",
        "{",
        "    call = Numerix::Object({fn_eventName, \"EVENTS\", \"COMPOSITE\"}) & ",
        "    {",
        "        \"name\"              : fn_eventName,",
        "        \"ALLOW DUPLICATES\"  : fn_allow_duplicates",
        "    }",
        "    ",
        "    list = if fn_eventList is \"LIST\" ? fn_eventList : {fn_eventList}",
        "    foreach l in list:",
        "        if l:",
        "            call &= ",
        "            {",
        "                \"events\"    : l",
        "            }",
        "    return call.Create",
        "}",
        null,
        "// Creates a State Index object.",
        null,
        "constfunction NxStd::StateIndexObj(fn_indexName, fn_eventName)",
        "{",
        "    call = Numerix::Object({\"StateIndex\" + Numerix::UniqueNumber, \"INDEX\", \"STATE\"}) & ",
        "    {",
        "		\"name\" : fn_indexName,",
        "        \"currency\" : Currency,",
        "        \"events\" : fn_eventName",
        "    }",
        "    return call.Create		",
        "}",
        null,
        null,
        "//Converts an amount denominated in one currency into another",
        null,
        "function Nxstd::FXConversion(cash_amount,curr_fro,curr_to)",
        "{",
        "	if curr_fro == curr_to :",
        "		fx_rate = 1",
        "	else :",
        "		fx_rate = NxStd::GetMatrix(NxStd::FXSpotID(curr_fro,curr_to),curr_fro,curr_to)",
        "	",
        "	return cash_amount*fx_rate",
        null,
        "}",
        null,
        "function NxStd::DirectFXPair(base_ccy, term_ccy)",
        "{",
        "    if Numerix::KeyExists(\"Settings.CurrencyPair\", base_ccy+term_ccy):",
        "        return not(Numerix::GetSettings(\"Settings.CurrencyPair\",base_ccy+term_ccy,\"Is Quotation Derived\"))",
        null,
        "    return false ",
        "}",
        null,
        "function NxStd::IndirectFXPair(base_ccy, term_ccy)",
        "{",
        "    if Numerix::KeyExists(\"Settings.CurrencyPair\", base_ccy+term_ccy):",
        "        return Numerix::GetSettings(\"Settings.CurrencyPair\",base_ccy+term_ccy,\"Is Quotation Derived\")",
        null,
        "    return false ",
        "}",
        null,
        null,
        "//Returns a cash flow table with Cash Flow Date, Cash Flow Amount, Cash Flow Currency",
        null,
        "function Nxstd::CFTable(cf_obj,date_header,amt_header, cf_curr)",
        "{",
        "	dateCol = cf_obj.view(date_header)",
        "	amountCol = cf_obj.view(amt_header)",
        "	",
        "	list1=dateCol",
        "	list2={}",
        "	list3=amountCol",
        "	",
        "	foreach row in dateCol",
        "	{",
        "		list2@=cf_curr",
        "	}",
        "	",
        "	cfTable = Numerix::Table(\"CFTable\" + Numerix::UniqueNumber, {\"Cash Flow Date\",\"Cash Flow Currency\",\"Cash Flow Amount\"}, {list1,list2,list3}) ",
        "    id = cfTable.Create",
        "	return id",
        "}",
        null,
        "//Returns a cash flow table with Cash Flow Date, Cash Flow Amount",
        "function Nxstd::CFTableBills(date1,date2,amount1,amount2)",
        "{",
        "	list1={}",
        "	list2={}",
        "	",
        "	list1@=date1",
        "	list1@=date2",
        "	",
        "	list2@=amount1",
        "	list2@=amount2",
        "	",
        "	cfTable = Numerix::Table(\"CFTable\" + Numerix::UniqueNumber, {\"Cash Flow Date\",\"Cash Flow Amount\"}, {list1,list2}) ",
        "    id = cfTable.Create",
        "	return id",
        "}",
        null,
        "//returns the value for a market quote - if it exists.",
        "function NxStd::MarketQuoteValue(key1)",
        "{",
        "    ifnot key1:",
        "        return \"\"",
        "    ",
        "	query = \"NAME=\"+key1",
        "	",
        "	dataTable = NxStd::Query(query,\"NAME\")",
        "	",
        "	if dataTable :",
        "		return Numerix::Quote(key1).Value",
        "	",
        "	return \"\"",
        null,
        "}",
        null,
        "function NxStd::GetInterpSpread(spread, date, cc_variant = \"\")",
        "{",
        "	// to avoid negative sprea",
        "	return NxStd::GetImpliedVol(spread, date, 1) - 1",
        "}",
        null,
        "//*****************************************************************************",
        "// Standard RSF Utility Functions",
        "//*****************************************************************************",
        null,
        "function NxStd::GenPricingDimensionTable(scenScriptList, multiDim)",
        "{	",
        "	tempList = \"SCENARIOS\"",
        "	",
        "	// If multidimensional scenarios, then create a table treating each scenario script as a separate dimension ",
        "	// i.e. scenarios would be applied on top of each other generating a multidimensional matrix with each script representing a dimension.",
        "	",
        "	if multiDim",
        "	{",
        "		tempList = tempList.Copy(scenScriptList.Size)",
        "		scenDimTable = {tempList, scenScriptList}",
        "		",
        "		// Generate the final table for \"PRICING DIMENSIONS\" in the market report.",
        "		",
        "		pdTable = Numerix::Table(\"PDtable\", {\"TYPE\", \"ID\"}, scenDimTable)",
        "		return Numerix::Create(PDTable).LocalID",
        "	}",
        "	else ",
        "	{",
        "		// Otherwise each script will run individually.",
        null,
        "		scenarioScriptsTable = Numerix::Table(\"ScenarioScriptsTable\", \"ID\", scenScriptList.Transpose)",
        "		scenarioScriptsTable = Numerix::Create(scenarioScriptsTable)",
        "		scenDimTable =  {\"SCENARIOS\", scenarioScriptsTable.LocalID}",
        "		",
        "		// Generate the final table for \"PRICING DIMENSIONS\" in the market report.",
        "		",
        "		pdTable = Numerix::Table(\"PDtable\", {\"TYPE\", \"ID\"}, scenDimTable.Transpose)",
        "		return Numerix::Create(PDTable).LocalID",
        "	}",
        "}",
        null,
        "function NxStd::GenMarketReport(objID, scenariosTableID, measures, trace = \"\", traceDir = \"\")",
        "{",
        "	if scenariosTableID",
        "	{	",
        "		call = ",
        "		{",
        "			\"ID\"                : objID,",
        "			\"OBJECT\"            : \"MARKET\",",
        "			\"TYPE\"              : \"REPORT\",",
        "			\"PRICEABLETRADES\"   : Trades,",
        "			\"MARKETS\"           : Market,",
        "			\"PIVOTTABLEOUTPUT\"  : true,",
        "			\"USEEVALUATOR\"		: false,",
        "			\"TRACE\"				: trace,",
        "			\"TRACEDIRECTORY\"	: traceDir,",
        "			\"CLEANUP\"           : true,",
        "            \"USENULLTRADE\"		: false,",
        "            \"EXECUTE PRICING REQUESTS ONCE\" : true,",
        "			\"CONSTANTS\"         : ConstantsTable,",
        "			\"PRICING DIMENSIONS\": scenariosTableID,",
        "			\"PRICINGREQUESTS\"   : measures,	",
        "			\"SCRIPTDEFINITIONS\" : \"script.nxrsf\" ",
        "		}",
        "		id = Numerix::Create(Numerix::Object(call))",
        "	}",
        "	else",
        "	{",
        "		call = ",
        "		{",
        "			\"ID\"                : objID,",
        "			\"OBJECT\"            : \"MARKET\",",
        "			\"TYPE\"              : \"REPORT\",",
        "			\"PRICEABLETRADES\"   : Trades,",
        "			\"MARKETS\"           : Market,",
        "			\"PIVOTTABLEOUTPUT\"  : true,",
        "			\"CLEANUP\"           : true,",
        "			\"USEEVALUATOR\"		: false,			",
        "			\"TRACE\"				: trace,",
        "			\"TRACEDIRECTORY\"	: traceDir,",
        "			\"USENULLTRADE\"		: false,",
        "            \"EXECUTE PRICING REQUESTS ONCE\" : true,",
        "			\"CONSTANTS\"         : ConstantsTable,",
        "			\"PRICINGREQUESTS\"   : measures,	",
        "			\"SCRIPTDEFINITIONS\" : \"script.nxrsf\" ",
        "		}",
        "		id = Numerix::Create(Numerix::Object(call))",
        "	}",
        "    return id",
        "}",
        null,
        "//=============================================================================",
        "// STANDARD MARKET DATA ELEMENT ACCESS FUNCTIONS",
        "//=============================================================================",
        null,
        "//",
        "//  CMDTY",
        "//",
        null,
        "// Returns the ID of the CMDTY forward curve to use.",
        null,
        "function NxStd::CommoditySpotPriceID(cmdty_currency, cmdty_exchange, cmdty_symbol, cmdty_variant = \"\")",
        "{",
        "    cp = \"CMDTY.\" + cmdty_currency + \"-\" + cmdty_exchange + \"-\" + cmdty_symbol + \".SPOT.\" + QuoteType",
        "    return cp.Canonical",
        "}",
        null,
        "function NxStd::CommodityForwardCurveID(cmdty_currency, cmdty_exchange, cmdty_symbol, cmdty_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._CommodityForwardCurveID(Numerix::BaseMarket, QuoteType, cmdty_currency, cmdty_exchange, cmdty_symbol, cmdty_variant)",
        "}",
        null,
        "// Returns the ID of the CMDTY volatility surface to use.",
        null,
        "function NxStd::CommodityVolatilitySurfaceID(cmdty_currency, cmdty_exchange, cmdty_symbol, cmdty_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._CommodityVolatilitySurfaceID(Numerix::BaseMarket, QuoteType, cmdty_currency, cmdty_exchange, cmdty_symbol, cmdty_variant)",
        "}",
        null,
        "// Returns the ID of the CMDTY future Spot Price to use.",
        null,
        "function NxStd::CommodityFutureSpotPriceID(cmdty_fut_currency, cmdty_fut_exchange, cmdty_fut_ticker, cmdty_fut_maturityCode, cmdty_variant = \"\")",
        "{",
        "    dc = \"CMDTY.\" + cmdty_fut_currency + \"-\" + cmdty_fut_exchange + \"-\" + cmdty_fut_ticker + \".FUT.\" + cmdty_fut_maturityCode + \".\" + QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        "//",
        "//  EQ",
        "//",
        "// Returns the ID of the EQ Spot Price to use.",
        null,
        "function NxStd::EquitySpotPriceID(eq_currency, eq_exchange, eq_ticker, eq_variant = \"\")",
        "{",
        "    dc = \"EQ.\" + eq_currency + \"-\" + eq_exchange + \"-\" + eq_ticker + \".SPOT.\"+QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        "// Returns the ID of the EQ future Spot Price to use.",
        null,
        "function NxStd::EquityFutureSpotPriceID(eq_fut_currency, eq_fut_exchange, eq_fut_ticker, eq_fut_maturityCode, eq_variant = \"\")",
        "{",
        "    dc = \"EQ.\" + eq_fut_currency + \"-\" + eq_fut_exchange + \"-\" + eq_fut_ticker + \".FUT.\" + eq_fut_maturityCode + \".\" + QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        "// Returns the ID of the EQ dividend curve to use.",
        null,
        "function NxStd::DividendCurveID(eq_currency, eq_exchange, eq_ticker, eq_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._DividendCurveID(Numerix::BaseMarket, QuoteType, eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "}",
        null,
        "// Returns the ID of the EQ volatility surface to use.",
        null,
        "function NxStd::EquityVolatilitySurfaceID(eq_currency, eq_exchange, eq_ticker, eq_variant = \"\")",
        "{",
        " 	return \"NXGLOBAL\"._EquityVolatilitySurfaceID(Numerix::BaseMarket, QuoteType, eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "}",
        null,
        "// Returns the ID of the EQ volatility spread curve to use.",
        null,
        "function NxStd::VolatilitySpreadCurveID(eq_currency, eq_exchange, eq_ticker, eq_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._VolatilitySpreadCurveID(Numerix::BaseMarket, QuoteType, eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "}",
        null,
        "//",
        "// FX",
        "//",
        null,
        "// Returns the ID of FX Spot object. Stable for a given currency pair.",
        null,
        "function NxStd::FXSpotID(fx_base_currency, fx_term_currency, fx_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._FXSpotID(Numerix::BaseMarket, QuoteType, fx_base_currency, fx_term_currency, fx_variant)",
        "}",
        null,
        "// Returns the ID of FX Discount Curve.",
        null,
        "function NxStd::FXDiscountCurveID(dc_currency, dc_counter_currency, dc_index, dc_index_tenor, fx_variant = \"\")",
        "{",
        " 	return \"NXGLOBAL\"._FXDiscountCurveID(Numerix::BaseMarket, QuoteType, dc_currency, dc_counter_currency, dc_index, dc_index_tenor, fx_variant)",
        "}",
        null,
        "// Returns the ID of FX Volatility Surface",
        null,
        "function NxStd::FXVolatilitySurfaceID(fx_base_currency, fx_term_currency, fx_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._FXVolatilitySurfaceID(Numerix::BaseMarket, QuoteType, fx_base_currency, fx_term_currency, fx_variant)",
        "}",
        null,
        "function NxStd::FXFutureSpotPriceID(base_ccy, term_ccy, exchange, maturity, fx_variant = \"\")",
        "{",
        "    dc = \"FX.\" + base_ccy+ term_ccy + \"-\" + exchange + \".FUT.\" + maturity + \".\" + QuoteType",
        "    return dc.Canonical",
        "}   ",
        null,
        "//",
        "// CC",
        "//",
        null,
        "// Returns the ID of Cross Currency Discount Curve object to use.",
        null,
        "function NxStd::CCDiscountCurveID(dc_currency, dc_counter_currency, dc_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._CCDiscountCurveID(Numerix::BaseMarket, QuoteType, dc_currency, dc_counter_currency, dc_variant)",
        "}",
        null,
        "function NxStd::XccySpreadInterpID(std_currency, std_index, std_index_tenor, tgt_currency, tgt_index, tgt_index_tenor, cc_variant = \"\")",
        "{",
        "	c = \"IR.\"+tgt_currency+\"-\"+tgt_index+\"-\"+tgt_index_tenor+\"/\"+std_currency+\"-\"+std_index+\"-\"+std_index_tenor+\".BASIS.SPREAD\"",
        "	",
        "	return c.Canonical",
        "}",
        null,
        "//",
        "//  IR",
        "//",
        null,
        "// Returns the ID of the IR discount curve to use.",
        null,
        "function NxStd::DiscountCurveID(dc_currency, dc_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._DiscountCurveID(Numerix::BaseMarket, QuoteType, dc_currency, dc_variant)",
        "}",
        null,
        "// Returns the ID of the IR projection curve to use.",
        null,
        "function NxStd::ProjectionCurveID(pc_currency, pc_index, pc_index_tenor, pc_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._ProjectionCurveID(Numerix::BaseMarket, QuoteType, pc_currency, pc_index, pc_index_tenor, pc_variant)",
        "}",
        null,
        "// Returns the ID of the STIR future Spot Price to use.",
        null,
        "function NxStd::RateFutureSpotPriceID(ir_fut_currency, ua_index, ua_index_tenor, ir_fut_exchange, ir_fut_ticker, ir_fut_maturityCode, ir_variant = \"\")",
        "{",
        "    dc = \"IR.\" + ir_fut_currency + \"-\" + ua_index + \"-\" + ua_index_tenor + \".\" + ir_fut_exchange + \"-\" + ir_fut_ticker + \".STIR-FUT.\" + ir_fut_maturityCode + \".PRICE.\" + QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        "// Returns the ID of the STIR future convexity to use.",
        null,
        "function NxStd::RateFutureConvexityID(ir_fut_currency, ua_index, ua_index_tenor, ir_fut_exchange, ir_fut_ticker, ir_fut_maturityCode, ir_variant = \"\")",
        "{",
        "    dc = \"IR.\" + ir_fut_currency + \"-\" + ua_index + \"-\" + ua_index_tenor + \".\" + ir_fut_exchange + \"-\" + ir_fut_ticker + \".STIR-FUT.\" + ir_fut_maturityCode + \".CONVEXITY.\" + QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        "// Returns the ID of the Bond future Spot Price to use.",
        "// Same logic as NxStd::BondFuturesConventionID function",
        "function NxStd::BondFutureSpotPriceID(bd_fut_currency, bd_fut_exchange, bd_fut_ticker, bd_fut_maturityCode, bd_countryCode, bd_variant = \"\")",
        "{",
        "    if bd_variant == \"\"",
        "    {",
        "        iso2 = bd_countrycode",
        "        bond_type = Numerix::GetSettings(\"Settings.Currency\",bd_fut_currency,\"BONDTYPE\")",
        "    }",
        "    else",
        "    {",
        "        iso2 = bd_countrycode",
        "        bond_type = conv_variant",
        "    }",
        "    ",
        "    dc = \"IR.\" + bd_fut_currency + \"-\" + iso2 + \"-\" + bond_type + \".\" + bd_fut_exchange + \"-\" + bd_fut_ticker + \".BOND-FUT.\" + bd_fut_maturityCode + \".PRICE.\" + QuoteType",
        "    return dc.Canonical",
        "}",
        null,
        "function NxStd::ESunCSAFundingSpread(_FundingSpread=\"\", _Basis=\"ACT/ACT\", _ComponudingType=\"CONTINUOUS\")",
        "{",
        "    if _FundingSpread.Size == 0:",
        "        return \"\"",
        "    ",
        "    fs = Numerix::Object({\"CSAFundingSpread\", \"market data\", \"yield\"}) & ",
        "    {",
        "        \"nowdate\"          : Numerix::MarketDate,",
        "        \"currency\"         : Currency,",
        "        \"basis\"            : _Basis,",
        "        \"rate/dividend\"    : _FundingSpread,",
        "        \"compounding type\" : _ComponudingType",
        "    }",
        "    ",
        "    id = fs.Create",
        "    return id",
        "}",
        null,
        "// Returns the ID of the CSA Discounting Curve",
        "function NxStd::CSADiscountCurveID(csac_currency, csac_cp, csac_le,csac_ns,csac_ms, csac_variant = \"\")",
        "{",
        "    csa_curve = NxStd::NettingSetCSACurve(csac_cp,csac_le,csac_ns)",
        "    ",
        "    //if a CSA Curve is specified at the nettingset level, check if the currency is the same as the pricing/expsoure currency; if not, make it a CSA curve name.",
        "    if csa_curve :",
        "        if csa_curve[4..6].Canonical == csac_currency.Canonical :",
        "            return csa_curve",
        "        else :",
        "            return csa_curve.localid + \".CSA.\"+csac_currency+\"/\"+csa_curve[4..6]",
        "    ",
        "    //get the counterparty reference data instance",
        "    ref_data = Numerix::Resolve(\"ReferenceData.Instance.\"+csac_cp)",
        "        margin_set = ref_data.MarginSet",
        "        ",
        "        lelist = margin_set.LegalEntity",
        "        nslist = margin_set.NettingSet",
        "        mslist = margin_set.MarginSet",
        "        curvelist = margin_set.CSACurve",
        "        ",
        "        //this is to get the total size of the Margin Set Table, since each row in this table requires a collateral currency",
        "        cclist = margin_set.CollateralCurrency",
        "        ",
        "        le_matched = false",
        "        ns_matched = false",
        null,
        "        list_size = if cclist is \"LIST\" ? cclist.Size : 1",
        null,
        null,
        "    for i = 1 to list_size",
        "    {",
        "        //if we had already found a match for legal entity and the current row has a legal entity entry, reset the match to false.",
        "        if le_matched : if lelist[i] : ",
        "            le_matched = false ",
        null,
        "        if lelist[i].Canonical == csac_le.Canonical :",
        "            le_matched = true",
        "        if le_matched : if nslist[i].Canonical == csac_ns.Canonical",
        "        {",
        "            ns_matched = true",
        "            multiplecollateral = false",
        "            ",
        "            //find out if we only have 1 collateral currency.  If yes, use the curve specified here.  Otherwise, BREAK, and send it to marketpolicy",
        "            ifnot i == list_size : ifnot nslist[i+1] : ifnot mslist[i+1] :",
        "                multiplecollateral = true",
        "           ",
        "            ifnot multiplecollateral",
        "            {",
        "                curve_id = curvelist[i]",
        "                ",
        "                if curve_id[4..6].Canonical == csac_currency :",
        "                    return curve_id",
        "                else :",
        "                    return curve_id.localid + \".CSA.\"+csac_currency+\"/\"+curve_id[4..6]    ",
        "            } ",
        "            break",
        "        }",
        "    }",
        "    ",
        "    // If we have a market policy, use it. It will throw if no policy match is obtained.   ",
        "    policy = \"MARKETPOLICY.INSTANCE\"",
        "	if Numerix::Exists(policy) :",
        "	    return policy._CSADiscountCurveID(csac_currency.Canonical, csac_cp.Canonical, csac_le.Canonical,csac_ns.Canonical,csac_ms.Canonical, csac_variant.Canonical)",
        null,
        "    // If we cannot use a market policy, fall back on settings.",
        null,
        "    csac = \"IR.\"+csac_currency+\".\"+csac_cp+\".\"+csac_le+\".\"+csac_ns+\".\"+csac_ms",
        "        ",
        "    return csac.Canonical",
        "}",
        null,
        "//checks whether CSA Discounting should be used.  Returns true if to enable CSA Discounting, false to disable.",
        "//Conditions:",
        "//Case 1: if there is no Netting Set (i.e. Netting Set = Trade ID), false",
        "//Case 2: if the CSA Discounting Curve Field for the Netting Set is defined, true",
        "//Case 3: if there is no Margin Set (i.e. Margin Set = Residual), false",
        "//Case 4: if there are multiple Margin Sets under the Trade Netting Set, false",
        "//Default: true (Single Margin Set; single or multiple collateral currency).",
        "function NxStd::CheckCounterparty(fn_id,fn_cp,fn_le,fn_ns,fn_ms)",
        "{   ",
        "    trade_id = fn_id",
        "    cp = fn_cp",
        "    le = fn_le",
        "    ns = fn_ns",
        "    ms = fn_ms",
        "    //if netting set is equal to trade ID, return false",
        "    if trade_id == ns :",
        "        return false",
        "    ",
        "    //if the Netting Set CSA Curve is supplied, use it.",
        "    if NxStd::NettingSetCSACurve(cp,le,ns) :",
        "        return true ",
        "    ",
        "    //if margin set is equal to residual, return false",
        "    if ms ==#\"RESIDUAL\" :",
        "        return false",
        "    ",
        "    //only returns true if the netting set info is defined.",
        "    if Numerix::TryResolve(\"ReferenceData.Instance.\"+cp)",
        "    {",
        "        //get the counterparty reference data instance",
        "        ref_data = Numerix::Resolve(\"ReferenceData.Instance.\"+cp)",
        "        ",
        "        ",
        null,
        "        margin_set = ref_data.MarginSet",
        "        ",
        "        lelist = margin_set.LegalEntity",
        "        nslist = margin_set.NettingSet",
        "        mslist = margin_set.MarginSet",
        "        ",
        "        //this is to get the total size of the Margin Set Table, since each row in this table requires a collateral currency",
        "        cclist = margin_set.CollateralCurrency",
        "        ",
        "        le_matched = false",
        "        ns_matched = false",
        null,
        "        list_size = if cclist is \"LIST\" ? cclist.Size : 1",
        "        ",
        "        //let's find the netting set first",
        "        for i = 1 to list_size",
        "        {",
        "            //if we had already found a match for legal entity and the current row has a legal entity entry, reset the match to false.",
        "            if le_matched : if lelist[i] : ",
        "                le_matched = false ",
        null,
        "            if lelist[i].Canonical == le :",
        "                le_matched = true",
        "            ",
        "            if le_matched : if nslist[i].Canonical == ns",
        "            {",
        "                ns_matched = true",
        "            }",
        "            ",
        "            ",
        "            if le_matched : if ns_matched",
        "            {",
        "                //found the netting set, now check if there are more than 1 margin sets under this netting set",
        null,
        "                ",
        "                //if this is the last row of the table, then it must be single margin set.",
        "                if i = list_size :",
        "                    return true",
        "                                ",
        "                //when the netting set is not specified but the margin set is specified, it means there are more than 1 margin set",
        "                ifnot nslist[i] : if mslist[i] :",
        "                    return false",
        "        ",
        "                //now, we have found the netting set; if the current netting set is not empty and is not equal to the netting set we are looking for, then return true (since we didn't find more than 1 margin set)",
        "                if nslist[i] : ifnot nslist[i].Canonical == ns :",
        "                    return true",
        "                ",
        "                //go to the next loop",
        "                continue",
        "            }",
        "                        ",
        "            if ns_matched : ifnot le_matched :",
        "                break",
        "                ",
        "        }",
        "        ",
        "        ifnot ns_matched",
        "        {",
        "            Numerix::SetMajor(\"Netting Set \" + ns+ \" not found for Counterparty \" + cp+\", legal entity \"+le)",
        "            return false            ",
        "        }",
        "    }",
        "    //if no reference data found, return false",
        "    else",
        "    {",
        "        Numerix::SetMajor(\"Counterparty \"+cp+\" data not found\")",
        "        return false",
        "    }",
        "    ",
        "    //this should correspond to the case of a single margin set, 1 or more collateral currency case.",
        "    ",
        "    return true   ",
        "}",
        null,
        "//Retrieves the ID of the CSA Discounting Curve under the Netting Set table of the CSA Info.",
        "function NxStd::NettingSetCSACurve(fn_cp,fn_le,fn_ns)",
        "{",
        "    if Numerix::TryResolve(\"ReferenceData.Instance.\"+fn_cp)",
        "    {",
        "        //get the counterparty reference data instance",
        "        ref_data = Numerix::Resolve(\"ReferenceData.Instance.\"+fn_cp)",
        "               ",
        "        netting_set = ref_data.NettingSet",
        "        ",
        "        lelist = netting_set.LegalEntity",
        "        nslist = netting_set.NettingSet    ",
        "        csa_curve = netting_set.CSADiscountingCurve",
        null,
        "        le_matched = false",
        "        ns_matched = false",
        null,
        "        list_size = if nslist is \"LIST\" ? nslist.Size : 1",
        null,
        "        for i = 1 to list_size",
        "        {",
        "            //if we had already found a match for legal entity and the current row has a legal entity entry, reset the match to false.",
        "            if le_matched : if lelist[i] : ",
        "                le_matched = false ",
        null,
        "            if lelist[i].Canonical == fn_le.Canonical :",
        "                le_matched = true",
        "            if le_matched : if nslist[i].Canonical == fn_ns.Canonical",
        "            {",
        "                //found the netting set row, return the CSA Discounting Curve field",
        "                ns_matched = true",
        "                return csa_curve[i]",
        "                break",
        "            }",
        "        }    ",
        "        ",
        "        ifnot ns_matched :",
        "            Numerix::SetMajor(\"Netting Set \" + fn_ns+ \" not found for Counterparty \" + fn_cp+\", legal entity \"+fn_le)",
        "            ",
        "    }",
        "    //if no reference data found, return false",
        "    else",
        "    {",
        "        Numerix::SetMajor(\"Counterparty \"+fn_cp+\" data not found\")",
        "        return false",
        "    }",
        "    return \"\"         ",
        "}",
        null,
        "//Returns the ID of the Bond Curve to use",
        null,
        "function NxStd::BondCurveID(bc_currency,bc_issuer, bc_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._BondCurveID(Numerix::BaseMarket, QuoteType, bc_currency,bc_issuer, bc_variant)",
        "}",
        null,
        null,
        "// Returns the ID of the IR cap volatility surface to use.",
        null,
        "function NxStd::CapVolatilitySurfaceID(cv_currency, cv_index, cv_index_tenor, cv_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._CapVolatilitySurfaceID(Numerix::BaseMarket, QuoteType, cv_currency, cv_index, cv_index_tenor, cv_variant)",
        "}",
        null,
        "// Returns the ID of the IR swaption volatility surface to use.",
        null,
        "function NxStd::SwaptionVolatilitySurfaceID(sv_currency, sv_index, sv_index_tenor, sv_strike = \"ATM\", sv_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._SwaptionVolatilitySurfaceID(Numerix::BaseMarket, QuoteType, sv_currency, sv_index, sv_index_tenor, sv_strike, sv_variant)",
        "}",
        null,
        "//",
        "// INFL",
        "//",
        null,
        "// Returns the ID of Zero Coupon Inflation Swap Curve object to use.",
        null,
        "function NxStd::ZCIISCurveID(infl_currency, infl_index, dc_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._ZCIISCurveID(Numerix::BaseMarket, QuoteType, infl_currency, infl_index, dc_variant)",
        "}",
        null,
        null,
        "//",
        "// CR",
        "//",
        null,
        "// Returns the ID of CDS Curve object to use.",
        null,
        "function NxStd::CDSCurveID(cc_currency, cc_reference_entity, cc_debt_type, cc_restructuring_clause, cc_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._CDSCurveID(Numerix::BaseMarket, QuoteType, cc_currency, cc_reference_entity, cc_debt_type, cc_restructuring_clause, cc_variant)",
        "}",
        null,
        "// Returns the ID of CDS Recovery object to use.",
        "function NxStd::CDSRecoveryID(cc_currency, cc_reference_entity, cc_debt_type, cc_restructuring_clause, cc_variant = \"\")",
        "{",
        "    if cc_variant : // variant is CDX spread (double value)",
        "		cc = \"CR.\"+cc_currency+\"-\"+cc_reference_entity+\"_\"+cc_debt_type+\"_\"+cc_restructuring_clause+\"_\"+cc_variant+\"-.\"+QuoteType",
        "	else :",
        "		cc = \"CR.\"+cc_currency+\"-\"+cc_reference_entity+\"_\"+cc_debt_type+\"_\"+cc_restructuring_clause+\".\"+QuoteType",
        "    return cc",
        "}",
        null,
        "// Returns the ID of Bond Curve object to use.",
        null,
        "function NxStd::CreditBondCurveID(cr_currency, cr_issuer, cc_variant = \"\")",
        "{",
        " 	return \"NXGLOBAL\"._CreditBondCurveID(Numerix::BaseMarket, QuoteType, cr_currency, cr_issuer, cc_variant)",
        "}",
        null,
        "// Returns the ID of Credit Curve Factory object to use.",
        null,
        "function NxStd::CreditCurveFactoryID(ccf_currency, ccf_variant = \"\")",
        "{",
        " 	return \"NXGLOBAL\"._CreditCurveFactoryID(Numerix::BaseMarket, QuoteType, ccf_currency, ccf_variant)",
        "}",
        null,
        "function NxStd::IMCreditCurveFactoryID(ccf_currency,ccf_index, ccf_variant = \"\")",
        "{",
        " 	return \"NXGLOBAL\"._IMCreditCurveFactoryID(Numerix::BaseMarket, QuoteType, ccf_currency,ccf_index, ccf_variant)",
        "}",
        null,
        "function NxStd::BaseCorrelationSurfaceID(ccf_currency,ccf_index, ccf_variant = \"\")",
        "{",
        " 	return \"NXGLOBAL\"._BaseCorrelationSurfaceID(Numerix::BaseMarket, QuoteType, ccf_currency,ccf_index, ccf_variant)",
        "}",
        null,
        "//=============================================================================",
        "// STANDARD MODEL ACCESS FUNCTIONS",
        "//=============================================================================",
        null,
        "//",
        "// CC",
        "//",
        null,
        "function Nxstd::CCMODELID(md_bc,md_tc,md_modelType)",
        "{",
        "	model = \"CC.MODEL.\"+md_modelType+\".\"+md_bc+\"/\"+md_tc+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// IR",
        "//",
        null,
        "function Nxstd::IRMODELID(md_currency,md_modelType)",
        "{",
        "	model = \"IR.MODEL.\"+md_modelType+\".\"+md_currency+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// FX",
        "//",
        null,
        "function Nxstd::FXModelID(md_bc,md_tc,md_modelType)",
        "{",
        "	model = \"FX.MODEL.\"+md_modelType+\".\"+md_bc+\"/\"+md_tc+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// CMDTY",
        "//",
        null,
        "function Nxstd::CMDTYModelID(md_currency,md_exchange,md_symbol,md_modelType)",
        "{",
        "	model = \"CMDTY.MODEL.\"+md_modelType+\".\"+md_currency+\"-\"+md_exchange+\"-\"+md_symbol+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// EQ",
        "//",
        null,
        "function Nxstd::EQModelID(md_currency,md_exchange,md_ticker,md_modelType)",
        "{",
        "	model = \"EQ.MODEL.\"+md_modelType+\".\"+md_currency+\"-\"+md_exchange+\"-\"+md_ticker+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// INFL",
        "//",
        null,
        "function Nxstd::INFLModelID(md_currency,md_index,md_modelType)",
        "{",
        "	model = \"INFL.MODEL.\"+md_modelType+\".\"+md_currency+\"-\"+md_index+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//",
        "// CR",
        "//",
        null,
        "function Nxstd::CRModelID(md_currency,md_re,md_dt,md_rc,md_modelType)",
        "{",
        "	model = \"CR.MODEL.\"+md_modelType+\".\"+md_currency+\"-\"+md_re+\"_\"+md_dt+\"_\"+md_rc+\".\"+QuoteType",
        "	",
        "	return model.Canonical",
        "}",
        null,
        "//=============================================================================",
        "// STANDARD CONVENTION ACCESS FUNCTIONS",
        "//=============================================================================",
        null,
        "//",
        "// IR,CC",
        "//",
        null,
        "// Returns the Convention string for a Basis Swap.",
        null,
        "function NxStd::BasisSwapConventionID(std_currency, std_index, std_index_tenor,tgt_currency, tgt_index,tgt_index_tenor, cc_variant = \"\")",
        "{",
        "    if tgt_currency == std_currency:",
        "	    bc = \"CONV.IR.\"+tgt_currency+\"-\"+tgt_index+\"-\"+tgt_index_tenor+\"/\"+std_currency+\"-\"+std_index+\"-\"+std_index_tenor+\".BASIS\"",
        "    else:",
        "	    bc = \"CONV.IR.\"+tgt_currency+\"-\"+tgt_index+\"-\"+tgt_index_tenor+\"/\"+std_currency+\"-\"+std_index+\"-\"+std_index_tenor+\".CCBASIS\"        ",
        "    ",
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for a CC Fixed Swap.",
        null,
        "function NxStd::CCFixedFloatSwapConventionID(std_currency, std_index, std_index_tenor,tgt_currency, cc_variant = \"\")",
        "{",
        "	bc = \"CONV.IR.\"+tgt_currency+\"-FIXED/\"+std_currency+\"-\"+std_index+\"-\"+std_index_tenor+\".SWAP\"",
        null,
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for an IR futures contract.",
        "// Exchange and ticker are used solely for retrieving convention thus can be undefined.  In that case, all default headers should be supplied.",
        "function NxStd::RateFuturesConventionID(conv_currency, conv_index, conv_index_tenor,conv_exchange, conv_ticker, conv_variant = \"\")",
        "{",
        "	conv = \"\"",
        null,
        "	if conv_exchange : if conv_ticker :	",
        "		conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\"-\"+conv_exchange+\"-\"+conv_ticker+\".STIR-FUT\"",
        "		",
        "	if not conv :",
        "		Numerix::SetNormal(\"Rate futures Exchange and Ticker undefined, no convention object is used; please specify values for the default headers.\")",
        "	",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "function NxStd::OvernightFuturesConventionID(conv_currency, conv_index, conv_index_tenor,conv_exchange, conv_ticker, conv_variant = \"\")",
        "{",
        "	conv = \"\"",
        null,
        "	if conv_exchange : if conv_ticker :	",
        "		conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".\"+conv_exchange+\"-\"+conv_ticker+\".OVERNIGHTFUTURES-\"+conv_variant",
        "		",
        "	if not conv :",
        "		Numerix::SetNormal(\"Rate futures Exchange and Ticker undefined, no convention object is used; please specify values for the default headers.\")",
        "		",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for Bond Futures",
        "// to ensure backward compatibility, this function can also be used as NxStd::BondFuturesConventionID(conv_currency, conv_exchange, conv_ticker, bond_type, fn_issuer)",
        "// if 5 arguments are supplied, it uses Currency, Exchange, Ticker, Bond Type, and Issuer to concatenate the convention ID",
        "// if 4 arguments are supplied, it uses Currency, Exchange, Ticker, CountryCode, the convention is looked up by countrycode.",
        "function NxStd::BondFuturesConventionID(conv_currency, conv_exchange, conv_ticker, conv_countrycode, conv_variant = \"\")",
        "{",
        "	conv = \"\"",
        "	",
        "	if conv_variant ==\"\"",
        "	{",
        "		iso2 = conv_countrycode",
        "		bond_type = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"BONDTYPE\")",
        "	}",
        "	else",
        "	{",
        "		bond_type = conv_countrycode",
        "		fn_issuer = conv_variant",
        "	}",
        null,
        "	if conv_exchange : if conv_ticker :",
        "		conv = \"CONV.IR.\"+conv_currency+\"-\"+iso2+\"-\"+bond_type+\".\"+conv_exchange+\"-\"+conv_ticker+\".BOND-FUT\"",
        "	",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for a cash deposit.",
        null,
        "function NxStd::CashConventionID(conv_currency, conv_index,conv_tenor, conv_variant = \"\")",
        "{",
        "    if conv_variant:",
        "       conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_tenor+\".\"+conv_variant+\".CASH\" ",
        "    else:",
        "	    conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_tenor+\".CASH\"+conv_variant",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        null,
        "    standard_tenor = Numerix::GetSettings(\"Settings.Currency\", conv_currency, \"IRIndexTenor\")",
        "    ",
        "    conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+standard_tenor+\".CASH\"",
        "    //try if this is the standard IR Index or the OIS Index",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    ",
        "    conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-ON.CASH\"",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the Convention string for a swap.",
        null,
        "function NxStd::SwapShortConventionID(conv_currency, conv_index,conv_index_tenor)",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".SWAP-SHORT\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for a swaption.",
        null,
        "function NxStd::SwaptionConventionID(conv_currency, conv_index,conv_index_tenor,conv_variant = \"\")",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".SWAPTION\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for an FRA.",
        null,
        "function NxStd::FRAConventionID(conv_currency, conv_index,conv_index_tenor,conv_variant = \"\")",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".FRA\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for CAPs.",
        null,
        "function NxStd::CapConventionID(conv_currency, conv_index,conv_index_tenor,conv_variant = \"\")",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_index+\"-\"+conv_index_tenor+\".CAP\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the convention string for Constant Maturity Swaps (CMS).",
        null,
        "function NxStd::CMSConventionID(conv_currency,conv_variant = \"\")",
        "{",
        "	irIndex = numerix::GetSettings(\"Settings.Currency\", conv_currency, \"IRIndex\")",
        "	irIndexTenor = numerix::GetSettings(\"Settings.Currency\", conv_currency, \"IRIndexTenor\")",
        "	",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+irIndex+\"-\"+irIndexTenor+\".CMSSWAP\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for T-Bills.",
        "// to ensure backward compatibility, this function can also be used as NxStd::TBillConventionID(conv_currency,conv_bill_type,conv_issuer)",
        "// if 3 arguments are supplied, it uses Currency, Bill Type, and Issuer to concatenate the convention ID",
        "// if 2 arguments are supplied, the convention is looked up by countrycode.",
        "function NxStd::TBillConventionID(conv_currency,conv_countrycode,conv_variant = \"\")",
        "{",
        "	if conv_variant ==\"\"",
        "	{",
        "		bill_type = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"BONDTYPE\")",
        "		fn_issuer = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"ISSUER\")	",
        "	}",
        null,
        "	else",
        "	{",
        "		bill_type = conv_countrycode",
        "		fn_issuer = conv_variant",
        "	}",
        null,
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+bill_type+\"-\"+fn_issuer+\".BILL\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention string for Treasury Bonds.",
        "// to ensure backward compatibility, this function can also be used as NxStd::TreasuryBondConventionID(conv_currency,conv_bond_type,conv_issuer)",
        "// if 3 arguments are supplied, it uses Currency, Bill Type, and Issuer to concatenate the convention ID",
        "// if 2 arguments are supplied, the convention is looked up by countrycode.",
        "function NxStd::TreasuryBondConventionID(conv_currency, conv_countrycode, conv_variant = \"\")",
        "{",
        "    iso2 = \"\"",
        "    sovereign_bond_type = \"\"",
        "	if conv_variant ==\"\"",
        "	{",
        "		bond_type = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"BONDTYPE\")",
        "		fn_issuer = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"ISSUER\")",
        "        iso2 = conv_countrycode",
        "        sovereign_bond_type = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"BONDTYPE\")",
        "        if conv_currency == \"MXN\":",
        "        	conv = \"CONV.IR.\"+conv_currency+\"-\"+bond_type+\"-\"+fn_issuer+\".BOND\"",
        "        else: ",
        "            conv = \"CONV.IR.\"+conv_currency+\"-\"+iso2+\"-\"+sovereign_bond_type+\".BOND\"",
        "	}",
        "	else",
        "	{",
        "		bond_type = conv_countrycode",
        "		fn_issuer = conv_variant",
        "        conv = \"CONV.IR.\"+conv_currency+\"-\"+bond_type+\"-\"+fn_issuer+\".BOND\"",
        "	}",
        "	",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        null,
        "//return the convention ID for Corporate Bond using country code",
        "function NxStd::CorporateBondConventionID(conv_currency,conv_countrycode,conv_variant=\"\")",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_countrycode+\"CORPORATE.BOND\"",
        "	",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        null,
        "// Returns the Convention string for Bonds.",
        null,
        "function NxStd::BondConventionID(conv_currency, conv_bond_type,conv_variant = \"\")",
        "{",
        "	conv = \"CONV.IR.\"+conv_currency+\"-\"+conv_bond_type+\".BOND\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "function NxStd::AssetSwapConventionID(conv_currency, cc_variant = \"\")",
        "{",
        "	bc = \"CONV.IR.\"+conv_currency+\".ASSETSWAP\"",
        null,
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "function NxStd::RatesSpotStrategyConventionID(conv_ccy,conv_irindex,conv_spotrule,conv_variant=\"\")",
        "{",
        "    conv = \"CONV.IR.\"+conv_ccy+\"-\"+conv_irindex+\".\"+conv_spotrule+\".SPOTSTRATEGY\"",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "function NxStd::RateSettingsConventionID(conv_ccy,conv_irindex,conv_irindextenor,conv_variant=\"\")",
        "{",
        "    conv = \"CONV.IR.\"+conv_ccy+\"-\"+conv_irindex+\"-\"+conv_irindextenor+\".RATESETTINGS\"",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "//",
        "// FX",
        "//",
        null,
        "// Returns the Convention string for FX Option.",
        null,
        "function NxStd::FXOptionConventionID(conv_base, conv_term, conv_variant = \"\")",
        "{",
        "	conv = if numerix::TryResolve(\"CONV.FX.\"+conv_base+conv_term+\".OPTION\") ? \"CONV.FX.\"+conv_base+conv_term+\".OPTION\" : \"CONV.FX.\"+conv_term+conv_base+\".OPTION\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "function NxStd::FXSpotStrategyID(conv_base, conv_term, conv_variant = \"\")",
        "{",
        "    if Numerix::KeyExists(\"Settings.CurrencyPair\", conv_base + conv_term) :",
        "        fx_pair = conv_base+conv_term",
        "    else :",
        "        fx_pair = conv_term+conv_base",
        "    ",
        "    conv = \"FX.SPOT-STRATEGY.\"+fx_pair+\".FWD\"",
        "    ",
        "    //for backward compatibility reasons, check if the object exists, if not, create one",
        "   if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "//",
        "// EQ",
        "//",
        null,
        "// Returns the Convention string for EQ European Option.",
        null,
        "function NxStd::EQOptionConventionID(conv_currency, conv_variant = \"\")",
        "{",
        "	conv = \"CONV.EQ.\"+conv_currency+\".EUROPEAN.OPTION\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "       ",
        "	return \"\"",
        "}",
        null,
        "// Returns the Convention for an EQ future.",
        null,
        "function NxStd::EQFutureConventionID(conv_currency,conv_exchange,conv_ticker, conv_variant = \"\")",
        "{",
        "	conv = \"CONV.EQ.\" + conv_currency + \"-\" + conv_exchange + \"-\" + conv_ticker + \".FUTURE\"",
        null,
        "   if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "//",
        "// CMDTY",
        "//",
        null,
        "// Returns the Convention string for an exchange traded commodity.",
        null,
        "function NxStd::CMDTYConventionID(conv_currency,conv_exchange,conv_symbol, conv_variant = \"\")",
        "{",
        "	conv = \"CONV.CMDTY.\"+conv_currency+\"-\"+conv_exchange+\"-\"+conv_symbol",
        null,
        "   if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        "//",
        "// INFL",
        "//",
        null,
        "// Returns the Convention string for an inflation bond.",
        "// to ensure backward compatibility, this function can also be used as NxStd::InflationBondConventionID(conv_currency,conv_inflation_type,conv_issuer)",
        "// if 3 arguments are supplied, it uses Currency, Inflation Type, and Issuer to concatenate the convention ID",
        "// if 2 arguments are supplied, the convention is looked up by countrycode.",
        "function NxStd::InflationBondConventionID(conv_currency, conv_countrycode,conv_variant = \"\")",
        "{",
        "	if conv_variant ==\"\"",
        "	{",
        "		// There is no counterpart for this input in Settings.Currency",
        "		inflation_type = Numerix::GetSettings(\"Settings.SovereignSecurity\",conv_countrycode,\"INFLATIONTYPE\")",
        "		fn_issuer = Numerix::GetSettings(\"Settings.Currency\",conv_currency,\"ISSUER\")",
        "	}",
        "	else",
        "	{",
        "		inflation_type = conv_countrycode",
        "		fn_issuer = conv_variant",
        "	}",
        "	",
        "	conv = \"CONV.INFL.\"+conv_currency+\"-\"+inflation_type+\"-\"+fn_issuer+\".BOND\"",
        null,
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "	return \"\"",
        "}",
        null,
        null,
        "// Returns the Convention string for a zero coupon inflation index swap.",
        null,
        "function NxStd::ZCIISConventionID(conv_currency,conv_index, conv_variant = \"\")",
        "{",
        "	conv = \"CONV.INFL.\"+conv_currency+\"-\"+conv_index+\".ZCIIS\"",
        null,
        "   if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")    ",
        null,
        "	return \"\"",
        "}",
        null,
        "//",
        "// IR",
        "//",
        null,
        "// Returns the ID of the rate convention to use.",
        null,
        "function NxStd::RateConventionID(rc_currency, rc_index, rc_index_tenor)",
        "{",
        "    conv = \"CONV.IR.\" + rc_currency + \"-\" + rc_index + \"-\" + rc_index_tenor",
        "    ",
        "    if Numerix::TryResolve(conv):",
        "        return conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(conv + \" Not Found. Please check \" + conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the ID of the swap convention to use.",
        null,
        "function NxStd::SwapConventionID(sc_currency, sc_index, sc_index_tenor,sc_append=\"\")",
        "{",
        "    swap_conv_short = \"CONV.IR.\" + sc_currency + \"-\" + sc_index + \"-\" + sc_index_tenor + \".SWAP-SHORT\"",
        "    swap_conv_avg = \"CONV.IR.\" + sc_currency + \"-\" + sc_index + \"-\" + sc_index_tenor + \".SWAP-AVG\"",
        "    swap_conv = \"CONV.IR.\" + sc_currency + \"-\" + sc_index + \"-\" + sc_index_tenor + \".SWAP\"",
        "    if sc_append ==#\"SHORT\": ",
        "        swap_conv = if Numerix::TryResolve(swap_conv_short) ? swap_conv_short : swap_conv",
        "    else:",
        "        swap_conv = \"CONV.IR.\" + sc_currency + \"-\" + sc_index + \"-\" + sc_index_tenor + \".SWAP\"+sc_append",
        null,
        "    if sc_append ==#\"AVG\":",
        "        swap_conv = swap_conv_avg",
        "    ",
        "    if Numerix::TryResolve(swap_conv):",
        "        return swap_conv.Canonical",
        "    else:",
        "        Numerix::SetMajor(swap_conv + \" Not Found. Please check \" + swap_conv + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the Convention string for a DMO Loan.",
        null,
        "function NxStd::DMOLoanConventionID(conv_currency, cc_variant = \"\")",
        "{",
        "	bc = \"CONV.IR.\"+conv_currency+\".DMOLOAN\"",
        null,
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the ID of the Average Overnight Futures (USD Fedfunds futures) convention to use.",
        null,
        "function NxStd::FedFundsFuturesConventionID(conv_currency, conv_irindex, conv_irindextenor, conv_exchange, conv_ticker, conv_variant = \"\")",
        "{",
        "	bc = \"CONV.IR.\"+conv_currency+\"-\"+conv_irindex+\"-\"+conv_irindextenor+\".\"+conv_exchange+\"-\"+conv_ticker+\".FUT\"",
        "	",
        "    if Numerix::TryResolve(bc):",
        "        return bc.Canonical",
        "    else:",
        "        Numerix::SetMajor(bc + \" Not Found. Please check \" + bc + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "//",
        "// CR",
        "//",
        null,
        "// Returns the ID of the ISDA Cash Deposit convention to use.",
        null,
        "function NxStd::ISDACashConventionID(icc_currency)",
        "{",
        "	icc = \"CONV.CR.\" + icc_currency + \"-ISDA-STDRATES.CASH\"",
        "    ",
        "    if Numerix::TryResolve(icc):",
        "        return icc.Canonical",
        "    else:",
        "        Numerix::SetMajor(icc + \" Not Found. Please check \" + icc + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "// Returns the ID of the ISDA Swap convention to use.",
        null,
        "function NxStd::ISDASwapConventionID(icc_currency)",
        "{",
        "	icc = \"CONV.CR.\" + icc_currency + \"-ISDA-STDRATES.SWAP\"",
        "    ",
        "    if Numerix::TryResolve(icc):",
        "        return icc.Canonical",
        "    else:",
        "        Numerix::SetMajor(icc + \" Not Found. Please check \" + icc + \".\")",
        "    ",
        "    return \"\"",
        "}",
        null,
        "//",
        "// Fixings",
        "//",
        null,
        "// Returns the ID of the floating rate fixings to use.",
        null,
        "function NxStd::RateFixingsID(fr_currency, fr_index, fr_index_tenor, fr_source = \"\")",
        "{",
        "    if fr_source:",
        "        return \"FIXINGS.\" + fr_currency + \"-\" + fr_index + \"-\" + fr_source + \"-\" + fr_index_tenor",
        "    ",
        "    return \"FIXINGS.\" + fr_currency + \"-\" + fr_index + \"-\" + fr_index_tenor ",
        "}",
        null,
        "function NxStd::CISFixingsID(cis_currency, cis_tenor, cis_source = \"\")",
        "{",
        "    if cis_source:",
        "        return \"FIXINGS.\" + cis_currency + \"-CIS-\" + cis_source + \"-\" + cis_tenor",
        "    ",
        "    return \"FIXINGS.\" + cis_currency + \"-CIS-\" + cis_tenor",
        "}",
        null,
        "function NxStd::CMSFixingsID(cms_currency, cms_tenor, cms_source = \"\")",
        "{",
        "    if cms_source:",
        "        return \"FIXINGS.\" + cms_currency + \"-CMS-\" + cms_source + \"-\" + cms_tenor",
        "    ",
        "    return \"FIXINGS.\" + cms_currency + \"-CMS-\" + cms_tenor",
        "}",
        null,
        "function NxStd::FXFixingsID(fx_bc, fx_tc, fx_source = \"\")",
        "{",
        "    if fx_source:",
        "        return \"FIXINGS.\" + fx_bc + fx_tc + \"-\" + fx_source + \"-SPOT\"",
        "    ",
        "    return \"FIXINGS.\" + fx_bc + fx_tc + \"-SPOT\"",
        "}",
        null,
        "function NxStd::EQFixingsID(eq_c, eq_ex, eq_t, eq_source = \"\")",
        "{",
        "    if eq_source:",
        "        return \"FIXINGS.\" + eq_c + \"-\" + eq_ex + \"-\" + eq_source + \"-\" + eq_t",
        "    ",
        "    return \"FIXINGS.\" + eq_c + \"-\" + eq_ex + \"-\" + eq_t",
        "}",
        null,
        "function NxStd::CMDTYFixingsID(cmdty_c, cmdty_ex, cmdty_t, cmdty_source = \"\")",
        "{",
        "    if cmdty_source:",
        "        return \"FIXINGS.\" + cmdty_c + \"-\" + cmdty_ex + \"-\" + cmdty_source + \"-\" + cmdty_t",
        "    ",
        "    return \"FIXINGS.\" + cmdty_c + \"-\" + cmdty_ex + \"-\" + cmdty_t",
        "}",
        null,
        "// this function is to solve fixingSeries from OV to contnet formatting issue.",
        "constfunction NxStd::formatFixingsID(fxg_str)",
        "{",
        "    ifnot fxg_str:",
        "        return fxg_str",
        "    ",
        "    arr = if fxg_str is \"LIST\" ? fxg_str : {fxg_str}",
        "    res = {}",
        "    foreach a in arr:",
        "        res @= if a.canonical.find(\"FIXINGS.\") ? a.canonical : \"FIXINGS.\" + a.canonical",
        "    return if arr.size == 1 ? res[1] : res",
        "}",
        null,
        "// Returns the ID of inflation fixings.",
        null,
        "function NxStd::INFLFixingsID(fixings_currency, fixings_index, fixings_source = \"\")",
        "{",
        "    if fixings_source:",
        "        return \"Fixings.\" + fixings_currency + \"-\" + fixings_index + \"-\" + fixings_source",
        "    ",
        "    return \"Fixings.\" + fixings_currency + \"-\" + fixings_index",
        "}",
        null,
        "//Returns the CPI Fixings Object",
        "function NxStd::CPIFixingsID(fixings_currency, fixings_index, fixings_source = \"\")",
        "{",
        "    fixings = Numerix::Load(NxStd::INFLFixingsID(Currency, InflationIndex, fixings_source))",
        "    call = Numerix::Object({\"cpi_fixings\", \"market data\", \"cpi fixings\"}) & {\"fixings\" : fixings.Fixings}  ",
        "    return call.Create",
        "}",
        null,
        "//",
        "// Underlying Assets",
        "//",
        null,
        "function NxStd::CRUnderlyingAsset(currency, reference_entity, debt_type, restructuring_clause)",
        "{",
        "    return \"CR.\" + currency + \"-\" + reference_entity + \"_\" + debt_type + \"_\" + restructuring_clause",
        "}",
        null,
        "function NxStd::CMDTYUnderlyingAsset(currency, exchange, ticker)",
        "{",
        "    return \"CMDTY.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "}",
        null,
        "function NxStd::EQUnderlyingAsset(currency, exchange, ticker)",
        "{",
        "    return \"EQ.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "}",
        null,
        "function NxStd::FXUnderlyingAsset(base_currency, term_currency)",
        "{",
        "    return \"FX.\" + base_currency + \"/\" + term_currency",
        "}",
        null,
        "function NxStd::IRUnderlyingAsset(currency)",
        "{",
        "    return \"IR.\" + currency",
        "}",
        null,
        null,
        "function NxStd::MakeBondInstrument(Currency, CouponFreq, Maturity, ValueDate, CouponRate, QuotePrice)",
        "{",
        "    obj  = ",
        "        {",
        "            \"ID\"       		: \"Bond\"+CouponFreq+Maturity+CouponRate,",
        "            \"NAME\"     		: \"Bond\"+CouponFreq+Maturity+CouponRate,",
        "            \"OBJECT\"   		: \"INSTRUMENT\",",
        "            \"TYPE\"     		: \"BOND\",",
        "			\"FREQ\" 	   		: CouponFreq,",
        "            \"CURRENCY\" 		: Currency,",
        "			\"MATURITY\" 		: Maturity,",
        "			\"COUPONRATE\" 	: CouponRate,",
        "			\"VALUEDATE\" 	: ValueDate,",
        "		//	\"ACCRUALSTART\" 	: StartDate,",
        "            \"QUOTEPRICE\"  	: QuotePrice",
        "        }",
        null,
        "    // Put in registry and return ID.",
        null,
        "    id = obj.create",
        null,
        "    return id",
        "}",
        null,
        "// Parse table and create list of equities from it (ID is used as an accessor, ",
        "// so do not use as parameter).",
        null,
        "function NxStd::MakeBondsCollectionFromTable(tableID)",
        "{",
        "    // Verify table",
        "    ifnot tableID.exists :",
        "        throw \"\\\"\" + tableID + \"\\\" table not found\"",
        null,
        "    columns = tableID.ColumnHeaders.Canonical",
        null,
        "    ifnot columns.Find(\"Currency\") :",
        "        throw \"Currency not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"CouponFreq\") :",
        "        throw \"CouponFreq not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"StartDate\") :",
        "        throw \"StartDate not found in \" + tableID + \"\\\" table\"",
        null,
        "	 ifnot columns.Find(\"Maturity\") :",
        "        throw \"Maturity not found in \" + tableID + \"\\\" table\"",
        null,
        "	 ifnot columns.Find(\"ValueDate\") :",
        "        throw \"ValueDate not found in \" + tableID + \"\\\" table\"",
        null,
        "	 ifnot columns.Find(\"CouponRate\") :",
        "        throw \"CouponRate not found in \" + tableID + \"\\\" table\"",
        null,
        "	ifnot columns.Find(\"QuotePrice\") :",
        "        throw \"QuotePrice not found in \" + tableID + \"\\\" table\"",
        null,
        null,
        "     // Build objects and record IDs.",
        null,
        "	table = tableID	",
        "    ids = {}",
        "	rate = {}",
        "	",
        "	for i = 1 to table.Currency.size",
        "	{",
        "		ids &= {Nxstd::MakeBondInstrument(table.Currency[i], table.CouponFreq[i], table.Maturity[i], table.ValueDate[i], table.CouponRate[i], table.QuotePrice[i])}",
        "	}",
        "   ",
        "    table = Numerix::Table(NxStd::MakeID(\"table\"), {\"Bond\"}, {ids})",
        "    id = table.create",
        null,
        "    return id",
        "}",
        null,
        "function NxStd::MakeBondsRepoRateCollectionFromTable(tableID, RepoRate)",
        "{",
        "    // Verify table",
        "    ifnot tableID.exists :",
        "        throw \"\\\"\" + tableID + \"\\\" table not found\"",
        null,
        "    columns = tableID.ColumnHeaders.Canonical",
        null,
        "    ifnot columns.Find(\"Currency\") :",
        "        throw \"Currency not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"CouponFreq\") :",
        "        throw \"CouponFreq not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"StartDate\") :",
        "        throw \"StartDate not found in \" + tableID + \"\\\" table\"",
        null,
        "	 ifnot columns.Find(\"Maturity\") :",
        "        throw \"Maturity not found in \" + tableID + \"\\\" table\"",
        null,
        "	 ifnot columns.Find(\"ValueDate\") :",
        "        throw \"ValueDate not found in \" + tableID + \"\\\" table\"",
        null,
        "	 ifnot columns.Find(\"CouponRate\") :",
        "        throw \"CouponRate not found in \" + tableID + \"\\\" table\"",
        null,
        "	ifnot columns.Find(\"QuotePrice\") :",
        "        throw \"QuotePrice not found in \" + tableID + \"\\\" table\"",
        null,
        null,
        "     // Build objects and record IDs.",
        null,
        "	table = tableID	",
        "    ids = {}",
        "	rate = {}",
        "	",
        "	for i = 1 to table.Currency.size",
        "	{",
        "		ids &= {Nxstd::MakeBondInstrument(table.Currency[i], table.CouponFreq[i], table.Maturity[i], table.ValueDate[i], table.CouponRate[i], table.QuotePrice[i])}",
        "		rate &={RepoRate}",
        "	}",
        "   ",
        "    table = Numerix::Table(NxStd::MakeID(\"table\"), {\"Bond\",\"RepoRate\"}, {ids,rate})",
        "    id = table.create",
        null,
        "    return id",
        "}",
        null,
        "function NxStd::MakeBondsZSpreadCollectionFromTable(tableID, zSpread)",
        "{",
        "    // Verify table",
        "    ifnot tableID.exists :",
        "        throw \"\\\"\" + tableID + \"\\\" table not found\"",
        null,
        "    columns = tableID.ColumnHeaders.Canonical",
        null,
        "    ifnot columns.Find(\"Currency\") :",
        "        throw \"Currency not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"CouponFreq\") :",
        "        throw \"CouponFreq not found in \\\"\" + tableID + \"\\\" table\"",
        null,
        "    ifnot columns.Find(\"StartDate\") :",
        "        throw \"StartDate not found in \" + tableID + \"\\\" table\"",
        null,
        "	 ifnot columns.Find(\"Maturity\") :",
        "        throw \"Maturity not found in \" + tableID + \"\\\" table\"",
        null,
        "	 ifnot columns.Find(\"ValueDate\") :",
        "        throw \"ValueDate not found in \" + tableID + \"\\\" table\"",
        null,
        "	 ifnot columns.Find(\"CouponRate\") :",
        "        throw \"CouponRate not found in \" + tableID + \"\\\" table\"",
        null,
        "	ifnot columns.Find(\"QuotePrice\") :",
        "        throw \"QuotePrice not found in \" + tableID + \"\\\" table\"",
        null,
        null,
        "     // Build objects and record IDs.",
        null,
        "	table = tableID	",
        "    ids = {}",
        "	rate = {}",
        "	",
        "	for i = 1 to table.Currency.size",
        "	{",
        "		ids &= {Nxstd::MakeBondInstrument(table.Currency[i], table.CouponFreq[i], table.Maturity[i], table.ValueDate[i], table.CouponRate[i], table.QuotePrice[i])}",
        "		rate &={zSpread}",
        "	}",
        "   ",
        "    table = Numerix::Table(NxStd::MakeID(\"table\"), {\"Bond\",\"z-Spread\"}, {ids,rate})",
        "    id = table.create",
        null,
        "    return id",
        "}",
        null,
        "//Supports two types of tables: 1) Single column \"Notional\", and 2) two column table (\"Date\", \"Value\")",
        "function NxStd::ReportingNotional(notoinal_value)",
        "{",
        "    ifnot notoinal_value:",
        "        return 1",
        "    if notoinal_value is \"Double\":",
        "        return notoinal_value",
        "    ",
        "    try",
        "    {",
        "        notionals =Numerix::TableColumnValues(notoinal_value, \"Value\")",
        "    }",
        "    catch",
        "    {",
        "        notionals = Numerix::TableColumnValues(notoinal_value, \"Notional\")",
        "    }",
        "    count = Numerix::TableRowCount(notoinal_value)",
        "    sum = 0",
        "    foreach i in notionals:",
        "        sum = sum + i",
        "    avg = sum/count",
        "    return avg",
        "}",
        null,
        "// Extract initial notional",
        "function NxStd::InitialNotional(notoinal_value)",
        "{",
        "    return if notoinal_value is \"DOUBLE\" ? notoinal_value : Numerix::Double(notoinal_value.load.VALUE[1])",
        "}",
        null,
        "function NxStd::RegulatoryCapital(rc_terms,rc_pricer, rc_variant = \"\")",
        "{",
        "    // If we have a regulatory policy, use it. Else, it will throw if no policy match is obtained.",
        "    policy = \"POLICY.SACCR\"",
        "	if Numerix::Exists(policy) : ",
        "        return policy._GetPolicy(rc_terms, rc_pricer)",
        null,
        "    return \"\"",
        "}",
        null,
        "function NxStd::MarketQuoteISINZspread(pr_currency, pr_isin)",
        "{",
        "    return NxStd::MarketQuoteISIN(pr_currency, pr_isin, \"BOND\", \"ZSPREAD\")",
        "}",
        null,
        "function NxStd::MarketQuoteISINPrice(pr_currency, pr_isin)",
        "{",
        "    return NxStd::MarketQuoteISIN(pr_currency, pr_isin, \"BOND\", \"PRICE\")",
        "}",
        null,
        "function NxStd::MarketQuoteISINYTM(pr_currency, pr_isin)",
        "{",
        "    return NxStd::MarketQuoteISIN(pr_currency, pr_isin, \"BOND\", \"YIELD\")",
        "}",
        null,
        "function NxStd::MarketQuoteISINDM(pr_currency, pr_isin)",
        "{",
        "    return NxStd::MarketQuoteISIN(pr_currency, pr_isin, \"DISCOUNTMARGIN\")",
        "}",
        null,
        "function NxStd::IRMarketQuoteISINBondFut(pr_currency, pr_isin)",
        "{",
        "    return NxStd::MarketQuoteISIN(pr_currency, pr_isin, \"BOND-FUT\", \"PRICE\")",
        "}",
        null,
        "function NxStd::IRMarketQuoteISINStirFut(pr_currency, pr_isin)",
        "{",
        "    return NxStd::MarketQuoteISIN(pr_currency, pr_isin, \"STIR-FUT\", \"PRICE\")",
        "}",
        null,
        "function NxStd::MarketQuoteISIN(pr_currency, pr_isin, pr_type, pr_irAssetType=\"\")",
        "{",
        "    ifnot pr_currency or pr_isin or pr_type :",
        "        return \"\"",
        "    ",
        "    if pr_irAssetType != \"\":",
        "        query = \"NAME=\" + NxStd::IRMarketQuoteISINId(pr_currency, pr_isin, pr_type, pr_irAssetType) + \",VALUE=<VAL:DOUBLE>\"",
        "    else:",
        "        query = \"NAME=\" + NxStd::MarketQuoteISINId(pr_currency, pr_isin, pr_type) + \",VALUE=<VAL:DOUBLE>\"",
        "        ",
        "    results = NxStd::Query(query, \"NAME,VAL\")",
        "    ",
        "    if results: if results.Name[1]",
        "    {",
        "        Numerix::AddQuote(results.Name[1])",
        "        return results.VAL[1]",
        "    }",
        "    ",
        "    return \"\"",
        "}",
        null,
        "function NxStd::MarketQuoteISINId(pr_currency, pr_isin, pr_type)",
        "{",
        "    return \"IR.\"+pr_currency+\"-\"+pr_isin+\".\"+pr_type+\".\"+QUOTETYPE",
        "}",
        null,
        "function NxStd::IRMarketQuoteISINId(pr_currency, pr_isin, pr_instType=\"BOND\", pr_type) // For [BOND], [BOND-FUT], [STIR-FUT] contracts",
        "{",
        "    return \"IR.\"+pr_currency+\"-\"+pr_isin+\".\"+pr_instType+\".\"+pr_type+\".\"+QUOTETYPE",
        "}",
        null,
        "function NxStd::EQMarketQuoteISINId(pr_currency, pr_isin) // For [EQ Futures] contracts, according to ESun BRD v1.2 Section 6.2",
        "{",
        "    return \"EQ.\"+pr_currency+\"-\"+pr_isin+\".FUT.\"+QUOTETYPE",
        "}",
        null,
        "function NxStd::CMDTYMarketQuoteISINId(pr_currency, pr_isin) // For	[Commodity Forward] contracts, according to ESun BRD v1.2 Section 6.2",
        "{",
        "    return \"CMDTY.\"+pr_currency+\"-\"+pr_isin+\".FUT.\"+QUOTETYPE",
        "}",
        null,
        "function NxStd::IsEmptyMarket",
        "{",
        "    if not Numerix::MarketData:",
        "        return false",
        "    ",
        "    return NxStd::MarketQuoteValue(\"Flag_EmptyMarket\")",
        "}",
        null,
        "function NxStd::FXSpotQuote(fx_base_currency, fx_term_currency)",
        "{",
        "    fxr = \"FX.\" + fx_term_currency + fx_base_currency + \"-SPOT.\" + QuoteType",
        "	",
        "	return fxr.Canonical",
        "}",
        null,
        "//",
        "// Model Parameters",
        "//",
        null,
        "//IR Model Parameters for HW1F HW2F",
        "function NxStd::IRModelParameters(modelcurrency, modelname, modelparameter)",
        "{",
        "    if Numerix::Quote(\"IR.\"+currency +\"-\"+ modelname + \".\" + modelparameter)",
        "    {  ",
        "        return Numerix::Quote(\"IR.\"+currency +\"-\"+ modelname + \".\" + modelparameter).Value ",
        "    }",
        "    throw currency + \" interest rate \" + modelname + \" \" + modelparameter + \" not found in market data\"     ",
        "}",
        null,
        "//Inflation Model Parameters for HW1F",
        "function NxStd::INFLModelParameters(INFLcurrency, INFLindex ,modelname, modelparameter)",
        "{",
        "    if Numerix::Quote(\"INFL.\"+INFLcurrency +\"-\"+ INFLindex + \"-\" + modelname + \".\" + modelparameter)",
        "    {  ",
        "        return Numerix::Quote(\"INFL.\"+INFLcurrency +\"-\"+ INFLindex + \"-\" + modelname + \".\" + modelparameter).Value ",
        "    }",
        "    throw INFLcurrency +\"-\"+ INFLindex + \" inflation \" + modelname + \" \" + modelparameter + \" not found in market data\"     ",
        "}",
        null,
        "//Equity Model Parameters for BS",
        "function NxStd::EQModelParameters(EQcurrency, EQexchange, EQticker, modelname, modelparameter)",
        "{",
        "    if Numerix::Quote(\"EQ.\"+EQcurrency +\"-\" + EQexchange + \"-\" + EQticker +\"-\" + modelname + \".\" + modelparameter)",
        "    {  ",
        "        return Numerix::Quote(\"EQ.\"+EQcurrency +\"-\" + EQexchange + \"-\" + EQticker +\"-\" + modelname + \".\" + modelparameter).Value ",
        "    }",
        "    throw EQcurrency +\"-\" + EQexchange + \"-\" + EQticker + \" \" + modelname + \" \" + modelparameter + \" not found in market data\"     ",
        "}",
        null,
        "//FX Model Parameters for BS",
        "function NxStd::FXModelParameters(FXbase, FXterm, modelname, modelparameter)",
        "{",
        "    if Numerix::Quote(\"FX.\"+ FXbase + FXterm + \"-\" + modelname + \".\" + modelparameter)",
        "    {  ",
        "        return Numerix::Quote(\"FX.\"+ FXbase + FXterm + \"-\" + modelname + \".\" + modelparameter).Value ",
        "    }",
        "    throw FXbase + FXterm + \" \" + modelname + \" \" + modelparameter + \" not found in market data\"     ",
        "}",
        null,
        "//CMDTY Model Parameters for BS",
        "function NxStd::CMDTYModelParameters(CMDTYcurrency, CMDTYexchange, CMDTYsymbol, modelname, modelparameter)",
        "{",
        "    if Numerix::Quote(\"CMDTY.\"+CMDTYcurrency +\"-\" + CMDTYexchange + \"-\" + CMDTYsymbol + \"-\" + modelname + \".\" + modelparameter)",
        "    {  ",
        "        return Numerix::Quote(\"CMDTY.\"+CMDTYcurrency +\"-\" + CMDTYexchange + \"-\" + CMDTYsymbol + \"-\" + modelname + \".\" + modelparameter).Value ",
        "    }",
        "    throw CMDTYcurrency +\"-\" + CMDTYexchange + \"-\" + CMDTYsymbol + \" \" + modelname + \" \" + modelparameter + \" not found in market data\"     ",
        "}",
        null,
        null,
        "function NxStd::CloseoutDateGenerator(MarginDatesInput, TenorInput = \"1bd\", ConventionInput = \"None\", CalendarInput=\"None\", BackwardGen=False)",
        "{",
        "    //convert tenor list to Numerix::Tenor data type so that it could be added to dates. Tenors could be provided as a single tenor or a list of tenors corresponding to margin dates",
        "    TenorList = Numerix::Tenor(TenorInput, ConventionInput, CalendarInput)",
        "    //generate closeout dates",
        "    if BackwardGen:",
        "		Result = Numerix::SubtractTenor(MarginDatesInput, TenorList)",
        "	else:",
        "		Result = Numerix::AddTenor(MarginDatesInput, TenorList)",
        "    return Result",
        "}",
        null,
        "function NxStd::xVADateGenerator(GeneratorSpec, StartDate, GenerateTenors = False, ConventionInput = \"None\", CalendarInput=\"None\")",
        "{",
        "    //if \":\" is found, then the spec is provided in terms of time intervals e.g. \"2Y:1W,2Y:1M,1Y:3M,2Y:6M,30Y:1Y\"",
        "    CheckSpec = GeneratorSpec.Find(\":\")",
        "                ",
        "    try",
        "    {",
        "        StartDate = Numerix::Date(StartDate)",
        "    }",
        "    catch error",
        "    {",
        "        Numerix::SetFatal(StartDate & \" is not a valid start date format, please use DD-MMM-YYYY or DD-MM-YYYY format\")",
        "    }",
        null,
        "    If CheckSpec",
        "    {",
        "        //create a list of tuples separated by \":\" corresponding to a period over which to apply tenor increments and tenor increments themselves",
        "        SpecList = GeneratorSpec.split(\",\")",
        "        ",
        "        //setting up variables",
        "        TenorList = {}",
        "        DateList = {}",
        "        TenorList @= \"0D\"",
        "        DateList @= StartDate",
        "        GlobalTenorValues = {0,0,0,0} //years, months, weeks, days",
        "        ",
        "        TempDate1 = StartDate ",
        "        TempDate2 = StartDate ",
        "        ",
        "        foreach spec in SpecList",
        "        {",
        "            SpecTenors = spec.split(\":\")",
        "            ",
        "            try",
        "            {",
        "                LengthTenor = Numerix::Tenor(SpecTenors[1], ConventionInput, CalendarInput)",
        "            }",
        "            catch error",
        "            {",
        "                Numerix::SetFatal(SpecTenor[1] + \"is not a valid tenor. please use an integer value and D, W, M, Y e.g. 3M\")",
        "            }",
        "            try",
        "            {",
        "                IntervalTenor = Numerix::Tenor(SpecTenors[2], ConventionInput, CalendarInput)",
        "            }",
        "            catch error",
        "            {",
        "                Numerix::SetFatal(SpecTenor[1] + \"is not a valid tenor. please use an integer value and D, W, M, Y e.g. 3M\")",
        "            }",
        "            ",
        "            TempDate2 = Numerix::AddTenor(TempDate2, LengthTenor)",
        "            LocalTenorValues = GlobalTenorValues",
        "            ",
        "            x = IntervalTenor.Multiplier.type(\"INTEGER\")",
        "            idx = 0",
        "            Switch on IntervalTenor.Period",
        "                case \"D\"",
        "                    idx = 4",
        "                case \"W\"",
        "                    idx = 3",
        "                case \"M\"",
        "                    idx = 2",
        "                case \"Y\"",
        "                    idx = 1",
        "            endswitch",
        "            list1 = {}",
        "            list2 = {}",
        "            i=0",
        "            while TempDate1 < TempDate2",
        "            {",
        "                i +=1",
        "                LocalTenorValues[idx]+= x",
        "                list1 @= NxStd::GenerateTenor(LocalTenorValues[idx], IntervalTenor.Period)",
        "                TempDate1 = Numerix::AddTenor(TempDate1, IntervalTenor)",
        "                list2 @= TempDate1",
        "                if i == 200",
        "                {",
        "                    TenorList &= list1",
        "                    DateList &= list2",
        "                    list1 = {}",
        "                    list2 = {}",
        "                    i=0",
        "                }",
        "            }",
        "            ",
        "            // find tenor list and update Global Tenor",
        "            if spec.Iteration > 1{",
        "                Switch on IntervalTenor[1].Period ",
        "                    case \"D\"{",
        "                        TempTenorList = \"\"",
        "                        if GlobalTenorValues[1] : TempTenorList = TempTenorList + (GlobalTenorValues[1].type(\"INTEGER\") + \"Y\")",
        "                        if GlobalTenorValues[2] : TempTenorList = TempTenorList + (GlobalTenorValues[2].type(\"INTEGER\") + \"M\")",
        "                        if GlobalTenorValues[3] : TempTenorList = TempTenorList + (GlobalTenorValues[3].type(\"INTEGER\") + \"W\")",
        "                        TempTenorList = TempTenorList + list1",
        "                        TenorList &= TempTenorList",
        "                    }",
        "                    case \"W\"{",
        "                        TempTenorList = \"\"",
        "                        if GlobalTenorValues[1] : TempTenorList = TempTenorList + (GlobalTenorValues[1].type(\"INTEGER\") + \"Y\")",
        "                        if GlobalTenorValues[2] : TempTenorList = TempTenorList + (GlobalTenorValues[2].type(\"INTEGER\") + \"M\")",
        "                        TempTenorList = TempTenorList + list1",
        "                        if GlobalTenorValues[4] : TempTenorList = TempTenorList + (GlobalTenorValues[4].type(\"INTEGER\") + \"D\")",
        "                        TenorList &= TempTenorList",
        "                    }",
        "                    case \"M\"{",
        "                        TempTenorList = \"\"",
        "                        if GlobalTenorValues[1] : TempTenorList = TempTenorList + (GlobalTenorValues[1].type(\"INTEGER\") + \"Y\")",
        "                        TempTenorList = TempTenorList + list1",
        "                        if GlobalTenorValues[3] : TempTenorList = TempTenorList + (GlobalTenorValues[3].type(\"INTEGER\") + \"W\")",
        "                        if GlobalTenorValues[4] : TempTenorList = TempTenorList + (GlobalTenorValues[4].type(\"INTEGER\") + \"D\")",
        "                        TenorList &= TempTenorList",
        "                    }",
        "                    case \"Y\"{",
        "                        TempTenorList = \"\"",
        "                        TempTenorList = TempTenorList + list1",
        "                        if GlobalTenorValues[2] : TempTenorList = TempTenorList + (GlobalTenorValues[2].type(\"INTEGER\") + \"M\")",
        "                        if GlobalTenorValues[3] : TempTenorList = TempTenorList + (GlobalTenorValues[3].type(\"INTEGER\") + \"W\")",
        "                        if GlobalTenorValues[4] : TempTenorList = TempTenorList + (GlobalTenorValues[4].type(\"INTEGER\") + \"D\")",
        "                        TenorList &= TempTenorList",
        "                    }",
        "                endswitch",
        "            }",
        "            else{",
        "                TenorList &= list1",
        "            }",
        "            ",
        "            DateList &= list2",
        "        ",
        "            //TenorList @= NxStd::GenerateTenor(LocalTenorValues[idx], IntervalTenor.Period)",
        "            //begin next loop with the date corresponding to LengthTenor opposed to the last date that resulted from adding interval tenors",
        "            TempDate1 = TempDate2",
        "            ",
        "            //update Global Tenor",
        "            Switch on LengthTenor.Period ",
        "                case \"D\"",
        "                    GlobalTenorValues[4] = GlobalTenorValues[4].type(\"INTEGER\") + LengthTenor.Multiplier.type(\"INTEGER\")",
        "                case \"W\"",
        "                    GlobalTenorValues[3] = GlobalTenorValues[3].type(\"INTEGER\") + LengthTenor.Multiplier.type(\"INTEGER\")",
        "                case \"M\"",
        "                    GlobalTenorValues[2] = GlobalTenorValues[2].type(\"INTEGER\") + LengthTenor.Multiplier.type(\"INTEGER\")",
        "                case \"Y\"",
        "                    GlobalTenorValues[1] = GlobalTenorValues[1].type(\"INTEGER\") + LengthTenor.Multiplier.type(\"INTEGER\")",
        "            endswitch",
        "       }",
        "    }",
        "    else",
        "    {",
        "        DateList = {}",
        "        TenorList = Numerix::List(\"0BD\")",
        "        TenorList &= GeneratorSpec.split(\",\")",
        "        Tenors = Numerix::Tenor(TenorList, ConventionInput, CalendarInput)",
        "        DateList= Numerix::AddTenor(StartDate, Tenors)",
        "    }",
        "    ",
        "    if GenerateTenors:",
        "        Result = {DateList, TenorList}",
        "   else:",
        "        Result = {DateList}",
        "    return Result",
        "}",
        null,
        "function NxStd::GenerateTenor(tValues,P)",
        "{",
        "    return \"\" & tValues & P",
        "}",
        null,
        "//converts notional - either double or table - into a negative value.  Supports two types of tables: 1) Single column \"Notional\", and 2) two column table (\"Date\", \"Value\")",
        "constfunction NxStd::NegativeNotional(fn_notional)",
        "{",
        "    //if it's a double, just return the negative value",
        "    if fn_notional is \"DOUBLE\" :",
        "        return fn_notional*-1",
        "    ",
        null,
        "    onecolumn = true",
        "    notionallist = {}",
        "    ",
        "    //see which table type it is",
        "    try",
        "    {",
        "        notionalist = Numerix::TableColumnValues(fn_notional,\"Notional\")",
        "    }",
        "    catch",
        "    {",
        "        notionalist = Numerix::TableColumnValues(fn_notional,\"Value\")",
        "        onecolumn = false",
        "    }",
        "    ",
        "    if onecolumn :",
        "        return Numerix::Table(\"notionalTable_\"+Numerix::UniqueNumber,{\"NOTIONAL\"},{-1*notionalist}).Create ",
        "    ",
        "    else :",
        "        return Numerix::Table(\"notionalTable_\"+Numerix::UniqueNumber,{\"Date\", \"Value\"},{Numerix::TableColumnValues(fn_notional, \"Date\"),-1*notionalist}).Create     ",
        "    ",
        "}",
        null,
        "// Generate weights tale from swaption instrument collection, weight info is stored in COMMENT header",
        "function NxStd::Weights(sc_instcoll)",
        "{",
        "    ifnot sc_instcoll:",
        "        return \"\"",
        "    ",
        "    weights = {}",
        "    foreach inst in sc_instcoll.InstrumentOutput do",
        "        weights @= if inst.CommentInput ? Numerix::Double(inst.CommentInput) : 1",
        "    next",
        "    ",
        "    return Numerix::Table(\"WeightsTable\"+Numerix::UniqueNumber, {\"Weights\"}, weights.Transpose).Create",
        "}",
        null,
        "//=============================================================================",
        "// RSF Quote Filtering Functions",
        "//=============================================================================",
        null,
        "// Filter volatility quote dependecy for HW1F model",
        "function NxStd::HW1FDependencyFilter(s1_instcoll) {",
        "    caliInstsColl = s1_instcoll.load",
        "    caliInsts = caliInstsColl.components.load",
        "    swaptions = caliInsts.instruments.load.value(\"ID\")",
        "    volSurface = swaptions[1].load.sigma1",
        "    fullQuoteDep = volSurface.AllQuotes",
        "    type = volSurface.load.value(\"TYPE\")",
        "    volType = volSurface.load.quotetype",
        "    if volType.canonical == \"LOGNORMALVOL\" {",
        "        volType = \"LOGNORMAL\"",
        "    } else {",
        "        volType = \"NORMAL\"",
        "    }",
        "    newFormat = false",
        "    oldFormat = false",
        "    ifnot type.canonical == \"SWAPTIONCUBE\" {",
        "        quoteFormat = volSurface.instruments[1]",
        "        if quoteFormat.find(volType) {",
        "            newFormat = true",
        "        } else {",
        "            oldFormat = true",
        "        }",
        "    }",
        "    // Get vol surface quotes, example: IR.USD-LIBOR-3M.VOL.SWPT.RLTV.ATM.LOGNORMAL.MID::1M::1Y, or IR.USD-LIBOR-3M.VOL.SWPT.ATM.MID::1M::1Y",
        "    if type.canonical == \"SWAPTIONCUBE\" {",
        "        allVolQts = Numerix::CreateMetaData(fullQuoteDep) = \"IR.<Currency>-<UIndex>-<IndexTenor>.VOL.SWPT.<StrikeType>.<ATM>.\" + volType + \".<QuoteType>::<optionTenor>::<swapTenor>\"",
        "        xCurrency = allVolQts.value(\"Currency\")[1]",
        "        xUIndex = allVolQts.value(\"UIndex\")[1]",
        "        xIndexTenor = allVolQts.value(\"IndexTenor\")[1]",
        "        xQuoteType = allVolQts.value(\"QuoteType\")[1]",
        "        xStrikeType = allVolQts.value(\"StrikeType\")[1]",
        "    } else {",
        "        if oldFormat {",
        "            surface = Numerix::CreateMetaData(fullQuoteDep) = \"IR.<Currency>-<UIndex>-<IndexTenor>.VOL.SWPT.ATM.<QuoteType>::<optionTenor>::<swapTenor>\"",
        "            allVolQts = surface",
        "            xCurrency = surface.value(\"Currency\")[1]",
        "            xUIndex = surface.value(\"UIndex\")[1]",
        "            xIndexTenor = surface.value(\"IndexTenor\")[1]",
        "            xQuoteType = surface.value(\"QuoteType\")[1]",
        "        }",
        "        if newFormat {",
        "            cube = Numerix::CreateMetaData(fullQuoteDep) = \"IR.<Currency>-<UIndex>-<IndexTenor>.VOL.SWPT.<StrikeType>.ATM.\" + volType + \".<QuoteType>::<optionTenor>::<swapTenor>\"",
        "            allVolQts = cube",
        "            xCurrency = cube.value(\"Currency\")[1]",
        "            xUIndex = cube.value(\"UIndex\")[1]",
        "            xIndexTenor = cube.value(\"IndexTenor\")[1]",
        "            xQuoteType = cube.value(\"QuoteType\")[1]",
        "            xStrikeType = cube.value(\"StrikeType\")[1]",
        "        }",
        null,
        "    }",
        null,
        "    TodayDate = Numerix::Date((Numerix::Registry.Key(\"Local ID\") = \"TODAY\").DatesInput)",
        null,
        "    // Get underlying trade option expirtation and swap expirtations in both tenor and date type",
        "    optionTenors = Numerix::Set(allVolQts.Value(\"OPTIONTENOR\"))",
        "    optionDates = Numerix::AddTenor(TodayDate, Numerix::Tenor(optionTenors))",
        "    optionMap = Numerix::Map(optionDates.type(\"String\"), optionTenors)",
        "    optionDates = optionDates.sort()",
        null,
        "    swapTenors = Numerix::Set(allVolQts.Value(\"SWAPTENOR\"))",
        "    swapDates = Numerix::AddTenor(TodayDate, Numerix::Tenor(swapTenors))",
        "    swapMap = Numerix::Map(swapDates.type(\"String\"), swapTenors)",
        "    swapDates = swapDates.sort()",
        null,
        "    bumpOptionTenors = {}",
        "    bumpSwapTenors = {}",
        "    volSurfaces = {}",
        "    kpVolQtIDs = {}",
        null,
        "    foreach swaption in swaptions {",
        "        swaption = swaption.load",
        "        bumpOptionTenor = swaption.starttenor",
        "        bumpOptionTenors.push(bumpOptionTenor)",
        "        bumpSwapTenor = swaption.endtenor",
        "        bumpSwapTenors.push(bumpSwapTenor)",
        "        volSurface = swaption.sigma1",
        "        volSurfaces.push(volSurface)",
        null,
        "        bumpOptionDate = Numerix::AddTenor(TodayDate, Numerix::Tenor(bumpOptionTenor))",
        "        kpOptionDates = {}",
        "        // need to find the surrounding quotes in the dependent quotes",
        "        // three cases, option date prior to the earliest, further than the latest, or in between",
        "        if optionDates.find(bumpOptionDate) {",
        "            kpOptionDates.push(bumpOptionDate)",
        "        } else {",
        "            IF bumpOptionDate < optionDates[1] THEN",
        "                kpOptionDates.push(optionDates[1])",
        "            ELSEIF bumpOptionDate > optionDates[optionDates.size] THEN",
        "                kpOptionDates.push(optionDates[optionDates.size])",
        "            ELSE",
        "                i = 1",
        "                while bumpOptionDate > optionDates[i] {",
        "                    i += 1",
        "                }",
        "                kpOptionDates.push(optionDates[i-1])",
        "                kpOptionDates.push(optionDates[i])",
        "            ENDIF",
        "        }",
        "        kpOptionDates = Numerix::Set(kpOptionDates)",
        null,
        "        bumpSwapDate = Numerix::AddTenor(TodayDate, Numerix::Tenor(bumpSwapTenor))",
        "        kpSwapDates = {}",
        "        if swapDates.find(bumpSwapDate) {",
        "            kpSwapDates.push(bumpSwapDate)",
        "        } else {",
        "            IF bumpSwapDate < swapDates[1] THEN",
        "                kpSwapDates.push(swapDates[1])",
        "            ELSEIF bumpSwapDate > swapDates[swapDates.size] THEN",
        "                kpSwapDates.push(swapDates[swapDates.size])",
        "            ELSE",
        "                i = 1",
        "                while bumpSwapDate > swapDates[i] {",
        "                    i += 1",
        "                }",
        "                kpSwapDates.push(swapDates[i-1])",
        "                kpSwapDates.push(swapDates[i])",
        "            ENDIF",
        "        }",
        "        kpSwapDates = Numerix::Set(kpSwapDates)",
        null,
        "        kpVolQtIDs = NxRSF::filteredSwaptionVolQuotes()",
        "    } // foreach swaption in swaptions",
        "    kpVolQtIDs = Numerix::Set(kpVolQtIDs)",
        null,
        "    allVolQtIDs = allVolQts.Value(\"Key\")",
        "    // quotes in both lists are removed",
        "    volQuoteDepToRemove = allVolQtIDs ^ kpVolQtIDs",
        "    removeQuotes = this.IgnoreQuotesForRisk(volQuoteDepToRemove)",
        "}",
        null,
        "// Filter volatility quote dependecy for european swaption",
        "function NxStd::EUSwaptionDependencyFilter() {",
        "    // If the market quote is a single value, no dependecy update needed",
        "    ifnot this.MarketQuote.type == \"Double\" {",
        "        type = this.MarketQuote.load.value(\"TYPE\")",
        "        volType = this.MarketQuote.load.quotetype",
        "        if volType.canonical == \"LOGNORMALVOL\" {",
        "            VolType = \"LOGNORMAL\"",
        "        } else {",
        "            VolType = \"NORMAL\"",
        "        }",
        "        // Check swaption cube or volatility surface",
        "        newFormat = false",
        "        oldFormat = false",
        "        ifnot type.canonical == \"SWAPTIONCUBE\" {",
        "            quoteFormat = this.MarketQuote.instruments[1]",
        "            if quoteFormat.find(volType) {",
        "                newFormat = true",
        "            } else {",
        "                oldFormat = true",
        "            }",
        "        }",
        "        // Retrieve all dependent quotes",
        "        fullQuoteDep = this.AllQuotes",
        "        // Get vol surface quotes, example: IR.USD-LIBOR-3M.VOL.SWPT.RLTV.ATM.LOGNORMAL.MID::1M::1Y, or IR.USD-LIBOR-3M.VOL.SWPT.ATM.MID::1M::1Y",
        "        if type.canonical == \"SWAPTIONCUBE\" {",
        "            allVolQts = Numerix::CreateMetaData(fullQuoteDep) = \"IR.<Currency>-<UIndex>-<IndexTenor>.VOL.SWPT.<StrikeType>.<ATM>.\" + volType + \".<QuoteType>::<optionTenor>::<swapTenor>\"",
        "            xCurrency = allVolQts.value(\"Currency\")[1]",
        "            xUIndex = allVolQts.value(\"UIndex\")[1]",
        "            xIndexTenor = allVolQts.value(\"IndexTenor\")[1]",
        "            xQuoteType = allVolQts.value(\"QuoteType\")[1]",
        "            xStrikeType = allVolQts.value(\"StrikeType\")[1]",
        "        } else {",
        "            if newFormat {",
        "                cube = Numerix::CreateMetaData(fullQuoteDep) = \"IR.<Currency>-<UIndex>-<IndexTenor>.VOL.SWPT.<StrikeType>.ATM.\" + volType + \".<QuoteType>::<optionTenor>::<swapTenor>\"",
        "                allVolQts = cube",
        "                xCurrency = cube.value(\"Currency\")[1]",
        "                xUIndex = cube.value(\"UIndex\")[1]",
        "                xIndexTenor = cube.value(\"IndexTenor\")[1]",
        "                xQuoteType = cube.value(\"QuoteType\")[1]",
        "                xStrikeType = cube.value(\"StrikeType\")[1]",
        "            }",
        "            if oldFormat {",
        "                surface = Numerix::CreateMetaData(fullQuoteDep) = \"IR.<Currency>-<UIndex>-<IndexTenor>.VOL.SWPT.ATM.<QuoteType>::<optionTenor>::<swapTenor>\"",
        "                allVolQts = surface",
        "                xCurrency = surface.value(\"Currency\")[1]",
        "                xUIndex = surface.value(\"UIndex\")[1]",
        "                xIndexTenor = surface.value(\"IndexTenor\")[1]",
        "                xQuoteType = surface.value(\"QuoteType\")[1]",
        "            }",
        "        }",
        "        ",
        "        TodayDate = Numerix::Date((Numerix::Registry.Key(\"Local ID\") = \"TODAY\").DatesInput)",
        "        if TradeTerms.TradeDate {",
        "            TradeDate = TradeTerms.TradeDate",
        "        } else {",
        "            TradeDate = TodayDate",
        "        }",
        null,
        "        // Get all unique option dates on vol surface in a sorted order",
        "        optionTenors = allVolQts.value(\"OPTIONTENOR\")",
        "        optionTenors = Numerix::Set(optionTenors)",
        "        optionDates = Numerix::AddTenor(TodayDate, Numerix::Tenor(optionTenors))",
        "        optionMap = Numerix::Map(optionDates.type(\"String\"), optionTenors)",
        "        optionDates = optionDates.sort()",
        "        ",
        "        // Get underlying trade option expirtation and swap end in both tenor and date type",
        "        optionExpiry = TradeTerms.OptionExpiry",
        "        ifnot optionExpiry is \"Date\"{",
        "            tradeOptionDate = Numerix::AddTenor(TradeDate, Numerix::Tenor(optionExpiry))",
        "        } else {",
        "            tradeOptionDate = optionExpiry",
        "        }",
        "        swapEnd = TradeTerms.SwapEnd",
        "        kpSwapDates = {}",
        "        ifnot swapEnd is \"Date\"{",
        "            tradeSwapDate = Numerix::AddTenor(tradeOptionDate, Numerix::Tenor(swapEnd))",
        "        } else {",
        "            tradeSwapDate = swapEnd",
        "        }",
        "        ",
        "        // Find neighboring points on vol surface for option",
        "        kpOptionDates = {tradeOptionDate}",
        "        ifnot optionDates.find(tradeOptionDate) {",
        "            IF tradeOptionDate < optionDates[1] THEN",
        "                kpOptionDates = {optionDates[1]}",
        "            ELSEIF tradeOptionDate > optionDates[optionDates.size] THEN",
        "                kpOptionDates = {optionDates[optionDates.size]}",
        "            ELSE",
        "                i = 1",
        "                while tradeOptionDate > optionDates[i] {",
        "                    i += 1",
        "                }",
        "                kpOptionDates = {optionDates[i-1], optionDates[i]}",
        "            ENDIF",
        "        }",
        "        ",
        "        // Find the reference swap start date on vol surface",
        "        if kpOptionDates.size == 1 {",
        "            refDate = kpOptionDates[1]",
        "        } else {",
        "            diffTenor = ROUND(Numerix::GetCalendarDayCount(kpOptionDates[1], tradeOptionDate)/365, 0, UP)",
        "            refDate = kpOptionDates[1]+diffTenor*365",
        "        }",
        "        ",
        "        // Get all unique swap dates on vol surface in a sorted order",
        "        swapTenors = allVolQts.value(\"SWAPTENOR\")",
        "        swapTenors = Numerix::Set(swapTenors)",
        "        swapDates = Numerix::AddTenor(refDate, Numerix::Tenor(swapTenors))",
        "        swapMap = Numerix::Map(swapDates.type(\"String\"), swapTenors)",
        "        swapDates = swapDates.sort()",
        "        ",
        "        // Find neighboring points on vol surface for swap",
        "        ifnot swapDates.find(tradeSwapDate) {",
        "            IF tradeSwapDate < swapDates[1] THEN",
        "                kpSwapDates = {swapDates[1]}",
        "            ELSEIF tradeSwapDate > swapDates[swapDates.size] THEN",
        "                kpSwapDates = {swapDates[swapDates.size]}",
        "            ELSE",
        "                i = 1",
        "                while tradeSwapDate > swapDates[i] {",
        "                    i += 1",
        "                }",
        "                kpSwapDates = {swapDates[i-1], swapDates[i]}",
        "            ENDIF",
        "        }",
        null,
        "        // extract vol quotes for this term",
        "        kpvolQtIDs = {}",
        "        kpvolQtIDs = NxRSF::filteredSwaptionVolQuotes()",
        null,
        "        allVolQtID = allVolQts.value(\"KEY\")",
        "        // quotes in both lists are removed",
        "        volQuoteDepToRemove = allVolQtID ^ kpvolQtIDs",
        "        removeQuotes = this.IgnoreQuotesForRisk(volQuoteDepToRemove)",
        "    } // ifnot this.MarketQuote.type == \"Double\"",
        "}",
        "// Get Last known fixings at a data from a Fixings object.",
        "function NxStd::GetLastFixings(objectID, dateValue, maxtryTenor=\"1W\")",
        "{",
        "     date = dateValue // Create local version that can be queried",
        null,
        "     // Verify object.",
        "	 ",
        "    fixings = Numerix::Registry(objectID)",
        "    if not fixings",
        "	{",
        "        return Numerix::SetFatal(\"\\\"\" + objectID + \"\\\" fixings object not found\")",
        "    }",
        "    if date.Type <> \"DATE\"",
        "	{",
        "        date = Numerix::Date(date)",
        "        if date.Type <> \"DATE\"",
        "		{",
        "            return Numerix::SetFatal(\"\\\"\" + date + \"\\\" not date\")",
        "        }",
        "    }",
        "	 ",
        "    // Find specific date and return value",
        "    dates = fixings.Dates",
        "    if dates.type ==\"DATE\":",
        "        dates = {dates}",
        "    MinDate = Numerix::SubtractTenor(date,Numerix::Tenor(maxtryTenor,\"NONE\",\"NONE\"))",
        "    d=date",
        "    loc=0",
        "    while d >= MinDate",
        "    {",
        "        loc = dates.Find(d)",
        "        if loc:",
        "            break",
        "        d = Numerix::SubtractTenor(d,Numerix::Tenor(\"1BD\",\"NONE\",\"NONE\"))",
        "    }",
        "    if not loc",
        "	{",
        "        //Numerix::SetMajor(\"\\\"\" + date +  \"\\\" not found in fixings object  \\\"\" + objectID + \"\\\"\")",
        "        return {}",
        "    }",
        null,
        "    return fixings.At[loc].FixingValue",
        "}",
        "// get Equity price base on common logic",
        "function NxStd::getEquityPrice(FixDate_, Fixings_, DiscountCurve_, DividendCurve_)",
        "{",
        "    RefPrice={}",
        "    if ValueDate==FixDate_",
        "    {",
        "        // On valuation date, returns fixing then market quote",
        "        RefPrice=NxStd::GetLastFixings(Fixings_,FixDate_,\"0BD\")",
        "        ifnot RefPrice:",
        "            RefPrice=Numerix::Quote(SpotPrice).Value",
        "    }elseif ValueDate > FixDate_",
        "    {",
        "        // find last known fixed value for past date",
        "        RefPrice=NxStd::GetLastFixings(Fixings_,FixDate_,\"1W\")",
        "    }else{",
        "        // find projected spot price based on market data/scenarios",
        "        a=Numerix::Quote(SpotPrice).Value",
        "        RefPrice=Numerix::GetEquityForwardPrice(ValueDate,FixDate_,a,DiscountCurve_,DividendCurve_,Numerix::Tenor(\"0bd\",\"None\", \"None\"), \"None\")",
        "    }",
        "    return if RefPrice?RefPrice:0.0",
        "}",
        "// returns payoff of European Options",
        "function NxStd::VanillaPayoff(flavor,buysell,Notional,strike,refPrice, isDigital = false)",
        "{",
        "    cp=if flavor==#\"call\"?1:-1",
        "    bs=if buysell==#\"buy\"?1:-1",
        "    payoff = cp*(refPrice - strike)",
        "    if isDigital:",
        "        return Numerix::Double(bs * Notional * (if payoff > 0 ? 1 : 0))",
        "    else:",
        "        return Numerix::Double(bs * Notional * (if payoff > 0 ? payoff : 0))",
        "}",
        "// get Cmdty price base on common logic",
        "constfunction NxStd::getCmdtyPrice(FixDate_,Fixings_,ForwardCurve_)",
        "{",
        "    RefPrice={}",
        "    ",
        "    if ValueDate==FixDate_",
        "    {",
        "        // On valuation date, returns fixing then market quote",
        "        RefPrice = NxStd::GetLastFixings(Fixings_,FixDate_,\"0BD\")",
        "        ifnot RefPrice:",
        "            RefPrice = Numerix::Quote(SpotPrice).Value",
        "    }elseif ValueDate > FixDate_",
        "    {",
        "        // find last known fixed value for past date",
        "        RefPrice = NxStd::GetLastFixings(Fixings_,FixDate_,\"1W\")",
        "    }else{",
        "        // find projected spot price based on market data/scenarios",
        "        a = Numerix::Quote(SpotPrice).Value",
        "        RefPrice = Numerix::GetForwardPrice(ForwardCurve_,FixDate_)",
        "    }",
        "    return if RefPrice?RefPrice:0.0",
        "}",
        "// get FX price base on common logic",
        "constfunction NxStd::getFXPrice(FixDate_,Fixings_,BaseDiscountCurve_,TermDiscountCurve_)",
        "{",
        "    RefPrice={}",
        "    if ValueDate==FixDate_",
        "    {",
        "        // On valuation date, returns fixing then market quote",
        "        RefPrice=NxStd::GetLastFixings(Fixings_,FixDate_,\"0BD\")",
        "        ifnot RefPrice:",
        "            RefPrice=Numerix::Quote(SpotPrice).Value",
        "    }elseif ValueDate > FixDate_",
        "    {",
        "        // find last known fixed value for past date",
        "        RefPrice=NxStd::GetLastFixings(Fixings_,FixDate_,\"1W\")",
        "    }else{",
        "        // find projected spot price based on market data/scenarios",
        "        a=Numerix::Quote(SpotPrice).Value",
        "        RefPrice=a * Numerix::GetDF(TermDiscountCurve_,ValueDate,FixDate_)/ Numerix::GetDF(BaseDiscountCurve_,ValueDate,FixDate_)",
        "    }",
        "    return if RefPrice?RefPrice:0.0",
        "}",
        "// return absolute value(s)",
        "constfunction NxStd::ABS(values)",
        "{",
        "    ifnot values is \"LIST\":",
        "        return if values < 0 ? -values : values",
        null,
        "    res={}",
        "    foreach v in values:",
        "        res @= if v < 0 ? -v : v",
        "    return res",
        "}",
        "// return Arrears Reset flag data type",
        "constfunction NxStd::ArrearsResetFlagIndex(callEvt, couponEvt, indexName)",
        "{",
        "    ifnot callEvt:",
        "        Numerx::setMajor(\"Call event is not defined\")",
        "    ifnot couponEvt:",
        "        Numerx::setMajor(\"Coupon event is not defined\")",
        "    ",
        "    call = Numerix::Object({\"DataIndex\" + Numerix::UniqueNumber, \"INDEX\", \"DATA\"}) & ",
        "    {",
        "		\"name\"              : indexName,",
        "        \"interest events\"   : couponEvt,",
        "        \"option events\"     : callEvt",
        "    }",
        "    return call.create",
        "}",
        null,
        "// return true if marketDate is strictly prior to the latest fix date",
        "function NxStd::isPriorToTheLastDate(RefEvent, DateString = \"FIXDATE\", Today = Numerix::MarketDate)",
        "{",
        "    ifnot RefEvent.Exists :",
        "        throw \"\\\"\" + RefEvent + \"\\\" not found\"",
        "    ifnot Today is \"DATE\":",
        "        throw \"\\\"\" + Today + \"\\\" is not Date format\"",
        "    ",
        "    try{",
        "       refDates = Numerix::Date(Numerix::query(RefEvent, DateString + \"=<Date>\", \"Date\").DATE)",
        "    }",
        "    catch error",
        "    {",
        "        throw \"\\\"\" + RefEvent + \"\\\" format not supoorted\"",
        "    }",
        "    ifnot refDates is \"LIST\":",
        "        refDates = {refDates}",
        "    else:",
        "        refDates = refDates.sort()",
        "    return if Today > refDates[refDates.size] ? false : true",
        "}",
        null,
        null,
        "constfunction NxStd::Round(value, decimal, method)",
        "{",
        "    switch on method.canonical",
        "        case \"BANKERS\"",
        "            res = round(value, decimal, BANKERS)",
        "        case \"DWN\"",
        "            res = round(value, decimal, DWN)",
        "        case \"NEAREST\"",
        "            res = round(value, decimal, NEAREST)",
        "        case \"TRUNCATE\"",
        "            res = round(value, decimal, TRUNCATE)",
        "        case \"TRUNC\"",
        "            res = round(value, decimal, TRUNC)",
        "        case \"UP\"",
        "            res = round(value, decimal, UP)",
        "        default",
        "            res = value",
        "    endswitch",
        "    return res    ",
        "}",
        null,
        "constfunction NxStd::TableRemoveNullRows(objectID, header)",
        "{",
        "    ifnot objectID.Exists :",
        "        throw \"\\\"\" + objectID + \"\\\" not found\"",
        null,
        "    ifnot header is \"string\" :",
        "        throw \"\\\"\" + header + \"\\\" used on \\\"\" + objectID + \"\\\" not string\"",
        null,
        null,
        "    keys = Numerix::TableRowHeaders(objectID).canonical",
        "    j = keys.find(header.canonical)",
        "    ",
        "    isNull = false",
        "    foreach t in objectID.load:",
        "        ifnot Numerix::TableValue(objectID, j, t.iteration)",
        "        {",
        "            isNull = true",
        "            break",
        "        }",
        "    ifnot isNull:",
        "        return objectID",
        "        ",
        "    refs = objectID.load.values",
        null,
        "    a = Numerix::Table(NxStd::MakeID(\"table\"), refs[j], refs.transpose).create",
        "    b = a.load.remove(\"{}\").values",
        "    ",
        "    refs.clear",
        "    Numerix::Delete(a)",
        "    ",
        "    return Numerix::Table(NxStd::MakeID(\"table\"), keys, b.transpose).create",
        "}",
        null,
        null,
        "function NxStd::GetFXT0(ReportingCurrency, PVCurrency)",
        "{",
        "    if ReportingCurrency",
        "    {",
        "        if ReportingCurrency == PVCurrency",
        "        {",
        "            return 1",
        "        }",
        "        else",
        "        {",
        "            ReportingCurrencyDiscountCurve = NxStd::FXDiscountCurveID(ReportingCurrency, PVCurrency, Numerix::getsettings(\"Settings.Currency\",ReportingCurrency,\"IRIndex\"),Numerix::getsettings(\"Settings.Currency\",ReportingCurrency,\"IRIndexTenor\"))",
        "            PVCurrencyDiscountCurve = NxStd::FXDiscountCurveID(PVCurrency, ReportingCurrency, Numerix::getsettings(\"Settings.Currency\",PVCurrency,\"IRIndex\"),Numerix::getsettings(\"Settings.Currency\",PVCurrency,\"IRIndexTenor\"))",
        "            ",
        "            FXSpotStrategy = NxStd::FXSpotStrategyID(PVCurrency, ReportingCurrency)",
        "            if Numerix::TryResolve(FXSpotStrategy)",
        "            {",
        "                call = Numerix::Object({\"SPOT_DATE\", \"NUMERIX INTERNAL\", \"SPOT STRATEGY DISPLAY\"}) & ",
        "                {",
        "                    \"tenor\"              : \"1M\",",
        "                    \"now date\"           : Numerix::MarketDate,",
        "                    \"spot strategy\"      : FXSpotStrategy",
        "                }",
        null,
        "                spotdateviewer = call.Create",
        "                fx_spotdate = spotdateviewer.VIew(\"SPOTDATE\")",
        "            }",
        "            else",
        "            {",
        "                fx_spotdate = Numerix::MarketDate+Numerix::Tenor(\"2BD\",\"NONE\",\"NONE\")",
        "            }",
        "            ",
        "            if Numerix::KeyExists(\"Settings.CurrencyPair\", PVCurrency + ReportingCurrency)",
        "            {",
        "                fx_spot = Numerix::Quote(NxStd::FXSpotQuote(ReportingCurrency, PVCurrency)).value",
        "                r_ccy_df = Numerix::GetDF(ReportingCurrencyDiscountCurve,Numerix::MarketDate, fx_spotdate)",
        "                pv_ccy_df = Numerix::GetDF(PVCurrencyDiscountCurve,Numerix::MarketDate, fx_spotdate) ",
        "                fx_0 = fx_spot * r_ccy_df / pv_ccy_df",
        "            }",
        "            elseif Numerix::KeyExists(\"Settings.CurrencyPair\", ReportingCurrency + PVCurrency)",
        "            {",
        "                fx_spot = Numerix::Quote(NxStd::FXSpotQuote(PVCurrency,ReportingCurrency)).value",
        "                r_ccy_df = Numerix::GetDF(ReportingCurrencyDiscountCurve,Numerix::MarketDate, fx_spotdate)",
        "                pv_ccy_df = Numerix::GetDF(PVCurrencyDiscountCurve,Numerix::MarketDate, fx_spotdate) ",
        "                fx_0 = 1 / fx_spot * r_ccy_df / pv_ccy_df",
        "            }",
        "            else",
        "            {",
        "                Numerix::SetFatal(\"can not find \"+ ReportingCurrency +  \" and \" + PVCurrency + \" currency pair in Setting.CurrencyPair\")",
        "            }",
        "            ",
        "            return fx_0",
        "        }",
        "    }",
        "    else",
        "    {",
        "        return 0",
        "    }",
        "}",
        null,
        "constfunction NxStd::isFromgFixing(fixingSeries, refDates)",
        "{",
        "    dt = Numerix::Date(if refDates is \"LIST\" ? refDates : {refDates})",
        "    dt_keys = fixingSeries.load.fixings.load.date",
        "    ifnot dt_keys is \"LIST\":",
        "        dt_keys = {dt_keys}",
        "    foreach d in dt:",
        "        ifnot dt_keys.find(d):",
        "            return false",
        "    return true    ",
        "}"]
    }
  },
  "PRICINGPOLICY.DEFAULT": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "PRICINGPOLICY.DEFAULT",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "PRICINGPOLICY.DEFAULT.PARAMETERS",
      "RESULTS" : "PRICINGPOLICY.DEFAULT.RESULTS",
      "CLASSPROPERTIES" : "PRICINGPOLICY.DEFAULT.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "PRICINGPOLICY.DEFAULT.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "MEMBER" : "PRICINGPOLICY.DEFAULT.FUNCTIONS",
      "MEMBER" : "PRICINGPOLICY.DEFAULT.CC_PRICING_RULES_SPEC",
      "MEMBER" : "PRICINGPOLICY.DEFAULT.CMDTY_EQ_PRICING_RULES_SPEC",
      "MEMBER" : "PRICINGPOLICY.DEFAULT.FX_PRICING_RULES_SPEC",
      "MEMBER" : "PRICINGPOLICY.DEFAULT.IR_PRICING_RULES_SPEC",
      "MEMBER" : "PRICINGPOLICY.DEFAULT.NAME_VALUE_SPEC",
      "MEMBER" : "PRICINGPOLICY.DEFAULT.CR_PRICING_RULES_SPEC",
      "MEMBER" : "PRICINGPOLICY.DEFAULT.INFL_PRICING_RULES_SPEC",
      "MEMBER" : "PRICINGPOLICY.DEFAULT.HY_PRICING_RULES_SPEC",
      "SCRIPT" : "PRICINGPOLICY.DEFAULT.SCRIPT.NXSL"
    }
  },
  "CONTEXT^OPTIONS_10056_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "Name" : ["IR Quality"],
      "OptionType" : ["Double"],
      "Value" : [1]
    }
  },
  "CONTEXT^CMDTYPRICINGRULES_10058_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "Name" : ["Swaption Rule","European On Spot","Crack Spread","Calendar Spread","Futures","Calendar Swap","Commodity Range Accrual1","Commodity Forward 1","Commodity American Option 1","Commodity Bullet Option 1","Accumulator","Asian","TARN","Default HY CMDTY Factor Model"],
      "Product Code" : ["CMDTYSWAPTION","CMDTYEUOPT","CRACKSPREAD","CALENDARSPREAD","FUTURES","CMDTYCALENDARSWAP","RANGEACCRUAL","CMDTYFWD","AMERICAN","Bullet","ACCUMULATOR","ASIAN","TARN","*"],
      "Trade ID" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Predicate" : [null,null,null,null,null,null,null,null,null,null,null,null,null,"TERMSASSETCLASS==\"HY\""],
      "Currency" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Exchange" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Ticker" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Pricer Template" : ["SWAPTION","EUROPEAN","CRACKSPREAD","CALENDARSPREAD","FUTURES","CALENDARSWAP","RANGEACCRUAL","FORWARD","AMERICAN","BULLETOPTION","ACCUMULATOR","ASIAN","TARN",null],
      "Pricer Parameters" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Comment" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Model Template" : ["BS",null,null,null,null,null,"BS",null,null,null,"BS","BS","BS","BS"],
      "Model Parameters" : ["{\"Exchange\",Exchange},{\"Quote Type\",QuoteType},{\"Symbol\",Ticker},{\"Currency\",Currency}",null,null,null,null,null,"{\"Exchange\",Exchange},{\"Quote Type\",QuoteType},{\"Symbol\",Ticker},{\"Currency\",Currency}",null,null,null,"{\"Exchange\",Exchange},{\"Quote Type\",QuoteType},{\"Symbol\",Ticker},{\"Currency\",Currency}","{\"Exchange\",Exchange},{\"Quote Type\",QuoteType},{\"Symbol\",Ticker},{\"Currency\",Currency}","{\"Exchange\",Exchange},{\"Quote Type\",QuoteType},{\"Symbol\",Ticker},{\"Currency\",Currency}","{\"Exchange\",Exchange},{\"Quote Type\",QuoteType},{\"Symbol\",Ticker},{\"Currency\",Currency}"]
    }
  },
  "CONTEXT^INFLPRICINGRULES_10060_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "Name" : ["Zero Coupon Inflation Swap Rule","INFLATION LINKED BOND","CPI Cap Floor","LPI Swap","Callable Inflation Swap","YOYSwap Rule"],
      "Product Code" : ["ZCIIS","ILBOND","CPICAPFLOOR","LPISWAP","CALLABLEINFLSWAP","YOYSWAP"],
      "Trade ID" : ["*","*","*","*","*","*"],
      "Predicate" : [null,null,null,null,null,null],
      "Currency" : ["*","*","*","*","*","*"],
      "Inflation Index" : ["*","*","*","*","*","*"],
      "Pricer Template" : ["ZCIIS","ILBOND","CPICAPFLOOR","LPISWAP","CALLABLEINFLSWAP","YOYSWAP"],
      "Pricer Parameters" : [null,null,null,null,null,null],
      "Comment" : [null,null,null,null,null,null],
      "Model Template" : [null,null,null,"JY","JY","JY"],
      "Model Parameters" : [null,null,null,"{\"Inflation Index\",InflationIndex},{\"Currency\",Currency}","{\"Inflation Index\",InflationIndex},{\"Currency\",Currency}","{\"Inflation Index\",InflationIndex},{\"Currency\",Currency}"]
    }
  },
  "CONTEXT^CRPRICINGRULES_10062_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "Name" : ["CDS rule 1","CDX rule 1","CDO rule 1","Asset Swap","Default HY CR Factor Model (Bond Curve)","Default HY CR Factor Model","CMS Vari Cap Note","HY CR Factor Model for MWC feature","HY CR Factor Model for MWC feature","HY CR Factor Model for MWC feature"],
      "Product Code" : ["CDS","CDSIndex","STATICCDO","ASSETSWAP","*","*","CMSVARICAPNOTES","CRFUNDINDEXNOTES","CRSWITCHNOTES","CRCMSNOTES"],
      "Trade ID" : ["*","*","*","*","*","*","*","*","*","*"],
      "Predicate" : [null,null,null,null,"TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\""],
      "Currency" : ["*","*","*","*","*","*","*","*","*","*"],
      "Reference Entity" : ["*","*","*","*","*","*","*","*","*","*"],
      "Debt Type" : ["*","*","*","*","*","*","*","*","*","*"],
      "Restructuring Clause" : ["*","*","*","*","BOND","*","*","MWC","MWC","MWC"],
      "Pricer Template" : ["CDS","CDSIndex","STATICCDO","ASSETSWAP",null,null,null,null,null,null],
      "Pricer Parameters" : [null,null,null,null,null,null,null,null,null,null],
      "Comment" : [null,null,null,null,null,null,null,null,null,null],
      "Model Template" : [null,null,null,null,"DET","DET","DET","DET_ESUN","DET_ESUN","DET_ESUN"],
      "Model Parameters" : [null,null,null,null,"{\"Quote Type\",QuoteType},{\"Credit Curve\",NxStd::BondCurveID(Currency, DebtType, ReferenceEntity)},{\"Debt Type\",DebtType},{\"Restructuring Clause\",RestructuringClause},{\"Currency\",Currency},{\"Reference Entity\",ReferenceEntity}","{\"Quote Type\",QuoteType},{\"Debt Type\",DebtType},{\"Restructuring Clause\",RestructuringClause},{\"Currency\",Currency},{\"Reference Entity\",ReferenceEntity}","{\"Quote Type\",QuoteType},{\"Debt Type\",DebtType},{\"Restructuring Clause\",RestructuringClause},{\"Currency\",Currency},{\"Reference Entity\",ReferenceEntity}","{\"Basis\",TradeTerms.CouponBasis},{\"Quote Type\",QuoteType},{\"Debt Type\",DebtType},{\"Restructuring Clause\",RestructuringClause},{\"Currency\",Currency},{\"Credit Spread\",0},{\"Reference Entity\",ReferenceEntity},{\"Yield to Maturity\",TradeTerms.GetYTM(TradeTerms.CouponBasis)}","{\"Basis\",TradeTerms.CouponBasis},{\"Quote Type\",QuoteType},{\"Debt Type\",DebtType},{\"Restructuring Clause\",RestructuringClause},{\"Currency\",Currency},{\"Credit Spread\",0},{\"Reference Entity\",ReferenceEntity},{\"Yield to Maturity\",TradeTerms.GetYTM(TradeTerms.CouponBasis)}","{\"Basis\",TradeTerms.CouponBasis},{\"Quote Type\",QuoteType},{\"Debt Type\",DebtType},{\"Restructuring Clause\",RestructuringClause},{\"Currency\",Currency},{\"Credit Spread\",0},{\"Reference Entity\",ReferenceEntity},{\"Yield to Maturity\",TradeTerms.GetYTM(TradeTerms.CouponBasis)}"]
    }
  },
  "CONTEXT^CCPRICINGRULES_10064_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "Name" : ["CC Fee Rule","Fixed Float Digital","PRDC TARN Swap 1","Bermudan PRDC Swap 1","CC Fixed Float Pricer","CC Fixed Fixed Fixed Pricer","CC Fixed Float Swap Pricer","CC Float Float Swap Pricer","CC Fixed Fixed Swap Pricer","CC ARR Basis Pricer (SONIA Domestic)","CC ARR Basis Pricer (SONIA Foreign)","CC ARR Basis Pricer","CC Resettable Basis Swap Pricer","CC Compound Fixed Float Swap Pricer","CC Compound Float Float Swap Pricer","CC Fixed-Fiexed Swap","Currency Swap","ARR Non-Deliverable Currency Swap","Non-Deliverable Currency Swap"],
      "Product Code" : ["FEE","FIXEDFLOATDIGITAL","PRDCTARNSWAP","BERMUDANPRDCSWAP","FixFloat","FixedFixed","FixedFloatSwap","FloatFloatSwap","FixedFixedSWAP","ARRBasisSwap","ARRBasisSwap","ARRBasisSwap","RESETTABLECCSWAP","CompoundFixedFloatSwap","CompoundFloatFloatSwap","CCSWAP","CCSWAP","CCSWAP","CCSWAP"],
      "Trade ID" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Predicate" : ["TradeTerms.OtherCurrencies.Size  > 0",null,null,null,null,null,null,null,null,"TRADETERMS.DOMESTICREFERENCEINDEX.NAME==#\"SONIA\"","TRADETERMS.FOREIGNREFERENCEINDEX.NAME==#\"SONIA\"",null,null,null,null,"TradeTerms.Leg1Type.Canonical == \"FIXED\" AND TradeTerms.Leg2Type.Canonical == \"FIXED\"","TradeTerms.CashSettlement == False","TradeTerms.IsARRIndex == True AND TradeTerms.CashSettlement == True",null],
      "CurrencyPair1" : ["*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*","*/*"],
      "CurrencyPair2" : ["*/*",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "CurrencyPair3" : ["*/*",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Pricer Template" : ["FEE","FIXEDFLOATDIGITAL","PRDCTARNSWAP","BERMUDANPRDCSWAP","FixedFloat","FIXEDFIXED","FixedFloatSWAP","FloatFloatSWAP","FixedFixedSwap","ARRBasisSWAP","ARRBasisSWAP","ARRBasisSWAP","ResettableBasisSwap","CompoundFixedFloatSwap","CompoundFloatFloatSWAP","CCSWAP","CCSWAP","CCSWAP","CCSWAP"],
      "Pricer Parameters" : [null,null,null,null,null,null,null,null,null,"{\"DOMESTIC PROJECTION CURVE\",\"IR.GBP-SONIA-ON.ARR.MID\"}","{\"FOREIGN PROJECTION CURVE\",\"IR.GBP-SONIA-ON.ARR.MID\"}",null,null,null,null,"{\"Base Discount Curve\",NxStd::FXDiscountCurveID(TradeTerms.BaseCurrency,TradeTerms.TermCurrency,Numerix::GetSettings(\"Settings.Currency\",TradeTerms.BaseCurrency,\"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",TradeTerms.BaseCurrency,\"IRIndexTenor\"))},{\"Term Discount Curve\",NxStd::FXDiscountCurveID(TradeTerms.TermCurrency,TradeTerms.BaseCurrency,Numerix::GetSettings(\"Settings.Currency\",TradeTerms.TermCurrency,\"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",TradeTerms.TermCurrency,\"IRIndexTenor\"))},{\"Method\",\"BackwardMC\"},{\"Quality\",0}","{\"Quality\",0},{\"Method\",\"BackwardMC\"}","{\"Quality\",0},{\"Method\",\"BackwardMC\"}",null],
      "Comment" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Model Template" : ["UNIVERSAL","UNIVERSAL","UNIVERSAL","UNIVERSAL",null,"UNIVERSAL",null,null,null,null,null,null,null,null,null,"UNIVERSAL","UNIVERSAL",null,null],
      "Model Parameters" : ["{\"IR Models\",IRModels},{\"Quote Type\",QuoteType},{\"Payout Currency\",TradeTerms.Currency},{\"FX Models\",FXModels}","{\"IR Models\",IRModels},{\"Quote Type\",QuoteType},{\"Payout Currency\",TradeTerms.FX.TermCurrency},{\"FX Models\",FXModels}","{\"IR Models\",IRModels},{\"Quote Type\",QuoteType},{\"Payout Currency\",TradeTerms.Currency},{\"FX Models\",FXModels}","{\"IR Models\",IRModels},{\"Quote Type\",QuoteType},{\"Payout Currency\",TradeTerms.TermCurrency},{\"FX Models\",FXModels}",null,"{\"IR Models\",IRModels},{\"Quote Type\",QuoteType},{\"Payout Currency\",TradeTerms.DomesticCurrency},{\"FX Models\",FXModels}",null,null,null,null,null,null,null,null,null,"{\"IR Models\",IRModels},{\"Quote Type\",QuoteType},{\"Payout Currency\",TradeTerms.TermCurrency},{\"FX Models\",FXModels}","{\"IR Models\",IRModels},{\"Quote Type\",QuoteType},{\"Payout Currency\",TradeTerms.TermCurrency},{\"FX Models\",FXModels}",null,null]
    }
  },
  "CONTEXT^EQPRICINGRULES_10066_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "Name" : ["Installment Option","ASR","EQ European Quanto","EQ European 1","EQ Future 1","EQ Asian Option 1","KIKO Rule","EQ American 1","Cliquet 1","ELN KIKO 1","Performance Linked Swap","Call/Put Spread 1","AutoCallable","Timer Option","EQ Forward","Convertible Bond","RA Rule","Compound European","Compound American","Total Return Swap Rule","Equity Position Rule","EQ Digital Rules","VIX Futures","CBBC","VIX Option","Vol Swap","EQ Lookback Range Rule","EQ Asian Dual Option","EQ FWD","Corridor Variance Swap","ConditionalVariance Swap","Equity and FX Range Accrual Note Swap","Default HY EQ Factor Model"],
      "Product Code" : ["EQInstallmentOption","ASR","EQEUROPEAN","EQEUROPEAN","EQFUTURE","EQASIAN","KIKO","EQAMERICAN","EQCLIQUET","ELNKIKO","EQIRPerformanceLinkedSwap","EQCALLPUTSPREAD","AUTOCALLABLE","TIMER","EQFORWARD","CONVERTIBLEBOND","RANGEACCRUAL","COMPOUNDEUROPEAN","COMPOUNDAMERICAN","TOTALRETURNSWAP","EQPOSITION","EQDIGITAL","EQVIXFUT","EQCBBC","VIX Option","VOLATILITYSWAP","EQLOOKBACKRANGE","EQASIANDUALOPTION","FWD Start Euro Option","CORRIDORVARIANCESWAP","CONDITIONALVARIANCESWAP","EQFXRASWAP","*"],
      "Trade ID" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Predicate" : [null,null,"TradeTerms.PayoutCurrency <> \"\"",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\""],
      "Currency" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Exchange" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Ticker" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Pricer Template" : ["INSTALLMENTOPTION","ASR","EUROPEAN","EUROPEAN","FUTURES","ASIAN","INSTRUMENTPRICER","AMERICAN","KERNEL","ELNKIKO","EQIRPLSWAP","CALLPUTSPREAD","AUTOCALLABLE","TIMER","FORWARD","CONVERTIBLEBOND","RANGEACCRUAL","COMPOUNDEUROPEAN","COMPOUNDAMERICAN","TOTALRETURNSWAP","KERNEL","INSTRUMENTPRICER","VIXFUTURES","CBBC","VIXOPTION","VOLATILITYSWAP","LOOKBACKRANGE","EQASIANDUALOPTION","FWDSTARTEUROPEANOPTION","KERNEL","KERNEL",null,null],
      "Pricer Parameters" : [null,null,"{\"Method\",\"BackwardFinDiffFast\"},{\"Quality\",2},{\"Discrete Dividend Convention\",\"Pure Jump\"}","{\"Method\",\"BackwardFinDiffFast\"},{\"Quality\",2},{\"Discrete Dividend Convention\",\"Pure Jump\"}","{\"Sensitivity Type\",\"Percentage\"}","{\"Vega Shift\",0.01}",null,"{\"Method\",\"BackwardFinDiffFast\"},{\"Quality\",2},{\"Discrete Dividend Convention\",\"Pure Jump\"}",null,"{\"Quality\",3}","{\"Quality\",3}","{\"Quality\",3}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Comment" : [null,null,"if PayoutCurrency is set then Backward Fin Diff Fast should be used",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Model Template" : ["BS","BS",null,null,null,null,"BS",null,"BATES","DUPIRE","DET","BS","BS","BS","DET","CONVERTIBLE","BS","BS","DUPIRE","Det","Det","BS","HESTON","DUPIRE","HESTON","HESTON","DUPIRE","DUPIRE","BS","BS","BS","BS","BS"],
      "Model Parameters" : ["{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}",null,null,null,null,"{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}",null,"{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Currency\",Currency},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"CURRENCY\",Currency},{\"Exchange\",Exchange},{\"QUOTE TYPE\",QuoteType},{\"Ticker\",Ticker}","{\"Exchange\",Exchange},{\"Quote Type\",QuoteType},{\"Currency\",Currency},{\"Ticker\",Ticker},{\"Discrete Dividend Convention\",\"SPOT\"}","{\"Exchange\",Exchange},{\"Quote Type\",QuoteType},{\"Currency\",Currency},{\"Ticker\",Ticker},{\"Discrete Dividend Convention\",\"SPOT\"}"]
    }
  },
  "CONTEXT^FXPRICINGRULES_10068_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "Name" : ["FX Futures","Installment Option","FX Option 2","Fader","American Forward","FX Barrier Option 1","Chooser 1","Conditional Variance Swap","Volatility Swap","ButterFly","FX Strangle","FX Risk Reversal","LookBack Rule 1","FX DOTNT Option 1","FX OTNT Option 1","FX digital","FX Digital KIKO","FX Double DIGITAL KOKO","KIKO","FX DKIKO Option 1","FX Forward","FX SWAP Pricing Rule","Range Accrual Rule","FX linked Note","Compound European","Compound American","FX LookBack Range Rule","FX American Option 1","FX TARF","FWD Start Euro Option","FX Cliquet","TARN Target Cash rule","American FWD","FX Single Discrete Barrier","FX Double Discrete Barrier","Asian","FX Asian Dual Option Rule","FX Accumulator","CC FixedFixed","CC FEE","Default CC FX Factor Model","FX DNT Quanto Swap","IR Callable Inverse Float Note Swap","IR Callable Range Accrual Note Swap","HY EQ Correlation Swap","Equity and FX Range Accrual Note Swap","Default HY FX Factor Model"],
      "Product Code" : ["FXFUTURES","FXINSTALLMENTOPTION","EUROPEAN","FXFADER","AMERICANFORWARD","BARRIERKO","FXCHOOSER","CONDITIONALVARIANCESWAP","VOLATILITYSWAP","FXButterfly","FXSTRANGLE","FXRISKREVERSAL","LookBack","DOTNT","OTNT","DIGITAL","DIGITALKIKO","DIGITALDKIKO","KIKO","DKIKO","FX FWD","FXSWAP","RANGEACCRUAL","LINKEDNOTE","COMPOUNDEUROPEAN","COMPOUNDAMERICAN","FXLOOKBACKRANGE","AMERICAN","TARF","FWDSTARTEUROOPTION","FXCLIQUET","TARNTARGETCASH","AMERICANFWD","SINGLEDISCRETEBARRIER","DOUBLEDISCRETEBARRIER","FXASIAN","FXASIANDUALOPTION","ACCUMULATOR","FIXEDFIXED","FEE","*","FXDNTQUANTOSWAP","IRINVFLOATSWAP","QUANTOGENERICSWAP","EQCORRELATIONSWAP","EQFXRASWAP","*"],
      "Trade ID" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Predicate" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"TERMSASSETCLASS==\"CC\"","TERMSASSETCLASS==\"CC\"","TERMSASSETCLASS==\"CC\"","TERMSASSETCLASS==\"HY\" AND BaseCurrency == Terms.BaseCurrency","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\""],
      "Base Currency" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Term Currency" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Pricer Template" : ["FUTURES","INSTALLMENTOPTION","EUROPEAN","FADER","AMERICANFORWARD","KERNEL","CHOOSER","KERNEL","VOLATILITYSWAP","BUTTERFLY","STRATEGIES","STRATEGIES","LOOKBACK","BARRIER","BARRIER","BARRIER","BARRIER","BARRIER","BARRIER","BARRIER","FWDPRICER","SWAP","RANGEACCRUAL","LINKEDNOTE","COMPOUNDEUROPEAN","COMPOUNDAMERICAN","LOOKBACKRANGE","AMERICAN","TARF","FWDSTARTEUROPEANOPTION","KERNEL","TARNTARGETCASH","AMERICANFORWARD","DISCRETEBARRIER","DISCRETEBARRIER","ASIAN","FXASIANDUALOPTION","ACCUMULATOR",null,null,null,null,null,null,null,null,null],
      "Pricer Parameters" : [null,null,null,null,null,null,null,null,null,null,null,null,null,"{\"Method\",\"BACKWARDFINDIFF\"}","{\"Method\",\"BACKWARDFINDIFF\"}","{\"Method\",\"BACKWARDFINDIFF\"}","{\"Method\",\"BACKWARDFINDIFF\"}","{\"Method\",\"BACKWARDFINDIFF\"}","{\"Method\",\"BACKWARDFINDIFF\"}","{\"Method\",\"BACKWARDFINDIFF\"}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Comment" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Model Template" : [null,"BS",null,"BS","BS","DUPIRE","DUPIRE","Heston","Heston","BS","HESTON","BS","BS","BS","BS","BS","BS","BS","BS","BS",null,null,"BS","BS","BS","DUPIRE","DUPIRE",null,"BS","DUPIRE","LSV","BS","BS","DUPIRE","DUPIRE","DUPIRE","BS","DUPIRE","DET","DET","BS","LSV","BS","BS","DET","BS","BS"],
      "Model Parameters" : [null,"{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}",null,"{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}","{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}","{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}","{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}","{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}","{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}","{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}",null,null,"{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}",null,"{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Timesteps\",50},{\"Quote Type\",QuoteType},{\"X Steps\",50},{\"Heston Use As Initial Guess\",false},{\"SOLVER.SOLVERTYPE\",\"FAST\"},{\"Y Steps\",50}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"QUOTE TYPE\",QuoteType},{\"TERM CURRENCY\",TermCurrency},{\"BASE CURRENCY\",BaseCurrency},{\"DUPIRE VARIATION\",\"Classic\"}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Timesteps\",50},{\"Quote Type\",QuoteType},{\"X Steps\",50},{\"Heston Use As Initial Guess\",false},{\"SOLVER.SOLVERTYPE\",\"FAST\"},{\"Y Steps\",50}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}","{\"Term Currency\",TermCurrency},{\"Base Currency\",BaseCurrency},{\"Quote Type\",QuoteType}"]
    }
  },
  "CONTEXT^HYPRICINGRULES_10070_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "Name" : ["CC CMS Spread Swap","Callable Quanto Generic Note","Callable Quanto Generic Swap","CMS Vari Cap Note","Credit Linked CMS Note","Credit Linked Range Accrual Notes","Credit Linked Switchable Note","CMDTY Float-Float","CMDTY Fixed-Float","CMDTY Fixed-Float Asian","CMDTY FX Swap","FX American Long Dated Rule","FX Basket Option","FX Basket Performance Option","FX Callable Digital Coupon Note","FX Correlatoin Swap","FX Contingent","FX Dual Digital","FX Dual Digital Rule","FX Dual Range Accrual TARGET Redemption Note","FX DNTQUANTOSWAP Rule","FX Outperformance","FX Out Spread","EQ American Long Dated","EQ AutoCallable","EQ Basket Performance Option","EQ Correlatoin Swap","EQ Contingent","EQ Credit Linked Fund Index Notes","EQ Dual Digital","EQ FX Contingent","EQ FX Covariance Swap","EQ FX Dual Digital","EQ Quanto Asian","EQ Total Return Swap","IR Callable Bond","IR Callable Zero Coupon Bond","IR Callable Inverse Float Note Swap","IR Callable Dual Generic Index Spread Range Accrual Swap","Equity and FX Range Accrual Notes / Swap","Treasury Linked Convertible","Worst of / Best of Option Rule","Hybrid Model Default Rule"],
      "Product Code" : ["CMSSPREADSWAP","CALLABLEGENERICNOTE","QUANTOGENERICSWAP","CMSVARICAPNOTES","CRCMSNOTES","CRRANOTES","CRSWITCHNOTES","CMDTYFLOATFLOATSWAP","CMDTYFIXEDFLOATSWAP","CMDTYFIXEDFLOATASIANSWAP","CMDTYFXSWAP","FXAMERICANLONGDATED","FXBASKETOPTION","FXBASKETPERFORMANCEOPTION","FXCALLABLEDIGITALCOUPONNOTE","FXCORRELATIONSWAP","FXCONTINGENT","FXDUALDIGITALKO","FXDUALDIGITAL","FXDUALRATARN","FXDNTQUANTOSWAP","FXOUTPERFORMANCE","FXOUTSPREAD","EQAMERICANLONGDATED","EQAUTOCALLABLE","EQBASKETPERFORMANCEOPTION","EQCORRELATIONSWAP","EQCONTINGENT","CRFUNDINDEXNOTES","EQDUALDIGITAL","EQFXCONTINGENTOPTION","EQFXCOVARIANCESWAP","EQFXDualDigital","EQQUANTOASIAN","EQTOTALRETURNSWAP","CALLABLERISKYBOND","CALLABLEZEROBOND","IRINVFLOATSWAP","CALLABLEDUALGENERICINDEXSPREADRASWAP","EQFXRASWAP","TREASURYLINKEDCONVERTIBLEBOND","EQWORSTOFBESTOF","*"],
      "Trade ID" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Predicate" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Currency" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Has CMDTY Assets" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Has CR Assets" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Has EQ Assets" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Has FX Assets" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Has INFL Assets" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Has IR Assets" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Pricer Template" : ["CMSSPREADSWAP","IRQUANTOCALLABLEGENERICNOTE","IRQUANTOCALLABLEGENERICSWAP","CMSVARICAPNOTES","CRCMSNOTES","CRRANOTES","CRSWITCHNOTES","CMDTYFLOATFLOATSWAP","CMDTYFIXEDFLOATSWAP","CMDTYFIXEDFLOATASIANSWAP","CMDTYFXSWAP","KERNEL","FXBASKETOPTION","FXBASKETPERFORMANCEOPTION","FXCALLABLEDIGITALCOUPONNOTE","KERNEL","KERNEL","FXDUALDIGITALKO","FXDUALDIGITAL","FXDUALRATARN","FXDNTQUANTOSWAP","FXOUTPERFORMANCE","FXOUTSPREAD","KERNEL","EQAUTOCALLABLE","EQBASKETPERFORMANCEOPTION","KERNEL","KERNEL","CRFUNDINDEXNOTES","EQDUALDIGITAL","EQFXCONTINGENTOPTION","KERNEL","EQFXDUALDIGITAL","EQQUANTOASIAN","EQTOTALRETURNSWAP","CALLABLERISKYBOND","CALLABLEZEROBOND","IRINVFLOATSWAP","IRQUANTOCALLABLEGENERICSWAP","EQFXRASWAP","TREASURYLINKEDCONVERTIBLEBOND","EQWORSTOFBESTOF","KERNEL"],
      "Pricer Parameters" : [null,null,null,"{\"Quality\",0},{\"Method\",\"BackwardMC\"}","{\"Quality\",0},{\"Method\",\"BackwardMC\"}","{\"Quality\",0},{\"Method\",\"BackwardMC\"}","{\"Quality\",0}",null,null,null,null,null,null,null,null,null,"{\"Method\",\"FORWARDMC\"}",null,null,null,null,null,null,null,null,null,null,"{\"Method\",\"BACKWARDMC\"}","{\"Quality\",0}",null,null,null,null,null,null,null,null,"{\"Quality\",0},{\"Method\",\"BackwardMC\"}",null,null,null,null,null],
      "Comment" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "Model Template
      "Model Parameters" : ["{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Solver\",\"DE\"},{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}","{\"Quote Type\",QuoteType},{\"CMDTY Models\",CMDTYModels},{\"EQ Models\",EQModels},{\"IR Models\",IRModels},{\"CR Models\",CRModels},{\"Payout Currency\",Currency},{\"FX Models\",FXModels}"]
    }
  },
  "CONTEXT^IRPRICINGRULES_10072_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "Name" : ["ARR CC Basis Swap","ARR CC Fixed-Float  Swap","CC Fixed-Fixed Swap","Currency Swap","SwapPrexCDI","Amortizing Bond","Averaging Basis Swap","Averaging Swap","Kernel Cap","Kernel Cap","Callable Power Spread Swap","Amortizing FRN","ARR Float Float Swap","ARR Fixed Float Swap (Compounding)","ARR Fixed Float Swap (Averaging)","Average Fixed Float Swap","Average Float Float Swap","Amortizing Swap","CMS Callable Swap","Cms Callable Bond","Zero Accreting Swap","Cash Deposit 1","IR Swap 1","IR Compound Basis Swap 1","IR  Basis Swap 1","IR Compound Fix Float Swap 1","IR Swaption 1","Bermudan Swaption 1","Callable Bond 1","Digital CapFloor","Callable Reverse Floater 1","Callable CMS Inverse Floater 1","Snowball Inverse Floater 1","Ratchet Swap 1","Generic Swap 1","Snowblade Swap 1","CMS Spread Steepener","Call Swap for Model Parameter from Market","Call Swap 1","Call FRN 1","Callable Zero Bond 1","Callable Dual RA Swap","Callable Zero Swap 1","Callable Ratchet Swap 1","Capped Swap 1","Callable RA Swap 1","Callable RA Bond 1","CMS Spread Swap","Callable Dual RA Bond 1","Callable Power Spread Swap 1","Corporate Bond Rule 1 (AUD) (Callable)","Corporate Bond Rule 1 (TWD) (Callable)","Corporate Bond Rule 1","Sovereign Bond Rule 1 (AUD) (Callable)","Sovereign Bond Rule 1 (TWD) (Callable)","Sovereign Bond Rule 1","Snowblade Inverse Floater Rule","T-Bill 1","T-Bill 1","Floating Rate Note 1 (AUD) (Callable)","Floating Rate Note 1 (Callable)","Floating Rate Note 1","Bond Futures 1","TRS on Bond","Commercial Paper Rule 1","Capfloor","CC Fixed/Fixed","CC FEE","Default CC IR Factor Model","IR Callable Zero Coupon Bond (TWD)","IR Callable Zero Coupon Bond (Non-Call) (TWD)","IR Callable Zero Coupon Bond (Non-Call)","IR Callable Zero Coupon Bond","CMS Vari Cap Note","Credit Linked Range Accrual Notes (CMS)","Credit Linked Range Accrual Notes (Non-CMS)","EQ Credit Linked Fund Index Notes (CMS)","EQ Credit Linked Fund Index Notes (Non-CMS)","Credit Linked Switchable Note (CMS)","Credit Linked Switchable Note (Non-CMS)","Credit Linked CMS Note (CMS)","IR Callable Inverse Float Note Swap CMS","IR Callable Inverse Float Note Swap","IR Callable Range Accrual Note Swap CMS","IR Callable Range Accrual Note Swap","Equity and FX Range Accrual Note Swap Callable","Equity and FX Range Accrual Note Swap DET","Equity and FX Range Accrual Note Swap DET FXFWD","Equity Linked Memory Coupon Note/Swap","Equity Linked Memory Coupon Note/Swap","FXDNTQUANTOSWAP Model","FXDNTQUANTOSWAP Model","HY EQ Correlation Swap","EQ FX Covariance Swap","HY IR Crypto Deterministic Model","FX Callable Digital Coupon Note","FX Callable Digital Coupon Note DET","FX Callable Digital Coupon Note DET FXFWD","ARR Callable Swap","Callable Swap","Vanilla Swap","Default HY IR Factor Model"],
      "Product Code" : ["CCSWAP","CCSWAP","CCSWAP","CCSWAP","SWAPPREXCDI","AMORTIZINGBOND","GENERALAVGBASIS","GENERALAVGSWAP","AVGCAPFLOOR","GENERALCAPFLOOR","CALLABLEPOWERSPREADSWAP","AMORTIZINGFRN","ARRBasisSwap","ARRSwap","ARRAvgSwap","AVERAGEFIXEDFLOATSWAP","AverageFloatFloatSwap","AMORTIZINGSWAP","CMSCallableSwap","CmsCallableBond","ZEROACCRETINGSWAP","DEPOSIT","FIXEDFLOATSWAP","CompoundFloatFloatSWAP","FloatFloatSWAP","COMPOUNDFIXEDFLOATSWAP","SWAPTION","BERMUDANSWAPTION","CALLABLEBOND","DIGITALCAPFLOOR","CALLABLEREVERSEFLOATER","CALLABLECMSINVERSEFLOATER","SNOWBALLINVERSEFLOATER","RATCHETSWAP","GENERICSWAP","SNOWBLADE","CMSSpreadSteepener","CALLABLESWAP","CALLABLESWAP","CALLABLEFRN","CallabeZeroCouponBond","CALLABLEDUALRASWAP","CallableZeroSwap","CallableRatchetSwap","CappedSwap","CALLABLERASWAP","RANGEACCRUALBOND","CALLABLECMSSPREADSWAP","CALLABLEDUALRABOND","CallableSpreadSwap","CORPORATEBOND","CORPORATEBOND","CORPORATEBOND","SOVEREIGNBOND","SOVEREIGNBOND","SOVEREIGNBOND","SNOWBLADEINVERSEFLOATER","TBILL","TBILL","FLOATINGRATENOTE","FLOATINGRATENOTE","FLOATINGRATENOTE","BONDFUTURES","BONDTRS","CP","CAPFLOOR","FIXEDFIXED","FEE","*","CALLABLEZEROBOND","CALLABLEZEROBOND","CALLABLEZEROBOND","CALLABLEZEROBOND","CMSVARICAPNOTES","CRRANOTES","CRRANOTES","CRFUNDINDEXNOTES","CRFUNDINDEXNOTES","CRSWITCHNOTES","CRSWITCHNOTES","CRCMSNOTES","IRINVFLOATSWAP","IRINVFLOATSWAP","CALLABLEDUALGENERICINDEXSPREADRASWAP","CALLABLEDUALGENERICINDEXSPREADRASWAP","EQFXRASWAP","EQFXRASWAP","EQFXRASWAP","EQAUTOCALLABLE","EQAUTOCALLABLE","FXDNTQUANTOSWAP","FXDNTQUANTOSWAP","EQCORRELATIONSWAP","EQFXCovarianceSwap","*","FXCALLABLEDIGITALCOUPONNOTE","FXCALLABLEDIGITALCOUPONNOTE","FXCALLABLEDIGITALCOUPONNOTE","SWAP","SWAP","SWAP","*"],
      "Trade ID" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Predicate" : ["TERMSASSETCLASS==\"CC\" AND (TradeTerms.IsARRIndex == True OR TradeTerms.Leg1IRIndexTenor.Canonical == \"ON\" OR TradeTerms.Leg2IRIndexTenor.Canonical == \"ON\") AND TradeTerms.Leg1Type.Canonical == \"FLOAT\" AND TradeTerms.Leg2Type.Canonical == \"FLOAT\"","TERMSASSETCLASS==\"CC\" AND (TradeTerms.IsARRIndex == True OR TradeTerms.Leg1IRIndexTenor.Canonical == \"ON\" OR TradeTerms.Leg2IRIndexTenor.Canonical == \"ON\") AND ((TradeTerms.Leg1Type.Canonical == \"FLOAT\" AND TradeTerms.Leg2Type.Canonical == \"FIXED\") OR (TradeTerms.Leg1Type.Canonical == \"FIXED\" AND TradeTerms.Leg2Type.Canonical == \"FLOAT\"))","TERMSASSETCLASS==\"CC\" AND TradeTerms.Leg1Type.Canonical == \"FIXED\" AND TradeTerms.Leg2Type.Canonical == \"FIXED\"","TERMSASSETCLASS==\"CC\"",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"TradeTerms.isCallable OR TradeTerms.isPuttable",null,null,null,null,null,"TERMSASSETCLASS==\"CC\"","TERMSASSETCLASS==\"CC\"","TERMSASSETCLASS==\"CC\"","TERMSASSETCLASS==\"HY\" AND (TradeTerms.isCallable OR TradeTerms.isMakeWholeCall)","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND (TradeTerms.isCallable OR TradeTerms.isMakeWholeCall)","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND TradeTerms.IsCMSUsed","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND TradeTerms.IsCMSUsed","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND TradeTerms.IsCMSUsed","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND TradeTerms.IsCMSUsed","TERMSASSETCLASS==\"HY\" AND (TradeTerms.CouponIRIndex==\"CMS\" OR TradeTerms.FundingIRIndex==\"CMS\")","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND (TradeTerms.Leg1Index.Name==\"CMS\" OR TradeTerms.Leg2Index.Name==\"CMS\" OR TradeTerms.Leg1RAIndex1A.Name==\"CMS\" OR TradeTerms.Leg1RAIndex1B.Name==\"CMS\" OR TradeTerms.Leg1RAIndex2A.Name==\"CMS\" OR TradeTerms.Leg1RAIndex2B.Name==\"CMS\")","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND TradeTerms.isCallable AND Currency == TradeTerms.Currency","TERMSASSETCLASS==\"HY\" AND Currency == TradeTerms.Currency","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND TradeTerms.isAutocall","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND Currency == Terms.Currency","TERMSASSETCLASS==\"HY\" AND Currency <>Terms.Currency","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\"","TERMSASSETCLASS==\"HY\" AND Currency in {\"BTC\",\"BCH\",\"ETH\",\"XRP\",\"LTC\"}","TERMSASSETCLASS==\"HY\" AND TradeTerms.Callable.isActivated AND Currency == Terms.Currency","TERMSASSETCLASS==\"HY\" AND Currency == Terms.Currency","TERMSASSETCLASS==\"HY\"","TradeTerms.isCallable == True AND (TradeTerms.IsARRIndex == True OR TradeTerms.Leg1IRIndexTenor.Canonical == \"ON\" OR TradeTerms.Leg2IRIndexTenor.Canonical == \"ON\")","TradeTerms.isCallable == True",null,"TERMSASSETCLASS==\"HY\""],
      "Currency" : ["*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","ZAR","*","*","*","*","*","*","*","*","*","*","*","*","AUD","TWD","*","AUD","TWD","*","*","MXN","*","AUD","*","*","*","*","*","*","*","*","*","TWD","TWD","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*","*"],
      "Pricer Template" : [null,null,null,null,"SWAPPREXCDI","AMORTIZINGBOND","GENERALAVGBASISSWAP","GENERALAVGSWAP","AVERAGINGCAPFLOOR","GENERALCAPFLOOR","CALLABLEPOWERSPREADSWAP","AMORTIZINGFRN","ARRBasisSwap","ARRSWAP","SWAP","AVERAGEFIXEDFLOATSWAP","AVERAGEFLOATFLOATSWAP","AMORTIZINGSWAP","CMSCALLABLESWAP","CMSCALLABLEBOND","ZEROACCRETINGSWAP","CASHDEPOSIT","FIXEDFLOATSWAP","CompoundFloatFloatSWAP","FloatFloatSWAP","COMPOUNDFIXEDFLOATSWAP","SWAPTION","BERMUDANSWAPTION","CALLABLEBOND","DIGITALCAPFLOOR","CALLABLESWAP","CALLABLESWAP","SNOWBALLINVERSEFLOATER","RATCHETSWAP","GENERICSWAP","SNOWBLADESWAP","CMSSPREADSTEEPENER","KERNEL","CALLABLESWAPPRICER","CALLABLEFRN","CALLABLEZEROBOND","CALLABLEDUALRASWAP","CALLABLEZEROSWAP","CALLABLERATCHETSWAP","CAPPEDSWAP","CALLABLERASWAP","CALLABLERABOND","CALLABLECMSSPREADSWAP","CALLABLEDUALRABOND","CALLABLESPREADSWAP","BOND","BOND","BOND","BOND","BOND","BOND","SNOWBLADEINVERSEFLOATER","SBMXNCETES","DISCOUNTSECURITIES","FLOATINGRATENOTE","FLOATINGRATENOTE","FLOATINGRATENOTE","BONDFUTURES","TOTALRETURNSWAPONBOND","DISCOUNTSECURITIES","CAPFLOOR",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"SWAP","SWAP","SWAP",null],
      "Pricer Parameters" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"{\"Quote Type\",QuoteType},{\"Method\",\"forwardanalytic\"}",null,null,"{\"Method\",\"ForwardAnalytic\"}",null,null,null,null,null,null,"{\"Method\",\"BackwardFinDiff\"}",null,null,null,null,null,null,null,null,null,null,"{\"Method\",BackwardMC}",null,null,null,null,null,null,null,null,null,null,null,"{\"Quote Type\",QuoteType},{\"Method\",\"Toolkit.BackwardMC\"},{\"Use Credit Curve\",True}","{\"Use Bond Curve\",True},{\"Quote Type\",QuoteType},{\"Method\",\"Toolkit.BackwardMC\"},{\"Use Credit Curve\",True},{\"Bond Curve\",NxStd::BondCurveID(Currency, Numerix::GetSettings(\"Settings.Currency\", Currency, \"ISSUER\"), Numerix::GetSettings(\"Settings.Currency\", Currency, \"BONDTYPE\"))}","{\"Quote Type\",QuoteType},{\"Method\",\"Toolkit.BackwardMC\"},{\"Use Credit Curve\",True}","{\"Quote Type\",QuoteType},{\"Method\",\"Toolkit.BackwardMC\"}","{\"Use Bond Curve\",True},{\"Quote Type\",QuoteType},{\"Method\",\"Toolkit.BackwardMC\"},{\"Bond Curve\",NxStd::BondCurveID(Currency, Numerix::GetSettings(\"Settings.Currency\", Currency, \"ISSUER\"), Numerix::GetSettings(\"Settings.Currency\", Currency, \"BONDTYPE\"))}","{\"Quote Type\",QuoteType},{\"Method\",\"Toolkit.BackwardMC\"}",null,"{\"Quote Type\",QuoteType}","{\"Quote Type\",QuoteType}","{\"Discount Curve\",NxStd::DiscountCurveID(TradeTerms.Currency)}","{\"Discount Curve\",NxStd::DiscountCurveID(TradeTerms.Currency)}",null,"{\"Quote Type\",QuoteType}",null,"{\"Quote Type\",QuoteType}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"{\"Quote Type\",QuoteType},{\"Method\",\"BackwardMC\"},{\"Quality\",Numerix::Table(\"QualityTable\",{\"Paths\",\"TimeSteps\",\"Seed\",\"ANTITHETIC\",\"GENERIC METHOD\",\"MC Type\",\"REGRESSION BASIS\",\"POLYNOM DEGREE\",\"USE SLICE HISTORY\",\"ANALYTIC SMART SLICE\",\"PROCESSING UNIT\",\"RANDOM NUMBERS\",\"MC NORMALIZATION\"},{10000,100,0,FALSE,\"ADAPTIVENEW\",\"GENERIC\",\"\",\"\",TRUE, FALSE,\"\",\"QUASI-RANDOM\",TRUE}).create}","{\"Quote Type\",QuoteType},{\"Method\",\"BackwardLattice\"},{\"Quality\",9}","{\"Quote Type\",QuoteType},{\"Method\",\"BackwardTree\"},{\"Quality\",0}",null],
      "Comment" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"Use ARR Swaption if ARR Index is created",null,null,null],
      "Model Template" : ["DET","DET","DET","DET","DET","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F",null,null,null,null,null,"DET","HW2F","HW2F","DET",null,null,null,null,null,null,"HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW2F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F","HW1F",null,null,"HW1F","HW1F",null,null,"HW1F",null,null,"DET","DET","HW1F","HW1F","DET","DET","HW1F","HW2F","HW2F","HW1F","HW2F","HW1F","HW2F","HW1F","HW2F","HW2F","HW1F","HW2F","HW1F","HW1F","DET","DET","HW1F","DET","DET","DET","DET","DET","DET","HW1F","DET","DET","HW1F","HW1F","DET","HW1F"],
      "Model Parameters" : ["{\"Discount Curve\",if Currency == TermCurrency1 ? NxStd::CCDiscountCurveID(TermCurrency1, BaseCurrency1,TermCurrency1+\"-\"+Numerix::GetSettings(\"Settings.Currency\",TermCurrency1,\"OvernightIndex\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\",TermCurrency1,\"OvernightIndexTenor\")+\"/\"+BaseCurrency1+\"-\"+Numerix::GetSettings(\"Settings.Currency\",BaseCurrency1,\"OvernightIndex\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\",BaseCurrency1,\"OvernightIndexTenor\")) : NxStd::CCDiscountCurveID(BaseCurrency1, TermCurrency1)},{\"Quote Type\",QuoteType},{\"Currency\",Currency}",null,"{\"Discount Curve\",if Currency == TermCurrency1 ? NxStd::FXDiscountCurveID(TermCurrency1,BaseCurrency1,Numerix::GetSettings(\"Settings.Currency\",TermCurrency1,\"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",TermCurrency1,\"IRIndexTenor\")) : NxStd::FXDiscountCurveID(BaseCurrency1,TermCurrency1,Numerix::GetSettings(\"Settings.Currency\",BaseCurrency1,\"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",BaseCurrency1,\"IRIndexTenor\"))},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Discount Curve\",if Currency == TermCurrency1 ? NxStd::CCDiscountCurveID(TermCurrency1, BaseCurrency1) : NxStd::CCDiscountCurveID(BaseCurrency1, TermCurrency1)},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}",null,null,null,null,null,"{\"CURRENCY\",Currency},{\"QUOTE TYPE\",QuoteType}","{\"CORRELATION.VALUE\",-0.5},{\"CORRELATION.CALIBRATE\",false},{\"MEANREVERSION2.VALUE\",0.05},{\"MEANREVERSION1.VALUE\",0.03},{\"MEANREVERSION1.CALIBRATIONTYPE\",\"Flat\"},{\"MEANREVERSION2.CALIBRATE\",false},{\"MEANREVERSION1.CALIBRATE\",false},{\"Currency\",Currency},{\"SOLVER.SOLVERTYPE\",\"Fast\"},{\"MEANREVERSION2.CALIBRATIONTYPE\",\"Flat\"},{\"CORRELATION.CALIBRATIONTYPE\",\"Flat\"}","{\"CORRELATION.VALUE\",-0.5},{\"CORRELATION.CALIBRATE\",false},{\"MEANREVERSION2.VALUE\",0.05},{\"MEANREVERSION1.VALUE\",0.03},{\"MEANREVERSION1.CALIBRATIONTYPE\",\"Flat\"},{\"MEANREVERSION2.CALIBRATE\",false},{\"MEANREVERSION1.CALIBRATE\",false},{\"Currency\",Currency},{\"SOLVER.SOLVERTYPE\",\"Fast\"},{\"MEANREVERSION2.CALIBRATIONTYPE\",\"Flat\"},{\"CORRELATION.CALIBRATIONTYPE\",\"Flat\"}","{\"Currency\",TradeTerms.Currency}",null,null,null,null,null,null,"{\"CURRENCY\",Currency},{\"QUOTE TYPE\",QuoteType},{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.INSTRUMENTSWAPTION\",Numerix::Table(\"Instrument Swaption\"+Numerix::UniqueNumber,{\"Calibration Strategy\",\"Strike\",\"OptionMaturity\",\"SwapTenor\",\"Flavor\",\"Weight\"},{{\"ColumnSwaptions(\\\"ATM\\\",\\\"30Y\\\",\\\"20Y\\\",\\\"Payers\\\")\"}}.Transpose).Create}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"CURRENCY\",Currency},{\"QUOTE TYPE\",QuoteType},{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false}","{\"MEANREVERSION.VALUE\",NxStd::IRModelParameters(\"ZAR\", \"HW1F\", \"MEANREVERSION\")},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"CURRENCY\",Currency},{\"QUOTE TYPE\",QuoteType},{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false}","{\"CURRENCY\",Currency},{\"QUOTE TYPE\",QuoteType},{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"CORRELATION.VALUE\",-0.5},{\"MEANREVERSION2.VALUE\",0.05},{\"MEANREVERSION1.VALUE\",0.03},{\"MEANREVERSION1.CALIBRATIONTYPE\",\"Flat\"},{\"INSTCOLL.INSTRUMENTSWAPTION\",Numerix::Table(\"Instrument Swaption\"+Numerix::UniqueNumber,{\"CalibrationStrategy\",\"Strike\",\"OptionMaturity\",\"SwapTenor\",\"Flavor\",\"Weight\"},{{\"DiagonalSwaptions(\\\"ATM\\\",\\\"30Y\\\",\\\"Payers\\\")\"},{\"ColumnSwaptions(\\\"ATM\\\",\\\"10Y\\\",\\\"30Y\\\",\\\"Payers\\\")\"},{\"ColumnSwaptions(\\\"ATM\\\",\\\"10Y\\\",\\\"2Y\\\",\\\"Payers\\\")\"}}.Transpose).Create},{\"Currency\",Currency},{\"SOLVER.SOLVERTYPE\",\"Fast\"},{\"MEANREVERSION2.CALIBRATIONTYPE\",\"Flat\"},{\"CORRELATION.CALIBRATIONTYPE\",\"Flat\"}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency},{\"MEANREVERSION.VALUE\",0.03},{\"Discount Curve\",NxStd::BondCurveID(Currency, Numerix::GetSettings(\"Settings.Currency\", Currency, \"ISSUER\"), Numerix::GetSettings(\"Settings.Currency\", Currency, \"BONDTYPE\"))}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency},{\"MEANREVERSION.VALUE\",0.03},{\"Discount Curve\",NxStd::BondCurveID(Currency, Numerix::GetSettings(\"Settings.Currency\", Currency, \"ISSUER\"), Numerix::GetSettings(\"Settings.Currency\", Currency, \"BONDTYPE\"))}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}",null,null,"{\"INSTCOLL.PROJECTIONCURVE\",NxStd::ProjectionCurveID(Currency, TradeTerms.RateIndex.Name, TradeTerms.RateIndex.Tenor)},{\"IR Index Tenor\",TradeTerms.RateIndex.Tenor},{\"Quote Type\",QuoteType},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.IRINDEX\",TradeTerms.RateIndex.Name},{\"MEANREVERSION.CALIBRATE\",false},{\"IR Index\",TradeTerms.RateIndex.Name},{\"INSTCOLL.IRINDEXTENOR\",TradeTerms.RateIndex.Tenor},{\"Currency\",Currency}","{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency}",null,null,"{\"CURRENCY\",Currency},{\"QUOTE TYPE\",QuoteType},{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false}",null,null,"{\"Discount Curve\",if Currency == TermCurrency1 ? NxStd::CCDiscountCurveID(TermCurrency1, BaseCurrency1) : NxStd::CCDiscountCurveID(BaseCurrency1, TermCurrency1)},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency},{\"MEANREVERSION.VALUE\",0.03},{\"Discount Curve\",if Currency == TermCurrency1 ? NxStd::CCDiscountCurveID(TermCurrency1, BaseCurrency1) : NxStd::CCDiscountCurveID(BaseCurrency1, TermCurrency1)}","{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency},{\"MEANREVERSION.VALUE\",0.03},{\"Discount Curve\",NxStd::BondCurveID(Currency, Numerix::GetSettings(\"Settings.Currency\", Currency, \"ISSUER\"), Numerix::GetSettings(\"Settings.Currency\", Currency, \"BONDTYPE\"))}","{\"Discount Curve\",NxStd::BondCurveID(Currency, Numerix::GetSettings(\"Settings.Currency\", Currency, \"ISSUER\"), Numerix::GetSettings(\"Settings.Currency\", Currency, \"BONDTYPE\"))},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"CURRENCY\",Currency},{\"QUOTE TYPE\",QuoteType},{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false}","{\"MEANREVERSION2.USEINITIALGUESS\",False},{\"VOLATILITY1.JOINTCALIBRATION\",True},{\"VOLATILITY2.USEINITIALGUESS\",False},{\"CORRELATION.VALUE\",-0.5},{\"CORRELATION.JOINTCALIBRATION\",True},{\"VOLATILITY1.INTERPOLATIONTYPE\",\"Forward Step\"},{\"VOLATILITY1.CALIBRATE\",True},{\"MEANREVERSION2.VALUE\",0.05},{\"VOLATILITY2.EXTRAPOLATIONTYPE\",\"Flat\"},{\"Currency\",Currency},{\"VOLATILITY1.EXTRAPOLATIONTYPE\",\"Flat\"},{\"VOLATILITY2.INTERPOLATIONTYPE\",\"Forward Step\"},{\"Quote Type\",QuoteType},{\"CORRELATION.CALIBRATE\",False},{\"MEANREVERSION1.VALUE\",0.03},{\"VOLATILITY1.USEINITIALGUESS\",False},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION1.USEINITIALGUESS\",False},{\"MEANREVERSION2.CALIBRATE\",False},{\"MEANREVERSION1.CALIBRATE\",False},{\"VOLATILITY2.CALIBRATE\",True},{\"VOLATILITY2.JOINTCALIBRATION\",True},{\"CORRELATION.USEINITIALGUESS\",False},{\"CORRELATION.CALIBRATIONTYPE\",\"FLAT\"}","{\"MEANREVERSION2.USEINITIALGUESS\",False},{\"VOLATILITY1.JOINTCALIBRATION\",True},{\"VOLATILITY2.USEINITIALGUESS\",False},{\"CORRELATION.VALUE\",-0.5},{\"CORRELATION.JOINTCALIBRATION\",True},{\"VOLATILITY1.INTERPOLATIONTYPE\",\"Forward Step\"},{\"VOLATILITY1.CALIBRATE\",True},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"MEANREVERSION2.VALUE\",0.05},{\"VOLATILITY2.EXTRAPOLATIONTYPE\",\"Flat\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"MEANREVERSION2.JOINTCALIBRATION\",True},{\"Currency\",Currency},{\"VOLATILITY1.EXTRAPOLATIONTYPE\",\"Flat\"},{\"VOLATILITY2.INTERPOLATIONTYPE\",\"Forward Step\"},{\"Quote Type\",QuoteType},{\"CORRELATION.CALIBRATE\",False},{\"MEANREVERSION1.VALUE\",0.03},{\"VOLATILITY1.USEINITIALGUESS\",False},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION1.USEINITIALGUESS\",False},{\"MEANREVERSION2.CALIBRATE\",False},{\"MEANREVERSION1.CALIBRATE\",False},{\"VOLATILITY2.CALIBRATE\",True},{\"VOLATILITY2.JOINTCALIBRATION\",True},{\"MEANREVERSION1.JOINTCALIBRATION\",True},{\"CORRELATION.USEINITIALGUESS\",False}","{\"Quote Type\",QuoteType},{\"MEANREVERSION.USEINITIALGUESS\",false},{\"VOLATILITY.USEINITIALGUESS\",False},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION.CALIBRATE\",false},{\"VOLATILITY.CALIBRATE\",True},{\"Currency\",Currency}","{\"MEANREVERSION2.USEINITIALGUESS\",False},{\"VOLATILITY1.JOINTCALIBRATION\",True},{\"VOLATILITY2.USEINITIALGUESS\",False},{\"CORRELATION.VALUE\",-0.5},{\"CORRELATION.JOINTCALIBRATION\",True},{\"VOLATILITY1.INTERPOLATIONTYPE\",\"Forward Step\"},{\"VOLATILITY1.CALIBRATE\",True},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"MEANREVERSION2.VALUE\",0.05},{\"VOLATILITY2.EXTRAPOLATIONTYPE\",\"Flat\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"MEANREVERSION2.JOINTCALIBRATION\",True},{\"Currency\",Currency},{\"VOLATILITY1.EXTRAPOLATIONTYPE\",\"Flat\"},{\"VOLATILITY2.INTERPOLATIONTYPE\",\"Forward Step\"},{\"Quote Type\",QuoteType},{\"CORRELATION.CALIBRATE\",False},{\"MEANREVERSION1.VALUE\",0.03},{\"VOLATILITY1.USEINITIALGUESS\",False},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION1.USEINITIALGUESS\",False},{\"MEANREVERSION2.CALIBRATE\",False},{\"MEANREVERSION1.CALIBRATE\",False},{\"VOLATILITY2.CALIBRATE\",True},{\"VOLATILITY2.JOINTCALIBRATION\",True},{\"MEANREVERSION1.JOINTCALIBRATION\",True},{\"CORRELATION.USEINITIALGUESS\",False}","{\"Quote Type\",QuoteType},{\"MEANREVERSION.USEINITIALGUESS\",false},{\"VOLATILITY.USEINITIALGUESS\",false},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION.CALIBRATE\",false},{\"VOLATILITY.CALIBRATE\",true},{\"Currency\",Currency}","{\"MEANREVERSION2.USEINITIALGUESS\",False},{\"VOLATILITY1.JOINTCALIBRATION\",True},{\"VOLATILITY2.USEINITIALGUESS\",False},{\"CORRELATION.VALUE\",-0.5},{\"CORRELATION.JOINTCALIBRATION\",True},{\"VOLATILITY1.INTERPOLATIONTYPE\",\"Forward Step\"},{\"VOLATILITY1.CALIBRATE\",True},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"MEANREVERSION2.VALUE\",0.05},{\"VOLATILITY2.EXTRAPOLATIONTYPE\",\"Flat\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"MEANREVERSION2.JOINTCALIBRATION\",True},{\"Currency\",Currency},{\"VOLATILITY1.EXTRAPOLATIONTYPE\",\"Flat\"},{\"VOLATILITY2.INTERPOLATIONTYPE\",\"Forward Step\"},{\"Quote Type\",QuoteType},{\"CORRELATION.CALIBRATE\",False},{\"MEANREVERSION1.VALUE\",0.03},{\"VOLATILITY1.USEINITIALGUESS\",False},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION1.USEINITIALGUESS\",False},{\"MEANREVERSION2.CALIBRATE\",False},{\"MEANREVERSION1.CALIBRATE\",False},{\"VOLATILITY2.CALIBRATE\",True},{\"VOLATILITY2.JOINTCALIBRATION\",True},{\"MEANREVERSION1.JOINTCALIBRATION\",True},{\"CORRELATION.USEINITIALGUESS\",False}","{\"Quote Type\",QuoteType},{\"MEANREVERSION.USEINITIALGUESS\",false},{\"VOLATILITY.USEINITIALGUESS\",false},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION.CALIBRATE\",false},{\"VOLATILITY.CALIBRATE\",true},{\"Currency\",Currency}","{\"MEANREVERSION2.USEINITIALGUESS\",False},{\"VOLATILITY1.JOINTCALIBRATION\",True},{\"VOLATILITY2.USEINITIALGUESS\",False},{\"CORRELATION.VALUE\",-0.5},{\"CORRELATION.JOINTCALIBRATION\",True},{\"VOLATILITY1.INTERPOLATIONTYPE\",\"Forward Step\"},{\"VOLATILITY1.CALIBRATE\",True},{\"MEANREVERSION2.VALUE\",0.05},{\"VOLATILITY2.EXTRAPOLATIONTYPE\",\"Flat\"},{\"MEANREVERSION2.JOINTCALIBRATION\",True},{\"Currency\",Currency},{\"VOLATILITY1.EXTRAPOLATIONTYPE\",\"Flat\"},{\"VOLATILITY2.INTERPOLATIONTYPE\",\"Forward Step\"},{\"Quote Type\",QuoteType},{\"CORRELATION.CALIBRATE\",False},{\"MEANREVERSION1.VALUE\",0.03},{\"VOLATILITY1.USEINITIALGUESS\",False},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION1.USEINITIALGUESS\",False},{\"MEANREVERSION2.CALIBRATE\",False},{\"MEANREVERSION1.CALIBRATE\",False},{\"VOLATILITY2.CALIBRATE\",True},{\"VOLATILITY2.JOINTCALIBRATION\",True},{\"MEANREVERSION1.JOINTCALIBRATION\",True},{\"CORRELATION.USEINITIALGUESS\",False}","{\"MEANREVERSION2.USEINITIALGUESS\",False},{\"VOLATILITY1.JOINTCALIBRATION\",True},{\"VOLATILITY2.USEINITIALGUESS\",False},{\"CORRELATION.VALUE\",-0.5},{\"CORRELATION.JOINTCALIBRATION\",True},{\"VOLATILITY1.INTERPOLATIONTYPE\",\"Forward Step\"},{\"VOLATILITY1.CALIBRATE\",True},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"MEANREVERSION2.VALUE\",0.05},{\"VOLATILITY2.EXTRAPOLATIONTYPE\",\"Flat\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"MEANREVERSION2.JOINTCALIBRATION\",True},{\"Currency\",Currency},{\"VOLATILITY1.EXTRAPOLATIONTYPE\",\"Flat\"},{\"VOLATILITY2.INTERPOLATIONTYPE\",\"Forward Step\"},{\"Quote Type\",QuoteType},{\"CORRELATION.CALIBRATE\",False},{\"MEANREVERSION1.VALUE\",0.03},{\"VOLATILITY1.USEINITIALGUESS\",False},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION1.USEINITIALGUESS\",False},{\"MEANREVERSION2.CALIBRATE\",False},{\"MEANREVERSION1.CALIBRATE\",False},{\"VOLATILITY2.CALIBRATE\",True},{\"VOLATILITY2.JOINTCALIBRATION\",True},{\"MEANREVERSION1.JOINTCALIBRATION\",True},{\"CORRELATION.USEINITIALGUESS\",False}","{\"Quote Type\",QuoteType},{\"MEANREVERSION.USEINITIALGUESS\",false},{\"VOLATILITY.USEINITIALGUESS\",false},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION.CALIBRATE\",false},{\"VOLATILITY.CALIBRATE\",true},{\"Currency\",Currency}","{\"MEANREVERSION2.USEINITIALGUESS\",False},{\"VOLATILITY1.JOINTCALIBRATION\",True},{\"VOLATILITY2.USEINITIALGUESS\",False},{\"CORRELATION.VALUE\",-0.5},{\"CORRELATION.JOINTCALIBRATION\",True},{\"VOLATILITY1.INTERPOLATIONTYPE\",\"Forward Step\"},{\"VOLATILITY1.CALIBRATE\",True},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"MEANREVERSION2.VALUE\",0.05},{\"VOLATILITY2.EXTRAPOLATIONTYPE\",\"Flat\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"MEANREVERSION2.JOINTCALIBRATION\",True},{\"Currency\",Currency},{\"VOLATILITY1.EXTRAPOLATIONTYPE\",\"Flat\"},{\"VOLATILITY2.INTERPOLATIONTYPE\",\"Forward Step\"},{\"Quote Type\",QuoteType},{\"CORRELATION.CALIBRATE\",False},{\"MEANREVERSION1.VALUE\",0.03},{\"VOLATILITY1.USEINITIALGUESS\",False},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION1.USEINITIALGUESS\",False},{\"MEANREVERSION2.CALIBRATE\",False},{\"MEANREVERSION1.CALIBRATE\",False},{\"VOLATILITY2.CALIBRATE\",True},{\"VOLATILITY2.JOINTCALIBRATION\",True},{\"MEANREVERSION1.JOINTCALIBRATION\",True},{\"CORRELATION.USEINITIALGUESS\",False}","{\"Quote Type\",QuoteType},{\"MEANREVERSION.USEINITIALGUESS\",false},{\"VOLATILITY.USEINITIALGUESS\",false},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION.CALIBRATE\",false},{\"VOLATILITY.CALIBRATE\",true},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"MEANREVERSION.USEINITIALGUESS\",false},{\"VOLATILITY.USEINITIALGUESS\",false},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION.CALIBRATE\",false},{\"VOLATILITY.CALIBRATE\",true},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Discount Curve\",NxStd::FXDiscountCurveID(Currency, Terms.Currency, Numerix::GetSettings(\"Settings.Currency\",Terms.Currency,\"IRIndex\"), Numerix::GetSettings(\"Settings.Currency\",Terms.Currency,\"IRIndexTenor\"))},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"MEANREVERSION.USEINITIALGUESS\",false},{\"VOLATILITY.USEINITIALGUESS\",false},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"INSTCOLL.INSTRUMENTCAPFLOOR\",TradeTerms.InstrumentCapfloor_func},{\"INSTCOLL.INSTRUMENTSWAPTION\",TradeTerms.InstrumentCollection_func},{\"MEANREVERSION.CALIBRATE\",false},{\"VOLATILITY.CALIBRATE\",true},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Discount Curve\",NxStd::FXDiscountCurveID(Currency, Terms.BaseCurrency, Numerix::GetSettings(\"Settings.Currency\",Currency, \"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",Currency, \"IRIndexTenor\"))},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Discount Curve\",NxStd::FXDiscountCurveID(Currency, Terms.Currency, Numerix::GetSettings(\"Settings.Currency\",Currency, \"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",Currency, \"IRIndexTenor\"))},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"CURRENCY\",Currency},{\"QUOTE TYPE\",QuoteType},{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"Discount Curve\",NxStd::FXDiscountCurveID(Currency, Terms.Currency, Numerix::GetSettings(\"Settings.Currency\",Terms.Currency,\"IRIndex\"), Numerix::GetSettings(\"Settings.Currency\",Terms.Currency,\"IRIndexTenor\"))},{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"INSTCOLL.IRINDEX\",Numerix::GetSettings(\"Settings.Currency\", TradeTerms.Currency, \"OvernightIndex\")},{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"INSTCOLL.IRINDEXTENOR\",Numerix::GetSettings(\"Settings.Currency\", TradeTerms.Currency, \"OvernightIndexTenor\")},{\"Currency\",Currency},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"INSTCOLL.INSTRUMENTSWAPTION\",Numerix::Table(\"Instrument Swaption\"+Numerix::UniqueNumber,{\"CalibrationStrategy\",\"Strike\",\"OptionMaturity\",\"SwapTenor\",\"Flavor\",\"Weight\"},{\"DiagonalSwaptions(\\\"ATM\\\",\\\"\"+TradeTerms.Duration+\"\\\",\\\"Payers\\\")\"}.Transpose).Create}","{\"MEANREVERSION.CALIBRATE\",false},{\"Quote Type\",QuoteType},{\"Currency\",Currency},{\"MEANREVERSION.VALUE\",0.03},{\"INSTCOLL.CALIBRATIONINSTRUMENTTYPE\",\"Swaption\"},{\"INSTCOLL.INSTRUMENTSWAPTION\",Numerix::Table(\"Instrument Swaption\"+Numerix::UniqueNumber,{\"CalibrationStrategy\",\"Strike\",\"OptionMaturity\",\"SwapTenor\",\"Flavor\",\"Weight\"},{\"DiagonalSwaptions(\\\"ATM\\\",\\\"\"+TradeTerms.Duration+\"\\\",\\\"Payers\\\")\"}.Transpose).Create}","{\"Quote Type\",QuoteType},{\"Currency\",Currency}","{\"CURRENCY\",Currency},{\"QUOTE TYPE\",QuoteType},{\"MEANREVERSION.VALUE\",0.03},{\"MEANREVERSION.CALIBRATE\",false}"]
    }
  },
  "CONTEXT^_10074_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT",
    "TABLE" : {
      "NAME" : ["USECSADISCOUNTING","OPTIONS","CMDTYPRICINGRULES","INFLPRICINGRULES","CRPRICINGRULES","CCPRICINGRULES","EQPRICINGRULES","POLICYTYPE","PRICINGPOLICYID","REPORTINGCURRENCY","FXPRICINGRULES","HYPRICINGRULES","IRPRICINGRULES"],
      "VALUE" : [false,"OPTIONS_10056_NX_AUTOGEN","CMDTYPRICINGRULES_10058_NX_AUTOGEN","INFLPRICINGRULES_10060_NX_AUTOGEN","CRPRICINGRULES_10062_NX_AUTOGEN","CCPRICINGRULES_10064_NX_AUTOGEN","EQPRICINGRULES_10066_NX_AUTOGEN","Pricing","Standard","USD","FXPRICINGRULES_10068_NX_AUTOGEN","HYPRICINGRULES_10070_NX_AUTOGEN","IRPRICINGRULES_10072_NX_AUTOGEN"]
    }
  },
  "CONTEXT^PRICINGPOLICY.INSTANCE": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "PRICINGPOLICY.INSTANCE",
      "DEFINITION" : "PRICINGPOLICY.DEFAULT",
      "INSTANTIATION TYPE" : "PRICINGPOLICY",
      "CONTAINER" : "Context",
      "INPUTS" : "_10074_NX_AUTOGEN"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT",
    "INPUTS" : {
      "OBJECT" : "MARKET",
      "TYPE" : "CONTAINER",
      "ID" : "MID_PricingTest_26-Sep-2023-00-00-00",
      "CONTAINER" : "Context"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_SCALARS_DATA_0": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["CR.TWD-07305506_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-COCACOLA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.ZAR-CITIUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-AMAZON_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-TCV_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-VISA_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-05052322_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.CNH-LIBOR_ALM-3M.SWAP-3Y.MID","IR.AUD-BBSW-6M.SWAP-15Y.MID","IR.USD-LIBOR_ALM.CASH-1M.MID","CR.USD-KGC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.ZAR-SOGEFRPPHCM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NOSCCATT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-16446274_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.SGD-LIBOR_ALM-6M.SWAP-10Y.MID","FX.USDCHF-SPOT.MID","EQ.USD-NYSE-DBDMA.DIV.CONT","CR.USD-KRKTCORP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ICBCTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SGD-LIBOR_ALM.CASH-3M.MID","CR.AUD-VERIZON_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-EXIKKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ING BANK NV_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-BMWBDEMU_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-AAPL_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-NOMUHI_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-15Y.MID","CR.AUD-UOVBSGSG_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NATIXSI_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-11384806_SNRFOR_CR.CDS.RECOVERY","CR.USD-NATIXSA_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.NZDUSD.FWD-5M.MID","CR.USD-FCBKTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ROK_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-SOFR_ALM.CASH-2M.MID","CR.CNY-MORG_SNRFOR_CR.CDS.RECOVERY","CR.USD-CHASUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.SGD-SGB_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-HSBCHOP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-QNBAQAQA_SNRFOR_CR.CDS.RECOVERY","IR.CNH-FIXED/USD-LIBOR-3M.SWAPONSHORE-1Y.MID","CR.CNY-CITIUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-OCBCSGSG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-70796749_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-SCSBTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-MTRC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-UBSBCHZZXXX_SNRFOR_CR.CDS.RECOVERY","CR.USD-MSFT_SNRFOR_CR.CDS.RECOVERY","IR.USD-SOFR_ALM-ON.SWAP-4Y.MID","CR.USD-UBSGROUP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-WPACAU2F_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.RUB-NFEA.CASH-6M.MID","CR.AUD-VPNF_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.NOK-NIBOR-6M.SWAP-9Y.MID","CR.TWD-75339004_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDNTD.FWD-9M.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-3Y.MID","CR.CNY-NOSCCATT_SNRFOR_CR.CDS.RECOVERY","CR.USD-PROXY_A2_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.EUR-UBSBCHZZXXX_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.CAD-CDOR-3M.SWAP-4Y.MID","FX.NZDUSD.FWD-2Y.MID","CR.USD-DIS_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-KODBKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-FGBMAEAA_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PROXY_BAA3_SNRFOR_CR.CDS.RECOVERY","IR.ZAR-LIBOR_ALM.CASH-1M.MID","CR.USD-CRESCHZZ80A_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-GOLDUS33_SNRFOR_CR.CDS.RECOVERY","CR.CNY-SDBCCNBJ_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-ROK_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-16446274_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CKHUTCH_SNRFOR_CR.CDS.RECOVERY","CR.AUD-TCV_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-PROXY_AA2_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-9Y.MID","FX.USDJPY.FWD-21M.MID","CR.USD-GSGIUS31_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-92065367_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.HKD-CRESCHZZ80A_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ESUNTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-UBSBCHZZXXX_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-OCBCSGSG_SNRFOR_CR.CDS.RECOVERY","CR.USD-AMAZON_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-97179430_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.RUB-NFEA-3M.SWAP-4Y.MID","FX.USDNOK.FWD-1Y.MID","CR.CNH-BPCEFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-WFC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-68035907_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.EUR-DTIF_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-SOGEFRPPHCM_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-MTRC_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDZAR.FWD-4M.MID","FX.USDZAR.FWD-10Y.MID","CR.HKD-CHASUS33HKD_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-AAPL_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-75339004_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NOMUHI_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR- CGMHUS31_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_AA2_SNRFOR_CR.CDS.RECOVERY","IR.EUR-ESTR-ON.SWAP-7M.MID","IR.HKD-HONIA-ON.SWAP-5Y.MID","CR.AUD-03307406_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-80333992_SNRFOR_CR.CDS.RECOVERY","CR.AUD-DBSSSGSG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-SGB_SNRFOR_CR.CDS.RECOVERY","CR.USD-KORELE_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.GBPUSD.FWD-15Y.MID","CR.AUD-AUTREA_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDZAR-SPOT.MID","IR.MMK-MIBOR.CASH-1M.MID","CR.AUD-BPCEFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-BKTWTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-JPCO_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-73251209_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.MYR-KLIBOR-3M.SWAP-3Y.MID","IR.KRW-KORIBOR-3M.SWAP-15Y.MID","FX.GBPUSD.FWD-18M.MID","CR.CNY-NOSCCATT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-SOGEFRPPHCM_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-18M.MID","FX.USDSGD.FWD-1W.MID","CR.AUD-BOFMCAT2FXM_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-SOGEFRPPHCM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-NOMUHI_SNRFOR_CR.CDS.RECOVERY","CR.USD-BBVAESMM_SNRFOR_CR.CDS.RECOVERY","IR.CHF-LIBOR-6M.SWAP-9Y.MID","CR.ZAR-CHASUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDMY1.FWD-2M.MID","CR.ZAR- CGMHUS31_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-NABA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-03707901_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-AGRI_SNRFOR_CR.CDS.RECOVERY","CR.CNY-MORG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-LBOTTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-DASMSGSG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-58650902_SNRFOR_CR.CDS.RECOVERY","CR.USD-JP12000329_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-AGRICUL DEV BANK OF CHINA CNH_SNRFOR_CR.CDS.RECOVERY","CR.CNY-HKSAR_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-SMBCJPJT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.HKD-CRESCHZZ80A_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-MIDLGB22_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-05072925_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.GBPUSD.FWD-4M.MID","CR.USD-BARCGB_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-1Y.MID","CR.TWD-MIDLGB22_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-EROCTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.CNH-LIBOR_ALM.CASH-ON.MID","IR.JPY-LIBOR-6M.SWAP-1Y.MID","CR.USD-UBSGROUP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CVSCORP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-EXIKKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-ICBCFL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ABNANL2A_SNRFOR_CR.CDS.RECOVERY","FX.USDTHB.FWD-6M.MID","CR.CNY-MSFIN_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-US91282CHD65.BOND.PRICE.MID","CR.USD-BKCHCNBJ_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-NOMUHI_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-NBNCO_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDINR.FWD-10M.MID","IR.MXN-MEXIBOR.CASH-1M.MID","CR.AUD-BOTKJPJT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-NOMUHI_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.TWD-FIXED-TWGOVT.BOND-0.00000-2Y.YIELD.MID","CR.CNH-MBBEMYKL_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.NOK-NIBOR.CASH-6M.MID","CR.USD-NATAAU33_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-AGBTTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ESSESESS_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-MHCBJPJT_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.SEK-STIBOR.CASH-6M.MID","CR.USD-03374805_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD- CGMHUS31_SNRFOR_CR.CDS.RECOVERY","CR.TWD-97179430_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDSGD.FWD-10M.MID","IR.CNY-LIBOR_ALM-3M.SWAP-1Y.MID","CR.USD-80333992_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ROYCCAT2_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.NZD-BKBM.CASH-TN.MID","CR.USD-HKC113195_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-TOKYOGOV_SNRFOR_CR.CDS.RECOVERY","CR.AUD-BOTKJPJT_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.ZAR-JIBAR-3M.SWAP-20Y.MID","FX.USDINR.FWD-7M.MID","CR.USD-RABONL2U_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-TDOMCATT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-EIBCCNBJ_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-4Y.MID","FX.USDCHF.FWD-4M.MID","CR.USD-JNJ_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD- CGMHUS31_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.SGD-SIBOR.CASH-ON.MID","CR.USD-CHGRID_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-CRESGB2X_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-GOLDUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-9Y.MID","IR.CNY-LIBOR_ALM.CASH-ON.MID","CR.AUD-AT/T_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.MXN-MEXIBOR-1M.SWAP-39M.MID","CR.AUD-NBNCO_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.HKD-BKCHCNBJ_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDJPY.FWD-5M.MID","CR.CNY-CITIGR_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-HKSAR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-AXP_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDIDR.FWD-9M.MID","FX.USDMXN.FWD-3W.MID","IR.NZD-BKBM-3M.SWAP-8Y.MID","CR.HKD-CHASUS33HKD_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDMXN.FWD-9M.MID","CR.USD-GSGIUS31_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-11913502_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDVND-SPOT.MID","CR.USD-NTTF_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BBVAESMM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-VPNF_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-53021433_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.EUR-DTIF_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PROXY_AAA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-ROSGGB21_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-ANZBAU3M_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-SFG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-75339004_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-25Y.MID","CR.USD-CHGRID_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDCN1-SPOT.MID","CR.USD-MIDLGB22_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-FRGB_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KOEXKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-23535435_SNRFOR_CR.CDS.RECOVERY","IR.USD-LIBOR_ALM-3M.SWAP-4Y.MID","CR.CNH-KOEXKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-20Y.MID","CR.CNY-ASDBPHMM_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-5Y.MID","CR.USD-SGTL_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-EXIKKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-SFG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-KORWAT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PSASPI_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDSEK.FWD-3M.MID","CR.EUR-FRR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-A2_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-11384806_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.BRL-DI-1Y.SWAP-2Y.MID","CR.USD-SDBCCNBJ_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDVND.FWD-6M.MID","IR.CHF-LIBOR-6M.SWAP-10Y.MID","CR.USD-CZNBKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CHASUS33_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-EXIKKRSE_SNRFOR_CR.CDS.RECOVERY","FX.EURUSD-SPOT.MID","CR.AUD-KODBKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-INGBNL2A_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-03374805_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-SOGEFRPPHCM_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.AUDUSD.FWD-2Y.MID","CR.EUR-SOGEFRPPHCM_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-UBSGROUP_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.BRL-DI.CASH-1M.MID","CR.TWD-03795904_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-DIS_SNRFOR_CR.CDS.RECOVERY","CR.USD-XLONGB2L_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDTW1.FWD-6M.MID","CR.AUD-BSUIFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-DASMSGSG_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDINR.FWD-1W.MID","CR.USD-IBRDUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-MORG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NABA_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDIDR-SPOT.MID","CR.USD-RABONL2U_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-8Y.MID","IR.USD-SOFR-ON.SWAP-15Y.MID","CR.TWD-86427715_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDID1.FWD-2M.MID","CR.USD-COMMCNSH_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-SHBKKRSE_SNRFOR_CR.CDS.RECOVERY","CR.EUR-DTAGDE33_SNRFOR_CR.CDS.RECOVERY","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-10Y.MID","CR.USD-LBOTTWTP_SNRFOR_CR.CDS.RECOVERY","FX.USDCAD.FWD-2Y.MID","CR.USD-PROXY_AA1_SNRFOR_CR.CDS.RECOVERY","CR.CNH-CGB_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.JPY-TIBOR.CASH-2M.MID","CR.AUD-NOMUHI_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-3M.MID","CR.TWD-20817282_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-USTREASURY_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ROSGGB21_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-KODBKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-NATXFRPPMAR_SNRFOR_CR.CDS.RECOVERY","CR.USD-CITIUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.NOK-NIBOR-6M.SWAP-10Y.MID","IR.CNY-SHIBOR-3M.SWAP-5Y.MID","CR.AUD-NATAAU33_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.CHF-LIBOR.CASH-6M.MID","CR.TWD-16446274_SNRFOR_CR.CDS.RECOVERY","FX.EURUSD.FWD-5M.MID","FX.USDBR1.FWD-1Y.MID","IR.THB-BIBOR.CASH-3M.MID","CR.USD-EXIKKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-TPBKTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","EQ.TWD-TAIFEX-TWSE.SPOT.MID","CR.USD-04541302_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.EUR-EURIBOR.CASH-6M.MID","CR.USD-UWCBTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-15Y.MID","CR.USD-ICBKCNBJ_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-MBBEMYKL_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-15Y.MID","CR.USD-BSUIFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NTTGROUP_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDJPY.FWD-11M.MID","IR.HKD-HIBOR-3M/USD-LIBOR-3M.BASIS-5Y.MID","CR.USD-QNBAQAQA_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDJPY.FWD-6M.MID","IR.CNY-SHIBOR-3M.SWAP-10Y.MID","CR.TWD-04200199_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-BARCGB5G_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-INDKOR_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-BPCEFRPP_SNRFOR_CR.CDS.RECOVERY","CR.TWD-68387705_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-HKC113195_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-ANZBAU3M_SNRFOR_CR.CDS.RECOVERY","FX.USDSGD.FWD-11M.MID","CR.USD-MBBEMYKL_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDID1.FWD-3M.MID","CR.USD-HKE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-QNBAQAQA_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-5Y.MID","CR.TWD-BNPAFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-USTREASURY-USGOVT.BOND-0.035-10Y.YIELD.MID","CR.CNY-HKMC_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-3M.MID","CR.USD-CCFRFRPP024_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-WFBIUS6W_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.AUDUSD.FWD-15M.MID","CR.TWD-03795904_SNRFOR_CR.CDS.RECOVERY","CR.USD-XLONGB2L_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BNPAFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.EUR-BPCEFRPP_SNRFOR_CR.CDS.RECOVERY","CR.TWD-ABOT_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDIN1.FWD-1M.MID","CR.USD-UBSBCHZZXXX_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-FGBMAEAA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ROYCCAT2_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-84149358_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-SOGEFRPPHCM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-CRESCHZZ80A_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.AUDUSD.FWD-6M.MID","FX.USDPHP.FWD-4M.MID","CR.TWD-BNPAFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-22099131_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-TCPL_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-FGBMAEAA_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.AUDUSD.FWD-3Y.MID","CR.AUD-TCV_SNRFOR_CR.CDS.RECOVERY","CR.TWD-SOGEFRPPHCM_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-STANLNPLC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-CCBCTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-WPACAU2F_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-ABOT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-UBSGROUP_SNRFOR_CR.CDS.RECOVERY","IR.USD-LIBOR.CASH-3M.MID","CR.CNH-NOMUHI_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BOFAUS6S_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-CBA_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDJPY.FWD-3Y.MID","CR.AUD-NATAAU33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-INDKOR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-BSUIFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-11913502_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BSUIFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CCFRFRPP024_SNRFOR_CR.CDS.RECOVERY","CR.USD-ABNANL2A_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-5Y.MID","CR.ZAR-03307406_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CTBAAU2S_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-8M.MID","CR.USD-03307406_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-QNBAQAQA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-TDOMCATT_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.AUDUSD.FWD-5M.MID","CR.USD-BBVAESMM_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-20828393_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-NOMUHI_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-HVBKKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-23535435_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.KRW-KORIBOR-3M.SWAP-7Y.MID","IR.CNH-HIBOR.CASH-2M.MID","CR.CNH-KFW_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-CGB_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-TPBKTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDPHP.FWD-3M.MID","IR.AUD-LIBOR_ALM.CASH-3M.MID","CR.USD-DBGHSGSG_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.TWD-FIXED/USD-LIBOR-6M.SWAPONSHORE-10Y.MID","IR.RUB-NFEA-3M.SWAP-15Y.MID","FX.USDNOK.FWD-3M.MID","IR.EUR-ESTR-ON.SWAP-25Y.MID","CR.CNH-ROSGGB21_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ABNANL2A_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-A2_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-TCPL_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-HKSAR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-WPACAU2F_SNRFOR_CR.CDS.RECOVERY","CR.CNY-BCIEHNTE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-86427715_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.SGD-SGB_SNRFOR_CR.CDS.RECOVERY","CR.USD-03374805_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-MSFIN_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDMY1.FWD-1M.MID","CR.TWD-07305506_SNRFOR_CR.CDS.RECOVERY","FX.USDCN1.FWD-2Y.MID","FX.USDPHP.FWD-1Y.MID","CR.USD-ROSGGB21_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-WFBIUS6W_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-BNPAFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-UBSBCHZZXXX_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-LIBOR.CASH-ON.MID","CR.EUR-FRR_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDSGD.FWD-2W.MID","IR.KRW-KORIBOR-3M.SWAP-8Y.MID","CR.USD-PROXY_A3_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-AGRICUL DEV BANK OF CHINA CNH_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-HKE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-PROXY_AA3_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-XLONGB2L_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CTGOVSSN_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-UOVBSGSG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-HVBKKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-MSFT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-KFW_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.ZAR-BPCEFRPP_SNRFOR_CR.CDS.RECOVERY","CR.USD-EXIKKRSE_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-CHASUS33_SNRFOR_CR.CDS.RECOVERY","CR.USD-IBRDUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-SOGEFRPPHCM_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDSEK-SPOT.MID","CR.USD-ING BANK NV_SNRFOR_CR.CDS.RECOVERY","IR.SEK-STIBOR.CASH-1W.MID","CR.CNY-ADBC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.EUR-BPCEFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-BPCEFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-22099131_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-WPACAU2F_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-MHCBJPJT_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-1Y.MID","CR.USD-AAHK_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-AXP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-70827383_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ABNANL2A_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-MTRC_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-10Y.MID","IR.ZAR-JIBAR.CASH-1M.MID","CR.USD-PSASPI_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-4M.MID","CR.CNY-SDBCCNBJ_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-KOEXKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-03795904_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CTCBTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.CNH-LIBOR_ALM-3M.SWAP-2Y.MID","CR.TWD-20828393_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-LIBOR_ALM.CASH-2M.MID","FX.NZDUSD.FWD-6M.MID","IR.USD-SOFR_ALM.CASH-1M.MID","CR.CNY-MEBEDE6SDC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-KFW_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.EURUSD.FWD-3Y.MID","CR.TWD-BKTWTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-PROXY_AA3_SNRFOR_CR.CDS.RECOVERY","CR.HKD-CRESCHZZ80A_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-25Y.MID","FX.USDCNY.FWD-6M.MID","CR.USD-CBA_SNRFOR_CR.CDS.RECOVERY","CR.AUD-STATEWA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-MSFT_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.AUD-LIBOR_ALM.CASH-2M.MID","CR.USD-BNPAFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-RABONL2U_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.CNH-HIBOR.CASH-1M.MID","FX.USDSEK.FWD-1Y.MID","CR.USD-PROXY_BAA2_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-PROXY_AA3_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03244509_SNRFOR_CR.CDS.RECOVERY","CR.AUD-QTC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ANZBAU3M_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDJPY.FWD-2Y.MID","IR.CAD-CDOR-3M.SWAP-3Y.MID","CR.EUR-LLOYGROUP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-MEBEDE6SDC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-NATAAU33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-86427715_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.RUB-NFEA-3M.SWAP-3Y.MID","CR.CNH-KFW_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-SOGEFRPPHCM_SNRFOR_CR.CDS.RECOVERY","IR.USD-LIBOR-3M.SWAP-4Y.MID","CR.TWD-68035907_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDCAD.FWD-5M.MID","IR.TWD-TAIBOR-3M.SWAP-5Y.MID","CR.USD-PSASPT_SNRFOR_CR.CDS.RECOVERY","FX.USDTWD.FWD-1Y.MID","FX.NZDUSD.FWD-4M.MID","CR.USD-CRESCHZZ80A_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDMXN.FWD-11M.MID","CR.USD-NATXFRPPMAR_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.HKD-HONIA-ON.SWAP-9M.MID","CR.ZAR-CITIGR_SNRFOR_CR.CDS.RECOVERY","IR.USD-LIBOR-3M.SWAP-12Y.MID","IR.CHF-LIBOR-6M.SWAP-20Y.MID","FX.USDZAR.FWD-1Y.MID","CR.USD-LBOTTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-LBOTTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDMXN-SPOT.MID","CR.ZAR- CGMHUS31_SNRFOR_CR.CDS.RECOVERY","CR.CNY-MBBEMYKL_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-30414175_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-KEC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-BNPAFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-03795904_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-FRGB_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-BCIEHNTE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-NATAAU33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-NATXFRPPMAR_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-FCBKTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDCAD.FWD-6M.MID","CR.TWD-04200199_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.EURUSD.FWD-1Y.MID","CR.EUR-DTAGDE33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-CTBAAU2S_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BOFAUS6S_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-SMTH_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-NMIF_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.HKD-HKMAHKHC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-04541302_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-AAHK_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ABIBB_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.HKD-HIBOR-3M.SWAP-1Y.MID","CR.USD-CLPGROUP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.ZAR-JIBAR-3M.SWAP-12Y.MID","CR.USD-IBRDUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNH-AGRICUL DEV BANK OF CHINA CNH_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.PHP-PHIBOR.CASH-1M.MID","CR.ZAR-NATXFRPPMAR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-MSFIN_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.ZAR-JIBAR-3M.SWAP-4Y.MID","CR.ZAR-CRESCHZZ80A_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDSEK.FWD-21M.MID","CR.USD-TMCCUS66_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.TWD-LIBOR_ALM.CASH-9M.MID","CR.USD-UBSBCHZZXXX_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-AGRI_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.TWD-FIXED-TWGOVT.BOND-0.00000-1Y.YIELD.MID","CR.USD-DBSSSGSG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-TMCCUS66_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.ZAR-CITIUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDPH1-SPOT.MID","CR.USD-JPNOCUJPJT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-SOGEFRPPHCM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-QATAR_SNRFOR_CR.CDS.RECOVERY","CR.AUD-AUTREA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-HKMC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-INDKOR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-BPCEFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-BARCGB5G_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.EURUSD.FWD-2Y.MID","IR.IDR-BITD.CASH-1W.MID","IR.USD-SOFR_ALM.CASH-3M.MID","CR.CNH-WPACAU2F_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.HKD-HIBOR-3M.SWAP-2Y.MID","CR.USD-BBMEAEAD_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-DBSSSGSG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-PROXY_A3.CDS-10Y.SPREAD.MID","IR.PHP-PHIBOR.CASH-2M.MID","IR.ZAR-JIBAR-3M.SWAP-10Y.MID","IR.ZAR-JIBAR-3M.SWAP-5Y.MID","FX.USDBR1.FWD-3M.MID","IR.HKD-HIBOR-3M.SWAP-10Y.MID","CR.USD-VERIZON_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-CTBAAU2S_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-DBSSSGSG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-POWERCOR_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-TDOMCATT_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDRU1.FWD-1Y.MID","IR.HKD-HIBOR-3M/USD-LIBOR-3M.BASIS-4Y.MID","CR.CNY-BARCGB5G_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-UWCBTWTP_SNRFOR_CR.CDS.RECOVERY","CR.USD-ROK_SNRFOR_CR.CDS.RECOVERY","CR.AUD-KODBKRSE_SNRFOR_CR.CDS.RECOVERY","IR.PHP-PHIBOR.CASH-3M.MID","IR.HKD-HIBOR-3M/USD-LIBOR-3M.BASIS-10Y.MID","CR.CNY-BARCGB5G_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-03707901_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-03307406_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-ADCBAEAA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-MHCBJPJT_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.HKD-HIBOR.CASH-2W.MID","CR.ZAR-MORG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-CRESCHZZ80A_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-ROSGGB21_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.ZAR-JIBAR-3M.SWAP-6Y.MID","CR.TWD-68387705_SNRFOR_CR.CDS.RECOVERY","CR.USD-SCBLGB2G_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ABOCCNBJ_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.EUR-BPCEFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-NOSCCATT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-SOGEFRPPHCM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-KOEXKRSE_SNRFOR_CR.CDS.RECOVERY","CR.CNH-CTBAAU2S_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-NOMUHI_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-70796305_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ABIBB_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-PROXY_A2_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-CHASUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-28113286_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDMXN.FWD-5Y.MID","IR.CNH-SHIBOR.CASH-1Y.MID","FX.USDRUB.FWD-3W.MID","IR.AUD-LIBOR_ALM.CASH-1M.MID","CR.USD-FRGB_SNRFOR_CR.CDS.RECOVERY","CR.AUD-VERIZON_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BOTKJPJT00_SNRFOR_CR.CDS.RECOVERY","CR.USD-VERIZON_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-3Y.MID","CR.TWD-ORSTED_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.AUD-LIBOR_ALM-3M.SWAP-20Y.MID","CR.CNH-BPCEFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.HKD-HKMAHKHC_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.EURUSD.FWD-20Y.MID","CR.AUD-BPCEFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-SCBLGB2G_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-KODBKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-VISA_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDZAR.FWD-5M.MID","CR.ZAR-SOGEFRPPHCM_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-STATEWA_SNRFOR_CR.CDS.RECOVERY","FX.USDMYR.FWD-1W.MID","CR.USD-KGC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-NOMUHI_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CITIGR_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-7Y.MID","IR.BRL-DI.CASH-2M.MID","FX.USDHKD.FWD-9M.MID","CR.USD-PROXY_A2_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ING BANK NV_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-92065367_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BOFMCAT2FXM_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-25Y.MID","CR.USD-CRESCHZZ80A_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.AUD-BBSW-6M.SWAP-1Y.MID","CR.USD-BAC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-DBSSSGSG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-PINGAN_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ICBCTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.NOK-NIBOR.CASH-ON.MID","CR.HKD-CRESCHZZ80A_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-NOSCCATT_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-6M.MID","CR.AUD-CITIGR_SNRFOR_CR.CDS.RECOVERY","CR.TWD-73251209_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-20817282_SNRFOR_CR.CDS.RECOVERY","CR.AUD-CTBAAU2S_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-TDOMCATT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-NOMUHI_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.NOK-NIBOR.CASH-1W.MID","CR.TWD-70826764_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-AUTREA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-AGRI_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-PROXY_AA2_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-ESSESESS_SNRFOR_CR.CDS.RECOVERY","CR.TWD-16844548_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-28113286_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-MTRC_SNRFOR_CR.CDS.RECOVERY","CR.TWD-84613756_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-VERIZON00_SNRFOR_CR.CDS.RECOVERY","CR.CNH-NOSCCATT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-70796305_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-75708007_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NATXFRPPMAR_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-AAPL_SNRFOR_CR.CDS-5Y.SPREAD.MID","EQ.USD-NYSE-CIJPINMO.DIV.CONT","CR.TWD-16095410_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-COMCAST_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.TWD-LIBOR_ALM.CASH-1W.MID","CR.USD-COMMCNSH_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BKTWTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-KOEXKRSE_SNRFOR_CR.CDS.RECOVERY","CR.USD-JPMFIN_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-03777906_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-JP12000329_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-DASMSGSG_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.TWD-TAIBOR-3M.SWAP-15Y.MID","CR.TWD-97160544_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-ORSTED_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-CITIUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.MYR-KLIBOR-3M.SWAP-2Y.MID","CR.TWD-05052322_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-CZNBKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-PROXY_AA1_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-9M.MID","CR.AUD-MHCBJPJT_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR_ALM-3M.SWAP-15Y.MID","CR.USD-NABA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CMDTY.USD-LME-ZINC.FWD-15-JAN-2024.MID","FX.USDNOK.FWD-2Y.MID","IR.IDR-BITD.CASH-6M.MID","IR.CHF-LIBOR.CASH-1W.MID","IR.SGD-SIBOR.CASH-3M.MID","CR.USD-PROXY_BAA1_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-16095410_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.KRW-KORIBOR-3M.SWAP-9M.MID","CR.EUR-BPCEFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDINR.FWD-8M.MID","FX.USDCN1.FWD-1W.MID","CR.USD-PROXY_BAA1_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.VND-VNIBOR.CASH-2W.MID","CR.ZAR-CITIUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","EQ.USD-NYSE-DBDMA.SPOT.MID","CR.USD-TMCCUS66_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-NJGOV_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDCNH.FWD-5Y.MID","CR.CNY-ASDBPHMM_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PSASPI_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-CTBAAU2S_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-FCBKTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-BKCHCNBJ_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-COCACOLA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-HSBCHOP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.JPY-TMKSRJ1_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-NOSCCATT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-CITIUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.CHF-LIBOR.CASH-ON.MID","CR.TWD-16844548_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CCFRFRPP024_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.CHF-LIBOR-6M.SWAP-30Y.MID","CR.USD-FCBKTWTP_SNRFOR_CR.CDS.RECOVERY","FX.USDJPY.FWD-1W.MID","CR.TWD-ORSTED_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-15Y.MID","FX.USDMY1.FWD-3M.MID","CR.USD-HKMAHKHC_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.KRW-KORIBOR-3M.SWAP-6Y.MID","IR.MYR-KLIBOR-3M.SWAP-4Y.MID","CR.ZAR-CRESGB2X_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDPHP.FWD-5M.MID","CR.USD-SFG_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDMYR.FWD-9M.MID","CR.TWD-70827383_SNRFOR_CR.CDS.RECOVERY","CR.TWD-BKTWTWTP_SNRFOR_CR.CDS.RECOVERY","CR.USD-CHASUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-NOMUHI_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BARCGB_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-ASDBPHMM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-GSGIUS31_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-97179430_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-CBCTTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-4M.MID","CR.TWD-97176270_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-7Y.MID","CR.CNH-EXIKKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.CNY-LIBOR_ALM.CASH-3M.MID","CR.USD-TPBKTWTP_SNRFOR_CR.CDS.RECOVERY","CR.AUD-NOSCCATT_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.JPY-TIBOR.CASH-1M.MID","IR.CAD-CDOR-3M.SWAP-15Y.MID","CR.TWD-30414175_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.RUB-NFEA.CASH-ON.MID","IR.TWD-CHPO_ALM.CASH-9M.MID","CR.AUD-RABONL2U_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDCAD.FWD-15M.MID","FX.USDJPY.FWD-7M.MID","CR.AUD-ANZBAU3M_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-SFG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03707901_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NOSCCATT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PROXY_BAA1_SNRFOR_CR.CDS.RECOVERY","CR.USD-AGRI_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-ICBKCNBJ_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-NOSCCATT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD- CGMHUS31_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-CRESGB2X_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-CCBCTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.MXN-MEXIBOR.CASH-3M.MID","CR.USD-PRUDENTIAL_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY- CGMHUS31_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-MSFIN_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.SGD-MASGSGSG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BKTWTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-MIDLGB22_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-CBCTTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-CGB_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-20817282_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.NZDUSD.FWD-1Y.MID","CR.AUD-03307406_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR_ALM-3M.SWAP-5Y.MID","CR.USD-CBCTTWTP_SNRFOR_CR.CDS.RECOVERY","CR.USD-CVSCORP_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDRU1-SPOT.MID","CR.TWD-03244509_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BSUIFRPP_SNRFOR_CR.CDS.RECOVERY","CR.AUD-AUTREA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNH-CTBAAU2S_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDKR1.FWD-2M.MID","FX.USDVND.FWD-1W.MID","CR.USD-CZNBKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-MIDLGB22_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CLPC_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.CNH-FIXED/USD-LIBOR-3M.SWAPONSHORE-2Y.MID","CR.USD-RABONL2U_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CIBBMYKL_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDSGD.FWD-3Y.MID","CR.AUD-SMBCJPJT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-DBSSSGSG_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.NZDUSD.FWD-3Y.MID","CR.ZAR-03307406_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KORELE_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.TWD-FIXED-TWGOVT.BOND-0.00000-15Y.YIELD.MID","IR.USD-LIBOR.CASH-2M.MID","IR.EUR-EURIBOR.CASH-ON.MID","CR.USD-AAHK_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-ADBC_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDID1.FWD-1M.MID","CR.USD-PROXY_AA3_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.TWD-LIBOR_ALM-3M.SWAP-15Y.MID","CR.AUD-CNSW_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-CRESCHZZ80A_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-SCSBTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-SOGEFRPPHCM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ROSGGB21_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-HKE_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.CNH-LIBOR_ALM.CASH-3M.MID","IR.BRL-DI-1Y.SWAP-3Y.MID","CR.USD-CGB_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDCAD.FWD-4Y.MID","CR.TWD-EROCTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDCHF.FWD-6M.MID","FX.USDRU1.FWD-2M.MID","IR.EUR-EURIBOR-6M.SWAP-25Y.MID","CR.USD-JNJ_SNRFOR_CR.CDS.RECOVERY","CR.USD-SGTL_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CLPGROUP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-MBBEMYKL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-NMIF_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-JPGOVT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-MORG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-SHBKKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-VPNF_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDMXN.FWD-1M.MID","IR.CNY-SHIBOR-3M.SWAP-4Y.MID","CR.AUD-VERIZON_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.EUR-DTAGDE33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-MBBEMYKL_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-PFIZER_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-11913502_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-CHASUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.BRL-DI-1Y.SWAP-1Y.MID","FX.AUDUSD.FWD-1Y.MID","CR.AUD-EXIKKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-PRUDENTIAL_SNRFOR_CR.CDS.RECOVERY","CR.TWD-97179430_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-2M.MID","CR.USD-UBSGROUP_SNRFOR_CR.CDS-7Y.SPREAD.MID","EQ.USD-NYSE-SGIXACE.SPOT.MID","CR.AUD-UOVBSGSG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-HKC113195_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-97160544_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-NMIF_SNRFOR_CR.CDS.RECOVERY","CR.TWD-03244509_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.RUB-NFEA.CASH-1W.MID","CR.CNH-BPCEFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-HKSAR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ROYCCAT2_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-WFBIUS6W_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-03374805_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CBA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-GSGIUS31_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-84613756_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.JPY-TIBOR.CASH-3M.MID","CR.USD-NOMUHI_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-9Y.MID","FX.GBPUSD.FWD-6M.MID","CR.USD-PROXY_AA2_SNRFOR_CR.CDS-10Y.SPREAD.MID","EQ.USD-NYSE-JPMRDIAN.DIV.CONT","IR.EUR-ESTR-ON.SWAP-2W.MID","CR.USD-BARCGB5G_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD- CGMHUS31_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-COBADEFF_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-30Y.MID","CR.USD-UBSBCHZZXXX_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-INGBNL2A_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-CITIGR_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.EURUSD.FWD-7M.MID","CR.USD-TCPL_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDINR.FWD-6M.MID","FX.USDIDR.FWD-1W.MID","FX.USDCHF.FWD-18M.MID","CR.USD-TMCCUS66_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.THB-BIBOR-6M.SWAP-1Y.MID","CR.CNY-QNBAQAQA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ADCBAEAA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-UOVBSGSG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-HKE_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.NZDUSD.FWD-11M.MID","IR.CNH-HIBOR-3M.SWAP-2Y.MID","IR.TWD-FIXED-TWGOVT.BOND-0.00000-20Y.YIELD.MID","CR.TWD-84149358_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-EXIKKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-3Y.MID","IR.SEK-STIBOR.CASH-ON.MID","CR.TWD-84149358_SNRFOR_CR.CDS.RECOVERY","CR.CNY-HKMC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-BKTWTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-SMTH_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDKRW.FWD-6M.MID","CR.USD-AGRI_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-86427715_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-97176270_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-4Y.MID","IR.NOK-NIBOR-6M.SWAP-7Y.MID","CR.USD-CTGOVSSN_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-UOVBSGSG_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-SOFR_ALM-ON.SWAP-2Y.MID","FX.USDSGD.FWD-5M.MID","CR.USD-DASMSGSG_SNRFOR_CR.CDS.RECOVERY","CR.USD-04541302_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-1Y.MID","CR.ZAR-EXIKKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-GE_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.HKD-HONIA-ON.SWAP-7Y.MID","CR.USD-JP12000329_SNRFOR_CR.CDS.RECOVERY","IR.SGD-SORA-ON.SWAP-18M.MID","FX.USDSEK.FWD-10M.MID","CR.CNH-WPACAU2F_SNRFOR_CR.CDS.RECOVERY","FX.GBPUSD.FWD-2Y.MID","IR.CHF-LIBOR-6M.SWAP-1Y.MID","CR.USD-UOVBSGSG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CBA_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-2Y.MID","IR.USD-SOFR-ON.SWAP-18M.MID","CR.USD-BKKBTHBK_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.GBPUSD-SPOT.MID","CR.USD-CHGRID_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-70796749_SNRFOR_CR.CDS.RECOVERY","CR.CNH-NOMUHI_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.ZAR-AGRI_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-AGRI_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-HKMC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-SOGEFRPPHCM_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.USD-LIBOR_ALM-3M.SWAP-3Y.MID","CR.USD-ABOCCNBJ_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-HVBKKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.MYR-KLIBOR.CASH-3M.MID","IR.SGD-SIBOR-6M.SWAP-2Y.MID","CR.TWD-70827383_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BPCEFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.ZAR-LIBOR_ALM.CASH-TN.MID","CR.AUD-WPACAU2F_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BBMEAEAD_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-HKC113195_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-70826764_SNRFOR_CR.CDS.RECOVERY","CR.USD-PROXY_A3_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NMIF_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDCNY.FWD-1Y.MID","IR.AUD-LIBOR_ALM-3M.SWAP-1Y.MID","CR.CNY-03307406_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDCNH.FWD-9M.MID","FX.EURUSD.FWD-1W.MID","FX.USDZAR.FWD-3M.MID","FX.USDCHF.FWD-2Y.MID","IR.USD-USTREASURY-USGOVT.BILL-0-6M.YIELD.MID","CR.AUD-A2_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-QNBAQAQA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-GE_SNRFOR_CR.CDS.RECOVERY","CR.USD-NABA_SNRFOR_CR.CDS.RECOVERY","CR.USD-ADCBAEAA_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-9Y.MID","IR.MYR-KLIBOR.CASH-ON.MID","CR.USD-ABNANL2A_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-COBADEFF_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-59504506_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-SOGEFRPPHCM_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-AGRI_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-SOFR_ALM-ON.SWAP-50Y.MID","CR.USD-SMBCJPJT_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.SGD-LIBOR_ALM-6M.SWAP-20Y.MID","CR.TWD-58650902_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ISRAEL_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-JPGOVT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-VISA_SNRFOR_CR.CDS.RECOVERY","CR.USD-MHCBJPJT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD- CGMHUS31_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-PRUDENTIAL_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KNOC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-PROXY_A3.CDS-2Y.SPREAD.MID","CR.TWD-AGRI_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-05072925_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-2Y.MID","CR.CNH-CGB_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KRKTCORP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-LLOYGROUP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.CNH-SHIBOR.CASH-ON.MID","CR.USD-PROXY_BAA3_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-HKSAR_SNRFOR_CR.CDS.RECOVERY","CR.TWD-70796305_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-ICBKCNBJ_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-CZNBKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDRUB.FWD-2M.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-8Y.MID","CR.USD-AXP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-KFW_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-SAFA50_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-68387705_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PROXY_AAA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-MSFIN_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDTWD.FWD-1W.MID","CR.USD-KOSEP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-BCIEHNTE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BBMEAEAD_SNRFOR_CR.CDS.RECOVERY","CR.USD-XSESSGS1_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-CHASUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-RABONL2U_SNRFOR_CR.CDS.RECOVERY","CR.USD-KODBKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SGD-LIBOR_ALM-6M.SWAP-6Y.MID","CR.USD-FRGB_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-CITIUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-ANZBAU3M_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-INDKOR_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-7Y.MID","CR.USD-PROXY_AA1_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NMIF_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-MORG_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-70796305_SNRFOR_CR.CDS.RECOVERY","CR.USD-CTBAAU2S_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDCNH.FWD-1M.MID","FX.USDID1.FWD-1Y.MID","CR.TWD-68035907_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-1Y.MID","CR.USD-PROXY_BAA2_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ESUNTWTP_SNRFOR_CR.CDS.RECOVERY","FX.EURUSD.FWD-11M.MID","CR.USD-KEC_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.THB-BIBOR-6M.SWAP-10Y.MID","CR.USD-SHBKKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-GOLDUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-AAPL_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-53021433_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-AGRICUL DEV BANK OF CHINA CNH_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDMMK.FWD-1M.MID","CR.USD-EDF_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.THB-BIBOR-6M.SWAP-7Y.MID","CR.TWD-03777906_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-BCIEHNTE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.ZAR-NATXFRPPMAR_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-KOEXKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-NOSCCATT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-ROSGGB21_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDCAD.FWD-1W.MID","IR.CNH-SHIBOR.CASH-3M.MID","CR.USD-AXP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-&&SGAD0143_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-SHBKKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.KRW-KORIBOR.CASH-1W.MID","FX.USDRUB.FWD-18M.MID","CR.TWD-70827383_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CKHUTCH_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-SOGEFRPPHCM_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KORWAT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BPCEFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-TMCCUS66_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-SFG_SNRFOR_CR.CDS.RECOVERY","CR.USD-BKTWTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-1Y.MID","CR.USD-XSESSGS1_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-BNPAFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-SHBKKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-PROXY_BAA3_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-03307406_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-MORG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-BARCGB5G_SNRFOR_CR.CDS-7Y.SPREAD.MID","EQ.USD-NYSE-CNTBI1.SPOT.MID","CR.AUD-CNSW_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-5Y.MID","IR.USD-SOFR-ON.SWAP-25Y.MID","CR.AUD-PROXY_A3.CDS-5Y.SPREAD.MID","CR.USD-&&SGAD0143_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-59504506_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_AA3_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-JPNOCUJPJT_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDKR1-SPOT.MID","CR.USD-ISRAEL_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-JPGOVT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-CITIGR_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.AUD-LIBOR_ALM-3M.SWAP-3Y.MID","CR.ZAR-MORG_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-BKCHCNBJ_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-ANZBAU3M_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-75339004_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-80328219_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ESUNTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDSGD.FWD-9M.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-5Y.MID","CR.CNH-NOSCCATT_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDNTD.FWD-1M.MID","CR.CNY-HKMC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-AGRI_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-CHASUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-NATAAU33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-AT/T_SNRFOR_CR.CDS.RECOVERY","CR.CNY-CITIGR_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-HKC113195_SNRFOR_CR.CDS.RECOVERY","CR.TWD-84613756_SNRFOR_CR.CDS.RECOVERY","CR.CNY-MBBEMYKL_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-20817282_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-6Y.MID","FX.USDHKD.FWD-1M.MID","CR.USD-PROXY_A1_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDSGD.FWD-21M.MID","FX.USDTHB.FWD-1Y.MID","CR.AUD-TCV_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CTCBTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-ADBC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-CTBAAU2S_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-BARCGB5G_SNRFOR_CR.CDS.RECOVERY","IR.USD-SOFR_ALM-ON.SWAP-15Y.MID","CR.EUR-FRR_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.EUR-MIDLGB22_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-LBOTTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-KSA_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-28113286_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-HVBKKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.TWD-CHPO_ALM.CASH-3Y.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-20Y.MID","CR.USD-AAHK_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-MORG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-KORELE_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDBRL.FWD-1M.MID","FX.USDMMK.FWD-9M.MID","CR.USD-TPBKTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-75370905_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-NOMUHI_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-8Y.MID","CR.CNH-CTBAAU2S_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-FGBMAEAA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-MHCBJPJT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-VISA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-ADCBAEAA_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-RBOSGB2LTCM_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-SOGEFRPPHCM_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-SCBLGB2G_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.AUDUSD.FWD-10Y.MID","CR.AUD-ADCBAEAA_SNRFOR_CR.CDS.RECOVERY","CR.USD-AT/T_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.NZD-BKBM-3M.SWAP-12Y.MID","CR.USD-XSESSGS1_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-04541302_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-SAFA50_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDBRL.FWD-3M.MID","CR.JPY-TMKSRJ1_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CLPGROUP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-LLOYGROUP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-COMCAST_SNRFOR_CR.CDS.RECOVERY","FX.AUDUSD.FWD-12Y.MID","IR.CAD-CDOR.CASH-2M.MID","CR.AUD-WPACAU2F_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDSGD.FWD-7M.MID","CR.TWD-59504506_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-JNJ_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-MBBEMYKL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-JPGOVT_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.AUDUSD.FWD-2W.MID","CR.TWD-BKTWTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.ZAR-03307406_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PROXY_BAA1_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-JGB_SNRFOR_CR.CDS.RECOVERY","EQ.USD-NYSE-CSEADR5U.SPOT.MID","CR.AUD-EXIKKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.SGD-SGB_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.AUDUSD.FWD-5Y.MID","CR.AUD-BSUIFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-ORSTED_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-OCBCSGSG_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-HSBCHOP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CGB_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-SOFR_ALM-ON.SWAP-40Y.MID","CR.AUD-BPCEFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.AUD-BBSW.CASH-6M.MID","CR.TWD-SCSBTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BKCHCNBJ_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.GBP-LIBOR.CASH-1M.MID","CR.ZAR-EXIKKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.HKD-HIBOR-3M.SWAP-4Y.MID","CR.USD-JP12000329_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-AGRI_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-VERIZON_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-EXIKKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-MTRC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-SDBCCNBJ_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BKTWTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR.CASH-6M.MID","CR.CNH-MBBEMYKL_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-03307406_SNRFOR_CR.CDS.RECOVERY","IR.USD-LIBOR_ALM-3M.SWAP-6Y.MID","FX.USDNTD-SPOT.MID","FX.AUDUSD.FWD-8M.MID","CR.USD-NATAAU33_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-RBOSGB2LTCM_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-SOGEFRPPHCM_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-NOSCCATT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-ROSGGB21_SNRFOR_CR.CDS.RECOVERY","CR.USD-CITIGR_SNRFOR_CR.CDS-6M.SPREAD.MID","CMDTY.USD-LME-ZINC.FWD-18-DEC-2023.MID","CR.TWD-BNPAFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-NATIXSA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ESUNTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.EURUSD.FWD-15M.MID","CR.USD-20817282_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-JPMFIN_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-UOVBSGSG_SNRFOR_CR.CDS.RECOVERY","CR.CNH-NOSCCATT_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDJPY.FWD-5Y.MID","CR.AUD-VERIZON_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.INR-MIFOR.CASH-1M.MID","CR.TWD-28113286_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.CNH-SHIBOR.CASH-2W.MID","CR.ZAR-CHASUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.NZDUSD.FWD-18M.MID","CR.AUD-MORG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ICBCTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CKHUTF1600_SNRFOR_CR.CDS.RECOVERY","CR.USD-CLPGROUP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BKKBTHBK_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDHKD.FWD-2W.MID","CR.USD-BKKBTHBK_SNRFOR_CR.CDS.RECOVERY","IR.AUD-LIBOR_ALM-3M.SWAP-4Y.MID","FX.USDINR.FWD-4M.MID","CR.USD-SCBLGB2G_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-KODBKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.EURUSD.FWD-12Y.MID","FX.USDMXN.FWD-1W.MID","IR.SGD-SIBOR-6M.SWAP-10Y.MID","CR.USD-JP12000329_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-PROXY_BAA1_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-QATAR_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-9Y.MID","CR.USD-NATXFRPPMAR_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-TDOMCATT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-AAHK_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDKR1.FWD-3M.MID","FX.USDBRL.FWD-15M.MID","FX.USDINR.FWD-9M.MID","CR.TWD-16844548_SNRFOR_CR.CDS.RECOVERY","CR.AUD-ADCBAEAA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BAC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PINGAN_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-DBSSSGSG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-WPACAU2F_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-73251209_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-CRESCHZZ80A_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-UBSGROUP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-DBSSSGSG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-EDF_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDIDR.FWD-1M.MID","CR.CNY-EIBCCNBJ_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-PSASPT_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-20Y.MID","CR.AUD-UOVBSGSG_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.SGD-LIBOR_ALM-6M.SWAP-4Y.MID","CR.CNY-BMWBDEMU_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.EUR-SOGEFRPPHCM_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.NZDUSD.FWD-10Y.MID","FX.USDIDR.FWD-6M.MID","CR.USD-KOSEP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-SHBKKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-CITIUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-70826764_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ROK_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-ICBCFL_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-VISA_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.AUD-BBSW-6M.SWAP-7Y.MID","CR.USD-STATEGRID_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-KGC_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.PHP-PHIBOR-3M.SWAP-10Y.MID","CR.USD-JPMFIN_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.MXN-MEXIBOR-1M.SWAP-195M.MID","CR.TWD-97179430_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.JPY-TIBOR-3M.SWAP-10Y.MID","CR.ZAR-NATXFRPPMAR_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.EUR-UBSBCHZZXXX_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-22099131_SNRFOR_CR.CDS.RECOVERY","CR.CNH-EXIKKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-CRESCHZZ80A_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-TDOMCATT_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDCNH.FWD-2M.MID","CR.USD-WFC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-PROXY_BAA2_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-4Y.MID","CR.USD-SFG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.EUR-DTIF_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-PROXY_A2_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-DIS_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BCIEHNTE_SNRFOR_CR.CDS.RECOVERY","FX.USDJPY.FWD-2W.MID","CR.TWD-70796749_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-97176270_SNRFOR_CR.CDS.RECOVERY","CR.USD-&&SGAD0143_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-STANLNPLC_SNRFOR_CR.CDS.RECOVERY","FX.USDZAR.FWD-6M.MID","CR.ZAR-MSFIN_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-ICBKCNBJ_SNRFOR_CR.CDS.RECOVERY","CR.TWD-22099131_SNRFOR_CR.CDS.RECOVERY","CR.USD-HKC113195_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD- CGMHUS31_SNRFOR_CR.CDS.RECOVERY","CR.USD-UWCBTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-TDOMCATT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-80333992_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-03307406_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-EIBCCNBJ_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-COMMCNSH_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-53021433_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.BRL-DI.CASH-3M.MID","CR.CNH-SOGEFRPPHCM_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BAC_SNRFOR_CR.CDS.RECOVERY","CR.HKD-BKCHCNBJ_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-AT/T_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-CTBAAU2S_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.HKD-BKCHCNBJ_SNRFOR_CR.CDS.RECOVERY","CR.USD-PFIZER_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KORAIL_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-AAHK_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.TWD-TAIBOR.CASH-9M.MID","CR.CNY- CGMHUS31_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-DBGHSGSG_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-TAFIX_ALM.CASH-1W.MID","CR.USD-KEC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.EUR-ROSGGB21_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BOFMCAT2FXM_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNH-ICBKCNBJ_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-2Y.MID","FX.USDMXN.FWD-7M.MID","FX.USDBRL.FWD-2Y.MID","FX.USDCHF.FWD-7M.MID","FX.USDCNH-SPOT.MID","CR.TWD-03795904_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-FRGB_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-KODBKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-SHBKKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.NOK-NIBOR-6M.SWAP-1Y.MID","CR.USD-HKC113195_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-A2_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.CHF-LIBOR.CASH-3M.MID","IR.SGD-SIBOR-6M.SWAP-3Y.MID","IR.CNH-FIXED/USD-LIBOR-3M.SWAPONSHORE-4Y.MID","IR.GBP-LIBOR-6M.SWAP-5Y.MID","CR.AUD-RABONL2U_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-07305506_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-JPNOCUJPJT_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.EURUSD.FWD-2W.MID","IR.CNY-LIBOR_ALM-3M.SWAP-3Y.MID","CR.USD-PROXY_A1_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-8Y.MID","IR.EUR-ESTR-ON.SWAP-7Y.MID","IR.AUD-LIBOR_ALM.CASH-ON.MID","FX.USDCAD.FWD-5Y.MID","IR.JPY-TIBOR-3M.SWAP-5Y.MID","CR.USD-&&SGAD0143_SNRFOR_CR.CDS.RECOVERY","CR.USD-EROCTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-SOGEFRPPHCM_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-68035907_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.CHF-LIBOR-6M.SWAP-2Y.MID","FX.USDZAR.FWD-1M.MID","CR.USD-STANLNPLC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-NJGOV_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-MSFT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-GE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-CITIGR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BKKBTHBK_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-MHCBJPJT_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDVND.FWD-2W.MID","CR.AUD-RABONL2U_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-7Y.MID","CR.USD-CHASUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CTCBTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-MSFIN_SNRFOR_CR.CDS.RECOVERY","CR.USD-JGB_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-VERIZON_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-UBSBCHZZXXX_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-22099131_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-OCBCSGSG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-JNJ_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PROXY_A3_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.CNY-SHIBOR.CASH-9M.MID","CR.CNY-BMWBDEMU_SNRFOR_CR.CDS.RECOVERY","FX.USDHKD.FWD-5Y.MID","IR.USD-LIBOR_ALM.CASH-1Y.MID","CR.CNY-03307406_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-CZNBKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-QTC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-KORELE_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.CNY-SHIBOR-3M.SWAP-3Y.MID","CR.CNH-ICBKCNBJ_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-EXIKKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-HKSAR_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-TAFIX_ALM.CASH-1M.MID","FX.USDTHB.FWD-3M.MID","CR.USD-LLOYGROUP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BKCHCNBJ_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.EUR-FRR_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDSGD.FWD-18M.MID","CR.TWD-80328219_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-TPBKTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-ING BANK NV_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-SDBCCNBJ_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.CNY-SHIBOR-3M.SWAP-2Y.MID","CR.AUD-WPACAU2F_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNH-MBBEMYKL_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ESSESESS_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.TWD-FIXED-TWGOVT.BOND-0.00000-5Y.YIELD.MID","CR.USD-INGBNL2A_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-GOLDUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.CNH-LIBOR_ALM.CASH-2M.MID","IR.AUD-AONIA-ON.SWAP-6M.MID","CR.USD-COCACOLA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BCIEHNTE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-16446274_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BARCGB5G_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.ZAR-LIBOR_ALM.CASH-9M.MID","FX.USDRU1.FWD-1W.MID","CR.CNH-KFW_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-23535435_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-03702700_SNRFOR_CR.CDS.RECOVERY","CR.TWD-AGBTTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.EUR-ROSGGB21_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.CNY-SHIBOR-3M.SWAP-7Y.MID","CR.AUD-UBSBCHZZXXX_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-PROXY_A1_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-SGTL_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ESUNTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDRU1.FWD-1M.MID","CR.TWD-EROCTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-PROXY_AA2_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-QNBAQAQA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-UBSBCHZZXXX_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.NOK-NIBOR-6M.SWAP-6Y.MID","IR.INR-MIFOR.CASH-6M.MID","CR.USD-BOFMCAT2FXM_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_A2_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-BOFAUS6S_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.GBPUSD.FWD-7M.MID","CR.CNY-AGRI_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-50Y.MID","CR.USD-NATXFRPPMAR_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-ROSGGB21_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-MIDLGB22_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.RUB-NFEA.CASH-2W.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-12Y.MID","CR.CNY-INDKOR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-SUMITR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-&&SGAD0143_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-UBSBCHZZXXX_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-HSBCHOP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ANZBAU3M_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-SDBCCNBJ_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_AAA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-BAC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-HKMC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CBA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-58650902_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-JGB_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDKRW.FWD-1M.MID","CR.USD-ICBKCNBJ_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.NOK-NIBOR-6M.SWAP-2Y.MID","CR.USD-XSESSGS1_SNRFOR_CR.CDS.RECOVERY","IR.USD-SOFR-ON.SWAP-40Y.MID","IR.CNH-LIBOR_ALM.CASH-2W.MID","CR.USD-KORWAT_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.RUB-NFEA-3M.SWAP-7Y.MID","CR.TWD-20828393_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ADCBAEAA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD- CGMHUS31_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-ORSTED_SNRFOR_CR.CDS.RECOVERY","CR.CNH-WPACAU2F_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-30Y.MID","CR.USD-INGBNL2A_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-LLOYGROUP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-AT/T_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-SGB_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-7Y.MID","CR.USD-SUMITR_SNRFOR_CR.CDS-4Y.SPREAD.MID","EQ.USD-NYSE-JMOZUSD.DIV.CONT","IR.CAD-CDOR-3M.SWAP-2Y.MID","CR.CNH-BAC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-FGBMAEAA_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.EURUSD.FWD-9Y.MID","CR.ZAR-BARCGB5G_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-TDOMCATT_SNRFOR_CR.CDS.RECOVERY","FX.EURUSD.FWD-2M.MID","FX.USDSGD.FWD-3W.MID","CR.TWD-22099131_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDNOK.FWD-2M.MID","CR.USD- CGMHUS31_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-VPNF_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-ADCBAEAA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CNPC_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-1Y.MID","IR.CNH-LIBOR_ALM-3M.SWAP-10Y.MID","CR.USD-KOEXKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.ZAR-JIBAR-3M.SWAP-2Y.MID","CR.USD-COBADEFF_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDBRL.FWD-1Y.MID","CR.USD-BOFAUS6S_SNRFOR_CR.CDS.RECOVERY","FX.USDRUB.FWD-1W.MID","CR.USD-INGBNL2A_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-WPACAU2F_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BSUIFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-30Y.MID","CR.USD-CBCTTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-PROXY_A2_SNRFOR_CR.CDS.RECOVERY","CR.USD-ICBCTWTP_SNRFOR_CR.CDS.RECOVERY","CR.USD-EXIKKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-6Y.MID","CR.USD-PROXY_AAA_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-KOSEP_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.NZDUSD.FWD-3M.MID","CR.USD-WFBIUS6W_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-WSTRUS44_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.NOK-NIBOR.CASH-9M.MID","CR.USD-PROXY_AA1_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-KNOC_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.NZDUSD.FWD-2M.MID","CR.USD-SMTH_SNRFOR_CR.CDS.RECOVERY","FX.USDTWD.FWD-2M.MID","CR.USD-MORG_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDSGD.FWD-2Y.MID","CR.ZAR-BARCGB5G_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.RUB-NFEA-3M.SWAP-2Y.MID","CR.USD-FGBMAEAA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-20828393_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.THB-BIBOR-6M.SWAP-20Y.MID","CR.TWD-22099131_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-XSESSGS1_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PROXY_BAA3_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BARCGB_SNRFOR_CR.CDS.RECOVERY","CR.USD-PROXY_A3_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDCAD.FWD-9Y.MID","CR.USD-XLONGB2L_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-IBRDUS33_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-EXIKKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-CITIUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-EBILAEADFIN_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-CITIGR_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDCN1.FWD-1Y.MID","CR.USD-EBILAEADFIN_SNRFOR_CR.CDS.RECOVERY","FX.USDIDR.FWD-2M.MID","FX.USDSGD.FWD-1Y.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-25Y.MID","CR.TWD-68387705_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-03307406_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-SOGEFRPPHCM_SNRFOR_CR.CDS.RECOVERY","CR.USD-MORG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-A2_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CNH-HIBOR.CASH-3M.MID","CR.USD-ICBKCNBJ_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.TWD-TAIBOR-3M.SWAP-7Y.MID","CR.USD-IBRDUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-SGB_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-23535435_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-04200199_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.ZAR-AGRI_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.AUD-BBSW-6M.SWAP-3Y.MID","FX.USDJPY.FWD-15M.MID","CR.AUD-PROXY_A3.CDS-4Y.SPREAD.MID","CR.USD-WSTRUS44_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-59504506_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-CITIGR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-KNOC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-HKMC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-58650902_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-ROSGGB21_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDMMK.FWD-1W.MID","IR.TWD-LIBOR_ALM-3M.SWAP-7Y.MID","IR.USD-SOFR-ON.SWAP-9Y.MID","CR.USD-SOGEFRPPHCM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-CHASUS33_SNRFOR_CR.CDS.RECOVERY","CR.USD-USTREASURY_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.RUB-NFEA-3M.SWAP-6Y.MID","CR.CNH-KOEXKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-SMBCJPJT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ABOCCNBJ_SNRFOR_CR.CDS.RECOVERY","CR.CNY-03307406_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-BOTKJPJT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.ZAR-GOLDUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.NZDUSD.FWD-7M.MID","CR.AUD-CNSW_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.SGD-SIBOR-6M.SWAP-20Y.MID","CR.USD-CKHUTCH_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-6Y.MID","IR.USD-LIBOR_ALM.CASH-ON.MID","CR.CNY-BMWBDEMU_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-75339004_SNRFOR_CR.CDS.RECOVERY","CR.USD-KORWAT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-QNBAQAQA_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDJPY.FWD-10M.MID","CR.USD-BBMEAEAD_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-POWERCOR_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BOFAUS6S_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-FGBMAEAA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-COMMCNSH_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-SOGEFRPPHCM_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDNOK.FWD-6M.MID","CR.USD-SGB_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BPCEFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-AGRI_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BNPAFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KSA_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDPH1.FWD-1W.MID","IR.MYR-KLIBOR.CASH-1W.MID","CR.USD-ANZBAU3M_SNRFOR_CR.CDS.RECOVERY","CR.USD-SUMITR_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-ISRAEL_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-ROSGGB21_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-STATEWA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-LBOTTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-BKTWTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-GE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-GOLDUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-WFC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-SOGEFRPPHCM_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-70827383_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CKHUTCH_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-2Y.MID","CR.CNY-MBBEMYKL_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-NBNCO_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDNOK.FWD-1M.MID","CR.TWD-MIDLGB22_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-AT/T_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.ZAR-NATXFRPPMAR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.ZAR-CITIGR_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDSEK.FWD-3Y.MID","FX.USDJPY.FWD-9Y.MID","CR.CNY-UBSBCHZZXXX_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BCIEHNTE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.EUR-ROSGGB21_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-BBMEAEAD_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BOTKJPJT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.JPY-TMKSRJ1_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NOMUHI_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03522600_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-LLOYGROUP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ANZBAU3M_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-CKHUTCH_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-FRR_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BOFMCAT2FXM_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-UOVBSGSG_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-30Y.MID","CR.CNY-NATAAU33_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-20817282_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-22354940_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDCNY.FWD-3M.MID","IR.CAD-CDOR-3M.SWAP-6Y.MID","CR.TWD-11384806_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-KRKTCORP_SNRFOR_CR.CDS.RECOVERY","CR.USD-KORAIL_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-COMCAST_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-ROSGGB21_SNRFOR_CR.CDS.RECOVERY","CMDTY.USD-LME-ZINC.FWD-19-FEB-2024.MID","FX.USDCAD.FWD-10Y.MID","CR.USD-SOGEFRPPHCM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-ADBC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-EDF_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-BPCEFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-WSTRUS44_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-CHASUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDIN1.FWD-3M.MID","CR.USD-WFBIUS6W00_SNRFOR_CR.CDS.RECOVERY","CR.USD-NMIF_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NATAAU33_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.MXN-MEXIBOR-1M.SWAP-13M.MID","CR.AUD-03307406_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-LBOTTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-BSUIFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-HKMAHKHC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-CNSW_SNRFOR_CR.CDS.RECOVERY","FX.AUDUSD.FWD-4M.MID","CR.USD-PROXY_BAA1_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-16095410_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDNTD.FWD-1W.MID","IR.USD-LIBOR-3M.SWAP-3Y.MID","IR.TWD-TAIBOR-3M.SWAP-3Y.MID","FX.USDRUB.FWD-2W.MID","CR.USD-SMBCJPJT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-CTBAAU2S_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.HKD-HIBOR-3M/USD-LIBOR-3M.BASIS-2Y.MID","CR.USD-MTRC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-KORAIL_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CBA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-JPCO_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-KORWAT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-KODBKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-97179430_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-1M.MID","FX.USDJPY.FWD-6Y.MID","CR.AUD-NBNCO_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CZNBKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-WFBIUS6W_SNRFOR_CR.CDS.RECOVERY","CR.USD-INGBNL2A_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-CITIGR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-SFG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-16095410_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDINR.FWD-1Y.MID","IR.THB-BIBOR-6M.SWAP-25Y.MID","IR.HKD-HIBOR-3M/USD-LIBOR-3M.BASIS-7Y.MID","CR.USD-PROXY_A1_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-CRESCHZZ80A_SNRFOR_CR.CDS.RECOVERY","CR.USD-STATEGRID_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-ANZBAU3M_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-MIDLGB22_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-KOEXKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KOEXKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KSA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-NOMUHI_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-28113286_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-&&SGAD0143_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-AGRI_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-HVBKKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-SMBCJPJT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-AAHK_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ABIBB_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-ADBC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-FGBMAEAA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03244509_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-A2_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDVND.FWD-1Y.MID","FX.USDMXN.FWD-4Y.MID","CR.USD-CLPC_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDCAD.FWD-2M.MID","CR.USD-GSGIUS31_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-7Y.MID","CR.USD-JPMFIN_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-2Y.MID","CR.USD-KGC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-05052322_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-COMMCNSH_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-03522600_SNRFOR_CR.CDS.RECOVERY","IR.ZAR-JIBAR.CASH-3M.MID","CR.TWD-03777906_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CVSCORP_SNRFOR_CR.CDS.RECOVERY","CR.AUD-BNPAFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.ZAR-GOLDUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-CRESGB2X_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BBVAESMM_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-8Y.MID","CR.USD-AMAZON_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.AUD-LIBOR_ALM-3M.SWAP-30Y.MID","FX.USDMXN.FWD-18M.MID","FX.USDBR1.FWD-1M.MID","CR.AUD-CITIUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-SOFR_ALM.CASH-4M.MID","IR.HKD-HIBOR-3M/USD-LIBOR-3M.BASIS-3Y.MID","CR.CNH-BAC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-75708007_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-HKMC_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDMXN.FWD-3Y.MID","IR.HKD-HIBOR-3M.SWAP-3Y.MID","CR.CNY-ICBCFL_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-QATAR_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-AGRI_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-22424994_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-ROSGGB21_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.EUR-SOGEFRPPHCM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-SHBKKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-JPGOVT_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-3Y.MID","FX.EURUSD.FWD-5Y.MID","CR.USD-DBGHSGSG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-KOSEP_SNRFOR_CR.CDS.RECOVERY","CR.USD-PFIZER_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-BOFMCAT2FXM_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-20828393_SNRFOR_CR.CDS.RECOVERY","IR.TWD-TAIBOR-3M.SWAP-4Y.MID","IR.CNH-LIBOR_ALM.CASH-6M.MID","CR.AUD-AUTREA_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDVND.FWD-2M.MID","CR.USD-BAC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-73251209_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDMXN.FWD-8M.MID","CR.TWD-11913502_SNRFOR_CR.CDS.RECOVERY","CR.USD-ROK_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-2Y.MID","FX.GBPUSD.FWD-3M.MID","CR.CNH-CZNBKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-CITIUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-TCV_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-QATAR_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-05052322_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.CNY-LIBOR_ALM-3M.SWAP-2Y.MID","CR.TWD-70796749_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-ADCBAEAA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-CTCBTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-PINGAN_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.NZDUSD.FWD-3W.MID","CR.USD-SCBLGB2G_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CHASUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDMXN.FWD-10M.MID","CR.CNY-NATAAU33_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.EUR-BPCEFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-NABA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-16095410_SNRFOR_CR.CDS.RECOVERY","CR.USD-COMCAST_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-JP12000329_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CITIUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-16446274_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-70796305_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-80328219_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.MXN-MEXIBOR-1M.SWAP-91M.MID","CR.TWD-75370905_SNRFOR_CR.CDS.RECOVERY","CR.AUD-NOMUHI_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-FGBMAEAA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NATIXSI_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-PROXY_A2_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-68035907_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR_ALM-3M.SWAP-10Y.MID","CR.TWD-SCSBTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-10Y.MID","CR.USD-KRKTCORP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-WPACAU2F_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-COCACOLA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-AMAZON_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD- CGMHUS31_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.HKD-HKMAHKHC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.HKD-HKMAHKHC_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDCHF.FWD-3M.MID","CR.USD-VISA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-NTTF_SNRFOR_CR.CDS.RECOVERY","CR.ZAR- CGMHUS31_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.CNY-LIBOR_ALM.CASH-6M.MID","CR.AUD-STATEWA_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDJPY.FWD-18M.MID","FX.USDZAR.FWD-2Y.MID","IR.USD-SOFR-ON.SWAP-5M.MID","CR.AUD-VERIZON_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDCNY.FWD-2M.MID","CR.CNY-BMWBDEMU_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CAD-CDOR-3M.SWAP-5Y.MID","CR.AUD-MORG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-SOGEFRPPHCM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-30414175_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-SOFR_ALM-ON.SWAP-5Y.MID","CR.EUR-FRR_SNRFOR_CR.CDS.RECOVERY","CR.USD-KORELE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-LLOYGROUP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KEC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CITIUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-NJGOV_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-84613756_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-UBSBCHZZXXX_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDRUB.FWD-9M.MID","CR.EUR-LLOYGROUP_SNRFOR_CR.CDS.RECOVERY","CR.USD-CRESCHZZ80A_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.MYR-KLIBOR-3M.SWAP-7Y.MID","FX.USDPH1.FWD-1M.MID","CR.USD-CITIGR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-BPCEFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.NZD-BKBM-3M.SWAP-7Y.MID","CR.AUD-DBSSSGSG_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-USTREASURY-USGOVT.BILL-0-2M.YIELD.MID","CR.USD-PROXY_A3_SNRFOR_CR.CDS.RECOVERY","CR.TWD-16446274_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.SGD-LIBOR_ALM.CASH-1W.MID","CR.AUD-NOSCCATT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-TDOMCATT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-BPCEFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SGD-LIBOR_ALM-6M.SWAP-3Y.MID","CR.USD-BARCGB_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-USTREASURY-USGOVT.BOND-0.03625-7Y.YIELD.MID","FX.USDJPY.FWD-1Y.MID","CR.ZAR-SOGEFRPPHCM_SNRFOR_CR.CDS.RECOVERY","CR.TWD-LBOTTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.NOK-NIBOR.CASH-TN.MID","CR.USD-CGB_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.NZDUSD.FWD-6Y.MID","CR.CNY-SDBCCNBJ_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDRUB.FWD-1Y.MID","FX.NZDUSD.FWD-21M.MID","CR.USD-BOTKJPJT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-97160544_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-03795904_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDCNY-SPOT.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-8Y.MID","FX.USDCN1.FWD-2M.MID","IR.HKD-HONIA-ON.SWAP-4Y.MID","CR.USD-CLPGROUP_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-12Y.MID","FX.USDINR.FWD-11M.MID","CR.TWD-53021433_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-5Y.MID","FX.USDJPY.FWD-10Y.MID","FX.AUDUSD.FWD-9M.MID","CR.AUD-MORG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-UBSGROUP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.CNH-LIBOR_ALM-3M.SWAP-4Y.MID","IR.MYR-KLIBOR-3M.SWAP-10Y.MID","CR.USD-MORG00_SNRFOR_CR.CDS.RECOVERY","CR.USD-GSGIUS31_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-CTBAAU2S_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.NOK-NIBOR.CASH-2M.MID","CR.AUD-BNPAFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.SGD-LIBOR_ALM.CASH-ON.MID","CR.CNY-HKMC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-11384806_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-KODBKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.GBPUSD.FWD-21M.MID","CR.TWD-80328219_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-CITIGR_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.RUB-NFEA.CASH-TN.MID","IR.CAD-CDOR-3M.SWAP-10Y.MID","CR.CNH-CHASUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-73251209_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.JPY-TIBOR.CASH-6M.MID","CR.CNY-MORG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-ANZBAU3M_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-NOMUHI_SNRFOR_CR.CDS.RECOVERY","CR.USD-STATEGRID_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-KNOC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CZNBKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.INR-MIFOR.CASH-2M.MID","CR.USD-GOLDUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-03522600_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CNPC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-NOSCCATT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY- CGMHUS31_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.CNH-HIBOR-3M.SWAP-9M.MID","FX.USDZAR.FWD-2W.MID","CR.USD-MSFIN_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-MEKCUS3W_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.EUR-MIDLGB22_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDCNH.FWD-6M.MID","CR.AUD-CNSW_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDTWD.FWD-6M.MID","CR.USD-JPGOVT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-SMBCJPJT_SNRFOR_CR.CDS.RECOVERY","CR.CNY-CITIGR_SNRFOR_CR.CDS.RECOVERY","FX.USDSEK.FWD-4M.MID","CR.USD-SMBCJPJT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-BOFMCAT2FXM_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDJPY.FWD-2M.MID","FX.USDSGD-SPOT.MID","CR.USD-03307406_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-SHBKKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KNOC_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.SGD-SORA-ON.SWAP-4Y.MID","CR.CNY-NOSCCATT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.HKD-CRESCHZZ80A_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.THB-BIBOR.CASH-ON.MID","CR.TWD-CCBCTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.EUR-EURIBOR.CASH-1W.MID","CR.AUD-CRESCHZZ80A_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-73251209_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDCAD.FWD-10M.MID","CR.TWD-03777906_SNRFOR_CR.CDS-4Y.SPREAD.MID","EQ.TWD-TAIFEX-TWSE.DIV.CONT","CR.USD-22099131_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-05072925_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR_ALM-3M.SWAP-2Y.MID","FX.USDKRW.FWD-1W.MID","CR.USD-ROYCCAT2_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03522600_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-97176270_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.AUDUSD.FWD-4Y.MID","CR.CNY-HKSAR_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-SHBKKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-15Y.MID","CR.USD-KSA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-AUTREA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CNPC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-HVBKKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-22354940_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-75708007_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDINR.FWD-5M.MID","IR.TWD-CHPO_ALM.CASH-6M.MID","EQ.USD-NYSE-JMOZWKUX.DIV.CONT","IR.ZAR-LIBOR_ALM-3M.SWAP-20Y.MID","IR.THB-BIBOR.CASH-1M.MID","CR.USD-EDF00_SNRFOR_CR.CDS.RECOVERY","CR.EUR-DTAGDE33_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-CRESCHZZ80A_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-TCV_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-UBSBCHZZXXX00_SNRFOR_CR.CDS.RECOVERY","FX.AUDUSD.FWD-11M.MID","IR.RUB-NFEA.CASH-2M.MID","CR.USD-COCACOLA_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-4Y.MID","IR.TWD-LIBOR_ALM-3M.SWAP-10Y.MID","CMDTY.USD-MZN20231114.FUT.MID","CR.AUD-SAFA50_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-BPCEFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-20817282_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-4Y.MID","CR.USD-AT/T_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-PROXY_BAA2_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-ASDBPHMM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-CGB_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-MSFT_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-15Y.MID","CR.EUR-LLOYGROUP_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDTHB.FWD-2M.MID","CR.USD-BPCEFRPP_SNRFOR_CR.CDS.RECOVERY","CR.CNH-WPACAU2F_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-MTRC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-WFC_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-20Y.MID","CR.AUD-UBSBCHZZXXX_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-PSASPI_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.CNH-FIXED/USD-LIBOR-3M.SWAPONSHORE-7Y.MID","CR.USD-DIS_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-EDF_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-22354940_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.HKD-CHASUS33HKD_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-EBRDGB2L_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ROSGGB21_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDTW1.FWD-3M.MID","CR.TWD-68387705_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-NJGOV_SNRFOR_CR.CDS.RECOVERY","IR.CNY-LIBOR_ALM.CASH-2W.MID","CR.SGD-SGB_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-04200199_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-EXIKKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.EURUSD.FWD-6M.MID","IR.USD-SOFR_ALM-ON.SWAP-25Y.MID","CR.USD-RBOSGB2LTCM_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KODBKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-NATAAU33_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-03702700_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CAD-CDOR.CASH-1Y.MID","CR.TWD-70826764_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-20Y.MID","CR.AUD-RABONL2U_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDCAD.FWD-1Y.MID","CR.USD-NATIXSA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-NBNCO_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.NZD-BKBM.CASH-3M.MID","CR.USD-HKMAHKHC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-FGBMAEAA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-PSASPT_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDCAD.FWD-18M.MID","CR.CNH-EXIKKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-FRR_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-84149358_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-XLONGB2L_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-HKMC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-CCFRFRPP024_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-LIBOR_ALM-3M.SWAP-25Y.MID","CR.USD-SUMITR_SNRFOR_CR.CDS.RECOVERY","CR.USD-CBCTTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.INR-MIFOR-6M.SWAP-3Y.MID","CR.CNY-QNBAQAQA_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SGD-SIBOR-6M.SWAP-7Y.MID","CR.USD-STANLNPLC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BARCGB5G_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-EXIKKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-MBBEMYKL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-FGBMAEAA_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDINR.FWD-1M.MID","CR.USD-KEC_SNRFOR_CR.CDS.RECOVERY","IR.USD-SOFR-ON.SWAP-1W.MID","CR.USD-EBRDGB2L_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.SEK-STIBOR.CASH-TN.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-7Y.MID","CR.CNY-AGRI_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-NMIF_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-SAFA50_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CTGOVSSN_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.HKD-HKMC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-MHCBJPJT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-75370905_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-CITIGR_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-92065367_SNRFOR_CR.CDS.RECOVERY","CR.USD-SMTH_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-SHBKKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-UOVBSGSG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-DBGHSGSG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-KOSEP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_A1_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDZAR.FWD-2M.MID","CR.TWD-04541302_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.BRL-DI-1Y.SWAP-4Y.MID","CR.AUD-NATAAU33_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-2Y.MID","IR.SEK-STIBOR.CASH-2M.MID","CR.TWD-AGRI_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.NZD-BKBM-3M.SWAP-15Y.MID","CR.TWD-AGRI_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-UOVBSGSG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-UOVBSGSG_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-MORG_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.GBPUSD.FWD-10M.MID","FX.USDCNY.FWD-2Y.MID","CR.CNY-NMIF_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-SMBCJPJT_SNRFOR_CR.CDS-2Y.SPREAD.MID","EQ.USD-NYSE-PINEEHAID.SPOT.MID","FX.USDCHF.FWD-3Y.MID","CR.USD-PROXY_BAA3_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-MIDLGB22_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.SGD-SIBOR.CASH-6M.MID","CR.USD-PROXY_BAA1_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-ABNANL2A_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-SMTH_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.CNH-FIXED/USD-LIBOR-3M.SWAPONSHORE-3Y.MID","IR.TWD-TAIBOR.CASH-6M.MID","CR.USD-PROXY_AAA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.ZAR-EXIKKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.SGD-LIBOR_ALM.CASH-1M.MID","CR.ZAR-BPCEFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-CBCTTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-PROXY_A3.CDS-1Y.SPREAD.MID","CR.USD-CTGOVSSN_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-BOTKJPJT_SNRFOR_CR.CDS.RECOVERY","CR.USD-ADCBAEAA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-03374805_SNRFOR_CR.CDS.RECOVERY","IR.ZAR-LIBOR_ALM-3M.SWAP-4Y.MID","IR.USD-LIBOR_ALM.CASH-1W.MID","CR.TWD-ABOT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-NATAAU33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ROSGGB21_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-CBCTTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-KORAIL_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-DBSSSGSG_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-HKC113195_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-25Y.MID","CR.USD-MBBEMYKL_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-SOGEFRPPHCM_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-EROCTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-AXP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-EROCTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.AUD-LIBOR_ALM.CASH-1W.MID","CR.ZAR-BARCGB5G_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.SGD-SORA-ON.SWAP-15Y.MID","CR.USD-ABOCCNBJ_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.CHF-LIBOR-6M.SWAP-6Y.MID","CR.USD-JPNOCUJPJT_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.CAD-CDOR-3M.SWAP-25Y.MID","CR.TWD-53021433_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.HKD-HKMC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-BCIEHNTE_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.NZDUSD.FWD-10M.MID","IR.NZD-BKBM-3M.SWAP-3Y.MID","CR.AUD-FGBMAEAA_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-MSFIN_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-XLONGB2L_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-04541302_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-NTTGROUP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.ZAR-JIBAR-3M.SWAP-30Y.MID","CR.USD-MBBEMYKL_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.JPY-LIBOR.CASH-3M.MID","CR.TWD-97176270_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY- CGMHUS31_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-NMIF_SNRFOR_CR.CDS.RECOVERY","CR.USD-TCPL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-AT/T_SNRFOR_CR.CDS.RECOVERY","FX.USDCNH.FWD-2Y.MID","CR.USD-CIBBMYKL_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BCIEHNTE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-CGB_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-SOFR_ALM-ON.SWAP-1Y.MID","CR.EUR-DTAGDE33_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-EIBCCNBJ_SNRFOR_CR.CDS.RECOVERY","CR.TWD-22424994_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NTTF_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.JPY-TMKSRJ1_SNRFOR_CR.CDS.RECOVERY","IR.JPY-TIBOR-3M.SWAP-1Y.MID","CR.USD-ESSESESS_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-NOMUHI_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ROYCCAT2_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-UWCBTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.ZAR-LIBOR_ALM.CASH-ON.MID","IR.MMK-MIBOR.CASH-3M.MID","CR.USD-EBRDGB2L_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDRUB.FWD-5Y.MID","CR.TWD-75370905_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-CRESCHZZ80A_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-HKSAR_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-MHCBJPJT_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.SGD-LIBOR_ALM-6M.SWAP-7Y.MID","CR.TWD-11913502_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-BKCHCNBJ_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-6Y.MID","CR.AUD-NOSCCATT_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDCAD.FWD-21M.MID","CR.ZAR-MORG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-JPNOCUJPJT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BOFAUS6S_0_SNRFOR_CR.CDS.RECOVERY","CR.USD-SGTL_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-MEBEDE6SDC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.SGD-MASGSGSG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-ASDBPHMM_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-2Y.MID","CR.USD-CLPGROUP_SNRFOR_CR.CDS.RECOVERY","FX.USDSGD.FWD-6M.MID","CR.TWD-97176270_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-CBCTTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-20817282_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.HKD-HIBOR.CASH-3M.MID","IR.CNH-HIBOR-3M.SWAP-1Y.MID","CR.USD-JGB_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-3Y.MID","FX.USDRUB.FWD-1M.MID","IR.THB-BIBOR-6M.SWAP-2Y.MID","CR.TWD-03777906_SNRFOR_CR.CDS.RECOVERY","CR.CNY-MSFIN_SNRFOR_CR.CDS.RECOVERY","IR.CNH-HIBOR-3M.SWAP-10Y.MID","CR.USD-DBSSSGSG_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDMMK-SPOT.MID","CR.TWD-75708007_SNRFOR_CR.CDS.RECOVERY","CR.TWD-03702700_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-SDBCCNBJ_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-KODBKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.EUR-DTIF_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.PHP-PHIBOR-3M.SWAP-7Y.MID","CR.TWD-AGBTTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.GBP-LIBOR.CASH-2M.MID","CR.USD-JGB_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.NOK-NIBOR.CASH-2W.MID","CR.USD-BAC_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CAD-CDOR.CASH-ON.MID","CR.CNH-NOMUHI_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-SGTL_SNRFOR_CR.CDS.RECOVERY","CR.USD-ABIBB_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY- CGMHUS31_SNRFOR_CR.CDS.RECOVERY","CR.USD-EROCTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BKTWTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-22354940_SNRFOR_CR.CDS.RECOVERY","CR.CNH-AGRICUL DEV BANK OF CHINA CNH_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDTWD-SPOT.MID","IR.INR-MIFOR-6M.SWAP-7Y.MID","CR.EUR-DTAGDE33_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDNOK.FWD-2W.MID","CR.TWD-70827383_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-AGRICUL DEV BANK OF CHINA CNH_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-RABONL2U_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PROXY_A3_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ROSGGB21_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-UBSBCHZZXXX_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-AGBTTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-FGBMAEAA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-20817282_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-3Y.MID","IR.VND-VNIBOR.CASH-3M.MID","CR.TWD-03702700_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.IDR-BITD.CASH-3M.MID","IR.MXN-MEXIBOR-1M.SWAP-65M.MID","CR.CNH-MTRC_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-6Y.MID","FX.USDCN1.FWD-6M.MID","CR.USD-FRGB_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDCHF.FWD-20Y.MID","FX.USDBRL.FWD-2M.MID","CR.USD-NATIXSI_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-AUTREA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ROYCCAT2_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.TWD-FIXED/USD-LIBOR-6M.SWAPONSHORE-5Y.MID","FX.USDHKD.FWD-2M.MID","CR.USD-HKE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-70826764_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-TCPL_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-97160544_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-SOFR.CASH-ON.MID","CR.USD-XLONGB2L_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-SHBKKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-BSUIFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.GBPUSD.FWD-3Y.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-6Y.MID","CR.AUD-AT/T_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-MIDLGB22_SNRFOR_CR.CDS.RECOVERY","CR.TWD-07305506_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-20Y.MID","CR.USD-CCFRFRPP024_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDCAD.FWD-2W.MID","CR.TWD-BKTWTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-86427715_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-CRESCHZZ80A_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.CNH-SHIBOR.CASH-2M.MID","CR.CNY-MSFIN_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-16095410_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-UWCBTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BKKBTHBK_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-NATAAU33_SNRFOR_CR.CDS.RECOVERY","FX.USDCHF.FWD-7Y.MID","CR.USD-MBBEMYKL_SNRFOR_CR.CDS.RECOVERY","CR.AUD-CTBAAU2S_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-EBILAEADFIN_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NTTF_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.TWD-FIXED/USD-LIBOR-6M.SWAPONSHORE-1Y.MID","CR.TWD-05072925_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-HKSAR_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDHKD.FWD-6M.MID","CR.USD-ABIBB00_SNRFOR_CR.CDS.RECOVERY","CR.AUD-MHCBJPJT_SNRFOR_CR.CDS.RECOVERY","CR.USD-KRKTCORP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-SOGEFRPPHCM_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.TWD-CHPO_ALM.CASH-2Y.MID","CR.HKD-BKCHCNBJ_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ISRAEL_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-AXP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-HKC113195_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.AUD-BBSW.CASH-2M.MID","FX.USDBRL.FWD-6M.MID","CR.ZAR-MSFIN_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.AUDUSD.FWD-1W.MID","IR.PHP-PHIBOR-3M.SWAP-3Y.MID","CR.AUD- CGMHUS31_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-WSTRUS44_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-CITIUS33_SNRFOR_CR.CDS.RECOVERY","CR.USD-KOSEP_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-7Y.MID","CR.AUD-BNPAFRPP_SNRFOR_CR.CDS.RECOVERY","CR.ZAR- CGMHUS31_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CAD-CDOR.CASH-1M.MID","CR.HKD-HKMC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-16844548_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-30414175_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDPH1.FWD-9M.MID","IR.GBP-LIBOR.CASH-6M.MID","FX.GBPUSD.FWD-7Y.MID","CR.CNY-INDKOR_SNRFOR_CR.CDS.RECOVERY","CR.CNY-BCIEHNTE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-70796305_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CNH-SHIBOR.CASH-6M.MID","CR.AUD-CTBAAU2S_SNRFOR_CR.CDS-3Y.SPREAD.MID","EQ.USD-NYSE-JPMRDIAN.SPOT.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-8Y.MID","CR.USD-CLPGROUP_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDNOK.FWD-3W.MID","CR.CNH-ROSGGB21_SNRFOR_CR.CDS.RECOVERY","CR.HKD-HKMAHKHC_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.VND-VNIBOR.CASH-1Y.MID","CR.USD-PROXY_AA2_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-70826764_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDNTD.FWD-1Y.MID","CR.USD-BAC_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-10Y.MID","CR.ZAR-CHASUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-QTC_SNRFOR_CR.CDS.RECOVERY","IR.USD-TAFIX_ALM.CASH-4M.MID","CR.CNY-SOGEFRPPHCM_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.AUD-BBSW-6M.SWAP-10Y.MID","CR.TWD-70796305_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_A2_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-16844548_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-TMCCUS66_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-92065367_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NJGOV_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-28113286_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-84613756_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDMYR.FWD-3M.MID","CR.USD-SDBCCNBJ_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNH-NOSCCATT_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.SGD-LIBOR_ALM-6M.SWAP-15Y.MID","CR.AUD-MORG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-ORSTED_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CHASUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CIBBMYKL_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDTHB-SPOT.MID","CR.SGD-SGB_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NTTGROUP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-OCBCSGSG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.HKD-BKCHCNBJ_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-UOVBSGSG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-SMBCJPJT_SNRFOR_CR.CDS.RECOVERY","CR.TWD-ORSTED_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDCHF.FWD-11M.MID","CR.USD-BAC_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-5Y.MID","CR.USD-NATXFRPPMAR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-MEBEDE6SDC_SNRFOR_CR.CDS.RECOVERY","IR.KRW-KORIBOR-3M.SWAP-10Y.MID","CR.USD-PFIZER_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-DIS_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CNH-HIBOR-3M.SWAP-5Y.MID","CR.USD-COMCAST_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_A2_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-BARCGB5G_SNRFOR_CR.CDS.RECOVERY","CR.TWD-70826764_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BOFMCAT2FXM_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-3Y.MID","IR.JPY-TIBOR.CASH-1W.MID","CR.CNY-NATAAU33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PFIZER_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-70796749_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-30Y.MID","FX.USDSGD.FWD-2M.MID","FX.USDMY1.FWD-1W.MID","CR.USD-CITIUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDZAR.FWD-6Y.MID","IR.USD-SOFR_ALM.CASH-1W.MID","FX.USDNOK.FWD-9M.MID","CR.USD-03307406_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-05052322_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BARCGB_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-SOFR_ALM-ON.SWAP-10Y.MID","CR.TWD-16844548_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-BOFMCAT2FXM_SNRFOR_CR.CDS.RECOVERY","CR.AUD-FGBMAEAA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-KRKTCORP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03777906_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDMMK.FWD-1Y.MID","FX.USDZAR.FWD-9M.MID","CR.USD-QATAR_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-22354940_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BSUIFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-UBSBCHZZXXX_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CITIGR_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-CGB_SNRFOR_CR.CDS.RECOVERY","IR.BRL-DI.CASH-6M.MID","CR.USD-COCACOLA_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.THB-BIBOR-6M.SWAP-4Y.MID","EQ.USD-NYSE-CIJPINMO.SPOT.MID","CR.TWD-03702700_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDRU1.FWD-9M.MID","IR.SGD-SIBOR-6M.SWAP-5Y.MID","CR.CNY-FGBMAEAA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-NATIXSI_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-EXIKKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-4Y.MID","CR.AUD-NOMUHI_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-PRUDENTIAL_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-NJGOV_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-PSASPI_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-NATXFRPPMAR_SNRFOR_CR.CDS.RECOVERY","CR.CNY-CITIUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-BNPAFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.JPY-TIBOR-3M.SWAP-3Y.MID","CR.USD-EDF_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NATAAU33_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.AUD-FR00140028Y2.BOND.PRICE.MID","CR.USD-NATIXSA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-75708007_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-HKMAHKHC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-SMBCJPJT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-BSUIFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BNPAFRPP00_SNRFOR_CR.CDS.RECOVERY","CR.CNH-CZNBKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.JPY-TMKSRJ1_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-NOSCCATT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-ADCBAEAA_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.NZDUSD.FWD-7Y.MID","CR.USD-RBOSGB2LTCM_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BARCGB_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-30Y.MID","IR.CHF-LIBOR-6M.SWAP-25Y.MID","CR.AUD-NBNCO_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-80328219_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDRUB.FWD-2Y.MID","CR.USD-AT/T_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-TMCCUS66_SNRFOR_CR.CDS.RECOVERY","IR.EUR-ESTR-ON.SWAP-9Y.MID","CR.CNH-CTBAAU2S_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-03777906_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-84613756_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-SCSBTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-QTC_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.CNH-HIBOR.CASH-6M.MID","CR.USD-KEC_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDRUB.FWD-5M.MID","CR.TWD-92065367_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-BSUIFRPP_SNRFOR_CR.CDS.RECOVERY","CR.CNH-KODBKRSE_SNRFOR_CR.CDS.RECOVERY","CR.CNH-KODBKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-SCBLGB2G_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-MHCBJPJT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-MSFIN_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CTCBTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-4Y.MID","CR.TWD-73251209_SNRFOR_CR.CDS.RECOVERY","IR.RUB-NFEA-3M.SWAP-9Y.MID","IR.TWD-LIBOR_ALM-3M.SWAP-4Y.MID","CR.TWD-16095410_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-MSFIN_SNRFOR_CR.CDS.RECOVERY","CR.USD-CGB_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-CITIGR_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-VERIZON_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-RABONL2U_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_BAA1_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-CHASUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-22424994_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BCIEHNTE_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDRUB.FWD-11M.MID","CR.TWD-59504506_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-KOEXKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-UBSBCHZZXXX_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-GOLDUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDSEK.FWD-2W.MID","CR.AUD-UBSBCHZZXXX_SNRFOR_CR.CDS.RECOVERY","CR.CNH-KFW_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-ROSGGB21_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-SOGEFRPPHCM_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-UBSBCHZZXXX_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-AGRICUL DEV BANK OF CHINA CNH_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PSASPI_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDHKD.FWD-2Y.MID","CR.USD-SDBCCNBJ_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-USTREASURY_SNRFOR_CR.CDS-10Y.SPREAD.MID","EQ.USD-NYSE-SGIXHEER.DIV.CONT","CR.ZAR-CRESCHZZ80A_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-TDOMCATT_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.TWD-TAIBOR.CASH-2M.MID","FX.USDTHB.FWD-1M.MID","FX.USDIDR.FWD-1Y.MID","CR.ZAR-SOGEFRPPHCM_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.SEK-STIBOR.CASH-1M.MID","IR.NZD-BKBM.CASH-ON.MID","CR.USD-CKHUTCH_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KEC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BARCGB5G_SNRFOR_CR.CDS.RECOVERY","CR.USD-SGTL_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PRUDENTIAL_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-SGB_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-KSA_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-12Y.MID","CMDTY.USD-MZN20231117.FUT.MID","CR.CNY-BCIEHNTE_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.GBPUSD.FWD-9M.MID","CR.TWD-20817282_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-USTREASURY-USGOVT.BILL-0-1M.YIELD.MID","CR.AUD-A2_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-JGB_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-97176270_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.MXN-MEXIBOR.CASH-6M.MID","CR.USD-CITIGR_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-11Y.MID","FX.EURUSD.FWD-15Y.MID","CR.USD-UWCBTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.EUR-MIDLGB22_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-22099131_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ABIBB_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-TDOMCATT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-LBOTTWTP_SNRFOR_CR.CDS.RECOVERY","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-30Y.MID","IR.CHF-LIBOR-6M.SWAP-4Y.MID","CR.USD-XSESSGS1_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-HKMAHKHC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-PROXY_BAA2_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.CHF-LIBOR.CASH-1M.MID","IR.AUD-AONIA.CASH-ON.MID","IR.USD-US91282CFE66.BOND.PRICE.MID","IR.USD-SOFR-ON.SWAP-6Y.MID","CR.ZAR-AGRI_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.HKD-HONIA-ON.SWAP-10Y.MID","CR.USD-SUMITR_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-&&SGAD0143_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-CLPC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-INDKOR_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDCAD.FWD-7Y.MID","CR.USD-ISRAEL_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-KGC_SNRFOR_CR.CDS.RECOVERY","FX.GBPUSD.FWD-10Y.MID","CR.USD-HSBCHOP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-07305506_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDSEK.FWD-8M.MID","IR.TWD-FIXED-TWGOVT.BOND-0.00000-10Y.YIELD.MID","IR.MXN-MEXIBOR-1M.SWAP-156M.MID","CR.TWD-04541302_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-PROXY_A1_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-VISA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-NTTGROUP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CLPGROUP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-WFC_SNRFOR_CR.CDS.RECOVERY","IR.NOK-NIBOR-6M.SWAP-15Y.MID","CR.USD-JPMFIN_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-BPCEFRPP_SNRFOR_CR.CDS.RECOVERY","CR.AUD-STATEWA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-28113286_SNRFOR_CR.CDS.RECOVERY","CR.USD-CVSCORP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-MBBEMYKL_SNRFOR_CR.CDS.RECOVERY","CR.USD-KGC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-EBRDGB2L_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-NOMUHI_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-BARCGB5G_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-80328219_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-FGBMAEAA_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-25Y.MID","CR.USD-MEKCUS3W_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-AGBTTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDINR.FWD-2M.MID","FX.USDPHP.FWD-9M.MID","CR.USD-PROXY_BAA2_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-22099131_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-10Y.MID","CR.CNH-MBBEMYKL_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-BAC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-03307406_SNRFOR_CR.CDS-2Y.SPREAD.MID","EQ.TWD-FITX202311.FUT.MID","CR.USD-KORELE_SNRFOR_CR.CDS.RECOVERY","CR.AUD-PROXY_A3.CDS.RECOVERY","FX.USDTW1.FWD-1M.MID","CR.TWD-68387705_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD- CGMHUS31_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-STANLNPLC_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.RUB-NFEA.CASH-1M.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-15Y.MID","CR.USD-CTCBTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-MSFIN_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDPHP-SPOT.MID","CR.TWD-BNPAFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-UBSBCHZZXXX_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDVND.FWD-1M.MID","CR.AUD-03307406_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDMXN.FWD-4M.MID","CR.USD-CCFRFRPP024_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PINGAN_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR_ALM-3M.SWAP-8Y.MID","CR.CNY-MEBEDE6SDC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-VERIZON_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-EDF_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CGB_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.ZAR-LIBOR_ALM.CASH-6M.MID","CR.USD-LBOTTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-LLOYGROUP_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDBR1-SPOT.MID","IR.USD-LIBOR_ALM-6M.SWAP-20Y.MID","CR.USD-SCBLGB2G_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-BPCEFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDCHF.FWD-9M.MID","IR.SEK-STIBOR-3M.SWAP-12Y.MID","IR.USD-LIBOR_ALM-3M.SWAP-9Y.MID","CR.TWD-84613756_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDBRL.FWD-4Y.MID","CR.USD-BKKBTHBK_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-LBOTTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-GOLDUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-CITIGR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-MSFT_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDKRW.FWD-3M.MID","IR.NOK-NIBOR-6M.SWAP-4Y.MID","CR.USD-MORG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-04541302_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-BPCEFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KOSEP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CHGRID_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-PROXY_AA1_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BOFAUS6S_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-STATEGRID_SNRFOR_CR.CDS.RECOVERY","CR.AUD-BPCEFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-04541302_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDID1.FWD-1W.MID","IR.SGD-SIBOR-6M.SWAP-12Y.MID","CR.CNY-BARCGB5G_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-75708007_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-UOVBSGSG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-VERIZON_SNRFOR_CR.CDS.RECOVERY","CR.USD-TPBKTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-58650902_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-84149358_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDPH1.FWD-1Y.MID","CR.USD-JNJ_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDIN1.FWD-6M.MID","CR.USD-COBADEFF_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-10Y.MID","FX.USDJPY.FWD-1M.MID","FX.AUDUSD.FWD-1M.MID","IR.INR-MIFOR.CASH-3M.MID","IR.KRW-KORIBOR-3M.SWAP-3Y.MID","IR.TWD-CHPO_ALM.CASH-3M.MID","CR.TWD-05072925_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CTBAAU2S_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BPCEFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-JNJ_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-05052322_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-58650902_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-84149358_SNRFOR_CR.CDS-5Y.SPREAD.MID","EQ.USD-NYSE-SGQJEBAP.SPOT.MID","CR.CNY-NATAAU33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-ABOT_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-5Y.MID","CR.USD-HKC113195_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-CBCTTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CHF-LIBOR-6M.SWAP-15Y.MID","FX.USDBR1.FWD-9M.MID","CR.USD-TCPL_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-EIBCCNBJ_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-ABOT_SNRFOR_CR.CDS.RECOVERY","CR.USD-PROXY_BAA3_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-22099131_SNRFOR_CR.CDS-2Y.SPREAD.MID","EQ.USD-NYSE-SGEPVQVE.SPOT.MID","FX.USDCAD.FWD-8Y.MID","CR.USD-MHCBJPJT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-HKSAR_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-10Y.MID","CR.USD-NTTF_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CNY-LIBOR_ALM-3M.SWAP-5Y.MID","CR.USD-JPMFIN_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-STANLNPLC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-XSESSGS1_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-FRGB_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.MMK-MIBOR.CASH-1W.MID","CR.CNY-MBBEMYKL_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.TWD-FIXED-TWGOVT.BOND-0.00000-7Y.YIELD.MID","CR.USD-EBRDGB2L_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CTBAAU2S_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-POWERCOR_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-LLOYGROUP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-SFG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-BARCGB5G_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.HKD-HKMC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-75370905_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.INR-MIFOR.CASH-ON.MID","CR.TWD-EROCTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-5Y.MID","CR.USD-04541302_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-CRESGB2X_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDCAD.FWD-11M.MID","CR.USD-ABNANL2A_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NTTF_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.GBPUSD.FWD-3W.MID","CR.TWD-68387705_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.ZAR-LIBOR_ALM.CASH-1W.MID","CR.AUD-SAFA50_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-LLOYGROUP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BPCEFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.HKD-HKMC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-AXP_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDMY1.FWD-6M.MID","FX.AUDUSD.FWD-7Y.MID","CR.USD-CZNBKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-WNZ23.BOND-FUT.PRICE.MID","CR.USD-QNBAQAQA_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.KRW-KORIBOR-3M.SWAP-2Y.MID","FX.USDZAR.FWD-5Y.MID","IR.EUR-ESTR-ON.SWAP-20Y.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-12Y.MID","CR.USD-PROXY_AA1_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CCFRFRPP024_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BNPAFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NMIF_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.AUDUSD.FWD-8Y.MID","CR.CNY-NMIF_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-70827383_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-SMTH_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-MHCBJPJT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-CHASUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CIBBMYKL_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-POWERCOR_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDIDR.FWD-3M.MID","CR.USD-BBMEAEAD_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.TWD-LIBOR_ALM-3M.SWAP-3Y.MID","IR.AUD-BBSW-6M.SWAP-4Y.MID","CR.USD-CTGOVSSN_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.SGD-MASGSGSG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-ROSGGB21_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-97176270_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-PROXY_A3_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDCHF.FWD-3W.MID","CR.USD-CTBAAU2S_SNRFOR_CR.CDS.RECOVERY","CR.CNY-03307406_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-30Y.MID","CR.TWD-03244509_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.EUR-EURIBOR.CASH-1M.MID","CR.USD-PROXY_BAA3_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.RUB-NFEA-3M.SWAP-8Y.MID","CR.USD-KSA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-MIDLGB22_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-05072925_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-53021433_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-59504506_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-MTRC_SNRFOR_CR.CDS.RECOVERY","CR.USD-CHGRID_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-DTAGDE33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD- CGMHUS31_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-MORG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-PROXY_A3.CDS-3Y.SPREAD.MID","CR.USD-ABOCCNBJ_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-KODBKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NOSCCATT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CLPC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-NMIF_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-SOFR-ON.SWAP-9M.MID","IR.CAD-CDOR.CASH-1W.MID","CR.TWD-97160544_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-KOEXKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.NOK-NIBOR.CASH-1M.MID","FX.USDCNY.FWD-1M.MID","CR.CNH-HKMC_SNRFOR_CR.CDS.RECOVERY","CR.USD-80333992_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-ICBCFL_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.HKD-HIBOR-3M/USD-LIBOR-3M.BASIS-15Y.MID","CR.ZAR-03307406_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.AUD-BBSW-6M.SWAP-5Y.MID","CR.HKD-BKCHCNBJ_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-MSFIN_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-EXIKKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.ZAR-JIBAR-3M.SWAP-1Y.MID","CR.CNY- CGMHUS31_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-6Y.MID","IR.CAD-CDOR-3M.SWAP-8Y.MID","CR.USD-HKSAR_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.ZAR-JIBAR.CASH-6M.MID","CR.CNH-ICBKCNBJ_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BOFMCAT2FXM_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-15Y.MID","CR.SGD-MASGSGSG_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-KORELE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-EROCTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-KODBKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-AT/T_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-ANZBAU3M_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-ICBKCNBJ_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-BCIEHNTE_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.MYR-KLIBOR-3M.SWAP-15Y.MID","FX.NZDUSD.FWD-1M.MID","CR.USD-PROXY_A3_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.RUB-NFEA-3M.SWAP-10Y.MID","IR.INR-MIFOR.CASH-1Y.MID","IR.TWD-LIBOR_ALM.CASH-3M.MID","IR.HKD-HIBOR-3M.SWAP-15Y.MID","IR.AUD-AONIA-ON.SWAP-20Y.MID","CR.USD-KODBKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KEC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-EIBCCNBJ_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-EXIKKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-WPACAU2F_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-EXIKKRSE_SNRFOR_CR.CDS.RECOVERY","CR.TWD-68035907_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-WPACAU2F_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NOSCCATT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-68035907_SNRFOR_CR.CDS.RECOVERY","CR.EUR-DTIF_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-KODBKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-3M.MID","FX.USDMYR.FWD-1Y.MID","CR.USD-HKC113195_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-JNJ_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD- CGMHUS31_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NOSCCATT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-30414175_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR- CGMHUS31_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-KODBKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-ANZBAU3M_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-MHCBJPJT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-03307406_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-BAC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-03795904_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-05072925_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-COBADEFF_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-NOMUHI_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.TWD-TAIBOR-3M.SWAP-1Y.MID","IR.AUD-AONIA-ON.SWAP-4Y.MID","CR.USD-SDBCCNBJ_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.HKD-HKMAHKHC_SNRFOR_CR.CDS.RECOVERY","FX.USDKRW.FWD-1Y.MID","CR.USD-CTCBTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-ESUNTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-2M.MID","FX.EURUSD.FWD-7Y.MID","CR.USD-COMCAST_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-MIDLGB22_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-RABONL2U_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KOSEP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ICBCTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-EBRDGB2L_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDMXN.FWD-2Y.MID","CR.USD-ESSESESS_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-SOGEFRPPHCM00_SNRFOR_CR.CDS.RECOVERY","CR.USD-CHASUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDJPY.FWD-7Y.MID","IR.HKD-HIBOR-3M.SWAP-7Y.MID","IR.USD-TUZ23.BOND-FUT.PRICE.MID","CR.USD-CZNBKRSE_SNRFOR_CR.CDS.RECOVERY","CR.AUD-VERIZON_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ROK_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-DTAGDE33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-84149358_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ING BANK NV_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-OCBCSGSG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-SOGEFRPPHCM_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDSEK.FWD-5Y.MID","CR.USD-CITIUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-HSBCHOP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-INGBNL2A_SNRFOR_CR.CDS.RECOVERY","IR.PHP-PHIBOR.CASH-6M.MID","IR.ZAR-JIBAR-3M.SWAP-9Y.MID","CR.USD-BKCHCNBJ_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.EURUSD.FWD-8Y.MID","CR.SGD-MASGSGSG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-75339004_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDMXN.FWD-1Y.MID","CR.USD-MSFIN_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.CAD-CDOR-3M.SWAP-9Y.MID","FX.USDJPY.FWD-8Y.MID","CR.TWD-CCBCTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_A3_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-HKE_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-SOFR_ALM.CASH-6M.MID","CR.USD-CTBAAU2S_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-5Y.MID","IR.AUD-BBSW-6M.SWAP-20Y.MID","CR.USD-80333992_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-DASMSGSG_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDCAD.FWD-1M.MID","CR.USD-CHGRID_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-ICBKCNBJ_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CIBBMYKL_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-MSFT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-05072925_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-CNSW_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.EURUSD.FWD-6Y.MID","CR.USD-NJGOV_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-9Y.MID","CR.USD-TPBKTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-NMIF_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-LIBOR_ALM.CASH-6M.MID","CR.USD-SOGEFRPPHCM_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CTGOVSSN_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-GSGIUS31_SNRFOR_CR.CDS.RECOVERY","FX.USDCHF.FWD-8M.MID","CR.CNH-NOSCCATT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-ING BANK NV_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.CNY-LIBOR_ALM-3M.SWAP-7Y.MID","FX.USDCAD.FWD-9M.MID","CR.USD-CITIGR_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-EXIKKRSE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-NATIXSI_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-92065367_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.NZD-BKBM.CASH-6M.MID","FX.USDCAD.FWD-6Y.MID","CR.USD-DIS_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-UOVBSGSG_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.CHF-LIBOR-6M.SWAP-3Y.MID","CR.USD-KRKTCORP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-UBSGROUP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-BSUIFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-GOLDUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-ICBCTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.TWD-LIBOR_ALM.CASH-2M.MID","CR.SGD-SGB_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-07305506_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-ADCBAEAA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CGB_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDHKD.FWD-1Y.MID","CR.TWD-BKTWTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-70796749_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-OCBCSGSG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.EUR-ROSGGB21_SNRFOR_CR.CDS.RECOVERY","CR.AUD-BPCEFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-OCBCSGSG_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDRUB.FWD-10M.MID","IR.CNH-LIBOR_ALM.CASH-1M.MID","CR.USD-PINGAN_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.TWD-TAIBOR.CASH-3M.MID","CR.USD-CITIUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-FGBMAEAA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-FGBMAEAA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-MIDLGB22_SNRFOR_CR.CDS.RECOVERY","FX.USDJPY.FWD-15Y.MID","EQ.USD-NYSE-DJGT.DIV.CONT","CR.AUD-BSUIFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-KODBKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-BOFMCAT2FXM_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.ZAR-JIBAR.CASH-ON.MID","CR.USD-ABIBB_SNRFOR_CR.CDS.RECOVERY","FX.AUDUSD.FWD-18M.MID","CR.EUR-UBSBCHZZXXX_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDSEK.FWD-4Y.MID","IR.USD-LIBOR_ALM-6M.SWAP-2Y.MID","CR.USD-AAPL_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-SDBCCNBJ_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-CHASUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-NATIXSI_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-SCSBTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-JPGOVT_SNRFOR_CR.CDS.RECOVERY","CR.USD-EDF_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CAD-CDOR.CASH-6M.MID","CR.USD-HKE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CMDTY.USD-LME-ZINC.FWD-16-OCT-2023.MID","CR.CNH-BAC_SNRFOR_CR.CDS.RECOVERY","CR.USD-JPCO_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-AMAZON_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-MORG_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-7Y.MID","CR.CNY-BMWBDEMU_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-MBBEMYKL_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.ZAR-JIBAR-3M.SWAP-15Y.MID","CR.ZAR-GOLDUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-VISA_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDINR-SPOT.MID","CR.TWD-16844548_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-12Y.MID","CR.USD-NJGOV_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-SHBKKRSE_SNRFOR_CR.CDS.RECOVERY","CR.TWD-ABOT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-MTRC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-KRKTCORP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-BNPAFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.EURUSD.FWD-3W.MID","CR.TWD-97179430_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-BOFMCAT2FXM_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PSASPT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-CITIUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.MYR-KLIBOR.CASH-1M.MID","IR.SGD-LIBOR_ALM.CASH-TN.MID","IR.SGD-SIBOR-6M.SWAP-4Y.MID","CR.TWD-68035907_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-MIDLGB22_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-PINGAN_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BAC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-RBOSGB2LTCM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-UBSBCHZZXXX_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-SOGEFRPPHCM_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-WPACAU2F_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-WFBIUS6W_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-ORSTED_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ROK_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.THB-BIBOR-6M.SWAP-3Y.MID","CR.TWD-BKTWTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-3Y.MID","IR.JPY-TIBOR-3M.SWAP-4Y.MID","CR.HKD-CHASUS33HKD_SNRFOR_CR.CDS.RECOVERY","CR.USD-QATAR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-QATAR_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDCHF.FWD-10M.MID","IR.KRW-KORIBOR.CASH-3M.MID","CR.USD-PFIZER_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-SOGEFRPPHCM_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.CNH-LIBOR_ALM-3M.SWAP-7Y.MID","CR.CNY-SOGEFRPPHCM_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-GOLDUS33_SNRFOR_CR.CDS.RECOVERY","CR.USD-MTRC_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.TWD-FIXED-TWGOVT.BOND-0.00000-30Y.YIELD.MID","CR.HKD-CHASUS33HKD_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.AUDUSD.FWD-9Y.MID","CR.USD-BBVAESMM_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-CZNBKRSE_SNRFOR_CR.CDS.RECOVERY","CR.USD-KGC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-NBNCO_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-UBSBCHZZXXX_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-97160544_SNRFOR_CR.CDS.RECOVERY","FX.USDZAR.FWD-7Y.MID","FX.USDSEK.FWD-1W.MID","CR.EUR-SOGEFRPPHCM_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-5Y.MID","CR.USD-HKSAR_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-WFC_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-3Y.MID","FX.USDIN1.FWD-1W.MID","CR.TWD-70826764_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NATIXSA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-ICBCFL_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDCNH.FWD-3Y.MID","CR.USD-PROXY_AA2_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-VISA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD- CGMHUS31_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-JPCO_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-70796749_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDCNH.FWD-3M.MID","CR.TWD-22354940_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-HSBCHOP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-ESUNTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-AGBTTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-CCBCTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.ZAR- CGMHUS31_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-03307406_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-MORG_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.NZD-BKBM-3M.SWAP-2Y.MID","CR.USD-BBVAESMM_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PRUDENTIAL_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.EURUSD.FWD-1M.MID","IR.USD-LIBOR_ALM-3M.SWAP-7Y.MID","FX.USDJPY.FWD-3W.MID","CR.USD-TDOMCATT_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDRUB.FWD-6M.MID","IR.USD-SOFR_ALM-ON.SWAP-20Y.MID","CR.HKD-CRESCHZZ80A_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-XSESSGS1_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-AGBTTWTP_SNRFOR_CR.CDS.RECOVERY","IR.KRW-KORIBOR-3M.SWAP-4Y.MID","CR.CNY-NOSCCATT_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.MMK-MIBOR.CASH-2W.MID","CR.AUD-DBSSSGSG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-DTAGDE33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CRESCHZZ80A_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-ABIBB_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDID1.FWD-9M.MID","CR.TWD-EROCTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-CCBCTWTP_SNRFOR_CR.CDS.RECOVERY","CR.CNH-MTRC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-KOEXKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNH-ROSGGB21_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-JPCO_SNRFOR_CR.CDS.RECOVERY","CR.USD-ABOCCNBJ_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.EUR-LLOYGROUP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-JPNOCUJPJT_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.THB-BIBOR.CASH-TN.MID","CR.USD-VERIZON_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-JGB_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-59504506_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-EROCTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-TAFIX_ALM.CASH-3M.MID","CR.ZAR-CRESCHZZ80A_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.SGD-SGB_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-NATXFRPPMAR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-PROXY_AA3_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.RUB-NFEA-3M.SWAP-20Y.MID","CR.TWD-28113286_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-LBOTTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-04541302_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.AUDUSD-SPOT.MID","CR.USD-COBADEFF_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDTWD.FWD-1M.MID","CR.ZAR-CRESCHZZ80A_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-GOLDUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-WPACAU2F_SNRFOR_CR.CDS.RECOVERY","CR.AUD-GOLDUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-EXIKKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-03374805_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NOSCCATT_SNRFOR_CR.CDS.RECOVERY","CR.TWD-22424994_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-22354940_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-KOEXKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-03702700_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-NATAAU33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-NOMUHI_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-STATEWA_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-30Y.MID","CR.CNY-HKSAR_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.THB-BIBOR.CASH-1W.MID","CR.USD-PSASPT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-GE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-VPNF_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDBRL.FWD-5Y.MID","IR.TWD-CHPO_ALM.CASH-1M.MID","FX.USDJPY.FWD-9M.MID","CR.ZAR-GOLDUS33_SNRFOR_CR.CDS.RECOVERY","CR.CNY-QNBAQAQA_SNRFOR_CR.CDS.RECOVERY","CR.USD-TMCCUS66_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-03707901_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-AGRI_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.HKD-CHASUS33HKD_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NTTGROUP_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDTW1.FWD-2M.MID","IR.NOK-NIBOR-6M.SWAP-5Y.MID","CR.TWD-11913502_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ABOCCNBJ_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.EURUSD.FWD-9M.MID","FX.USDMXN.FWD-5M.MID","CR.USD-MEKCUS3W_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03522600_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-GOLDUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CNY-LIBOR_ALM.CASH-1M.MID","CR.AUD-POWERCOR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-NATXFRPPMAR_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.CNY-SHIBOR.CASH-3M.MID","CR.USD-FCBKTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-SMBCJPJT_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.THB-BIBOR.CASH-6M.MID","CR.USD-CGB_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-MEBEDE6SDC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-CZNBKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.ZAR-MORG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-30414175_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.HKD-HKMC_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SEK-STIBOR-3M.SWAP-10Y.MID","CR.EUR-BPCEFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-MTRC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-QTC_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-1Y.MID","IR.SGD-SORA-ON.SWAP-1Y.MID","FX.GBPUSD.FWD-8M.MID","FX.USDHKD.FWD-3Y.MID","IR.USD-TAFIX_ALM.CASH-5M.MID","IR.AUD-AONIA-ON.SWAP-10Y.MID","CR.AUD-SOGEFRPPHCM_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-DBSSSGSG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-07305506_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-97176270_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.AUDUSD.FWD-10M.MID","IR.TWD-TAIBOR.CASH-1M.MID","CR.USD-MEKCUS3W_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-NTTGROUP_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDKRW.FWD-2M.MID","CR.USD-STATEGRID_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-JPNOCUJPJT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-MORG_SNRFOR_CR.CDS.RECOVERY","CR.USD-CLPC_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDBRL.FWD-3Y.MID","CR.ZAR-CITIGR_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDSEK.FWD-9M.MID","IR.USD-SOFR-ON.SWAP-12Y.MID","IR.NOK-NIBOR-6M.SWAP-3Y.MID","CR.AUD-GOLDUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ICBKCNBJ_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-AMAZON_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-BMWBDEMU_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-NOMUHI_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDSEK.FWD-18M.MID","CR.AUD-AUTREA_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-KODBKRSE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-BOTKJPJT_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDSEK.FWD-7M.MID","CR.USD-CVSCORP_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDMXN.FWD-3M.MID","CR.TWD-22099131_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-QNBAQAQA_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDTWD.FWD-9M.MID","CR.USD-ICBKCNBJ_SNRFOR_CR.CDS.RECOVERY","CR.USD-03307406_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CBCTTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-JNJ_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-LLOYGROUP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-ABOT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-MEKCUS3W_SNRFOR_CR.CDS.RECOVERY","CR.CNH-KFW_SNRFOR_CR.CDS.RECOVERY","CR.CNY-AGRI_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-NMIF_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-BNPAFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BNPAFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-POWERCOR_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CNY-LIBOR_ALM-3M.SWAP-10Y.MID","IR.JPY-LIBOR.CASH-2M.MID","IR.SGD-SIBOR.CASH-1M.MID","FX.USDKR1.FWD-6M.MID","IR.NZD-BKBM-3M.SWAP-4Y.MID","CR.CNY-FGBMAEAA_SNRFOR_CR.CDS-2Y.SPREAD.MID","EQ.USD-NYSE-SGQJEBAP.DIV.CONT","CR.TWD-58650902_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-1Y.MID","EQ.USD-NYSE-HIHD03M.SPOT.MID","CR.TWD-AGRI_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-NOMUHI_SNRFOR_CR.CDS.RECOVERY","CR.CNH-WPACAU2F_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CCFRFRPP024_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-DBSSSGSG_SNRFOR_CR.CDS.RECOVERY","FX.USDCHF.FWD-21M.MID","IR.HKD-HIBOR.CASH-2M.MID","CR.USD-NTTGROUP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-ANZBAU3M_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-SUMITR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-03244509_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDSEK.FWD-3W.MID","FX.USDKRW-SPOT.MID","IR.USD-LIBOR_ALM-3M.SWAP-20Y.MID","CR.USD-WPACAU2F_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-BPCEFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-9Y.MID","CR.TWD-22099131_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.CNY-LIBOR_ALM.CASH-9M.MID","CR.USD-TPBKTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-VERIZON_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-03307406_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-BARCGB5G_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-SMTH_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-JPCO_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-INDKOR_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDVND.FWD-9M.MID","CR.TWD-04200199_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-ABIBB_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BARCGB5G_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-SGB_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-12Y.MID","CR.AUD-CITIUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-CITIGR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-EBILAEADFIN_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDBRL.FWD-9M.MID","CR.USD-ING BANK NV00_SNRFOR_CR.CDS.RECOVERY","CR.TWD-AGRI_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CTGOVSSN_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.CNY-SHIBOR.CASH-1M.MID","CR.USD-CCFRFRPP024_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-MBBEMYKL_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.VND-VNIBOR.CASH-2M.MID","CR.AUD-CITIUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CNPC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-SGB_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-MTRC_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.JPY-TIBOR-3M.SWAP-20Y.MID","CR.TWD-23535435_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-KNOC_SNRFOR_CR.CDS.RECOVERY","CR.USD-SOGEFRPPHCM_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-ADBC_SNRFOR_CR.CDS.RECOVERY","CR.CNH-WPACAU2F_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-USTREASURY-USGOVT.BILL-0-3M.YIELD.MID","IR.USD-SOFR_ALM.CASH-3W.MID","CR.TWD-53021433_SNRFOR_CR.CDS.RECOVERY","IR.SEK-STIBOR.CASH-3M.MID","CR.USD-KORAIL_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-JPNOCUJPJT_SNRFOR_CR.CDS.RECOVERY","CR.TWD-CBCTTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-VPNF_SNRFOR_CR.CDS.RECOVERY","CR.CNY-CITIUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-COBADEFF_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.CAD-CDOR-3M.SWAP-20Y.MID","CR.AUD-SMBCJPJT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-03307406_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-EBRDGB2L_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-EIBCCNBJ_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-CITIGR_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.HKD-HIBOR.CASH-6M.MID","CR.USD-CIBBMYKL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-SDBCCNBJ_SNRFOR_CR.CDS.RECOVERY","CR.USD-03307406_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-QNBAQAQA_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.CNH-LIBOR_ALM-3M.SWAP-9M.MID","CR.USD-CBCTTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-20828393_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-COMMCNSH_SNRFOR_CR.CDS.RECOVERY","IR.CHF-LIBOR-6M.SWAP-5Y.MID","EQ.USD-NYSE-HIHD03M.DIV.CONT","CR.CNY-NOMUHI_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-ROSGGB21_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.NZDUSD.FWD-15M.MID","CR.USD-UBSBCHZZXXX_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-BCIEHNTE_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-CRESGB2X_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NTTF_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-75370905_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-FGBMAEAA_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDMMK.FWD-3M.MID","IR.SEK-STIBOR-3M.SWAP-3Y.MID","FX.USDCNH.FWD-1Y.MID","CR.USD-ESSESESS_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-WSTRUS44_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.GBPUSD.FWD-15M.MID","CR.USD-NABA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-EROCTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-10Y.MID","IR.SGD-SIBOR-6M.SWAP-6Y.MID","CR.USD-CHGRID_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-23535435_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-03795904_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDPHP.FWD-3W.MID","IR.JPY-TIBOR-3M.SWAP-2Y.MID","CR.CNH-AGRICUL DEV BANK OF CHINA CNH_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.GBPUSD.FWD-20Y.MID","CR.ZAR-CITIGR_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-EBILAEADFIN_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-DBSSSGSG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-STANLNPLC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-COCACOLA_SNRFOR_CR.CDS.RECOVERY","CR.USD-EXIKKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-GE_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.THB-BIBOR-6M.SWAP-12Y.MID","IR.KRW-KORIBOR-3M.SWAP-20Y.MID","IR.USD-TAFIX_ALM.CASH-ON.MID","IR.GBP-LIBOR.CASH-ON.MID","CR.TWD-SOGEFRPPHCM_SNRFOR_CR.CDS.RECOVERY","CR.USD-USTREASURY_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-5Y.MID","CR.USD-CNPC_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.HKD-HONIA-ON.SWAP-1Y.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-20Y.MID","FX.USDRUB.FWD-4Y.MID","CR.CNY-HKC113195_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-GOLDUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-AAPL_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-BARCGB5G_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-HKC113195_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-MBBEMYKL_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.TWD-CHPO_ALM.CASH-1Y.MID","CR.USD-BOFMCAT2FXM_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-6Y.MID","FX.USDTW1-SPOT.MID","CR.USD-ADCBAEAA_SNRFOR_CR.CDS.RECOVERY","CR.USD-MSFIN_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-QTC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-MEKCUS3W_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-BOTKJPJT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-03522600_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-MSFT_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDSGD.FWD-1M.MID","CR.USD-STATEGRID_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-CCBCTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-HKE_SNRFOR_CR.CDS.RECOVERY","FX.USDCN1.FWD-1M.MID","IR.TWD-FIXED/USD-LIBOR-6M.SWAPONSHORE-2Y.MID","CR.AUD-AT/T_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.NZDUSD.FWD-2W.MID","FX.GBPUSD.FWD-11M.MID","FX.USDHKD.FWD-5M.MID","CR.CNY-NOMUHI_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDCHF.FWD-6Y.MID","CR.USD-CITIGR_SNRFOR_CR.CDS.RECOVERY","CR.USD-PINGAN_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.CAD-CDOR.CASH-TN.MID","CR.TWD-97160544_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.MMK-MIBOR.CASH-6M.MID","CR.USD-BARCGB_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.SGD-MASGSGSG_SNRFOR_CR.CDS.RECOVERY","CR.USD-TDOMCATT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-EDF_SNRFOR_CR.CDS.RECOVERY","CR.USD-BKKBTHBK_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-3Y.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-7Y.MID","CR.TWD-22354940_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-6Y.MID","IR.INR-MIFOR-6M.SWAP-2Y.MID","CR.USD-KEC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-PSASPT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.EUR-SOGEFRPPHCM_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDPHP.FWD-1W.MID","CR.USD-BOTKJPJT_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-10Y.MID","IR.AUD-LIBOR_ALM-3M.SWAP-5Y.MID","CR.USD-ABNANL2A_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-ROSGGB21_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.JPY-LIBOR.CASH-6M.MID","CR.AUD-BOTKJPJT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-MORG_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-15Y.MID","IR.SGD-LIBOR_ALM-6M.SWAP-2Y.MID","CR.USD-CKHUTCH00_SNRFOR_CR.CDS.RECOVERY","CR.USD-CZNBKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-DBSSSGSG_SNRFOR_CR.CDS.RECOVERY","CR.USD-RABONL2U_SNRFOR_CR.CDS.RECOVERY","IR.AUD-LIBOR_ALM-3M.SWAP-15Y.MID","CR.EUR-DTIF_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CVSCORP_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDHKD.FWD-11M.MID","IR.JPY-LIBOR-6M.SWAP-8Y.MID","CR.USD-ANZBAU3M_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-AT/T_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CVSCORP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-NOMUHI_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-TDOMCATT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CTCBTWTP_SNRFOR_CR.CDS.RECOVERY","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-4Y.MID","CR.TWD-03522600_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-STATEGRID_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-40Y.MID","IR.THB-BIBOR-6M.SWAP-5Y.MID","CR.TWD-20817282_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-AT/T_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.EUR-SOGEFRPPHCM_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.AUD-BBSW.CASH-ON.MID","CR.USD-DBGHSGSG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-WPACAU2F_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDCHF.FWD-4Y.MID","CR.TWD-97160544_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-HKSAR_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-PFIZER_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.EUR-FRR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-84149358_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.AUD-BBSW.CASH-3M.MID","FX.USDCN1.FWD-9M.MID","CR.TWD-11384806_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-ICBKCNBJ_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDCHF.FWD-8Y.MID","CR.USD-KODBKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-USTREASURY_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.EUR-LLOYGROUP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-SOGEFRPPHCM_SNRFOR_CR.CDS.RECOVERY","FX.USDNOK-SPOT.MID","FX.GBPUSD.FWD-4Y.MID","IR.CNH-SHIBOR.CASH-1M.MID","CR.CNH-KFW_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDSGD.FWD-3M.MID","FX.USDCAD.FWD-3W.MID","CR.USD-HKSAR_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.VND-VNIBOR.CASH-6M.MID","CR.TWD-16446274_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-COBADEFF_SNRFOR_CR.CDS.RECOVERY","CR.USD-INGBNL2A00_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-CRESCHZZ80A_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-ROSGGB21_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-IBRDUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NABA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-23535435_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-BPCEFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-CTBAAU2S_SNRFOR_CR.CDS.RECOVERY","CR.USD-KORWAT_SNRFOR_CR.CDS.RECOVERY","IR.JPY-LIBOR-6M.SWAP-10Y.MID","IR.AUD-LIBOR_ALM-3M.SWAP-7Y.MID","FX.USDNOK.FWD-1W.MID","CR.CNY-UBSBCHZZXXX_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDHKD.FWD-7M.MID","CR.AUD-SAFA50_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CNPC_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-12Y.MID","CR.SGD-MASGSGSG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-HKMC_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-3M.MID","CR.CNY-MORG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-SDBCCNBJ_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.GBP-LIBOR.CASH-3M.MID","FX.USDPH1.FWD-6M.MID","CR.USD-MEKCUS3W_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CRESCHZZ80A00_SNRFOR_CR.CDS.RECOVERY","CR.USD-20817282_SNRFOR_CR.CDS.RECOVERY","IR.SGD-SORA-ON.SWAP-1M.MID","IR.TWD-FIXED/USD-LIBOR-6M.SWAPONSHORE-4Y.MID","FX.USDHKD.FWD-3M.MID","CR.HKD-CRESCHZZ80A_SNRFOR_CR.CDS.RECOVERY","IR.JPY-LIBOR-6M.SWAP-12Y.MID","CR.USD-BOFAUS6S_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-JPCO_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-GE_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-2W.MID","IR.EUR-EURIBOR-6M.SWAP-1Y.MID","CR.USD-CTBAAU2S_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CIBBMYKL_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-EBILAEADFIN_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SGD-LIBOR_ALM.CASH-6M.MID","FX.GBPUSD.FWD-8Y.MID","CR.CNY-ROSGGB21_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-22424994_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-10Y.MID","IR.PHP-PHIBOR-3M.SWAP-2Y.MID","CR.CNY-MSFIN_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-9Y.MID","IR.AUD-BBSW.CASH-1M.MID","CR.USD-HKC113195_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.EUR-SOGEFRPPHCM_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.GBPUSD.FWD-6Y.MID","CR.CNY-CITIUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-NOSCCATT_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-USTREASURY-USGOVT.BOND-0.03625-5Y.YIELD.MID","CR.AUD-BNPAFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDNTD.FWD-3M.MID","CR.USD-ESSESESS_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.NZD-BKBM-3M.SWAP-10Y.MID","IR.PHP-PHIBOR-3M.SWAP-4Y.MID","CR.TWD-03795904_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-QATAR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-NATAAU33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-JP12000329_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDID1-SPOT.MID","CR.USD-JPCO_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-PROXY_BAA2_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.HKD-HKMC_SNRFOR_CR.CDS.RECOVERY","EQ.USD-NYSE-SGEPVQVE.DIV.CONT","CR.USD-PINGAN_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-CZNBKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-CITIUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-LIBOR.CASH-1M.MID","CR.AUD-ADCBAEAA_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.CAD-CDOR-3M.SWAP-30Y.MID","FX.AUDUSD.FWD-21M.MID","CR.TWD-70796749_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-CHASUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","EQ.USD-NYSE-DJGT.SPOT.MID","IR.USD-LIBOR_ALM-3M.SWAP-1Y.MID","CR.TWD-75708007_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BBVAESMM00_SNRFOR_CR.CDS.RECOVERY","CR.EUR-BPCEFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-WPACAU2F_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-7Y.MID","CR.TWD-70796305_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.JPY-TIBOR.CASH-ON.MID","CR.CNY-SOGEFRPPHCM_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-HKMAHKHC_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.EURUSD.FWD-10M.MID","CR.USD-ING BANK NV_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NATIXSI_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-UOVBSGSG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-BNPAFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-MORG_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-2Y.MID","CR.TWD-11384806_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BOFAUS6S00_SNRFOR_CR.CDS.RECOVERY","FX.GBPUSD.FWD-1W.MID","CR.TWD-07305506_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-30Y.MID","IR.NZD-BKBM-3M.SWAP-6Y.MID","FX.USDBR1.FWD-6M.MID","CR.USD-SCBLGB2G_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-16844548_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-CTGOVSSN_SNRFOR_CR.CDS.RECOVERY","CR.USD-CITIUS33_SNRFOR_CR.CDS.RECOVERY","IR.USD-LIBOR-3M.SWAP-2Y.MID","IR.PHP-PHIBOR.CASH-ON.MID","CR.USD-PROXY_AA3_SNRFOR_CR.CDS-10Y.SPREAD.MID","EQ.USD-NYSE-PINEEHAID.DIV.CONT","FX.AUDUSD.FWD-3M.MID","CR.USD-PSASPI_SNRFOR_CR.CDS.RECOVERY","CR.USD-ICBCTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-BOFMCAT2FXM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-FCBKTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-SOGEFRPPHCM_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-NOMUHI_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-CHASUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDPH1.FWD-2M.MID","FX.USDCNH.FWD-1W.MID","CR.TWD-92065367_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-MHCBJPJT_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-BPCEFRPP_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.MXN-MEXIBOR-1M.SWAP-130M.MID","CR.USD-CITIUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDJPY.FWD-3M.MID","CR.USD-NABA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_A1_SNRFOR_CR.CDS.RECOVERY","CR.TWD-LBOTTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-MORG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-JP12000329_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-MSFT_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-15Y.MID","FX.USDPHP.FWD-6M.MID","IR.SGD-SIBOR.CASH-1W.MID","CR.AUD-BSUIFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-03307406_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-POWERCOR_SNRFOR_CR.CDS.RECOVERY","CR.AUD- CGMHUS31_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-JPCO_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDIN1-SPOT.MID","IR.USD-SOFR-ON.SWAP-6M.MID","CR.TWD-BKTWTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.EUR-EURIBOR.CASH-3M.MID","CR.TWD-LBOTTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.SGD-SIBOR-6M.SWAP-15Y.MID","CR.USD-BKTWTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDMYR-SPOT.MID","CR.USD-CBA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CITIUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.AUD-BBSW-6M.SWAP-2Y.MID","CR.TWD-86427715_SNRFOR_CR.CDS.RECOVERY","CR.TWD-CCBCTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.CHF-LIBOR.CASH-SN.MID","CR.TWD-22099131_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR_ALM-3M.SWAP-30Y.MID","CR.HKD-CRESCHZZ80A_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-TMCCUS66_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-AAPL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KORAIL_SNRFOR_CR.CDS.RECOVERY","CR.USD-HKMAHKHC_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDCN1.FWD-3M.MID","CR.USD-BOTKJPJT_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.TWD-LIBOR_ALM-3M.SWAP-1Y.MID","CR.ZAR- CGMHUS31_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-50Y.MID","CR.USD-DIS_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-75708007_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-KODBKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-VERIZON_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-QTC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-NATAAU33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.HKD-HKMAHKHC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-PROXY_AA2_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-CNSW_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-CTBAAU2S_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDMY1.FWD-1Y.MID","CR.TWD-05052322_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-SOFR_ALM.CASH-ON.MID","CR.TWD-MIDLGB22_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-UBSBCHZZXXX_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDPHP.FWD-1M.MID","CR.USD-PINGAN_SNRFOR_CR.CDS.RECOVERY","CR.TWD-03777906_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-03707901_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KRKTCORP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.CHF-LIBOR-6M.SWAP-7Y.MID","IR.MMK-MIBOR.CASH-1Y.MID","IR.USD-USTREASURY-USGOVT.BOND-0.03875-2Y.YIELD.MID","CR.USD-COCACOLA_SNRFOR_CR.CDS-3Y.SPREAD.MID","EQ.USD-NYSE-SGIXHEER.SPOT.MID","CR.USD-LBOTTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.KRW-KORIBOR-3M.SWAP-5Y.MID","CR.TWD-97160544_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PFIZER_SNRFOR_CR.CDS-4Y.SPREAD.MID","EQ.USD-NYSE-SGIXACE.DIV.CONT","IR.NZD-BKBM-3M.SWAP-1Y.MID","IR.NOK-NIBOR.CASH-3M.MID","CR.USD-NATXFRPPMAR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-COMCAST_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-30414175_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-12Y.MID","CR.CNY-SDBCCNBJ_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDCHF.FWD-1W.MID","CR.AUD-FGBMAEAA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BKCHCNBJ_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ANZBAU3M_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDCNH.FWD-4Y.MID","CR.USD-GSGIUS31_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-SMBCJPJT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-RABONL2U_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.EUR-MIDLGB22_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-JGB_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.SGD-MASGSGSG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-CZNBKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDCHF.FWD-2M.MID","CR.USD-PSASPT_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDMXN.FWD-2M.MID","CR.USD-GOLDUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-GOLDUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.HKD-HONIA-ON.SWAP-3Y.MID","CR.USD-ABIBB_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-2Y.MID","CR.USD-TDOMCATT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-WFC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-NOMUHI_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.HKD-CHASUS33HKD_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.CNY-LIBOR_ALM.CASH-1W.MID","IR.THB-BIBOR-6M.SWAP-15Y.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-7Y.MID","CR.CNY-MEBEDE6SDC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-20817282_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-SUMITR_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-BOTKJPJT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-KNOC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-BCIEHNTE_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-SOGEFRPPHCM_SNRFOR_CR.CDS.RECOVERY","CR.TWD-03702700_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.MYR-KLIBOR.CASH-2M.MID","IR.CNH-LIBOR_ALM.CASH-1W.MID","CR.USD-BARCGB_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.GBPUSD.FWD-2M.MID","CR.USD-KOEXKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-25Y.MID","CR.TWD-SOGEFRPPHCM_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BARCGB_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-ASDBPHMM_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.CAD-CDOR-3M.SWAP-12Y.MID","CR.USD-USTREASURY_SNRFOR_CR.CDS-1Y.SPREAD.MID","EQ.USD-NYSE-CNTBI1.DIV.CONT","FX.USDTW1.FWD-9M.MID","CR.USD-CVSCORP_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.RUB-NFEA.CASH-3M.MID","CR.CNY-ICBCFL_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-EROCTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-PSASPI_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-03244509_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CITIGR_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDRUB-SPOT.MID","CR.AUD-CRESCHZZ80A_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-STATEWA_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.NZD-BKBM.CASH-1W.MID","CR.AUD-QTC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-AGRI_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDRU1.FWD-6M.MID","CR.USD-KSA_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-BPCEFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-CITIGR_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CNPC_SNRFOR_CR.CDS.RECOVERY","CR.USD-GE_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.JPY-TIBOR-3M.SWAP-15Y.MID","IR.BRL-DI-1Y.SWAP-5Y.MID","CR.ZAR-BARCGB5G_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-FGBMAEAA_SNRFOR_CR.CDS.RECOVERY","CR.USD-MSFIN_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-NATIXSI_SNRFOR_CR.CDS.RECOVERY","FX.USDSEK.FWD-1M.MID","CR.TWD-84149358_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-CHGRID_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-MSFIN_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.SGD-SGB_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-1M.MID","CR.USD-80333992_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.HKD-BKCHCNBJ_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-IBRDUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-NOSCCATT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-MIDLGB22_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-EBRDGB2L_SNRFOR_CR.CDS.RECOVERY","CR.USD-XLONGB2L_SNRFOR_CR.CDS.RECOVERY","CR.JPY-TMKSRJ1_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-86427715_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-EBILAEADFIN_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-MEBEDE6SDC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03702700_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-NOSCCATT_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDMYR.FWD-1M.MID","CR.USD-DASMSGSG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-UBSBCHZZXXX_SNRFOR_CR.CDS.RECOVERY","CR.USD-PROXY_AAA_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.EURUSD.FWD-3M.MID","CR.CNY-SOGEFRPPHCM_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDJPY-SPOT.MID","IR.USD-SOFR-ON.SWAP-3Y.MID","CR.CNH-EXIKKRSE_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-NJGOV_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-FGBMAEAA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-97179430_SNRFOR_CR.CDS.RECOVERY","CR.CNH-BAC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-DBGHSGSG_SNRFOR_CR.CDS.RECOVERY","FX.USDSEK.FWD-15M.MID","CR.CNY-CITIUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-AGBTTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-70827383_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-03307406_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-NATAAU33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CMDTY.USD-MZN20231121.FUT.MID","IR.NZD-BKBM.CASH-2M.MID","FX.EURUSD.FWD-8M.MID","CR.AUD-TDOMCATT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-CHGRID_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-TCV_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-5M.MID","CR.CNY-QNBAQAQA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-AGRI_SNRFOR_CR.CDS.RECOVERY","CR.CNH-KOEXKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-UBSBCHZZXXX_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-COMCAST_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDZAR.FWD-1W.MID","CR.USD-EXIKKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-AGRICUL DEV BANK OF CHINA CNH_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDJPY.FWD-8M.MID","CR.USD-03307406_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BKCHCNBJ_SNRFOR_CR.CDS.RECOVERY","FX.USDSEK.FWD-6M.MID","CR.USD-BOTKJPJT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNH-NOSCCATT_SNRFOR_CR.CDS.RECOVERY","CR.USD-NTTF_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDVND.FWD-3M.MID","CR.TWD-ABOT_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-75339004_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-SCSBTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.ZAR-MORG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-NATAAU33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-STATEGRID_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-WFC_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.EUR-DTIF_SNRFOR_CR.CDS.RECOVERY","CR.HKD-HKMAHKHC_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-TAFIX_ALM.CASH-6M.MID","CR.TWD-20828393_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDMYR.FWD-6M.MID","CR.EUR-DTIF_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CBCTTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-PROXY_BAA3_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDCHF.FWD-10Y.MID","CR.ZAR-EXIKKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.USD-LIBOR_ALM-3M.SWAP-12Y.MID","FX.USDSEK.FWD-5M.MID","CR.USD-MORG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CBA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-80328219_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.CAD-CDOR-3M.SWAP-7Y.MID","CR.CNY-CITIGR_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-04200199_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-04541302_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-TCPL_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-AGRI_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.EURUSD.FWD-4Y.MID","IR.BRL-DI.CASH-9M.MID","CR.USD-ROYCCAT2_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.SGD-MASGSGSG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-SAFA50_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-PROXY_A1_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-23535435_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-CTBAAU2S_SNRFOR_CR.CDS.RECOVERY","CR.TWD-EROCTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BARCGB5G_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-58650902_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-70826764_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-NMIF_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-MBBEMYKL_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDZAR.FWD-4Y.MID","CR.USD-BCIEHNTE_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-CRESCHZZ80A_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BKKBTHBK_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-WSTRUS44_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.HKD-HKMC_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-CRESCHZZ80A_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-ESSESESS_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-AGRI_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-75370905_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-MORG_SNRFOR_CR.CDS.RECOVERY","IR.KRW-KORIBOR-3M.SWAP-12Y.MID","CR.USD-ADCBAEAA_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-MORG_SNRFOR_CR.CDS.RECOVERY","CR.JPY-TMKSRJ1_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KORAIL_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-USTREASURY_SNRFOR_CR.CDS.RECOVERY","FX.NZDUSD.FWD-4Y.MID","CR.EUR-FRR_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.TWD-TAIBOR-3M.SWAP-2Y.MID","IR.CNH-LIBOR_ALM-3M.SWAP-1Y.MID","CR.USD-HKE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BBVAESMM_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-EXIKKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.SGD-LIBOR_ALM-6M.SWAP-12Y.MID","IR.ZAR-JIBAR.CASH-9M.MID","FX.USDCHF.FWD-15Y.MID","CR.ZAR-MSFIN_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-04541302_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-LLOYGROUP_SNRFOR_CR.CDS.RECOVERY","IR.JPY-LIBOR-6M.SWAP-30Y.MID","CR.USD-MBBEMYKL_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.MYR-KLIBOR-3M.SWAP-20Y.MID","FX.USDTWD.FWD-3M.MID","FX.USDCAD.FWD-7M.MID","CR.USD-KOSEP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-USTREASURY_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ROYCCAT2_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.CNY-LIBOR_ALM-3M.SWAP-4Y.MID","FX.USDSEK.FWD-2Y.MID","CR.USD-NMIF_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-UWCBTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-4M.MID","IR.KRW-KORIBOR.CASH-6M.MID","IR.KRW-KORIBOR.CASH-2M.MID","CR.USD-DBGHSGSG_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.JPY-LIBOR.CASH-1W.MID","CR.CNH-NOMUHI_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.NZDUSD.FWD-8M.MID","CR.CNH-ROSGGB21_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.NZDUSD.FWD-5Y.MID","CR.CNY- CGMHUS31_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-AGRI_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDTHB.FWD-9M.MID","CR.USD-CKHUTCH_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-CGB_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-EROCTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-DBSSSGSG00_SNRFOR_CR.CDS.RECOVERY","CR.TWD-SOGEFRPPHCM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-DBGHSGSG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-XLONGB2L_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-AT/T_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.TWD-LIBOR_ALM-3M.SWAP-2Y.MID","CR.USD-BCIEHNTE_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.GBP-LIBOR.CASH-1W.MID","IR.USD-USTREASURY-USGOVT.BOND-0.0375-3Y.YIELD.MID","CR.USD-NTTGROUP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-TDOMCATT_SNRFOR_CR.CDS.RECOVERY","CR.TWD-86427715_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-EBRDGB2L_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-UWCBTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.MYR-KLIBOR-3M.SWAP-12Y.MID","CR.TWD-05072925_SNRFOR_CR.CDS.RECOVERY","FX.USDMY1-SPOT.MID","CR.USD-MORG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-SMTH_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CNPC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNH-WPACAU2F_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-CRESCHZZ80A_SNRFOR_CR.CDS.RECOVERY","CR.TWD-22424994_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BARCGB5G_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-SDBCCNBJ_SNRFOR_CR.CDS.RECOVERY","CR.CNY-HKMC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CBCTTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-HKC113195_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-ASDBPHMM_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-JPNOCUJPJT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-20817282_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-JNJ_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-CITIGR_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.KRW-KORIBOR.CASH-1M.MID","CR.USD-DBSSSGSG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-EROCTWTP_SNRFOR_CR.CDS.RECOVERY","CR.AUD-AT/T_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-QNBAQAQA_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-FRGB_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.EUR-EURIBOR.CASH-2M.MID","IR.EUR-ESTR-ON.SWAP-9M.MID","CR.AUD-CRESCHZZ80A_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-POWERCOR_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-HVBKKRSE_SNRFOR_CR.CDS.RECOVERY","CR.USD-RABONL2U_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-70827383_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-NOSCCATT_SNRFOR_CR.CDS.RECOVERY","FX.NZDUSD.FWD-9Y.MID","CR.USD-JPGOVT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY-NOSCCATT_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.CNH-LIBOR_ALM-3M.SWAP-5Y.MID","CR.AUD-SMBCJPJT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-CITIUS33_SNRFOR_CR.CDS.RECOVERY","CR.AUD-NATAAU33_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.VND-VNIBOR.CASH-1W.MID","CR.TWD-AGRI_SNRFOR_CR.CDS.RECOVERY","CR.ZAR-AGRI_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-ABOT_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.AUD-LIBOR_ALM.CASH-TN.MID","CR.CNH-HKMC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-03702700_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BOFAUS6S_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-MSFIN_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-SHBKKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-NOMUHI_SNRFOR_CR.CDS.RECOVERY","IR.CNH-FIXED/USD-LIBOR-3M.SWAPONSHORE-10Y.MID","CR.AUD-UOVBSGSG_SNRFOR_CR.CDS.RECOVERY","CR.EUR-DTIF_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-&&SGAD0143_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.JPY-TMKSRJ1_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-5M.MID","CR.AUD- CGMHUS31_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-CGB_SNRFOR_CR.CDS-1Y.SPREAD.MID","EQ.USD-NYSE-JMOZUSD.SPOT.MID","FX.USDHKD.FWD-1W.MID","FX.AUDUSD.FWD-2M.MID","CR.USD-&&SGAD014300_SNRFOR_CR.CDS.RECOVERY","CR.USD-EBILAEADFIN_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-BKTWTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDZAR.FWD-3Y.MID","CR.USD-IBRDUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.HKD-HONIA-ON.SWAP-6M.MID","CR.USD-KORWAT_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.AUDUSD.FWD-7M.MID","CR.USD-CKHUTCH_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR- CGMHUS31_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-LIBOR-3M.SWAP-1Y.MID","CR.CNH-BPCEFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDTW1.FWD-1Y.MID","IR.USD-USTREASURY-USGOVT.BILL-0-1Y.YIELD.MID","CR.EUR-MIDLGB22_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-KODBKRSE_SNRFOR_CR.CDS.RECOVERY","CR.CNY-ICBCFL_SNRFOR_CR.CDS.RECOVERY","CR.USD-ISRAEL_SNRFOR_CR.CDS.RECOVERY","CR.USD-SGTL_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-MEKCUS3W_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-KSA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-SDBCCNBJ_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDJPY.FWD-20Y.MID","IR.KRW-KORIBOR-3M.SWAP-9Y.MID","IR.USD-LIBOR-3M.SWAP-6Y.MID","FX.USDCAD.FWD-3M.MID","IR.CNH-SHIBOR.CASH-1W.MID","IR.AUD-AONIA-ON.SWAP-8Y.MID","CR.USD-PROXY_AAA_SNRFOR_CR.CDS.RECOVERY","CR.USD-ISRAEL_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-75370905_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-MEKCUS3W_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-22424994_SNRFOR_CR.CDS.RECOVERY","IR.AUD-BBSW.CASH-1W.MID","CR.CNY-ASDBPHMM_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-CBCTTWTP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-SGTL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-USTREASURY_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-86427715_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-PSASPI_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-GOLDUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-CITIGR_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDCAD.FWD-8M.MID","CR.USD-20817282_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.RUB-NFEA-3M.SWAP-1Y.MID","CR.AUD-BOFMCAT2FXM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-22424994_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.JPY-TMKSRJ1_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-GOLDUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDMY1.FWD-9M.MID","CR.CNY-NOSCCATT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-CHASUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-ANZBAU3M_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-COMMCNSH_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ESSESESS_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-MBBEMYKL_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.TWD-LIBOR_ALM.CASH-1M.MID","CR.ZAR-NATXFRPPMAR_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDIN1.FWD-2M.MID","CR.TWD-80328219_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDJPY.FWD-4Y.MID","IR.USD-SOFR_ALM-ON.SWAP-30Y.MID","CR.USD-RBOSGB2LTCM_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CIBBMYKL_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-MBBEMYKL_SNRFOR_CR.CDS.RECOVERY","CR.USD-MIDLGB22_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-HKC113195_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-AT/T_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDBR1.FWD-2M.MID","EQ.USD-NYSE-JMOZWKUX.SPOT.MID","CR.AUD-SHBKKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-SHBKKRSE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-TCPL_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-BPCEFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.EUR-ROSGGB21_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.ZAR-JIBAR-3M.SWAP-3Y.MID","IR.USD-SOFR_ALM.CASH-9M.MID","CR.HKD-CHASUS33HKD_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNH-SOGEFRPPHCM_SNRFOR_CR.CDS.RECOVERY","CR.USD-BKKBTHBK_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-84613756_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-30414175_SNRFOR_CR.CDS.RECOVERY","CR.TWD-75370905_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-AGRI_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NATIXSA_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-12Y.MID","CR.USD-KORWAT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-SCSBTWTP_SNRFOR_CR.CDS.RECOVERY","CR.USD-CBCTTWTP_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-2M.MID","CR.USD-BARCGB5G_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-AMAZON_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.HKD-HIBOR.CASH-1W.MID","CR.AUD-SMBCJPJT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-03522600_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-BOTKJPJT_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.HKD-HIBOR-3M.SWAP-5Y.MID","IR.USD-LIBOR_ALM.CASH-3M.MID","IR.ZAR-JIBAR-3M.SWAP-8Y.MID","CR.AUD-WPACAU2F_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-FGBMAEAA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-HKMC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-ROSGGB21_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDIN1.FWD-9M.MID","CR.USD-FCBKTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-53021433_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-70796305_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.TWD-LIBOR_ALM.CASH-6M.MID","CR.USD-PROXY_BAA1_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ING BANK NV_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDHKD-SPOT.MID","IR.HKD-HIBOR-3M/USD-LIBOR-3M.BASIS-1Y.MID","CR.TWD-28113286_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-SOFR_ALM.CASH-5M.MID","IR.ZAR-JIBAR-3M.SWAP-7Y.MID","CR.USD-NATIXSI_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-DIS_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-BNPAFRPP_SNRFOR_CR.CDS.RECOVERY","FX.USDCNY.FWD-9M.MID","CR.USD-RABONL2U_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-11384806_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-20817282_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ISRAEL_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-AMAZON_SNRFOR_CR.CDS.RECOVERY","CR.USD-SMTH_SNRFOR_CR.CDS-4Y.SPREAD.MID","CMDTY.USD-LME-ZINC.FWD-13-NOV-2023.MID","CR.CNH-MTRC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-75339004_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.THB-BIBOR-6M.SWAP-30Y.MID","CR.CNY-INDKOR_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-ASDBPHMM_SNRFOR_CR.CDS.RECOVERY","CR.TWD-CBCTTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-05052322_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-MTRC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-UBSBCHZZXXX_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-AAPL_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-JPMFIN_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-SCSBTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDCHF.FWD-5Y.MID","IR.NZD-BKBM.CASH-1M.MID","IR.CHF-LIBOR.CASH-2M.MID","CR.USD-CHASUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-NBNCO_SNRFOR_CR.CDS.RECOVERY","CR.USD-CLPGROUP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ROYCCAT2_SNRFOR_CR.CDS.RECOVERY","CR.SGD-SGB_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-16446274_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ROK_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-CRESCHZZ80A_SNRFOR_CR.CDS.RECOVERY","CR.TWD-ORSTED_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.ZAR-CITIUS33_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-CZNBKRSE_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CGB_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-NABA_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-TCV_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.HKD-HKMAHKHC_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.MXN-MEXIBOR-1M.SWAP-9M.MID","FX.USDCAD.FWD-4M.MID","CR.CNH-KODBKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-NATAAU33_SNRFOR_CR.CDS.RECOVERY","CR.EUR-BPCEFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-MTRC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-QATAR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-04541302_SNRFOR_CR.CDS.RECOVERY","IR.EUR-ESTR-ON.SWAP-8Y.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-8Y.MID","IR.EUR-ESTR-ON.SWAP-1M.MID","CR.ZAR-SOGEFRPPHCM_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-FGBMAEAA_SNRFOR_CR.CDS.RECOVERY","IR.SGD-SORA-ON.SWAP-20Y.MID","FX.USDIN1.FWD-1Y.MID","CR.TWD-11384806_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-COMCAST_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-92065367_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03707901_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNY-NATAAU33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-ING BANK NV_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-ADCBAEAA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-GOLDUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-6Y.MID","CR.USD-FCBKTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-SOGEFRPPHCM_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.USDJPY.FWD-4M.MID","CR.USD-DASMSGSG_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-CHASUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-RBOSGB2LTCM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-CITIUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-OCBCSGSG_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-9Y.MID","CR.USD-ESUNTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-NOMUHI_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-NATIXSA_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.AUD-LIBOR_ALM.CASH-6M.MID","FX.USDHKD.FWD-10M.MID","CR.USD-ICBCTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-20817282_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-HKMAHKHC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.HKD-BKCHCNBJ_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-A2_SNRFOR_CR.CDS.RECOVERY","IR.AUD-AONIA-ON.SWAP-1W.MID","FX.USDKR1.FWD-1Y.MID","IR.INR-MIFOR-6M.SWAP-5Y.MID","CR.ZAR-SOGEFRPPHCM_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.HKD-CRESCHZZ80A_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDCHF.FWD-2W.MID","CR.TWD-05052322_SNRFOR_CR.CDS.RECOVERY","CR.CNY-HKMC_SNRFOR_CR.CDS.RECOVERY","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-9Y.MID","CR.TWD-92065367_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-PRUDENTIAL_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDPHP.FWD-2M.MID","CR.USD-DIS_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDCNY.FWD-1W.MID","IR.CHF-LIBOR.CASH-TN.MID","CR.USD-KGC_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-UBSGROUP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-73251209_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.KRW-KORIBOR-3M.SWAP-1Y.MID","CR.USD-EDF_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-SMBCJPJT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-CTCBTWTP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-04541302_SNRFOR_CR.CDS.RECOVERY","FX.USDKR1.FWD-9M.MID","CR.USD-VERIZON_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-UBSBCHZZXXX_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ROK_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-70796749_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-MHCBJPJT_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.SGD-SIBOR-6M.SWAP-30Y.MID","IR.RUB-NFEA-3M.SWAP-5Y.MID","FX.GBPUSD.FWD-30Y.MID","CR.AUD-QTC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-TCV_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-VPNF_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-UOVBSGSG_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-PFIZER_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-AAHK_SNRFOR_CR.CDS.RECOVERY","CR.AUD-EXIKKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-84613756_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.USD-USTREASURY-USGOVT.BOND-0.03875-20Y.YIELD.MID","CR.USD-JPMFIN_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-97179430_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-DASMSGSG_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-SOGEFRPPHCM_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-75339004_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.ZAR-LIBOR_ALM-3M.SWAP-6Y.MID","CR.USD-NATAAU33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CLPC_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.TWD-LIBOR_ALM-3M.SWAP-5Y.MID","CR.USD-03307406_SNRFOR_CR.CDS.RECOVERY","IR.GBP-LIBOR-6M.SWAP-10Y.MID","CR.USD-SHBKKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.NZDUSD-SPOT.MID","CR.TWD-03522600_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-22424994_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-STATEGRID_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-20817282_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.CHF-LIBOR-6M.SWAP-8Y.MID","FX.NZDUSD.FWD-9M.MID","CR.CNY-BMWBDEMU_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-75708007_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.ZAR-03307406_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.TWD-LIBOR_ALM.CASH-ON.MID","CR.USD-AMAZON_SNRFOR_CR.CDS-7Y.SPREAD.MID","EQ.USD-NYSE-SPX.SPOT.MID","IR.NOK-NIBOR-6M.SWAP-8Y.MID","CR.HKD-CHASUS33HKD_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-VPNF_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDRUB.FWD-3Y.MID","CR.TWD-80328219_SNRFOR_CR.CDS.RECOVERY","CR.USD-NATIXSA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-11913502_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-CCBCTWTP_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-30Y.MID","CR.AUD-CTBAAU2S_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-NBNCO_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.ZAR-AGRI_SNRFOR_CR.CDS.RECOVERY","CR.USD-RBOSGB2LTCM_SNRFOR_CR.CDS.RECOVERY","CR.USD-CVSCORP_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.NZDUSD.FWD-8Y.MID","IR.SGD-LIBOR_ALM-6M.SWAP-30Y.MID","IR.NZD-BKBM-3M.SWAP-5Y.MID","CR.AUD-03307406_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-UWCBTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-MSFIN_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDMMK.FWD-2W.MID","CR.CNH-ROSGGB21_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-SOFR_ALM-ON.SWAP-3Y.MID","CR.AUD-TDOMCATT_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.ZAR-MORG_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-MORG_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-59504506_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-16095410_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.USD-UXYZ23.BOND-FUT.PRICE.MID","CR.USD-ISRAEL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-MIDLGB22_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-JPGOVT_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.HKD-BKCHCNBJ_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-DBGHSGSG_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-EROCTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-PRUDENTIAL_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-SGB_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-EXIKKRSE_SNRFOR_CR.CDS.RECOVERY","CR.USD-PROXY_BAA2_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.CNY-SHIBOR-3M.SWAP-1Y.MID","CR.ZAR-CRESGB2X_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-AAPL_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.CHF-LIBOR-6M.SWAP-12Y.MID","FX.GBPUSD.FWD-2W.MID","CR.USD-NMIF_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDMYR.FWD-2M.MID","CR.USD-SDBCCNBJ_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.ZAR-MSFIN_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNY- CGMHUS31_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.HKD-HKMC_SNRFOR_CR.CDS-10Y.SPREAD.MID","FX.AUDUSD.FWD-6Y.MID","CR.USD-CZNBKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.EUR-ROSGGB21_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.ZAR-NATXFRPPMAR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-CRESCHZZ80A_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-HKSAR_SNRFOR_CR.CDS.RECOVERY","CR.AUD-DBSSSGSG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNH-BPCEFRPP_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDSEK.FWD-11M.MID","CR.USD-NTTGROUP_SNRFOR_CR.CDS.RECOVERY","CR.USD-BBMEAEAD_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.CNY-CITIUS33_SNRFOR_CR.CDS.RECOVERY","IR.SGD-SIBOR-6M.SWAP-1Y.MID","CR.CNY-ICBCFL_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-GSGIUS31_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-KODBKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.AUD-BBSW-6M.SWAP-30Y.MID","CR.USD-PROXY_BAA2_SNRFOR_CR.CDS.RECOVERY","CR.AUD-SOGEFRPPHCM_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.JPY-TIBOR-3M.SWAP-7Y.MID","CR.USD-PROXY_AA1_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.AUD-AONIA-ON.SWAP-9M.MID","CR.USD-PSASPT_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.INR-MIFOR-6M.SWAP-10Y.MID","IR.GBP-LIBOR-6M.SWAP-2Y.MID","CR.USD-BOTKJPJT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-SOGEFRPPHCM_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-NOSCCATT_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDINR.FWD-3M.MID","FX.EURUSD.FWD-21M.MID","CR.USD-KOEXKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDMXN.FWD-2W.MID","CR.AUD-BOTKJPJT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-LBOTTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.NZD-BKBM.CASH-9M.MID","CR.USD-PROXY_AA2_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ICBKCNBJ_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.EURUSD.FWD-4M.MID","CR.TWD-04541302_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.NZD-BKBM-3M.SWAP-20Y.MID","CR.CNY-HKC113195_SNRFOR_CR.CDS.RECOVERY","FX.USDSEK.FWD-2M.MID","CR.USD-BKTWTWTP_SNRFOR_CR.CDS.RECOVERY","FX.GBPUSD.FWD-1M.MID","FX.USDID1.FWD-6M.MID","FX.USDCHF.FWD-5M.MID","IR.MXN-MEXIBOR-1M.SWAP-52M.MID","IR.CNH-FIXED/USD-LIBOR-3M.SWAPONSHORE-5Y.MID","CR.TWD-AGBTTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-SUMITR_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-WFC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-FCBKTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-20828393_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.TWD-TAIBOR-3M.SWAP-10Y.MID","FX.USDMXN.FWD-6M.MID","CR.EUR-LLOYGROUP_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-03707901_SNRFOR_CR.CDS.RECOVERY","FX.USDRU1.FWD-3M.MID","CR.USD-NATXFRPPMAR_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-07305506_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDCAD.FWD-3Y.MID","CR.USD-NATIXSA_SNRFOR_CR.CDS.RECOVERY","IR.EUR-ESTR.CASH-ON.MID","CR.AUD-RABONL2U_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ABOCCNBJ_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-16446274_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-SOGEFRPPHCM_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.MYR-KLIBOR.CASH-6M.MID","CR.USD-JP12000329_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDKR1.FWD-1W.MID","FX.GBPUSD.FWD-5M.MID","CR.USD-BBVAESMM_SNRFOR_CR.CDS-5Y.SPREAD.MID","IR.USD-SOFR-ON.SWAP-2Y.MID","CR.USD-MIDLGB22_SNRFOR_CR.CDS.RECOVERY","CR.USD-CHASUS3300_SNRFOR_CR.CDS.RECOVERY","CR.USD-PROXY_BAA3_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-CNSW_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-AT/T_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-CBCTTWTP_SNRFOR_CR.CDS.RECOVERY","IR.JPY-TIBOR-3M.SWAP-30Y.MID","CR.AUD-SAFA50_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDTHB.FWD-1W.MID","CR.USD-NTTF_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-MIDLGB22_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-80333992_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-22354940_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-INGBNL2A_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.MXN-MEXIBOR-1M.SWAP-390M.MID","CR.USD-CNPC_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-JGB_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-CGB_SNRFOR_CR.CDS.RECOVERY","CR.USD-KSA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-KORELE_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-DASMSGSG_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-STATEWA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-QNBAQAQA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-BBMEAEAD_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-HVBKKRSE_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.CNY-ADBC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-BPCEFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-MORG_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-COCACOLA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-AXP_SNRFOR_CR.CDS.RECOVERY","FX.USDCAD-SPOT.MID","IR.SGD-LIBOR_ALM-6M.SWAP-1Y.MID","IR.CNH-HIBOR-3M.SWAP-7Y.MID","IR.PHP-PHIBOR-3M.SWAP-1Y.MID","CMDTY.USD-MZN20231115.FUT.MID","FX.USDPHP.FWD-2W.MID","CR.USD-WFBIUS6W_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-CITIUS33_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDTW1.FWD-1W.MID","IR.USD-LIBOR_ALM-6M.SWAP-9Y.MID","CR.USD-22099131_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.CNH-WPACAU2F_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.CNY-SHIBOR.CASH-6M.MID","FX.USDBRL-SPOT.MID","CR.USD- CGMHUS31_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.MMK-MIBOR.CASH-ON.MID","CR.USD-COMMCNSH_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-QNBAQAQA_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-MHCBJPJT_SNRFOR_CR.CDS.RECOVERY","CR.TWD-BNPAFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ICBKCNBJ_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-IBRDUS33_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-INGBNL2A_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-7Y.MID","CR.CNH-HKMC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-TCPL_SNRFOR_CR.CDS.RECOVERY","CR.USD-BPCEFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.GBP-LIBOR-6M.SWAP-6Y.MID","CR.USD-PROXY_AA1_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.TWD-04200199_SNRFOR_CR.CDS.RECOVERY","CR.USD-KNOC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CTBAAU2S_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-BARCGB5G_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDRUB.FWD-7M.MID","CR.USD-FGBMAEAA_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNH-BAC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-MBBEMYKL_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-68387705_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-TAFIX_ALM.CASH-2M.MID","CR.USD-SGTL_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-QNBAQAQA_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.AUD-LIBOR_ALM-3M.SWAP-2Y.MID","CR.USD- CGMHUS31_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.TWD-16844548_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-BSUIFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-AGRI_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BOTKJPJT_SNRFOR_CR.CDS.RECOVERY","CR.USD-CBA_SNRFOR_CR.CDS-3Y.SPREAD.MID","FX.USDCHF.FWD-1M.MID","IR.ZAR-LIBOR_ALM.CASH-3M.MID","CR.TWD-22099131_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-CITIUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-BARCGB5G_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-4Y.MID","IR.USD-SOFR_ALM-ON.SWAP-7Y.MID","CR.TWD-68387705_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-KORWAT_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.SGD-SORA-ON.SWAP-6M.MID","CR.USD-WFBIUS6W_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ICBCTWTP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-CHASUS33_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.EUR-UBSBCHZZXXX_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-03374805_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNH-HKMC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-03244509_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDKR1.FWD-1M.MID","CR.CNH-BAC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-MHCBJPJT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-SUMITR_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-BNPAFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-ADCBAEAA_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-AGRI_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.NZD-BKBM-3M.SWAP-9Y.MID","CR.USD-ADCBAEAA_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-ROSGGB21_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-22099131_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-CIBBMYKL_SNRFOR_CR.CDS.RECOVERY","IR.JPY-LIBOR.CASH-ON.MID","IR.MYR-KLIBOR-3M.SWAP-1Y.MID","CR.USD-BSUIFRPP_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-HSBCHOP_SNRFOR_CR.CDS.RECOVERY","CR.USD-COBADEFF_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDRUB.FWD-3M.MID","CR.ZAR-GOLDUS33_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-EIBCCNBJ_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-HKC113195_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-POWERCOR_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.VND-VNIBOR.CASH-1M.MID","CR.ZAR-CITIGR_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CLPC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-04541302_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.AUD-CNSW_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.AUD-LIBOR_ALM-3M.SWAP-10Y.MID","CR.TWD-30414175_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.ZAR-CRESGB2X_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNH-KOEXKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-KORAIL_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.TWD-LIBOR_ALM.CASH-2W.MID","CR.USD-SGB_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.EUR-UBSBCHZZXXX_SNRFOR_CR.CDS.RECOVERY","IR.MXN-MEXIBOR-1M.SWAP-260M.MID","CR.CNY-03307406_SNRFOR_CR.CDS.RECOVERY","CR.USD-BNPAFRPP_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.USD-CLPC_SNRFOR_CR.CDS.RECOVERY","CR.CNY-ROSGGB21_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-STANLNPLC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-PROXY_AAA_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-EXIKKRSE_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BOFAUS6S_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-20828393_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY-MSFIN_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-GE_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-11913502_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDMMK.FWD-2M.MID","IR.VND-VNIBOR.CASH-ON.MID","CR.USD-XSESSGS1_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-04541302_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-EXIKKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-TPBKTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.SGD-LIBOR_ALM-6M.SWAP-5Y.MID","CR.USD-HVBKKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BOFMCAT2FXM_SNRFOR_CR.CDS.RECOVERY","IR.SEK-STIBOR-3M.SWAP-8Y.MID","CR.USD-EBILAEADFIN_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-CTGOVSSN_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.HKD-HONIA-ON.SWAP-2Y.MID","CR.USD-NOSCCATT_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-WFBIUS6W_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-03374805_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-GOLDUS33_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.JPY-LIBOR.CASH-1M.MID","IR.USD-LIBOR.CASH-1W.MID","IR.MXN-MEXIBOR-1M.SWAP-26M.MID","IR.ZAR-JIBAR-3M.SWAP-25Y.MID","CR.AUD-WPACAU2F_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.AUD-CITIGR_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-WSTRUS44_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-3Y.MID","CR.TWD-04200199_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-VERIZON_SNRFOR_CR.CDS.RECOVERY","IR.USD-USTREASURY-USGOVT.BOND-0.03625-30Y.YIELD.MID","CR.USD-FGBMAEAA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-58650902_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.CNY- CGMHUS31_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-KNOC_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDJPY.FWD-12Y.MID","IR.MYR-KLIBOR-3M.SWAP-5Y.MID","CR.USD-BBMEAEAD_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-PROXY_AA3_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.USDBRL.FWD-18M.MID","CR.USD-KORAIL_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.GBPUSD.FWD-1Y.MID","CR.CNY-03307406_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-03777906_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BNPAFRPP_SNRFOR_CR.CDS.RECOVERY","CR.USD-KODBKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-ABOCCNBJ_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-LLOYGROUP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.CNH-ICBKCNBJ_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-COMMCNSH_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.EUR-EURIBOR-6M.SWAP-8Y.MID","IR.USD-SOFR-ON.SWAP-20Y.MID","CR.USD-AXP_SNRFOR_CR.CDS-10Y.SPREAD.MID","EQ.USD-NYSE-CSEADR5U.DIV.CONT","CR.TWD-23535435_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-HKMAHKHC_SNRFOR_CR.CDS.RECOVERY","CR.USD-HKSAR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.TWD-68035907_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-SAFA50_SNRFOR_CR.CDS.RECOVERY","CR.CNY-UBSBCHZZXXX_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-53021433_SNRFOR_CR.CDS-6M.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-30Y.MID","CR.USD-PROXY_A1_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.AUD-BBSW-3M/AUD-BBSW-6M.BASIS-1Y.MID","CR.USD-PRUDENTIAL_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.AUD-STATEWA_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-CITIGR_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-WSTRUS44_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-KORELE_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-NOMUHI_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.AUD-BNPAFRPP_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-03707901_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.CNY-ADBC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ANZBAU3M_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-AAHK_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.TWD-FIXED-TWGOVT.BOND-0.00000-6M.YIELD.MID","IR.TWD-FIXED/USD-LIBOR-6M.SWAPONSHORE-7Y.MID","CR.TWD-LBOTTWTP_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.AUD-GOLDUS33_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-SFG_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-80333992_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDPH1.FWD-3M.MID","CR.USD-LBOTTWTP_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.USDCHF.FWD-1Y.MID","CR.USD-MIDLGB22_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-NOSCCATT_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-CKHUTCH_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.AUD-BOFMCAT2FXM_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNH-BAC_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.IDR-BITD.CASH-1M.MID","CR.USD-PSASPT_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.EUR-UBSBCHZZXXX_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-EROCTWTP_SNRFOR_CR.CDS.RECOVERY","CR.USD-&&SGAD0143_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.USD-LIBOR-1M/USD-LIBOR-3M.BASIS-25Y.MID","CR.USD-BBVAESMM_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-CRESGB2X_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-PROXY_AA3_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.TWD-03707901_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-SOFR_ALM.CASH-2W.MID","CR.USD-MIDLGB22_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.EUR-ROSGGB21_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-80333992_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.USD-SOFR_ALM-ON.SWAP-12Y.MID","CR.CNY-ADBC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-SOGEFRPPHCM_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.MMK-MIBOR.CASH-9M.MID","CR.USD-BPCEFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.EUR-BPCEFRPP_SNRFOR_CR.CDS-2Y.SPREAD.MID","IR.USD-LIBOR-6M/USD-LIBOR-3M.BASIS-4Y.MID","CR.TWD-59504506_SNRFOR_CR.CDS.RECOVERY","FX.USDMMK.FWD-6M.MID","CR.AUD-A2_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-RBOSGB2LTCM_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.TWD-03244509_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.ZAR-MSFIN_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.CNY-BMWBDEMU_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-CTBAAU2S_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-BNPAFRPP_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-SCBLGB2G_SNRFOR_CR.CDS.RECOVERY","IR.ZAR-JIBAR.CASH-1W.MID","CR.USD-03374805_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-BOFMCAT2FXM_SNRFOR_CR.CDS-3Y.SPREAD.MID","IR.HKD-HIBOR.CASH-ON.MID","CR.AUD-UBSBCHZZXXX_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-22099131_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.ZAR-03307406_SNRFOR_CR.CDS.RECOVERY","IR.SGD-SORA-ON.SWAP-2M.MID","CR.ZAR-CITIUS33_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-11384806_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-HKSAR_SNRFOR_CR.CDS-2Y.SPREAD.MID","FX.USDCHF.FWD-15M.MID","FX.USDHKD.FWD-8M.MID","CR.USD-NATAAU33_SNRFOR_CR.CDS.RECOVERY","CR.USD-BCIEHNTE_SNRFOR_CR.CDS-1Y.SPREAD.MID","FX.USDNTD.FWD-6M.MID","CR.CNY-MEBEDE6SDC_SNRFOR_CR.CDS-10Y.SPREAD.MID","CR.USD-JPMFIN_SNRFOR_CR.CDS.RECOVERY","FX.USDSGD.FWD-4M.MID","CR.USD-SHBKKRSE_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.USD-BOTKJPJT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.TWD-04200199_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.GBPUSD.FWD-9Y.MID","IR.IDR-BITD.CASH-ON.MID","CR.AUD-AUTREA_SNRFOR_CR.CDS.RECOVERY","IR.HKD-HIBOR.CASH-1M.MID","CR.USD-HSBCHOP_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.AUD-RABONL2U_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.ZAR-AGRI_SNRFOR_CR.CDS-6M.SPREAD.MID","CR.TWD-16095410_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.USD-LIBOR_ALM-6M.SWAP-5Y.MID","CR.USD-CLPC_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-WSTRUS44_SNRFOR_CR.CDS.RECOVERY","IR.PHP-PHIBOR-3M.SWAP-5Y.MID","CR.TWD-73251209_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.AUDUSD.FWD-3W.MID","FX.EURUSD.FWD-18M.MID","CR.USD-KGC_SNRFOR_CR.CDS-10Y.SPREAD.MID","IR.JPY-LIBOR-6M.SWAP-15Y.MID","CR.USD-ESUNTWTP_SNRFOR_CR.CDS-1Y.SPREAD.MID","IR.EUR-ESTR-ON.SWAP-1W.MID","IR.SEK-STIBOR-3M.SWAP-20Y.MID","CR.ZAR-CITIGR_SNRFOR_CR.CDS-5Y.SPREAD.MID","CR.CNY-ICBCFL_SNRFOR_CR.CDS-7Y.SPREAD.MID","FX.GBPUSD.FWD-5Y.MID","IR.CAD-CDOR.CASH-3M.MID","FX.USDCHF.FWD-9Y.MID","CR.USD-SMBCJPJT_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.AUD-VPNF_SNRFOR_CR.CDS-4Y.SPREAD.MID","CR.USD-ABNANL2A_SNRFOR_CR.CDS-6M.SPREAD.MID","FX.USDNTD.FWD-2M.MID","IR.EUR-EURIBOR-6M.SWAP-15Y.MID","CR.USD-PROXY_AAA_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-NMIF_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.TWD-11913502_SNRFOR_CR.CDS-4Y.SPREAD.MID","FX.USDHKD.FWD-4M.MID","CR.CNY-EIBCCNBJ_SNRFOR_CR.CDS-2Y.SPREAD.MID","CR.USD-BSUIFRPP_SNRFOR_CR.CDS-4Y.SPREAD.MID","IR.TWD-FIXED/USD-LIBOR-6M.SWAPONSHORE-3Y.MID","CR.CNY-MBBEMYKL_SNRFOR_CR.CDS-5Y.SPREAD.MID","FX.NZDUSD.FWD-1W.MID","CR.ZAR-BARCGB5G_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-FRGB_SNRFOR_CR.CDS-3Y.SPREAD.MID","CR.USD-MTRC_SNRFOR_CR.CDS-7Y.SPREAD.MID","CR.USD-ICBKCNBJ_SNRFOR_CR.CDS-7Y.SPREAD.MID","IR.VND-VNIBOR.CASH-9M.MID","FX.USDSGD.FWD-8M.MID","CR.USD-STANLNPLC_SNRFOR_CR.CDS-1Y.SPREAD.MID","CR.USD-PROXY_AA1_SNRFOR_CR.CDS-7Y.SPREAD.MID"],
e-05,0.0060359999999999997,0.00316400000000000015,0.400000000000000022,0.00831100000000000068,0.0086110000000000006,0.00313700000000000003,0.0673590000000000022,0.00681499999999999988,0.0261000000000000017,0.0118650000000000005,0.00807700000000000085,0.00831100000000000068,0.0264999999999999993,18.950148500000001,0.00498299999999999958,0.00213700000000000001,0.0107349999999999998,7.24375000000000036,0.00199899999999999991,31.4920000000000009,0.00831100000000000068,0.400000000000000022,0.400000000000000022,11.0009224999999997,0.00208200000000000008,0.0013519999999999999,147.489900000000006,1.36745000000000005,0.00811399999999999968,0.00704199999999999965,0.00240099999999999992,0.0328900000000000026,0.0021540000000000001,0.00555999999999999984,0.0223999999999999998,0.00700000000000000015,0.0395000000000000004,0.00887199999999999968,0.00391799999999999961,1.34471999999999992,0.0155999999999999993,0,0.0013519999999999999,0.0191500000000000004,0.0529939999999999994,1351.13499999999999,0.00953599999999999934,0.0177999999999999999,0.0100000000000000002,0.64522400000000002,0.00381899999999999991,0.00521700000000000028,0.0450499999999999998,0.00413800000000000019,0.00199899999999999991,0.00551100000000000027,0.00418400000000000022,0.00310299999999999986,0.00391799999999999961,83.769999999999996,0.0131000000000000005,0,0.103099999999999997,0.0232499999999999998,0.400000000000000022,0.00691999999999999994,0.0048139999999999997,0.00321200000000000001,0.400000000000000022,0.647106500000000029,0.241199999999999998,0.0156680000000000014,0.0489059999999999981,0.0168999999999999984,2525.75,0.0060359999999999997,0.00342500000000000009,0.00821299999999999981,0.0452139999999999972,0.00480500000000000024,0.0111900000000000003,0.00169899999999999999,0.00342500000000000009,0.00169899999999999999,0.0341399999999999967,0.00955499999999999926,36.2049000000000021,0.400000000000000022,0.0013519999999999999,0.00518300000000000011,0.00981699999999999934,0.0329749999999999974,0.00342500000000000009,0.000435000000000000003,0.0265999999999999986,0.00894999999999999962,0.0160810000000000015,0.0153229999999999998,0.00622189999999999983,0.00569699999999999981,0.0137450000000000003,32.1060000000000016,0.0100000000000000002,0.400000000000000022,0.0256599999999999988,0.00169899999999999999,0.0138999999999999992,0.00472600000000000017,1.06875450000000005,0.0406829999999999969,0.00777900000000000032,0.00165400000000000009,0.0013519999999999999,0.0214999999999999983,0.0589500000000000024,0.00691999999999999994,0.0146125000000000005,0.00807700000000000085,1.34446599999999994,0.00498299999999999958,0.00980100000000000068,0.0550000000000000003,0.00593899999999999983,0.0013519999999999999,0.00134099999999999996,1.34454999999999991,0.00240099999999999992,0.00731699999999999972,0.0177999999999999999,0.0115999999999999992,0.00316400000000000015,0.00634499999999999995,0.0435899999999999968,0.400000000000000022,0.0274499999999999987,0.0709999999999999937,0.00900600000000000012,0.0381379999999999983,0.00337799999999999993,0.00498299999999999958,0.00513499999999999981,0.00894999999999999962,0.00316400000000000015,83.3199999999999932,0.400000000000000022,0.0530979999999999994,0.00199899999999999991,0.0388000000000000012,0.000885200000000000049,0.00831100000000000068,0.00920100000000000084,0.00342500000000000009,0.00459899999999999979,0.0013519999999999999,0.0115999999999999992,0.00801699999999999982,0.00342500000000000009,0.400000000000000022,0.00900600000000000012,0.0106940000000000004,0.00807700000000000085,0.00658499999999999971,0.00513499999999999981,0.00568000000000000015,19.0294330000000009,0.00570000000000000021,0.107899999999999996,0.00658499999999999971,0.0407700000000000007,0.0402800000000000033,0.00831100000000000068,0.0513499999999999998,0.00498299999999999958,0.0021540000000000001,0.00518300000000000011,0.00342500000000000009,1.22038099999999994,6.84555000000000025,0.00608899999999999979,0.00634499999999999995,12.5,0.826194500000000054,0.00284000000000000008,0.0116699999999999998,0.0082106999999999996,0.0113500000000000007,0.00391799999999999961,0.00634499999999999995,0.0281999999999999994,0.0153433000000000007,0.00294999999999999993,0.00320000000000000015,0.0402500000000000011,0.0060359999999999997,0.0135999999999999992,0.0013519999999999999,0.00199899999999999991,0.400000000000000022,0.0050000000000000001,0.400000000000000022,0.0856500000000000039,0.000763800000000000026,0.00980100000000000068,0.00417299999999999963,0.0107790000000000004,0.00518300000000000011,0.0013519999999999999,0.00336000000000000014,0.00900600000000000012,0.00161999999999999991,0.0115999999999999992,0.00521700000000000028,0.00965000000000000059,0.00634499999999999995,0.00316400000000000015,0.0414500000000000007,0.00342500000000000009,0.0299750000000000016,0.00470499999999999998,0.0180449999999999985,0.00900600000000000012,0.0436100000000000029,0.00965000000000000059,0.00658499999999999971,0.00518300000000000011,0.595586999999999978,0.0544499999999999984,0.400000000000000022,0.00418400000000000022,0.00700000000000000015,0.0122500000000000005,0.0070619999999999997,0.089700000000000002,0.00700000000000000015,-0.00224999999999999983,0.00521700000000000028,0.00498299999999999958,0.400000000000000022,0.0063150000000000003,0.400000000000000022,6.99465000000000003,0.00759999999999999998,0.00470499999999999998,0.0060359999999999997,0.0545650000000000024,0.0137450000000000003,0.400000000000000022,0.00898299999999999967,0.00900600000000000012,0.400000000000000022,0.000675000000000000036,0.00174599999999999994,0.0120630000000000008,0.00426800000000000009,0.00553000000000000019,0.0802500000000000019,0.0899999999999999967,0.00459899999999999979,153.925000000000011,0.00474999999999999988,0.00426800000000000009,0.000890999999999999973,0.00894999999999999962,0.0381379999999999983,0.0147309999999999993,0.00910799999999999978,0.035409999999999997,0.00518300000000000011,1.34542399999999995,0.00342500000000000009,0.00634499999999999995,0.400000000000000022,0.00181400000000000007,0.00730000000000000007,0.00439699999999999987,0.00439699999999999987,0.00148499999999999999,0.400000000000000022,1.35560100000000006,0.00777900000000000032,0.0021540000000000001,0.00310299999999999986,0.0530655000000000016,0.0277999999999999983,0.0020110000000000002,0.0471299999999999983,97.3150799999999947,0.0246999999999999997,0.400000000000000022,0.400000000000000022,0.0410000000000000017,0.00113199999999999998,2100,0.400000000000000022,0.0155999999999999993,0.00980100000000000068,0.00731699999999999972,0.00790500000000000057,0.0379999999999999991,0.00418400000000000022,0.053949999999999998,0.000951000000000000022,0.0444999999999999979,0.0100000000000000002,0.0497500000000000026,0.00790500000000000057,0.400000000000000022,0.0070619999999999997,0.400000000000000022,0.0155999999999999993,0.0135999999999999992,0.400000000000000022,0.0112870000000000002,32.232999999999997,0.0727000000000000007,0.0107790000000000004,10.8091760000000008,0.00700000000000000015,0.00470499999999999998,0.00279100000000000008,0.00711,0.00691999999999999994,0.00342500000000000009,0.00704199999999999965,0.00807700000000000085,0.0177999999999999999,0.00133479999999999992,0.0298000000000000001,0.00965000000000000059,0.067371399999999998,0.0924999999999999989,0.0021540000000000001,0.0334599999999999967,7.34205000000000041,0.00417200000000000036,0.495889999999999997,5.00574999999999992,0.00696000000000000004,0.00459899999999999979,0.00739699999999999993,0.00994699999999999925,7.81269900000000028,0.0070619999999999997,0.0137450000000000003,0.0105019999999999992,0.00790500000000000057,0.0529999999999999985,0.00894999999999999962,0.00980100000000000068,0.00498299999999999958,1.2209000000000001,0.00158500000000000004,0.00534499999999999992,0.400000000000000022,0.00777900000000000032,0.000700299999999999946,0.00900600000000000012,1.34896050000000001,0.00831100000000000068,0.0070619999999999997,0.0064999999999999997,0.0449999999999999983,0.00342500000000000009,0.0112870000000000002,0.00240999999999999982,0.0120630000000000008,0.400000000000000022,0.736049999999999982,0.400000000000000022,0.00518300000000000011,0.00820000000000000069,0.00634499999999999995,0.0128690000000000002,0.023099999999999999,0.00202099999999999979,7.79627900000000018,0.400000000000000022,0.400000000000000022,0.00342299999999999983,0.00777900000000000032,0.0159499999999999989,0.00777900000000000032,0.00342500000000000009,0.00900600000000000012,0.00634499999999999995,0.0407930000000000029,5.07709999999999972,0.00704199999999999965,0.640765999999999947,0.0354999999999999968,0.00980100000000000068,0.0086110000000000006,0.400000000000000022,0.00731699999999999972,0.0407399999999999984,0.400000000000000022,0.0141230000000000001,0.0524000000000000021,0.00417299999999999963,0.0120630000000000008,0.0135999999999999992,57.2060000000000031,0.0568999999999999992,1.23584999999999989,0.400000000000000022,0.0021540000000000001,0.0100000000000000002,0.0378179999999999975,0.00316400000000000015,203.800000000000011,0.00159500000000000006,0.00342500000000000009,10.8071024999999992,0.400000000000000022,0.00316400000000000015,0.0645000000000000018,0.000750000000000000016,0.00790500000000000057,31.3530000000000015,0.0112870000000000002,0.0312699999999999992,0.00622189999999999983,0.400000000000000022,0.0580999999999999989,0.00521700000000000028,0.0466400000000000009,0.00777900000000000032,0.00915000000000000015,0.00608899999999999979,0.00418400000000000022,0.00965000000000000059,0.00169899999999999999,0.00920100000000000084,0.00634499999999999995,4.65909999999999958,0.0106940000000000004,0.00316400000000000015,0.0376879999999999993,0.00704199999999999965,0.00790500000000000057,0.00731699999999999972,0.0138999999999999992,36.3699999999999974,0.00489899999999999971,0.0112870000000000002,0.00658499999999999971,0.0100000000000000002,0.000890999999999999973,0.400000000000000022,0.00608899999999999979,0.879888499999999962,0.00634499999999999995,0.00113940000000000005,0.00606199999999999968,0.400000000000000022,0.0384999999999999995,0.00153600000000000004,0.0115999999999999992,0.0279499999999999992,0.00488200000000000005,0.00341999999999999986,0.400000000000000022,0.00608899999999999979,0.0021540000000000001,0.0507799999999999987,-0.00444999999999999996,0.00417299999999999963,0.000953999999999999987,0.0100490000000000006,0.0310400000000000016,1.363923,4.6796249999999997,0.0104950000000000009,23.3654499999999992,0.0530940000000000023,10.7394949999999998,0.0104950000000000009,0.00700000000000000015,0.00418400000000000022,0.0423409999999999967,0.00790500000000000057,0.400000000000000022,0.00658499999999999971,0.00423000000000000025,0.00965000000000000059,2176.05999999999995,19.3824375000000018,0.000852000000000000001,0.00235199999999999992,0.0106940000000000004,0.0106940000000000004,0.006927,0.400000000000000022,0.105270000000000002,0.00691999999999999994,0.025350000000000001,143.830000000000013,0.0274499999999999987,107.522499999999994,0.0382629999999999984,0.00807700000000000085,0.00765799999999999988,0.00320000000000000015,0.0371300000000000033,0.0274499999999999987,0.00358200000000000011,0.0036979999999999999,0.00213500000000000018,0.400000000000000022,0.00980100000000000068,0.00417299999999999963,0.00411300000000000034,0.00410500000000000014,0.00518300000000000011,150,0.00980100000000000068,0.00680099999999999975,0.0040270000000000002,0.00768700000000000026,0.00980100000000000068,0.400000000000000022,0.00704199999999999965,0.00274699999999999988,0.00316400000000000015,0.00980100000000000068,0.564200000000000035,0.0100000000000000002,0.0106940000000000004,0.0417999999999999969,0.0194499999999999985,0.0106940000000000004,0.00470499999999999998,125.950100000000006,0.00960399999999999969,0.400000000000000022,0.0310700000000000004,0.00316400000000000015,0.0274499999999999987,0.00470499999999999998,0.0138999999999999992,0.00397600000000000037,0.0408818000000000029,0.00240099999999999992,103.228099999999998,0.0116500000000000006,0.400000000000000022,0.400000000000000022,0.00622189999999999983,0.00732600000000000005,0.0070619999999999997,0.0106940000000000004,0.00272799999999999996,0.00149500000000000002,0.400000000000000022,0.125900000000000012,0.0159900000000000007,0.00777900000000000032,0.400000000000000022,0.00435500000000000036,0.0153259999999999993,0.00608899999999999979,0.00417299999999999963,0.00489000000000000025,0.0086110000000000006,0.00988900000000000022,0.00777900000000000032,111.432450000000003,0.0204000000000000015,0.00980100000000000068,0.00498299999999999958,0.00577300000000000035,11.0659670000000006,0.400000000000000022,0.00691999999999999994,0.0107790000000000004,0.00900600000000000012,0.00980100000000000068,0.0070619999999999997,0.000868999999999999981,7.74469999999999992,0.00980100000000000068,0.00600800000000000032,0,0.00887199999999999968,0.00518300000000000011,0.0143000000000000002,36.2899000000000029,15565.5,0.0112870000000000002,0.0398900000000000018,0.0550000000000000003,0.00503500000000000041,0.00389300000000000019,0.400000000000000022,0.00259200000000000012,0.00222600000000000011,0.00376699999999999995,0.00654599999999999974,0.0445800000000000016,2523.25,0.00316400000000000015,1.22017299999999995,0.0191500000000000004,5.28249999999999975,0.00521700000000000028,0.00241500000000000005,0.00470499999999999998,0.114917000000000005,0.0104950000000000009,0.000695799999999999999,1.37850000000000006,0.00663400000000000014,0.00905899999999999934,0.00658499999999999971,0.00777900000000000032,0.00658499999999999971,0.400000000000000022,0.00162499999999999993,0.0178449999999999998,0.00240099999999999992,0.00703699999999999985,0.00625999999999999994,0.0165499999999999987,0.0407000000000000001,96.4218999999999937,0.0436010000000000009,0.00418400000000000022,0.0325000000000000011,0.0100000000000000002,0.00920100000000000084,0.00315100000000000015,0.00279500000000000018,1.33378100000000011,0.00418400000000000022,0.400000000000000022,1.25029999999999997,0.00338799999999999995,0.00900600000000000012,10.9517644999999995,0.0125740000000000001,0.0941000000000000031,0.0157500000000000001,0.00395999999999999998,0.0038400000000000001,0.00470499999999999998,0.00498299999999999958,0.400000000000000022,0.0407500000000000015,0.00514099999999999974,0.400000000000000022,0.00321200000000000001,0.400000000000000022,0.0130650000000000002,0.400000000000000022,0.00320000000000000015,0.00169899999999999999,0.00920100000000000084,0.0106940000000000004,0.00634499999999999995,0.00518300000000000011,0.0435323589999999996,0.000953999999999999987,0.00980100000000000068,83.4300000000000068,57.1749999999999972,0.0098300000000000002,0.00807700000000000085,0.042712,0.0103000000000000001,0.0070619999999999997,0.00498299999999999958,16308,0.400000000000000022,0.400000000000000022,32.2180000000000035,0.00470499999999999998,0.0104950000000000009,0.00474999999999999988,0.233199999999999991,0.00146999999999999995,0.00376100000000000002,0.00831100000000000068,56.990000000000002,0.0013519999999999999,0.0060809999999999996,24313.7200000000012,0.00831100000000000068,17.8075499999999991,0.00777900000000000032,0.006927,0.0453100000000000031,0.0103000000000000001,0.00790500000000000057,0.00623100000000000043,0.00315100000000000015,0.0861699999999999966,0.0274499999999999987,0.00946199999999999992,4.97044999999999959,0.0385650000000000021,0.0123020000000000004,0.00831100000000000068,0.885388999999999982,0.0344599999999999976,0.0451799999999999979,0.0112870000000000002,6.0282,0.0107790000000000004,0.00521700000000000028,0.00408600000000000022,0.00831100000000000068,0.00489899999999999971,1344.66499999999996,0.0457299999999999998,0.00418400000000000022,0.00875000000000000083,0.0106940000000000004,0.00389300000000000019,0.00791500000000000016,0.00306999999999999981,0.00900600000000000012,0.400000000000000022,0.0106940000000000004,0.0122500000000000005,15493,0.0380380000000000024,0.00418400000000000022,0.0103940000000000005,0.00316400000000000015,0.400000000000000022,0.0047670000000000004,0.0093080000000000003,0.0183999999999999997,57.3340000000000032,0.000828999999999999984,83.9274999999999949,0.00549200000000000035,0.000732299999999999965,148.1721,0.64132699999999998,0.069459999999999994,0.0384999999999999995,0.0115999999999999992,0.0261000000000000017,0.00195699999999999997,0.00380800000000000019,0.00301700000000000015,0.0138999999999999992,0.00680099999999999975,0.0205000000000000009,1031.81600000000003,0.00807700000000000085,0.00831100000000000068,0.0441980000000000012,0.0100000000000000002,0.00658499999999999971,0.0196549999999999989,5.10735000000000028,0.00232299999999999998,0.00980100000000000068,0.400000000000000022,0.00410999999999999994,0.0021540000000000001,1543.46599999999989,1.33069999999999999,0.00700000000000000015,0.00349000000000000005,0.0395749999999999991,0.0100000000000000002,0.027650000000000001,0.00861999999999999919,0.0093080000000000003,0.00389300000000000019,0.00264899999999999988,0.0599999999999999978,0.00759999999999999998,0.0120809999999999997,0.0036979999999999999,0.00508500000000000011,0.00608899999999999979,0.00325399999999999995,0.0112870000000000002,0.00980100000000000068,0.0021540000000000001,0.00680099999999999975,0.0709359999999999991,0.00417299999999999963,0.00149,0.00570000000000000021,0.00887199999999999968,1.34458000000000011,0.00569400000000000028,0.00777900000000000032,1.21833900000000006,0.00900600000000000012,0.0865999999999999964,0.00704199999999999965,0.00547299999999999957,0.00289000000000000021,0.0013519999999999999,0.0070619999999999997,4.62362499999999965,0.604999999999999982,0.00588699999999999987,120.21875,0.00356999999999999982,0.0389250000000000013,23.6937500000000014,0.0318500000000000033,0.0016100000000000001,0.00125000000000000003,0.0100000000000000002,0.00416799999999999983,0.00790500000000000057,0.597099999999999964,0.0137450000000000003,0.00759999999999999998,0.0100000000000000002,0.0103000000000000001,0.00622189999999999983,0.00730000000000000007,0.0120630000000000008,15508.5,0.00317899999999999997,0.0158389999999999989,0.0437900000000000025,0.00600800000000000032,0.0036979999999999999,0.00920100000000000084,0.00634499999999999995,0.0023900000000000002,0.910447000000000006,0.400000000000000022,0.0060359999999999997,0.089700000000000002,0.0130650000000000002,0.0395500000000000018,0.00166000000000000002,0.127200000000000008,0.00107599999999999992,0.00447100000000000015,0.0183999999999999997,0.0274499999999999987,0.0183999999999999997,0.400000000000000022,0.00315100000000000015,0.00608899999999999979,0.00380199999999999982,0.00980100000000000068,0.00316400000000000015,0.0100000000000000002,0.00240099999999999992,0.00693600000000000032,0.00435500000000000036,0.00608899999999999979,0.0548109999999999986,0.0500000000000000028,0.0137450000000000003,0.00137300000000000009,0.0449000000000000024,7.28530999999999995,0.400000000000000022,0.00272799999999999996,0.00900600000000000012,-0.0019,0.00342500000000000009,0.0440600000000000019,0.00634499999999999995,0.0060359999999999997,0.00320000000000000015,0.0850000000000000061,0.00704199999999999965,0.0417500000000000024,0.0452899999999999969,0.00381899999999999991,0.0861699999999999966,0.00634499999999999995,0.0013519999999999999,0.0451006850000000015,0.00489899999999999971,0.00446099999999999969,0.00807700000000000085,0.00622189999999999983,0.00320099999999999985,0.00518300000000000011,0.00900600000000000012,0.00807700000000000085,0.0415000000000000022,0.596019999999999994,0.00568000000000000015,0.124799999999999994,0.0793849999999999972,0.0149377999999999993,0.0447499999999999981,0.0446500000000000022,0.00306799999999999998,0.00622189999999999983,0.00704199999999999965,0.00513499999999999981,0.00748799999999999986,0.400000000000000022,0.00774999999999999994,0.00518300000000000011,0.00504199999999999961,0.400000000000000022,0.0137450000000000003,0.00488499999999999959,0.0393229999999999968,4.5754999999999999,0.00777900000000000032,0.00146699999999999999,0.00831100000000000068,0.00370699999999999979,0.00965000000000000059,0.0121359999999999992,0.00389300000000000019,0.00643499999999999975,0.00730000000000000007,0.00831100000000000068,0.00470499999999999998,0.00965000000000000059,0.0205000000000000009,0.0123990000000000003,0.00965000000000000059,0.0155009999999999992,0.0410179999999999989,0.00704199999999999965,0.400000000000000022,1322.0150000000001,0.00976400000000000011,0.0104630000000000001,0.0391999999999999987,1.1694,0.00876500000000000022,0.00418400000000000022,0.00553299999999999972,0.00240099999999999992,0.00965000000000000059,0.00600800000000000032,19.5319499999999984,0.00742600000000000031,0.400000000000000022,0.00389300000000000019,110.484999999999999,0.0451000000000000012,101.3125,0.400000000000000022,0.00920100000000000084,0.00255000000000000018,0.00790500000000000057,0.0204000000000000015,0.00299499999999999983,0.0021540000000000001,0.0112870000000000002,10.5255124999999996,0.00811399999999999968,0.00699199999999999995,0.400000000000000022,0.0202999999999999986,0.0971000000000000058,0.00611300000000000038,1.18344999999999989,0.00169899999999999999,0.0070619999999999997,18.5472999999999999,0.00418400000000000022,0.0451200000000000004,106.655000000000001,0.00894999999999999962,0.00476000000000000034,0.00521700000000000028,0.0546159999999999979,0.00115200000000000003,0.041255,0.047660000000000001,0.00376100000000000002,0.00920100000000000084,1.34865900000000005,0.00435500000000000036,0.00470499999999999998,0.00700000000000000015,0.00600800000000000032,0.0204000000000000015,0.00459899999999999979,1.15480000000000005,0.00489899999999999971,0.0452746499999999996,0.00976400000000000011,0.0107790000000000004,0.0589751999999999985,0.00900600000000000012,0.00439699999999999987,0.400000000000000022,0.888244000000000034,0.00807700000000000085,0.00622300000000000023,0.0292500000000000017,1.34495000000000009,0.00960399999999999969,0.00513499999999999981,0.00446000000000000042,0.0175499999999999996,0.0575000000000000025,1.33695000000000008,0.00700000000000000015,0.00202099999999999979,0.0178800000000000001,0.00291800000000000002,0.00521700000000000028,0.00342500000000000009,0.0112870000000000002,0.0155999999999999993,0.0143000000000000002,0.0036979999999999999,0.00634499999999999995,0.00342500000000000009,0.00791500000000000016,7.7744099999999996,0.00418400000000000022,0.00460800000000000012,0.00417299999999999963,0.400000000000000022,0.0060359999999999997,0.0013519999999999999,110.173950000000005,0.0499409000000000033,0.00960399999999999969,0.0149377999999999993,0.00578799999999999974,0.00417299999999999963,0.0021540000000000001,0.400000000000000022,107.674999999999997,0,0.00704199999999999965,0.00240099999999999992,0.00518300000000000011,0.0802500000000000019,0.400000000000000022,0.648873999999999951,0.00831100000000000068,10.6206875000000007,0.0515050000000000022,0.000868999999999999981,0.00498299999999999958,0.00389300000000000019,0.00622300000000000023,0.0103000000000000001,0.400000000000000022,0.0134579999999999995,0.056649999999999999,0.0112870000000000002,2518.25,0.400000000000000022,0.00389500000000000002,0.0013519999999999999,0.00980100000000000068,0.0432029999999999983,0.0070619999999999997,0.00700000000000000015,0.102400000000000005,0.0112870000000000002,0.00125000000000000003,83.207499999999996,0.0137450000000000003,0.000673600000000000002,0.00569699999999999981,0.400000000000000022,0.0106940000000000004,0.00518300000000000011,0.00100500000000000003,0.0013519999999999999,1.0605389999999999,0.0112870000000000002,0.00316400000000000015,0.000513000000000000001,0.00342500000000000009,0.0328000000000000028,0.0395000000000000004,0.0385380000000000028,0.00570000000000000021,0.0106940000000000004,0.00380199999999999982,0.00900600000000000012,0.00470499999999999998,0.0060359999999999997,0.00521700000000000028,0.00458699999999999993,0.0103940000000000005,0.0137450000000000003,0.00295100000000000006,0.0250499999999999994,0.0060359999999999997,0.0842999999999999999,0.0051879999999999999,0.400000000000000022,0.00376900000000000021,0.00552900000000000006,0.882503000000000037,0.0383999999999999966,0.400000000000000022,0.0070619999999999997,0.0379999999999999991,0.00777900000000000032,0.400000000000000022,0.00316400000000000015,0.0150989999999999996,0.00320000000000000015,0.588999999999999968,0.00329100000000000009,0.400000000000000022,0.00513499999999999981,0.0060359999999999997,0.00498299999999999958,0.400000000000000022,24.292349999999999,11.0691375000000001,0.00556300000000000024,0.0360899999999999971,0.00202099999999999979,0.00613700000000000009,0.00150000000000000003,83.2175000000000011,0.0120630000000000008,0.00342500000000000009,0.0070619999999999997,6.8838499999999998,0.00222000000000000018,0.00256699999999999984,0.0060359999999999997,0.00514099999999999974,0.0153229999999999998,7.28699999999999992,0.0128470000000000008,0.0127360000000000008,0.0119640000000000007,0.00498299999999999958,0.0115999999999999992,0.0106459999999999992,0.00498299999999999958,0.00418400000000000022,0.0570000000000000021,0.00491799999999999963,0.00717100000000000029,1.06101800000000002,0.0455940000000000026,148.430499999999995,0.0013519999999999999,104.037004999999994,0.0417799999999999977,0.00426800000000000009,0.00731699999999999972,0.400000000000000022,0.0383749999999999994,0.00417299999999999963,0.0650000000000000022,0.000630000000000000026,0.0120630000000000008,0.00426800000000000009,0.00521700000000000028,15543,0.00658499999999999971,0.400000000000000022,0.0013519999999999999,0.0106940000000000004,0.0137450000000000003,0.400000000000000022,0.00634499999999999995,0.00955499999999999926,0.0070619999999999997,0.0222499999999999989,0.0137450000000000003,0.00120100000000000003,0.023099999999999999,0.0274499999999999987,0.0575999999999999984,0.00374399999999999993,0.00600800000000000032,0.00376200000000000015,0.00298000000000000001,0.120700000000000002,0.0156680000000000014,0.0135999999999999992,0.00670000000000000023,0.640599999999999947,0.0106759999999999997,32.1049999999999969,0.0064999999999999997,0.00900600000000000012,0.400000000000000022,0.0070619999999999997,0.00593400000000000004,0.0047670000000000004,0.400000000000000022,0.00666200000000000039,0.0100490000000000006,0.00342500000000000009,0.0175499999999999996,0.00316400000000000015,0.00920100000000000084,0.00160800000000000005,0.0399619999999999975,0.00144800000000000007,0.0228499999999999988,0.0017799999999999999,0.0137450000000000003,0.00759999999999999998,6.42114999999999991,0.0109,142.479199999999992,0.400000000000000022,0.400000000000000022,0.00704199999999999965,0.00316400000000000015,0.00518199999999999997,0.00446099999999999969,0.00900600000000000012,32.1715000000000018,0.0446500000000000022,0.00898299999999999967,0.0112870000000000002,1.07336049999999994,17.8978499999999983,0.0045779999999999996,0.0204000000000000015,0.0103960000000000007,0.0265500000000000007,0.00790500000000000057,0.00418400000000000022,0.0275500000000000016,0.0135999999999999992,0.00353000000000000015,0.0244000000000000015,0.00980199999999999995,0.00700000000000000015,0.00980100000000000068,0.00498299999999999958,0.0155999999999999993,0.00518300000000000011,0.0345499999999999974,0.0060359999999999997,0.00316400000000000015,0.00648599999999999958,0.0390799999999999967,0.0372250000000000011,1.22005300000000005,7.71929999999999961,0.0582999999999999977,0.0438800000000000023,0.00521700000000000028,0.00174000000000000001,0.0112870000000000002,0.00900600000000000012,0.646739999999999982,0.0137999999999999998,0.00352199999999999996,0.0100000000000000002,1347.41499999999996,0.00980100000000000068,0.00521700000000000028,0.400000000000000022,0.00791500000000000016,5.65754999999999963,0.0104250000000000002,10.9410980000000002,0.0426590000000000025,0.0473500000000000032,0.00900600000000000012,0.0118650000000000005,0.00316400000000000015,0.00521700000000000028,0.00691999999999999994,10.8454599999999992,0.00439699999999999987,0.00629199999999999985,0.00634499999999999995,10.9625500000000002,0.00534499999999999992,17.7120500000000014,0.00518300000000000011,0.00470499999999999998,31.1419999999999995,0.400000000000000022,0.00960399999999999969,0.0214999999999999983,0.00395699999999999958,0.0117289999999999998,0.0060359999999999997,0.400000000000000022,0.400000000000000022,0.00342500000000000009,0.00790500000000000057,0.00316400000000000015,0.00289000000000000021,0.0137450000000000003,0.0303499999999999985,-0.00224999999999999983,0.0402500000000000011,1340.22000000000003,0.0527800000000000005,0.0021540000000000001,0,0.00337799999999999993,0.0560500000000000026,5.30654999999999966,0.00704199999999999965,0.400000000000000022,0.00518300000000000011,0.00521700000000000028,0.400000000000000022,0.855442000000000036,0.0530583000000000027,0.00634499999999999995,0.00807700000000000085,0.00634499999999999995,0.00534499999999999992,11.0626204999999995,1351.61500000000001,0.0445699999999999985,0.00877400000000000055,0.00498299999999999958,0.0333299999999999985,0.0021540000000000001,0.0291399999999999992,0.0069769999999999997,0.0156680000000000014,0.00380199999999999982,0.00704199999999999965,0.00470499999999999998,0.00861999999999999919,0.00456499999999999961,24201.2750000000015,0.00759999999999999998,0.0100000000000000002,0.00342500000000000009,0.00417200000000000036,0.0317100000000000021,0.00704199999999999965,0.00831100000000000068,0.0246000000000000003,5.10735000000000028,0.400000000000000022,0.00418400000000000022,0.00489899999999999971,0.0265500000000000007,0.00470499999999999998,0.0138999999999999992,0.0269999999999999997,0.00418400000000000022,0.00980199999999999995,0.00153300000000000007,0.00807700000000000085,0.0146125000000000005,0.023099999999999999,0.400000000000000022,0.0070619999999999997,0.400000000000000022,0.0021540000000000001,5.31749999999999989,0.0531560000000000019,0.400000000000000022,0.0416499999999999995,0.00518300000000000011,0.400000000000000022,0.0013519999999999999,0.400000000000000022,0.0106940000000000004,0.0037829999999999999,0.0448399999999999979,0.0070619999999999997,0.0106940000000000004,0.00489899999999999971,0.00342500000000000009,0.00498299999999999958,0.0536618999999999985,0.00894999999999999962,0.400000000000000022,0.006927,0.00460499999999999972,0.0264999999999999993,0.0155999999999999993,0.0177999999999999999,0.400000000000000022,0.0178850000000000016,0,0.00691999999999999994,0.00691999999999999994,0.59428700000000001,0.0106809999999999995,0.400000000000000022,0.00374399999999999993,0.00470499999999999998,0.00391799999999999961,0.00534999999999999972,2108.63999999999987,0.0386799999999999991,7.14275000000000038,0.00518199999999999997,0.00446099999999999969,1.22080000000000011,0.00807700000000000085,0.0021540000000000001,0.0306750000000000009,0.0382499999999999993,0.00980199999999999995,0.0204000000000000015,0.0274499999999999987,56.9825000000000017,0.00277500000000000012,0.00900600000000000012,1.60309999999999997,0.00426800000000000009,0.0100499999999999999,0.000630000000000000026,0.00801699999999999982,0.400000000000000022,0.00290600000000000016,0.0107790000000000004,0.0303499999999999985,0.037199999999999997,0.0534499999999999975,0.0536999999999999977,0.400000000000000022,0.00569699999999999981,0.0880999999999999978,0.00335000000000000011,0.035299999999999998,0.00161999999999999991,146.400499999999994,0.0112870000000000002,0.00470499999999999998,0.400000000000000022,0.00831100000000000068,0.00470499999999999998,0.00700000000000000015,0.0155999999999999993,0.00658499999999999971,0.00104009999999999997,32.232999999999997,0.400000000000000022,0.0060359999999999997,0.00115200000000000003,0.00153600000000000004,0.0070619999999999997,0.0191500000000000004,0.0036979999999999999,1.36568800000000001,0.00704199999999999965,0.00730000000000000007,0.400000000000000022,7.34804999999999975,0.0114219999999999999,0.00807500000000000058,0.596014000000000044,1.22048800000000002,7.80015000000000036,0.0156680000000000014,0.75824999999999998,0.400000000000000022,0.0104950000000000009,0.0485000000000000014,0.0156680000000000014,0.104999999999999996,0.00704199999999999965,0.400000000000000022,0.00417299999999999963,0.400000000000000022,0.00691999999999999994,0.0357200000000000017,0.00159000000000000005,0.00460800000000000012,0.0069750000000000003,0.0709000000000000047,0.0086110000000000006,0.00110099999999999998,0.0198359999999999995,56.9849999999999994,0.00900600000000000012,0.0334049999999999972,0.0440600000000000019,0.00801699999999999982,0.0107790000000000004,-5.00000000000000024e-05,0.0112870000000000002,0.00418400000000000022,0.0444700000000000026,0.0403149999999999967,0.400000000000000022,0.00251600000000000001,0.400000000000000022,0.400000000000000022,0.0478700000000000028,0.00608899999999999979,0.00666200000000000039,7.77815999999999974,0.00861300000000000086,0.00120199999999999994,0.0110919999999999994,0.00988900000000000022,0.00230700000000000002,0.0021540000000000001,0.400000000000000022,0.00122360000000000003,0.023099999999999999,0.00418400000000000022,0.0288199999999999984,0.0257000000000000006,0.023099999999999999,0.0147309999999999993,0.0127840000000000002,0.0384999999999999995,0.00316400000000000015,0.000755000000000000029,0.803751499999999952,0.00608899999999999979,0.000822999999999999947,0.0045779999999999996,0.00446099999999999969,0.023099999999999999,0.0413559999999999969,7.30304999999999982,0.0120630000000000008,0.0100000000000000002,0.714350000000000041,0.00205499999999999997,0.00459899999999999979,0.00955499999999999926,0.400000000000000022,10.8134999999999994,1.22279500000000008,0.0478179999999999994,0.0107790000000000004,1.36197499999999994,1.34882900000000006,0.00349000000000000005,0.0492000000000000007,0.0070619999999999997,0.400000000000000022,0.400000000000000022,0.00426800000000000009,0.0156680000000000014,0.00439699999999999987,0.0013519999999999999,0.0191500000000000004,0.00342500000000000009,0.400000000000000022,0.400000000000000022,0.00997499999999999949,0.0451599999999999988,10.8113209999999995,0.00831100000000000068,7.79213600000000017,0.0106940000000000004,0.00676600000000000031,0.100500000000000006,0.00569699999999999981,0.00807700000000000085,0.0372999999999999998,0.0106940000000000004,0.0060359999999999997,0.0544999999999999998,57.0949999999999989,0.00598399999999999974,0.400000000000000022,0.400000000000000022,0.0369999999999999982,0.0105179999999999996,7.80785000000000018,0.400000000000000022,0.0111749999999999992,0.0070619999999999997,0.00732700000000000018,0.00691999999999999994,0.0531309999999999977,0.0413400000000000017,0.00737699999999999988,0.0115999999999999992,0.0154999999999999999,0.0082106999999999996,1.24225000000000008,0.00608899999999999979,0.0130650000000000002,0.0985000000000000042,0.0352499999999999966,0.00831100000000000068,0.00160000000000000008,0.0405500000000000027,0.00634499999999999995,0.0218560000000000004,1.23094999999999999,0.00704199999999999965,0.0013519999999999999,4.61150000000000038,0.00658499999999999971,32.1060000000000016,0.0027160000000000001,0.05092,0.0357499999999999971,0.0135999999999999992,0.00144899999999999998,0.0021540000000000001,0.00759999999999999998,15490,0.00319900000000000002,0.0124700000000000002,0.400000000000000022,0,0.00320099999999999985,0.00498299999999999958,0.00418400000000000022,0.0532004999999999978,0.00831100000000000068,0.0420799999999999993,0.649034499999999959,0.00631400000000000017,0.00622189999999999983,500.990000000000009,0.0568099999999999994,0.00337799999999999993,0.400000000000000022,0.00342500000000000009,0.00085400000000000005,0.0928999999999999965,0.00634499999999999995,-0.00350000000000000007,0.0070619999999999997,0.00190900000000000011,1.07500499999999999,0.00505099999999999993,0.00365199999999999986,0.00144800000000000007,0.0021540000000000001,0.00498299999999999958,0.0840999999999999942,0.00790500000000000057,0.400000000000000022,1.21824899999999992,0.0070619999999999997,0.0306699999999999993,0.0512499999999999969,5.07709999999999972,0.005241,0.0107790000000000004,0.400000000000000022,0.400000000000000022,0.0529493350000000002,0.0621874999999999997,0.00774999999999999994,0,0.642599999999999949,0.400000000000000022,0.0135999999999999992,0.0013519999999999999,0.0155999999999999993,0.00777900000000000032,0.0155999999999999993,0.00446099999999999969,56.9849999999999994,7.31264999999999965,0.0155999999999999993,0.00900600000000000012,0.00342500000000000009,0.091499999999999998,0.00480500000000000024,146.783899999999988,0.00417299999999999963,0.400000000000000022,0.0070619999999999997,0.00418400000000000022,0.00700000000000000015,0.00569699999999999981,0.102400000000000005,57.0874999999999986,0.0459999999999999992,0.00418400000000000022,0.0060359999999999997,0.400000000000000022,0.00498299999999999958,0.00617869999999999964,83.207499999999996,0.0546149999999999969,0.00704199999999999965,0.0391499999999999973,0.0112870000000000002,0.0376879999999999993,0.00965000000000000059,4.69000000000000039,0.00737699999999999988,0.00320099999999999985,0.0430400000000000019,0.400000000000000022,0.00700000000000000015,0.0160000000000000003,0.00807700000000000085,0.0425099999999999992,0.0064999999999999997,0.0060359999999999997,0.00110099999999999998,0.400000000000000022,0.00241200000000000008,7.36704999999999988,0.0100000000000000002,0.0155009999999999992,0.00710899999999999987,0.0352200000000000013,0.0138999999999999992,0.00474999999999999988,0.00446099999999999969,0.00691999999999999994,0.00737699999999999988,0.0013519999999999999,0.00518300000000000011,0.00162999999999999994,0.00600800000000000032,0.0013519999999999999,4.56462500000000038,0.00759999999999999998,0.0529999999999999985,0.0060359999999999997,0.00418400000000000022,56.9849999999999994,0.400000000000000022,0.0135999999999999992,0.00807700000000000085,0.00110300000000000003,0.0182100000000000005,0.110000000000000001,5.12495000000000012,0.00920100000000000084,144.04140000000001,0.0155999999999999993,0.0382750000000000035,0.0107790000000000004,0.00282400000000000012,0,0.0589200000000000002,0.0458000000000000004,0.00453499999999999997,0.00292500000000000008,0.0214999999999999983,0.0303749999999999992,0.0106940000000000004,0.911788000000000043,0.0013519999999999999,0.00320099999999999985,0.00503400000000000028,6.80924999999999958,0.0117959999999999992,0.00912899999999999996,0.00346299999999999993,0.0056550000000000003,0.00160600000000000001,0.00459899999999999979,0.00398999999999999962,0.906556499999999987,0.000435000000000000003,17.6214499999999994,0.0113869999999999996,0.00634499999999999995,0.0345999999999999988,0.00634499999999999995,0.0354000000000000009,0.00807700000000000085,0.00520599999999999969,0.0120630000000000008,0.0086110000000000006,0.0265400000000000011,0.0313999999999999974,0.00147999999999999998,0.00759999999999999998,0.0183999999999999997,0.0112870000000000002,0.00777900000000000032,0.00731699999999999972,0.0013519999999999999,0.400000000000000022,0.0116500000000000006,0.033500000000000002,0.0552257999999999985,0.0060359999999999997,1.21857949999999993,0.00251600000000000001,0.0443360000000000004,0.0070619999999999997,0.00980100000000000068,0.00489899999999999971,0.0449000000000000024,0.00199899999999999991,0,31.597999999999999,0.0110919999999999994,0.247400000000000009,0.0112870000000000002,0.0135999999999999992,0.00134099999999999996,0.0147309999999999993,0.00480500000000000024,96.3225000000000051,0.00374399999999999993,0.000699999999999999993,0.0532499999999999987,0.00195699999999999997,0.00174599999999999994,102.167599999999993,0.400000000000000022,0.00980100000000000068,0.00980100000000000068,0.400000000000000022,0.00790500000000000057,0.0127250000000000002,0.110380000000000006,0.00980100000000000068,0.400000000000000022,0.00980100000000000068,0.400000000000000022,11.0576260000000008,0.0261000000000000017,0.400000000000000022,0.0060359999999999997,0.00569699999999999981,0.0408999999999999989,0.00275900000000000017,0.00900600000000000012,0.00459899999999999979,0.0013519999999999999,0.00710899999999999987,0.400000000000000022,0.400000000000000022,0.00161999999999999991,0.00777900000000000032,0.0136500000000000007,0.0115999999999999992,0.00965000000000000059,0.00658499999999999971,4.67999999999999972,0.0107790000000000004,0.400000000000000022,0.00364000000000000001,1.0637350000000001,0.0100000000000000002,148.935000000000002,0.0470700000000000007,0.00731699999999999972,0.00459899999999999979,0.00658499999999999971,0.400000000000000022,0.00521700000000000028,0.400000000000000022,10.8770500000000006,0.00831100000000000068,0.00831100000000000068,0.00700000000000000015,0.00704199999999999965,0.00316400000000000015,2523.92000000000007,0.0544999999999999998,1.07185550000000007,0.00316400000000000015,0.00551100000000000027,0.00206300000000000016,0.0421100000000000016,0.0100000000000000002,0.400000000000000022,0.00831100000000000068,0.00704199999999999965,0.00171100000000000006,18.9387000000000008,0.0022030000000000001,0.00521700000000000028,143.165500000000009,0.00320099999999999985,0.400000000000000022,10.9770974999999993,0.0112870000000000002,0.400000000000000022,0.00521700000000000028,24273.5600000000013,0.00498299999999999958,0.00777900000000000032,0.00700000000000000015,0.0106940000000000004,0.0021540000000000001,0.00342500000000000009,0.00360200000000000017,0.400000000000000022,0.0013519999999999999,0.0585000000000000034,0.0204000000000000015,4.62575000000000003,0.00691999999999999994,0.00965000000000000059,0.00342999999999999989,0.671699999999999964,0.00446099999999999969,0.0449900000000000022,10.9883430000000004,0.00980100000000000068,0.00115200000000000003,0.0112870000000000002,0.0455699999999999994,0.00980100000000000068,0.00700000000000000015,0.00570000000000000021,0.00337399999999999983,0.0060359999999999997,1.12521049999999989,0.100129999999999997,0.0107360000000000008,0.00600800000000000032,0.00980100000000000068,0.00711,0.0204000000000000015,0.400000000000000022,0.0013519999999999999,0.00704199999999999965,0.00801699999999999982,0.0156680000000000014,0.00691999999999999994,0.00730000000000000007,22.3224499999999999,0.0112870000000000002,0.0048139999999999997,0.0137450000000000003,0.00320000000000000015,0.00316400000000000015,0.00980499999999999948,0.00636700000000000026,0.00980100000000000068,0.00569400000000000028,0.400000000000000022,0.0386000000000000024,0.00615499999999999988,0.400000000000000022,0.00547800000000000023,0.00658499999999999971,0.400000000000000022,0.580180999999999947,0.00622189999999999983,0.0157009999999999997,0.0277999999999999983,0.00777900000000000032,0.00897200000000000081,0.00381599999999999995,0.0380380000000000024,0.0887499999999999956,0.565520000000000023,0.00498299999999999958,0.00670000000000000023,0.400000000000000022,0.0155499999999999996,0.00700000000000000015,0.0432000000000000023,31.8670000000000009,1.34545000000000003,0.00622189999999999983,0.00489899999999999971,0.00635799999999999994,0.0263000000000000005,10.7949999999999999,0.00691999999999999994,0.0034160000000000002,0.0395000000000000004,0.039800000000000002,0.0374000000000000027,0.00518300000000000011,-0.00444999999999999996,0.0107790000000000004,0.595835000000000004,0.00790500000000000057,0.57503700000000002,0.00418400000000000022,0.00980100000000000068,35.5200000000000031,0.00213400000000000005,0.00831100000000000068,0.0116500000000000006,0.400000000000000022,0.00634499999999999995,0.0013519999999999999,0.00759999999999999998,0.00380199999999999982,0.0157009999999999997,0.0100000000000000002,0.053949999999999998,4.82859999999999978,0.00777900000000000032,0.400000000000000022,0.00900600000000000012,0.00439699999999999987,0.00442299999999999985,0.0407000000000000001,0.400000000000000022,4.69000000000000039,0.00704199999999999965,0.00521700000000000028,0.00435500000000000036,0.00316400000000000015,0.400000000000000022,0.00807500000000000058,0.00418400000000000022,0.400000000000000022,0.0013519999999999999,0.0175499999999999996,0.0100000000000000002,0.00600800000000000032,0.00777900000000000032,0.0204000000000000015,0.00496100000000000013,0.00704199999999999965,0.0364000000000000018,0.0046709999999999998,0.400000000000000022,0.00988900000000000022,0.0070619999999999997,0.000662000000000000045,0.0401999999999999996,0.0395199999999999996,0.00980499999999999948,0.0156680000000000014,0.400000000000000022,0.00395199999999999978,0.00894999999999999962,0.400000000000000022,0.551350000000000007,0.00342500000000000009,0.00807700000000000085,0.0284000000000000016,0.00777900000000000032,0.400000000000000022,0.00518300000000000011,0.00370000000000000016,0.400000000000000022,0.0060359999999999997,0.00342500000000000009,0.0415000000000000022,0.0013519999999999999,0.0135999999999999992,0.0112870000000000002,0.0106940000000000004,0.00498299999999999958,0.400000000000000022,0.0258,0.400000000000000022,0.0107790000000000004,0.00608899999999999979,0.00410400000000000001,0.0396019999999999983,0.00342500000000000009,0.00418400000000000022,301.180000000000007,7.82102200000000014,0.641965000000000008,0.400000000000000022,0.0190999999999999989,0.0175499999999999996,21.1819500000000005,0.00199899999999999991,0.037199999999999997,0.00410899999999999981,0.645283999999999969,0.00948000000000000058,0.00509100000000000004,0.0572974730000000015,0.0106940000000000004,31.3530000000000015,5.16375000000000028,0.00985100000000000038,0.400000000000000022,0.400000000000000022,0.400000000000000022,0.00111000000000000009,0.00112600000000000005,0.00494200000000000021,0.00831100000000000068,100.265000000000001,0.0384250000000000008,0.0460905959999999976,1.34762899999999997,0.0511819999999999983,0.0428629999999999983,0.400000000000000022,0.0106940000000000004,0.0103940000000000005,0.00282400000000000012,0.400000000000000022,0.0414500000000000007,0.00199899999999999991,0.00417299999999999963,0.00339999999999999981,0.0036979999999999999,0.00521700000000000028,0.000513000000000000001,0.00777399999999999966,0.00380199999999999982,1.34516999999999998,0.00631400000000000017,0.164899999999999991,0.0021540000000000001,0.0110919999999999994,0.00211699999999999996,0.00461600000000000031,4.59262499999999996,0.00316400000000000015,0.00389300000000000019,0.0021540000000000001,0.00365700000000000009,0.00405400000000000031,0.00730000000000000007,0.0137999999999999998,0.0106940000000000004,83.4475005000000039,0.00900600000000000012,123.658900000000003,0.0396130000000000024,0.00900600000000000012,0.0103000000000000001,0.400000000000000022,0.00790399999999999957,0.00777900000000000032,0.0130650000000000002,5.00574999999999992,242.629999999999995,0.00342500000000000009,0.00831100000000000068,0.00171100000000000006,0.00980100000000000068,0.00691999999999999994,0.0842999999999999999,0.0548000000000000015,0.00513499999999999981,0.400000000000000022,0.00920100000000000084,0.00777900000000000032,0.400000000000000022,0.0093080000000000003,0.0060359999999999997,0.00418400000000000022,0.0393150000000000027,0.00235099999999999979,0.400000000000000022,0.0116500000000000006,0.0535230000000000011,0.0106940000000000004,0.00417299999999999963,0.0592673000000000019,0.00521700000000000028,0.0183999999999999997,0.00521700000000000028,0.0454999999999999988,0.0565273000000000025,0.0952000000000000068,0.0013519999999999999,0.00518300000000000011,0.00518300000000000011,0.0156680000000000014,84.3774999999999977,0.0274499999999999987,0.0135999999999999992,0.00470499999999999998,0.0153433000000000007,0.00813000000000000007,0.0111310000000000003,7.82000000000000028,-0.00139999999999999999,0.00608899999999999979,0.0544400000000000023,0.0928999999999999965,0.00274999999999999984,0.0103000000000000001,0.400000000000000022,7.10555000000000003,0.00175399999999999992,0.0156680000000000014,0.0205000000000000009,0.00980100000000000068,0.400000000000000022,0.00777900000000000032,2525.75,0.00417299999999999963,0.00521700000000000028,0.0325500000000000025,0.00729400000000000014,0.400000000000000022,0.00807700000000000085,0.00700000000000000015,0.0013519999999999999,0.00980100000000000068,0.000513000000000000001,0.00732700000000000018,0.00759999999999999998,0.78117700000000001,0.053949999999999998,0.0173999999999999988,0.00240099999999999992,0.400000000000000022,0.00831100000000000068,0.400000000000000022,0.00459899999999999979,0.00900600000000000012,0.00335499999999999991,0.400000000000000022,0.0120630000000000008,0.0106459999999999992,0.00418400000000000022,0.00551100000000000027,0.00316400000000000015,0.000699999999999999993,0.00417299999999999963,0.114900000000000002,1.34665149999999989,0.00389300000000000019,0.400000000000000022,0.00831100000000000068,0.00658499999999999971,0.0021050000000000001,0.400000000000000022,0.0309299999999999992,0.00147999999999999998,0.0390700000000000006,0.0100000000000000002,0.400000000000000022,0.0283249999999999995,84.7775000000000034,0.00920100000000000084,0.00577399999999999962,0.0214999999999999983,0.0013519999999999999,0.00518300000000000011,0.00250700000000000011,0.00498299999999999958,0.0100000000000000002,0.0317650000000000016,0.0214999999999999983,0.0112870000000000002,145.932199999999995,0.00691999999999999994,0.00240099999999999992,0.00634499999999999995,0.00498299999999999958,0.00807700000000000085,0.0433624999999999983,0.0141949999999999993,0.00478999999999999999,0.00704199999999999965,0.0438730000000000023,7.78057999999999961,0.00965000000000000059,0.00235199999999999992,0.00473300000000000023,0.00470499999999999998,0.400000000000000022,0.0407100000000000031,1327.02500000000009,0.0714000000000000051,0.00521700000000000028,0.00747000000000000008,0.911121999999999987,0.400000000000000022,0.400000000000000022,0.000783900000000000026,0.00965000000000000059,0.00273600000000000015,57,0.00730000000000000007,7.29919999999999991,0.0174500000000000002,0.00389300000000000019,0.00900600000000000012,0.00569400000000000028,0.0393000000000000016,0.0102100000000000003,0.00633199999999999995,0.0069769999999999997,0.400000000000000022,1332.74499999999989,0.0120630000000000008,0.00980100000000000068,0.00410899999999999981,0.00235199999999999992,0.00634499999999999995,0.0364130000000000009,0.134399999999999992,1.60301999999999989,0.00508500000000000011,0.00286600000000000006,0.00700000000000000015,0.000822999999999999947,0.00352199999999999996,0.400000000000000022,0.00389300000000000019,0.0100000000000000002,4.83025000000000038,0.00319900000000000002,0.0070619999999999997,0.0137450000000000003,0.0070619999999999997,0.0100000000000000002,0.0906,0.0013519999999999999,0.00335000000000000011,0.0161509999999999987,0.400000000000000022,0.0450580000000000008,0.0070619999999999997,0.595999999999999974,0.0205000000000000009,0.0147309999999999993,0.0060359999999999997,0.0153229999999999998,0.018435,0.595711499999999949,0.00900600000000000012,0.00569400000000000028,0.00980100000000000068,0.00655000000000000027,0.00658499999999999971,4273.52999999999975,0.0430800000000000002,0.00731699999999999972,0.0115999999999999992,136.997399999999999,0.400000000000000022,0.0106940000000000004,0.0130650000000000002,0.00759999999999999998,0.0300099999999999985,0.00807700000000000085,0.00831100000000000068,0.400000000000000022,0.400000000000000022,0.00807500000000000058,0.557450000000000001,0.0364130000000000009,0.0517499999999999974,0.00342500000000000009,0.00238300000000000014,0.00704199999999999965,2101.11000000000013,0.0120630000000000008,0.0468500000000000028,0.0013519999999999999,0.00704199999999999965,0.00831100000000000068,0.0205000000000000009,0.00521700000000000028,112.15625,0.00704199999999999965,0.00342500000000000009,0.0060359999999999997,0.0112870000000000002,0.0021540000000000001,0.00965000000000000059,0.00908600000000000033,0.000819999999999999982,0.400000000000000022,0.00898000000000000013,0.0229000000000000002,0.00747000000000000008,0.0017799999999999999,0.0192949999999999997,1.21829199999999993,0.0107790000000000004,4.66959999999999997,0.00342500000000000009,0.00342500000000000009,0.00980100000000000068,0.00807700000000000085,0.612199999999999966,0.00190799999999999997,0.0137450000000000003,0.0060359999999999997,0.00555999999999999984,0.400000000000000022,0.00174000000000000001,0.0060359999999999997,10.9182000000000006,0.400000000000000022,0.0050930000000000003,0.400000000000000022,0.0415249999999999994,0.00521700000000000028,0.00703699999999999985,0.00245999999999999995,0.0452699999999999977,0.400000000000000022,0.0070619999999999997,0.00784999999999999934,0.000910000000000000002,0.0429550000000000001,0.000868999999999999981,0.0729999999999999954,0.0528100000000000028,0.00777900000000000032,0.00470499999999999998,0.00434100000000000024,83.5400000000000063,1.09135650000000006,0.000949999999999999998,17.4825000000000017,0.0100000000000000002,0.00965000000000000059,0.0602999999999999994,0.00334000000000000009,0.00335000000000000011,1.06588499999999997,0.00875000000000000083,0.052049999999999999,0.400000000000000022,11.0437999999999992,0.400000000000000022,1.2184124999999999,15522.5,0.896943500000000005,0.0942999999999999949,0.0273000000000000013,0.00342500000000000009,0.00470499999999999998,0.00844600000000000038,0.00965000000000000059,0.0205000000000000009,0.0168999999999999984,17.9841499999999996,0.00955499999999999926,0.400000000000000022,99.1225000000000023,0.0028549999999999999,0.00470499999999999998,1.34795700000000007,0.400000000000000022,0.0390399999999999983,0.00658499999999999971,0.00777900000000000032,0.0112870000000000002,0.00777900000000000032,0.036200000000000003,0.00894999999999999962,1351.16499999999996,1.21946050000000006,0.00648099999999999978,0.0503460000000000019,0.400000000000000022,0.400000000000000022,0.000670000000000000023,0.00439699999999999987,0.006927,0.400000000000000022,0.0155499999999999996,0.00418400000000000022,36.3449000000000026,0.0112870000000000002,0.00705099999999999998,0.00976400000000000011,0.00631400000000000017,0.00250700000000000011,0.0944500000000000062,0.00791500000000000016,0.000903000000000000048,0.400000000000000022,0.002529,0.00513499999999999981,0.0156680000000000014,0.00251899999999999997,0.00932400000000000069,0.0079019999999999993,0.0060359999999999997,0.00521700000000000028,0.00319600000000000006,0.00831100000000000068,0.00608899999999999979,0.400000000000000022,1.34925000000000006,0.0415249999999999994,0.0379999999999999991,0.0347500000000000031,2525.75,56.9849999999999994,0.00680099999999999975,0.00498299999999999958,32.2359999999999971,0.0398350000000000024,0.0013519999999999999,0.0013519999999999999,0.028330000000000001,4.97044999999999959,0.00320099999999999985,0.0500000000000000028,0.0133320000000000001,0.00802899999999999968,0.400000000000000022,0.00417299999999999963,0.00676600000000000031,0.00569699999999999981,0.00505099999999999993,0.00784999999999999934,0.00417299999999999963,0.400000000000000022,0.00480799999999999977,0.0465800000000000033,0.00249000000000000003,0.400000000000000022,0.00320000000000000015,0.00397600000000000037,0.00704199999999999965,106.325050000000005,0.00910000000000000045,0.0100000000000000002,0.00730000000000000007,0.0112870000000000002,0.0573999999999999996,0.00641200000000000016,0.00536100000000000031,0.0430400000000000019,0.00578799999999999974,0.0156680000000000014,0.00980100000000000068,0.00363800000000000017,0.400000000000000022,0.00296700000000000002,0.909389499999999962,0.0833300000000000013,0.0013519999999999999,0.00831100000000000068,0.0060359999999999997,0.0344599999999999976,0.0428499999999999992,0.00634499999999999995,0.00295100000000000006,0.0372999999999999998,0.0093080000000000003,0.0274499999999999987,0.0086110000000000006,0.0106940000000000004,0.00847499999999999989,0.00658499999999999971,0.0110919999999999994,1349.46499999999992,0.00777900000000000032,0.0138999999999999992,0.0070619999999999997,0.00355799999999999996,0.00485200000000000041,0.00742600000000000031,0.0508499999999999994,0.0107250000000000002,0.0120630000000000008,0.00316400000000000015,0.400000000000000022,-0.00350000000000000007,0.0347500000000000031,0.00418400000000000022,0.400000000000000022,0.00898299999999999967,100.047899999999998,0.00900600000000000012,0.00831100000000000068,0.00339999999999999981,0.00920100000000000084,0.0102000000000000007,0.00710899999999999987,0.00980199999999999995,0.0157500000000000001,0.00169899999999999999,0.0466400000000000009,0.0274499999999999987,0.00980499999999999948,0.00498299999999999958,0.00417299999999999963,0.0125000000000000007,0.00203399999999999978,0.400000000000000022,0.0945499999999999952,0.400000000000000022,0.00551100000000000027,0.400000000000000022,0.00790500000000000057,0.00680099999999999975,0.00192000000000000005,0.00250100000000000018,0.0100000000000000002,0.0183999999999999997,0.00418400000000000022,0.0120630000000000008,0.00666200000000000039,2117.09999999999991,0.00200000000000000004,0.00622189999999999983,0.00570000000000000021,0.00240099999999999992,0.00272799999999999996,0.0382629999999999984,0.00342500000000000009,0.400000000000000022,0.0347500000000000031,0.00820000000000000069,0.00169899999999999999,0.0354999999999999968,0.00637099999999999993,0.00391799999999999961,0.00275900000000000017,0.00521700000000000028,-0.00300000000000000006,0.0530899999999999983,0.103099999999999997,0.101300000000000001,0.00316400000000000015,0.00418400000000000022,0.00513499999999999981,0.00411300000000000034,0.00894999999999999962,0.400000000000000022,4.64695000000000036,0.00600000000000000012,0.00474999999999999988,0.0106940000000000004,0.00513499999999999981,113.450000000000003,0.0359500000000000028,0.00700200000000000041,0.00449000000000000007,5.25094999999999956,0.0013519999999999999,1.22062000000000004,0.00342500000000000009,0.00965000000000000059,0.400000000000000022,0.00165599999999999992,0.00521700000000000028,0.00955499999999999926,0.0070619999999999997,0.00608299999999999987,0.0332599999999999979,0.0421419999999999989,0.0112870000000000002,0,0.0261000000000000017,0.400000000000000022,0.00280700000000000003,0.00995000000000000051,0.400000000000000022,0.00418400000000000022,0.00965000000000000059,0.0363850000000000007,0.00197999999999999999,0.000960000000000000024,0.00597400000000000014,0.00110099999999999998,0.00704199999999999965,0.00731699999999999972,0.00320000000000000015,0.00969199999999999923,0.00807700000000000085,0.00658499999999999971,0.00777900000000000032,0.00190599999999999993,0.00144800000000000007,0.00994100000000000018,0.0103140000000000003,0.00470499999999999998,0.00777900000000000032,0.0070619999999999997,0.00847499999999999989,57.0249999999999986,0.0214999999999999983,0.876963999999999966,0.00512799999999999975,0.00798800000000000031,0.00764900000000000042,0.00807700000000000085,0.0112870000000000002,0.0640000000000000013,0.00213500000000000018,0.00418400000000000022,0.400000000000000022,0.0156680000000000014,0.00146999999999999995,0.0040159999999999996,0.0048139999999999997,0.00232000000000000001,0.00417299999999999963,0.0531259999999999996,0.00312999999999999997,0.0156680000000000014,0.00587299999999999975,0.0422840000000000021,0.0100000000000000002,0.0100000000000000002,0.0950000000000000011,0.00712699999999999965,0.00498299999999999958,0.00155999999999999997,0.400000000000000022,2120.71500000000015,0.00634499999999999995,0.0112870000000000002,0.00807500000000000058,0.0106940000000000004,0.00634499999999999995,0.00648599999999999958,0.00658499999999999971,0.400000000000000022,0.0865999999999999964,0.00587299999999999975,0.00316400000000000015,0.0577654999999999974,0.00704199999999999965,0.00417299999999999963,0.400000000000000022,0.0372999999999999998,0.00509100000000000004,0.00608899999999999979,0.00112600000000000005,0.869373500000000021,7.78823000000000043,0.400000000000000022,0.00521700000000000028,31.847999999999999,0.0138999999999999992,0.400000000000000022,1.35969999999999991,0.00470499999999999998,0.00521700000000000028,0.0115999999999999992,1.24514999999999998,0.0590221999999999969,0.400000000000000022,0.0536297999999999983,0.00446500000000000022,0.0013519999999999999,0.00342500000000000009,0.0100000000000000002,0.0426500000000000004,0.00676600000000000031,0.400000000000000022,0.0367499999999999979,0.00337799999999999993,0.6410825,1.08711099999999994,0.0086110000000000006,0.0127250000000000002,0.00440199999999999966,0.0390210000000000001,0.0332399999999999987,0.0121359999999999992,0.0100000000000000002,1.22696249999999996,0.0534499999999999975,0.692400000000000015,0.00264500000000000022,0.00894999999999999962,0.00337799999999999993,32.1715000000000018,0.0337850000000000025,0.000840000000000000035,0.0137450000000000003,0.00988900000000000022,7.80458799999999986,0.00498299999999999958,0.00704199999999999965,0.011103,0.0103000000000000001,0.59600949999999997,0.00418400000000000022,0.00163100000000000007,0.00658499999999999971,0.00980199999999999995,0.0602999999999999994,1.35142549999999995,0.00391799999999999961,0.00372999999999999981]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_SCALARS_0": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "QUOTES_SCALARS_0",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "DATA" : "QUOTES_SCALARS_DATA_0"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.HKD-HONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["4Y","6M","1M","5Y","2Y","9M","3Y","3M","7Y","10Y","1Y"],
    "COLUMNS" : ["10Y","4Y","2Y","5Y","7Y","3Y","1Y"],
    "VALUES" : [
      [0.0108330000000000006,0.0120859999999999995,0.0126949999999999997,0.0117560000000000008,0.0113729999999999994,0.0122290000000000003,0.0128039999999999994],
      [0.0136550000000000005,0.0130899999999999992,0.0137199999999999996,0.0128439999999999995,0.0132449999999999998,0.0133620000000000006,0.0137249999999999994],
      [0.0135849999999999999,0.0128109999999999995,0.0132969999999999998,0.0125649999999999998,0.0129899999999999998,0.0130399999999999995,0.0135270000000000008],
      [0.00988999999999999949,0.0116100000000000005,0.0120549999999999997,0.0111500000000000002,0.0104670000000000006,0.0119620000000000004,0.0126999999999999995],
      [0.0126730000000000002,0.0129689999999999996,0.0134929999999999998,0.0125789999999999999,0.0129119999999999999,0.0131800000000000007,0.0137830000000000001],
      [0.0136939999999999996,0.0132540000000000002,0.0139069999999999992,0.0130100000000000007,0.0133939999999999997,0.0135510000000000005,0.0141279999999999999],
      [0.0117560000000000008,0.0124080000000000006,0.0130019999999999997,0.0122330000000000008,0.0122240000000000005,0.0128229999999999993,0.0133220000000000005],
      [0.0136139999999999994,0.0129250000000000007,0.0134830000000000002,0.0126770000000000008,0.0130950000000000007,0.0131679999999999992,0.0137310000000000001],
      [0.00919200000000000052,0.0100169999999999999,0.0115829999999999995,0.00929100000000000065,0.0090320000000000001,0.0108430000000000002,0.0123339999999999995],
      [0.00744299999999999996,0.00771499999999999964,0.00857199999999999976,0.00718500000000000041,0.00751399999999999985,0.00819199999999999963,0.00926599999999999993],
      [0.0137129999999999995,0.0133699999999999999,0.0139769999999999998,0.0131380000000000004,0.013514,0.0136819999999999997,0.0142699999999999997]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.HKD-HONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.HKD-HONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.HKD-HONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.HKD-HONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.USD-LIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["15Y","3M","4Y","9M","6M","7Y","10Y","3Y","1M","20Y","2Y","2M","1Y","5Y","25Y"],
    "COLUMNS" : ["2Y","20Y","7Y","5Y","4Y","30Y","15Y","1Y","25Y","3Y","10Y"],
    "VALUES" : [
      [0.185598000000000013,0.199992000000000003,0.195231999999999989,0.181412999999999991,0.18241099999999999,0.200297000000000003,0.180603000000000014,0.188902999999999988,0.208891999999999994,0.183288000000000006,0.194635000000000002],
      [0.236637999999999987,0.281559999999999977,0.269838000000000022,0.28437800000000002,0.261226999999999987,0.271361999999999992,0.28339700000000001,0.155108999999999997,0.267210999999999976,0.267262,0.270774000000000015],
      [0.29297200000000001,0.224729000000000012,0.255361000000000005,0.269585999999999992,0.299453000000000025,0.247919,0.228804000000000007,0.304487999999999981,0.226085000000000008,0.286169000000000007,0.256006000000000011],
      [0.279011999999999982,0.256076999999999999,0.279542000000000013,0.305408000000000013,0.287019000000000024,0.281173000000000006,0.27859299999999998,0.237773000000000012,0.257929999999999993,0.303271000000000013,0.270394000000000023],
      [0.260795999999999972,0.276948000000000027,0.274305999999999994,0.276125999999999983,0.292229000000000017,0.284752000000000005,0.261612000000000011,0.204225999999999991,0.261610000000000009,0.285177000000000014,0.269511999999999974],
      [0.244657999999999987,0.202935000000000004,0.235001999999999989,0.227902999999999994,0.250284000000000006,0.212101000000000012,0.20419000000000001,0.252211999999999992,0.223016999999999993,0.256004000000000009,0.209718999999999989],
      [0.224787999999999988,0.200955999999999996,0.192127999999999993,0.196560000000000012,0.200752000000000014,0.216127999999999987,0.185982000000000008,0.216305999999999998,0.191195000000000004,0.20468900000000001,0.187578999999999996],
      [0.337146999999999974,0.252495000000000025,0.269500999999999991,0.306696000000000024,0.294513999999999998,0.240250999999999992,0.240427000000000002,0.329708999999999974,0.236874000000000001,0.302010999999999974,0.252081],
      [0.218252000000000002,0.263809999999999989,0.276494000000000018,0.269440000000000013,0.261573,0.294211999999999974,0.26303399999999999,0.125311000000000006,0.269006000000000023,0.250321999999999989,0.282633999999999996],
      [0.193465999999999999,0.195758999999999989,0.191584000000000004,0.192149999999999987,0.192926999999999987,0.216765999999999986,0.20815800000000001,0.195112000000000008,0.229888000000000009,0.192493999999999998,0.204050000000000009],
      [0.320475999999999983,0.246318000000000009,0.280617000000000005,0.297289999999999999,0.305674000000000001,0.251004000000000005,0.269768000000000008,0.325008999999999992,0.247636999999999996,0.311603000000000019,0.283092999999999984],
      [0.241066000000000003,0.281640000000000001,0.282534000000000007,0.259871000000000019,0.253771999999999998,0.292582999999999982,0.282111000000000001,0.144524999999999987,0.26807700000000001,0.259029000000000009,0.28607100000000002],
      [0.297397000000000022,0.253653999999999991,0.284741999999999995,0.315334999999999976,0.321485000000000021,0.277527000000000024,0.259336999999999984,0.276351999999999987,0.272797999999999985,0.300364999999999993,0.270782999999999996],
      [0.275183000000000011,0.234453999999999996,0.243244999999999989,0.272502000000000022,0.261541000000000023,0.242122000000000004,0.236337999999999993,0.285550000000000026,0.219873000000000013,0.288295000000000023,0.245658999999999988],
      [0.219164999999999999,0.253205999999999987,0.230702999999999991,0.231343999999999994,0.234319,0.28447699999999998,0.212490000000000012,0.224071999999999993,0.235932000000000003,0.214280999999999999,0.203926999999999997]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.USD-LIBOR-3M.VOL.SWPT.ATM.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.USD-LIBOR-3M.VOL.SWPT.ATM.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.USD-LIBOR-3M.VOL.SWPT.ATM.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.USD-LIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDTW1.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","3W","2M","6M","3M","1W","18M","9M","5M","1Y","2W","2Y","4M","6W"],
    "COLUMNS" : ["ATM","25D PUT","15D CALL","10D CALL","35D PUT","10D PUT","25D CALL","15D PUT","35D CALL"],
    "VALUES" : [
      [0.0534999999999999989,0.0541000000000000023,0.0602999999999999994,0.0634500000000000064,0.053400000000000003,0.057099999999999998,0.0568000000000000033,0.0555999999999999966,0.0548999999999999974],
      [0.0514000000000000012,0.0522999999999999993,0.0567500000000000018,0.0587999999999999981,0.0514500000000000027,0.0546999999999999986,0.053949999999999998,0.0537499999999999992,0.0524499999999999966],
      [0.0558499999999999969,0.0561499999999999985,0.0646999999999999936,0.0685999999999999943,0.0554499999999999993,0.0594999999999999973,0.0602999999999999994,0.0577999999999999972,0.0579000000000000001],
      [0.0626499999999999974,0.0621000000000000024,0.0759999999999999981,0.0820000000000000034,0.0614999999999999991,0.0668500000000000066,0.0695000000000000062,0.0642500000000000016,0.0658500000000000058],
      [0.0582000000000000017,0.0582000000000000017,0.0685000000000000053,0.0729999999999999954,0.057549999999999997,0.0621499999999999969,0.0636000000000000038,0.0601000000000000006,0.060699999999999997],
      [0.0473500000000000032,0.0481499999999999984,0.0510999999999999996,0.0597499999999999976,0.0476999999999999993,0.0598500000000000004,0.0481999999999999998,0.0510999999999999996,0.0476999999999999993],
      [0.0714499999999999996,0.0703499999999999959,0.0895999999999999991,0.0975000000000000033,0.0696999999999999981,0.0770499999999999935,0.0811999999999999944,0.0734999999999999959,0.0759999999999999981],
      [0.0659499999999999947,0.0650499999999999967,0.0812500000000000028,0.0879500000000000004,0.0645499999999999963,0.0704000000000000042,0.0740500000000000047,0.0675499999999999989,0.0697500000000000064],
      [0.0615500000000000005,0.0610500000000000001,0.0740999999999999992,0.0796999999999999931,0.0604999999999999982,0.0654499999999999943,0.0680499999999999994,0.0631000000000000033,0.0645499999999999963],
      [0.0677999999999999992,0.0669499999999999956,0.0842999999999999999,0.0913999999999999951,0.0662999999999999978,0.073300000000000004,0.0766499999999999959,0.0698499999999999954,0.0719500000000000001],
      [0.0496499999999999997,0.0510499999999999982,0.0531500000000000028,0.0536000000000000018,0.0500999999999999987,0.0531500000000000028,0.0513499999999999998,0.0526999999999999968,0.050250000000000003],
      [0.0734999999999999959,0.072400000000000006,0.0929999999999999993,0.101449999999999999,0.0716999999999999998,0.0797500000000000014,0.0839499999999999968,0.0758500000000000008,0.078350000000000003],
      [0.0604999999999999982,0.0601000000000000006,0.0722000000000000003,0.0772999999999999937,0.0595499999999999988,0.0641999999999999932,0.0666000000000000064,0.0619999999999999996,0.0633500000000000035],
      [0.0542499999999999996,0.0546499999999999972,0.0619999999999999996,0.0655000000000000027,0.053949999999999998,0.0576499999999999999,0.0580000000000000029,0.0560999999999999971,0.0558999999999999983]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDTW1.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDTW1.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDTW1.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDTW1.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDCAD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["2W","6M","1Y","3M","1W","2M","2Y","9M","1M"],
    "COLUMNS" : ["ATM","10D CALL","25D PUT","10D PUT","25D CALL"],
    "VALUES" : [
      [0.0547500000000000001,0.0579500000000000015,0.0541000000000000023,0.0533500000000000016,0.056649999999999999],
      [0.0592499999999999971,0.0717499999999999943,0.0577500000000000027,0.0582999999999999977,0.0650000000000000022],
      [0.0616500000000000034,0.0778500000000000025,0.059799999999999999,0.060699999999999997,0.0688],
      [0.0587999999999999981,0.0675000000000000044,0.0572500000000000023,0.0569500000000000006,0.062950000000000006],
      [0.0554499999999999993,0.0570000000000000021,0.0550500000000000017,0.0538000000000000006,0.0567500000000000018],
      [0.0575000000000000025,0.0646499999999999991,0.0560500000000000026,0.0556999999999999995,0.0610500000000000001],
      [0.0634500000000000064,0.0797500000000000014,0.0618999999999999967,0.0636499999999999982,0.0707499999999999934],
      [0.0607499999999999984,0.0753999999999999948,0.058900000000000001,0.0594999999999999973,0.0672999999999999987],
      [0.0561499999999999985,0.0607999999999999999,0.0548500000000000029,0.0541499999999999967,0.0585499999999999979]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDCAD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDCAD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDCAD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDCAD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.TWD-TAIBOR-3M.VOL.CAP.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["30Y","25Y","5Y","3Y","7Y","20Y","15Y","2Y","4Y","1Y","10Y"],
    "COLUMNS" : ["ATM","0.015","0.03","0.01","0.04","0.02","0.025"],
    "VALUES" : [
      [0.00372799999999999998,0.00358099999999999998,0.00460499999999999972,0.00346400000000000007,0.00539400000000000036,0.00386199999999999998,0.00422099999999999993],
      [0.00375200000000000013,0.00360500000000000013,0.00467199999999999994,0.00348800000000000021,0.00548099999999999976,0.00389900000000000012,0.00427500000000000015],
      [0.00421399999999999986,0.00408700000000000035,0.00695199999999999985,0.00423999999999999985,0.00914099999999999982,0.00475800000000000008,0.00582500000000000032],
      [0.00447100000000000015,0.00437599999999999968,0.007489,0.00451200000000000039,0.00993199999999999986,0.0051029999999999999,0.00625099999999999961],
      [0.00417600000000000002,0.00404399999999999985,0.00661000000000000042,0.00405499999999999958,0.00849500000000000081,0.00468700000000000019,0.00562999999999999959],
      [0.0037919999999999998,0.00364299999999999997,0.00479399999999999965,0.00353099999999999985,0.00565099999999999977,0.00396200000000000024,0.00436800000000000035],
      [0.00386499999999999995,0.00371600000000000012,0.00505400000000000033,0.00361699999999999999,0.00604299999999999976,0.00408199999999999969,0.00455899999999999968],
      [0.00479800000000000018,0.00472100000000000037,0.00762999999999999963,0.00473400000000000036,0.00993199999999999986,0.00541699999999999994,0.00647399999999999972],
      [0.00428599999999999988,0.00417900000000000042,0.00722200000000000012,0.00435199999999999997,0.00956899999999999938,0.00488699999999999985,0.00601799999999999991],
      [0.00569900000000000007,0.00564499999999999984,0.00872200000000000059,0.00567699999999999975,0.0112079999999999992,0.006365,0.00749000000000000013],
      [0.00402999999999999973,0.00388300000000000017,0.00578400000000000008,0.0038310000000000002,0.00719199999999999961,0.00437900000000000008,0.00506799999999999959]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.TWD-TAIBOR-3M.VOL.CAP.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.TWD-TAIBOR-3M.VOL.CAP.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.TWD-TAIBOR-3M.VOL.CAP.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.TWD-TAIBOR-3M.VOL.CAP.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.TWD-TAIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["20Y","5Y","2Y","15Y","9M","4Y","7Y","3M","3Y","6M","30Y","25Y","1Y","1M","10Y"],
    "COLUMNS" : ["10Y","5Y","4Y","1Y","15Y","25Y","7Y","30Y","3Y","20Y","2Y"],
    "VALUES" : [
      [0.188741999999999993,0.128657999999999995,0.146112999999999993,0.201819999999999999,0.188741999999999993,0.188741999999999993,0.152273999999999993,0.188741999999999993,0.163653999999999994,0.188742999999999994,0.180515000000000009],
      [0.18607499999999999,0.152200000000000002,0.1749,0.243026999999999993,0.184032000000000001,0.182439999999999991,0.164700000000000013,0.182050999999999991,0.198393999999999987,0.183030999999999999,0.220473000000000002],
      [0.259616000000000013,0.263021000000000005,0.256199999999999983,0.246175000000000005,0.254672999999999983,0.250821999999999989,0.264400000000000024,0.249890000000000001,0.249318000000000012,0.252246000000000026,0.246827999999999992],
      [0.187312000000000006,0.128209999999999991,0.145455000000000001,0.200067999999999996,0.187312000000000006,0.187312000000000006,0.151527999999999996,0.187312000000000006,0.162725000000000009,0.187312000000000006,0.179266000000000009],
      [0.294370000000000021,0.299086999999999992,0.285399999999999987,0.263583999999999985,0.287146000000000012,0.281536000000000008,0.298899999999999999,0.280183999999999989,0.277341999999999977,0.283604000000000023,0.269479999999999997],
      [0.210100000000000009,0.190400000000000014,0.203699999999999992,0.23000000000000001,0.207412999999999986,0.205325000000000008,0.197899999999999993,0.204815999999999998,0.215400000000000008,0.206100000000000005,0.225599999999999995],
      [0.187299999999999994,0.141800000000000009,0.163000000000000006,0.232300000000000006,0.186649000000000009,0.186134999999999995,0.159700000000000009,0.186009000000000008,0.183700000000000002,0.186326999999999993,0.207600000000000007],
      [0.310242999999999991,0.290244000000000002,0.282299999999999995,0.266896999999999995,0.301956000000000002,0.29547699999999999,0.299800000000000011,0.293918999999999986,0.277949000000000002,0.297864000000000018,0.273092999999999975],
      [0.234399999999999997,0.225599999999999995,0.228899999999999992,0.234899999999999998,0.230723000000000011,0.227869999999999989,0.230300000000000005,0.227174999999999988,0.230899999999999994,0.228928999999999994,0.230199999999999988],
      [0.302333999999999992,0.294520000000000004,0.283700000000000008,0.264201999999999992,0.294545000000000001,0.288482999999999989,0.299200000000000021,0.287024999999999975,0.277498999999999996,0.290717000000000003,0.271023999999999987],
      [0.191747000000000001,0.129574999999999996,0.147467999999999988,0.205531999999999992,0.191746,0.191746,0.153812000000000004,0.191746,0.165577000000000002,0.191746,0.183127000000000012],
      [0.19022,0.129113000000000006,0.146784999999999999,0.20364199999999999,0.190221000000000001,0.19022,0.153036000000000005,0.19022,0.164604,0.19022,0.181801999999999991],
      [0.286671000000000009,0.305005000000000026,0.288700000000000012,0.263811000000000018,0.279992999999999992,0.274809999999999999,0.299399999999999999,0.273560000000000025,0.279025000000000023,0.276722000000000024,0.270531999999999995],
      [0.31514399999999998,0.287314000000000014,0.281899999999999984,0.267873000000000028,0.306526999999999994,0.299748999999999988,0.300499999999999989,0.298123000000000027,0.278312000000000004,0.302244000000000013,0.274971999999999994],
      [0.186198000000000002,0.128120000000000012,0.145300000000000012,0.200000000000000011,0.186115000000000003,0.186049999999999993,0.151100000000000012,0.186034000000000005,0.162500000000000006,0.18607499999999999,0.178960000000000008]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.TWD-TAIBOR-3M.VOL.SWPT.ATM.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.TWD-TAIBOR-3M.VOL.SWPT.ATM.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.TWD-TAIBOR-3M.VOL.SWPT.ATM.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.TWD-TAIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.JPYTWD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6W","6M","2W","1W","3W","1M","2M","3M","2Y","9M","1Y","5M","4M"],
    "COLUMNS" : ["25D CALL","25D PUT","ATM"],
    "VALUES" : [
      [0.0926000000000000018,0.0854000000000000037,0.0874000000000000055],
      [0.0992999999999999994,0.0902000000000000024,0.0927000000000000046],
      [0.100699999999999998,0.0936000000000000026,0.0953999999999999987],
      [0.100599999999999995,0.0936000000000000026,0.0953999999999999987],
      [0.100699999999999998,0.0936000000000000026,0.0953999999999999987],
      [0.100800000000000001,0.0936000000000000026,0.0953999999999999987],
      [0.0863000000000000017,0.0790000000000000008,0.0811999999999999944],
      [0.0965000000000000024,0.0880999999999999978,0.0906],
      [0.102400000000000005,0.0912000000000000033,0.0937999999999999945],
      [0.0997999999999999998,0.0900999999999999995,0.0927000000000000046],
      [0.102300000000000002,0.0918000000000000066,0.0945000000000000007],
      [0.0986999999999999961,0.0898000000000000048,0.0922999999999999932],
      [0.0979000000000000009,0.0892000000000000015,0.0916000000000000009]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.JPYTWD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.JPYTWD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.JPYTWD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.JPYTWD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDZAR.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["5M","1W","1Y","18M","2M","3Y","9M","4M","3M","2W","6M","3W","6W","2Y","1M"],
    "COLUMNS" : ["25D PUT","25D CALL","10D CALL","35D PUT","15D PUT","35D CALL","15D CALL","ATM","10D PUT"],
    "VALUES" : [
      [0.144900000000000001,0.16414999999999999,0.179949999999999999,0.145999999999999991,0.1439,0.15709999999999999,0.17330000000000001,0.150150000000000006,0.143249999999999988],
      [0.133550000000000002,0.148100000000000009,0.156799999999999995,0.134300000000000003,0.13214999999999999,0.142699999999999994,0.153999999999999998,0.13735,0.129250000000000004],
      [0.149999999999999994,0.169750000000000012,0.186450000000000005,0.150900000000000006,0.149199999999999999,0.162200000000000011,0.179400000000000004,0.154999999999999999,0.148699999999999999],
      [0.15104999999999999,0.171500000000000014,0.188950000000000007,0.151900000000000007,0.150400000000000006,0.163550000000000001,0.181549999999999989,0.156150000000000011,0.150049999999999989],
      [0.141749999999999987,0.16070000000000001,0.175350000000000006,0.14305000000000001,0.140250000000000014,0.153950000000000004,0.169199999999999989,0.147249999999999992,0.13919999999999999],
      [0.156700000000000006,0.179699999999999999,0.20069999999999999,0.157450000000000007,0.156599999999999989,0.170350000000000001,0.191649999999999987,0.162250000000000005,0.156650000000000011],
      [0.148249999999999993,0.167899999999999994,0.183299999999999991,0.149299999999999988,0.147299999999999986,0.160500000000000004,0.176850000000000007,0.153400000000000009,0.146499999999999991],
      [0.144550000000000012,0.163750000000000007,0.179199999999999998,0.145699999999999996,0.143449999999999994,0.15675,0.172699999999999992,0.149850000000000011,0.142749999999999988],
      [0.142949999999999994,0.162000000000000005,0.177050000000000013,0.14415,0.141800000000000009,0.155099999999999988,0.170699999999999991,0.148199999999999998,0.141050000000000009],
      [0.13155,0.148049999999999987,0.160149999999999987,0.13239999999999999,0.130549999999999999,0.141949999999999993,0.155349999999999988,0.135849999999999999,0.129349999999999993],
      [0.145699999999999996,0.165099999999999997,0.181249999999999994,0.146800000000000014,0.14474999999999999,0.157900000000000013,0.174399999999999999,0.150850000000000012,0.144199999999999995],
      [0.135149999999999992,0.152999999999999997,0.166250000000000009,0.136300000000000004,0.133899999999999991,0.146650000000000003,0.160849999999999993,0.140149999999999997,0.132800000000000001],
      [0.140050000000000008,0.158900000000000013,0.173249999999999987,0.141449999999999992,0.138550000000000006,0.152249999999999996,0.16725000000000001,0.145550000000000013,0.137500000000000011],
      [0.153400000000000009,0.174399999999999999,0.192599999999999993,0.154150000000000009,0.152950000000000003,0.166050000000000003,0.184900000000000009,0.158500000000000002,0.152650000000000008],
      [0.136899999999999994,0.155499999999999999,0.169600000000000001,0.138250000000000012,0.135449999999999987,0.148999999999999994,0.163700000000000012,0.142350000000000004,0.134399999999999992]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDZAR.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDZAR.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDZAR.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDZAR.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.USD-LIBOR-3M.VOL.CAP.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3Y","1Y","20Y","30Y","25Y","2Y","7Y","10Y","15Y","4Y","5Y"],
    "COLUMNS" : ["0.035","0.015","0.005","0.02","0.04","0.025","ATM","0.05","0.03","0.01"],
    "VALUES" : [
      [0.0151339999999999999,0.0163899999999999983,0.0167080000000000006,0.0161299999999999985,0.014749,0.0158270000000000008,0.0140470000000000005,0.0138460000000000007,0.0154929999999999998,0.0165910000000000016],
      [0.0162139999999999992,0.0215100000000000013,0.0233919999999999996,0.0203599999999999996,0.0146129999999999993,0.0190899999999999993,0.0091170000000000001,0.0111299999999999993,0.0177070000000000005,0.0225279999999999994],
      [0.00970700000000000035,0.0093530000000000002,0.0092580000000000006,0.00939899999999999937,0.00989499999999999928,0.00946499999999999946,0.0100529999999999994,0.0103859999999999994,0.00956500000000000059,0.0093130000000000001],
      [0.00886400000000000035,0.00823100000000000047,0.00791200000000000063,0.0083750000000000005,0.00906700000000000041,0.00852200000000000006,0.00912999999999999923,0.00952800000000000001,0.00868299999999999975,0.00808099999999999964],
      [0.00919599999999999931,0.00867300000000000015,0.00845699999999999924,0.00877400000000000055,0.00939899999999999937,0.00888899999999999933,0.00951100000000000036,0.00988799999999999922,0.0090270000000000003,0.00857300000000000076],
      [0.0159970000000000008,0.018495000000000001,0.0192830000000000015,0.0179750000000000014,0.0151850000000000006,0.0173850000000000011,0.013011,0.0132720000000000008,0.0167269999999999988,0.018936999999999999],
      [0.0130740000000000006,0.0132789999999999991,0.0133589999999999993,0.0131970000000000004,0.0131339999999999998,0.0131210000000000007,0.0132309999999999997,0.0134109999999999993,0.0130740000000000006,0.0133419999999999997],
      [0.0119279999999999994,0.0118040000000000003,0.0117689999999999999,0.0117990000000000005,0.0120649999999999993,0.0118060000000000005,0.0122080000000000001,0.0124810000000000008,0.0118440000000000004,0.011802],
      [0.0105939999999999993,0.0103309999999999999,0.0102559999999999995,0.0103579999999999992,0.0107589999999999995,0.0104010000000000005,0.0109210000000000002,0.0112149999999999993,0.0104759999999999992,0.0103040000000000007],
      [0.0146529999999999994,0.0154570000000000003,0.0156370000000000016,0.0152800000000000002,0.0144569999999999994,0.0150760000000000009,0.0142229999999999995,0.0140739999999999997,0.0148620000000000002,0.0155849999999999999],
      [0.0140909999999999994,0.0146409999999999995,0.0147939999999999999,0.0144989999999999997,0.0140179999999999992,0.0143459999999999994,0.0139799999999999994,0.0139690000000000005,0.0142039999999999996,0.0147480000000000007]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.USD-LIBOR-3M.VOL.CAP.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.USD-LIBOR-3M.VOL.CAP.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.USD-LIBOR-3M.VOL.CAP.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.USD-LIBOR-3M.VOL.CAP.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.USD-SOFR-ON.VOL.CAP.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["8Y","6Y","3Y","30Y","5Y","4Y","20Y","10Y","15Y","9Y","25Y","2Y","7Y","1Y"],
    "COLUMNS" : ["0.04","0.005","0.01","0.03","0.015","0.025","ATM","0.02","0.035","0.05"],
    "VALUES" : [
      [0.315699999999999981,0.852500000000000036,0.621800000000000019,0.362800000000000011,0.513499999999999956,0.398100000000000009,0.302300000000000013,0.445599999999999996,0.33610000000000001,0.2873],
      [0.335600000000000009,0.935799999999999965,0.683599999999999985,0.391699999999999993,0.563100000000000045,0.432499999999999996,0.317199999999999982,0.48680000000000001,0.360300000000000009,0.300099999999999978],
      [0.35199999999999998,1.04249999999999998,0.774399999999999977,0.431200000000000028,0.638499999999999956,0.483200000000000018,0.302200000000000024,0.549100000000000033,0.388400000000000023,0.290700000000000014],
      [0.23580000000000001,0.624600000000000044,0.437699999999999978,0.26369999999999999,0.36080000000000001,0.285399999999999987,0.233000000000000013,0.315599999999999992,0.247799999999999992,0.21959999999999999],
      [0.344700000000000006,0.974999999999999978,0.715099999999999958,0.406799999999999995,0.589099999999999957,0.45069999999999999,0.321299999999999975,0.508499999999999952,0.37230000000000002,0.303300000000000014],
      [0.352200000000000013,1.01279999999999992,0.747600000000000042,0.42220000000000002,0.616500000000000048,0.469899999999999984,0.319699999999999984,0.531599999999999961,0.383799999999999975,0.30209999999999998],
      [0.246200000000000002,0.639700000000000046,0.459699999999999998,0.275899999999999979,0.379900000000000015,0.299200000000000021,0.239300000000000013,0.331899999999999973,0.258799999999999975,0.229599999999999999],
      [0.298899999999999999,0.787699999999999956,0.574699999999999989,0.340500000000000025,0.475800000000000001,0.371900000000000008,0.2878,0.41449999999999998,0.316900000000000015,0.274299999999999988],
      [0.265600000000000003,0.6875,0.499400000000000011,0.299599999999999977,0.413999999999999979,0.325799999999999979,0.256599999999999995,0.361700000000000021,0.280200000000000005,0.245999999999999996],
      [0.307099999999999984,0.817699999999999982,0.596600000000000019,0.351200000000000012,0.493400000000000005,0.384299999999999975,0.295099999999999973,0.429200000000000026,0.32619999999999999,0.280899999999999983],
      [0.239100000000000007,0.623500000000000054,0.443000000000000005,0.267100000000000004,0.365800000000000014,0.289100000000000024,0.234300000000000008,0.320000000000000007,0.251000000000000001,0.22320000000000001],
      [0.347499999999999976,1.121,0.833600000000000008,0.444900000000000018,0.683200000000000029,0.506199999999999983,0.258599999999999997,0.582200000000000051,0.393100000000000005,0.267699999999999994],
      [0.325199999999999989,0.89249999999999996,0.651000000000000023,0.376300000000000023,0.536699999999999955,0.413999999999999979,0.309900000000000009,0.464799999999999991,0.347399999999999987,0.293899999999999995],
      [0.310800000000000021,1.17090000000000005,0.875499999999999945,0.431999999999999995,0.710999999999999965,0.506299999999999972,0.163300000000000001,0.595899999999999985,0.367900000000000005,0.211499999999999994]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.USD-SOFR-ON.VOL.CAP.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.USD-SOFR-ON.VOL.CAP.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.USD-SOFR-ON.VOL.CAP.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.USD-SOFR-ON.VOL.CAP.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDTWD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["4M","5M","1Y","2W","6W","6M","2Y","2M","3W","3M","1M","9M","18M","1W"],
    "COLUMNS" : ["ATM","25D PUT","35D CALL","15D CALL","25D CALL","10D PUT","35D PUT","10D CALL","15D PUT"],
    "VALUES" : [
      [0.0604999999999999982,0.0601000000000000006,0.0633500000000000035,0.0722000000000000003,0.0666000000000000064,0.0641999999999999932,0.0595499999999999988,0.0772999999999999937,0.0619999999999999996],
      [0.0615500000000000005,0.0610500000000000001,0.0645499999999999963,0.0740999999999999992,0.0680499999999999994,0.0654499999999999943,0.0604999999999999982,0.0796999999999999931,0.0631000000000000033],
      [0.0677999999999999992,0.0669499999999999956,0.0719500000000000001,0.0842999999999999999,0.0766499999999999959,0.073300000000000004,0.0662999999999999978,0.0913999999999999951,0.0698499999999999954],
      [0.0496499999999999997,0.0510499999999999982,0.050250000000000003,0.0531500000000000028,0.0513499999999999998,0.0531500000000000028,0.0500999999999999987,0.0536000000000000018,0.0526999999999999968],
      [0.0542499999999999996,0.0546499999999999972,0.0558999999999999983,0.0619999999999999996,0.0580000000000000029,0.0576499999999999999,0.053949999999999998,0.0655000000000000027,0.0560999999999999971],
      [0.0626499999999999974,0.0621000000000000024,0.0658500000000000058,0.0759999999999999981,0.0695000000000000062,0.0668500000000000066,0.0614999999999999991,0.0820000000000000034,0.0642500000000000016],
      [0.0734999999999999959,0.072400000000000006,0.078350000000000003,0.0929999999999999993,0.0839499999999999968,0.0797500000000000014,0.0716999999999999998,0.101449999999999999,0.0758500000000000008],
      [0.0558499999999999969,0.0561499999999999985,0.0579000000000000001,0.0646999999999999936,0.0602999999999999994,0.0594999999999999973,0.0554499999999999993,0.0685999999999999943,0.0577999999999999972],
      [0.0514000000000000012,0.0522999999999999993,0.0524499999999999966,0.0567500000000000018,0.053949999999999998,0.0546999999999999986,0.0514500000000000027,0.0587999999999999981,0.0537499999999999992],
      [0.0582000000000000017,0.0582000000000000017,0.060699999999999997,0.0685000000000000053,0.0636000000000000038,0.0621499999999999969,0.057549999999999997,0.0729999999999999954,0.0601000000000000006],
      [0.0534999999999999989,0.0541000000000000023,0.0548999999999999974,0.0602999999999999994,0.0568000000000000033,0.057099999999999998,0.053400000000000003,0.0634500000000000064,0.0555999999999999966],
      [0.0659499999999999947,0.0650499999999999967,0.0697500000000000064,0.0812500000000000028,0.0740500000000000047,0.0704000000000000042,0.0645499999999999963,0.0879500000000000004,0.0675499999999999989],
      [0.0714499999999999996,0.0703499999999999959,0.0759999999999999981,0.0895999999999999991,0.0811999999999999944,0.0770499999999999935,0.0696999999999999981,0.0975000000000000033,0.0734999999999999959],
      [0.0473500000000000032,0.0481499999999999984,0.0476999999999999993,0.0510999999999999996,0.0481999999999999998,0.0598500000000000004,0.0476999999999999993,0.0597499999999999976,0.0510999999999999996]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDTWD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDTWD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDTWD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDTWD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.CNHTWD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y","3M","9M","4M","1M","2Y","6W","2M","5M","6M"],
    "COLUMNS" : ["25D CALL","25D PUT","ATM","10D CALL","10D PUT"],
    "VALUES" : [
      [0.0613000000000000003,0.0594000000000000014,0.0587999999999999981,0.0665000000000000036,0.0630000000000000004],
      [0.0601999999999999966,0.0587000000000000022,0.0582999999999999977,0.0638999999999999985,0.0611000000000000015],
      [0.0609000000000000027,0.0592000000000000026,0.0585999999999999993,0.0656999999999999945,0.0623999999999999971],
      [0.0641000000000000042,0.0621999999999999983,0.0618999999999999967,0.0684000000000000025,0.0646999999999999936],
      [0.0550000000000000003,0.0541000000000000023,0.0536999999999999977,0.0579000000000000001,0.0560000000000000012],
      [0.0690000000000000058,0.0666000000000000064,0.0660000000000000031,0.0758000000000000063,0.0709999999999999937],
      [0.0568000000000000033,0.0553999999999999979,0.0551999999999999991,0.0599000000000000019,0.0572999999999999968],
      [0.0580000000000000029,0.0565999999999999975,0.0563000000000000028,0.0613000000000000003,0.0587000000000000022],
      [0.0666000000000000064,0.0648999999999999994,0.0643999999999999989,0.0711999999999999994,0.0680000000000000049],
      [0.067000000000000004,0.0653999999999999998,0.0646999999999999936,0.0716999999999999998,0.0689000000000000029]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.CNHTWD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.CNHTWD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.CNHTWD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.CNHTWD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.HKD-HIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","6M","3M","5Y","1Y","10Y","1M","7Y","2Y","4Y","3Y"],
    "COLUMNS" : ["4Y","3Y","2Y","10Y","5Y","7Y","1Y"],
    "VALUES" : [
      [0.299499999999999988,0.303999999999999992,0.303499999999999992,0.31359999999999999,0.294599999999999973,0.304300000000000015,0.294499999999999984],
      [0.292200000000000015,0.294599999999999973,0.291600000000000026,0.310699999999999976,0.287999999999999978,0.298499999999999988,0.278799999999999992],
      [0.283999999999999975,0.283999999999999975,0.278299999999999992,0.307199999999999973,0.280700000000000005,0.292100000000000026,0.267299999999999982],
      [0.271100000000000008,0.278100000000000014,0.278799999999999992,0.226200000000000012,0.260900000000000021,0.244299999999999989,0.293999999999999984],
      [0.306699999999999973,0.313199999999999978,0.31519999999999998,0.316400000000000015,0.30099999999999999,0.310099999999999987,0.308499999999999996],
      [0.175499999999999989,0.189200000000000007,0.200399999999999995,0.167300000000000004,0.160599999999999993,0.1686,0.219200000000000006],
      [0.279100000000000015,0.27789999999999998,0.270799999999999985,0.305200000000000027,0.276399999999999979,0.288200000000000012,0.259799999999999975],
      [0.236999999999999988,0.257599999999999996,0.275299999999999989,0.210100000000000009,0.218400000000000011,0.208999999999999991,0.292399999999999993],
      [0.303400000000000003,0.310499999999999998,0.320299999999999974,0.295599999999999974,0.293100000000000027,0.301400000000000001,0.327000000000000013],
      [0.280600000000000016,0.283100000000000018,0.294599999999999973,0.250099999999999989,0.273799999999999988,0.265500000000000014,0.298999999999999988],
      [0.288800000000000001,0.299700000000000022,0.306400000000000006,0.273399999999999976,0.284799999999999998,0.285799999999999998,0.317800000000000027]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.HKD-HIBOR-3M.VOL.SWPT.ATM.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.HKD-HIBOR-3M.VOL.SWPT.ATM.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.HKD-HIBOR-3M.VOL.SWPT.ATM.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.HKD-HIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.CNY-SHIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["4Y","20Y","1Y","10Y","5Y","15Y","7Y","25Y","3Y","2Y","30Y"],
    "COLUMNS" : ["7Y","15Y","10Y","2Y","1Y","30Y","20Y","5Y","3Y","25Y","4Y"],
    "VALUES" : [
      [0.248283000000000004,0.275121999999999978,0.275121999999999978,0.225487999999999994,0.21765000000000001,0.275121999999999978,0.275121999999999978,0.230642000000000014,0.226442000000000004,0.275121999999999978,0.230298000000000003],
      [0.256591999999999987,0.277471999999999996,0.277471999999999996,0.230155999999999999,0.234030999999999989,0.277471999999999996,0.277471999999999996,0.238047000000000009,0.236274000000000012,0.277471999999999996,0.238730999999999999],
      [0.246113999999999999,0.266496000000000011,0.266496000000000011,0.249890000000000001,0.275575999999999988,0.266496000000000011,0.266496000000000011,0.227013999999999994,0.255357000000000001,0.266496000000000011,0.236674999999999996],
      [0.249497999999999998,0.26849400000000001,0.26849400000000001,0.225043999999999994,0.228656999999999999,0.268494999999999984,0.26849400000000001,0.23238700000000001,0.230740000000000001,0.268494999999999984,0.233022000000000007],
      [0.247560000000000002,0.277393000000000001,0.277393000000000001,0.225830000000000003,0.227811999999999987,0.277393000000000001,0.277393000000000001,0.231495000000000006,0.230598999999999998,0.277393000000000001,0.231590999999999991],
      [0.252939000000000025,0.272824999999999984,0.272824999999999984,0.22753799999999999,0.231279000000000012,0.272826000000000013,0.272826000000000013,0.235144999999999993,0.233437000000000006,0.272826000000000013,0.235802000000000012],
      [0.255072999999999994,0.283011999999999986,0.283011999999999986,0.237519000000000008,0.237890999999999991,0.283011999999999986,0.283013000000000015,0.233821000000000001,0.230780000000000013,0.283011999999999986,0.233865999999999991],
      [0.26048300000000002,0.282480000000000009,0.28247899999999998,0.232910000000000006,0.236936000000000008,0.282480000000000009,0.282480000000000009,0.24110899999999999,0.239265000000000005,0.282480000000000009,0.241821000000000008],
      [0.24793599999999999,0.272355000000000014,0.272355000000000014,0.226971000000000006,0.23014699999999999,0.272355000000000014,0.272355000000000014,0.229937000000000002,0.230606000000000005,0.272355000000000014,0.228938000000000003],
      [0.249355999999999994,0.268952999999999998,0.268952999999999998,0.243535000000000001,0.250462000000000018,0.268952999999999998,0.268952999999999998,0.229574,0.238205,0.268952999999999998,0.234125],
      [0.264641000000000015,0.287905000000000022,0.287905000000000022,0.235808999999999991,0.239997999999999989,0.287905000000000022,0.287905000000000022,0.24434800000000001,0.242424000000000001,0.287905000000000022,0.245093000000000005]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.CNY-SHIBOR-3M.VOL.SWPT.ATM.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.CNY-SHIBOR-3M.VOL.SWPT.ATM.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.CNY-SHIBOR-3M.VOL.SWPT.ATM.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.CNY-SHIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDJPY.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["7Y","10Y","2Y","3W","1M","6M","4Y","1W","4M","9M","5Y","18M","2W","3M","6W","5M","1Y","2M","3Y"],
    "COLUMNS" : ["25D PUT","25D CALL","35D CALL","15D PUT","10D PUT","15D CALL","35D PUT","ATM","10D CALL"],
    "VALUES" : [
      [0.103550000000000003,0.0830499999999999988,0.0819499999999999951,0.117900000000000005,0.131849999999999995,0.090149999999999994,0.09375,0.0855000000000000066,0.0982999999999999985],
      [0.123549999999999993,0.0860500000000000015,0.0855999999999999955,0.146249999999999991,0.167550000000000004,0.0952999999999999958,0.106950000000000003,0.0929999999999999993,0.105950000000000003],
      [0.0986500000000000016,0.0898999999999999938,0.0887499999999999956,0.106450000000000003,0.113600000000000007,0.0936499999999999971,0.0938500000000000029,0.0898499999999999993,0.0976999999999999952],
      [0.0898999999999999938,0.0807999999999999968,0.0810000000000000026,0.0955000000000000016,0.0999499999999999972,0.0814000000000000001,0.0862499999999999933,0.0827999999999999986,0.0822500000000000037],
      [0.0904999999999999971,0.0815499999999999975,0.0816999999999999948,0.0961499999999999994,0.100900000000000004,0.0824499999999999955,0.0868000000000000022,0.0834000000000000019,0.083750000000000005],
      [0.101900000000000004,0.0919999999999999984,0.0918999999999999956,0.109049999999999994,0.115250000000000005,0.0936499999999999971,0.097449999999999995,0.0936499999999999971,0.0957500000000000018],
      [0.094649999999999998,0.0859999999999999931,0.0842500000000000054,0.103650000000000006,0.112350000000000005,0.091499999999999998,0.0892000000000000015,0.0850500000000000006,0.097449999999999995],
      [0.0889500000000000013,0.0801999999999999935,0.0804499999999999937,0.0942999999999999949,0.0985000000000000042,0.0808500000000000052,0.0854499999999999982,0.0821500000000000008,0.0813500000000000056],
      [0.101449999999999999,0.0914500000000000035,0.0916000000000000009,0.108100000000000002,0.113750000000000004,0.0924999999999999989,0.0972999999999999976,0.0935499999999999943,0.0940499999999999947],
      [0.101650000000000004,0.0921499999999999958,0.0918000000000000066,0.109049999999999994,0.11555,0.0942999999999999949,0.0970000000000000029,0.0933999999999999969,0.0968500000000000055],
      [0.0939500000000000057,0.0852500000000000063,0.0831999999999999962,0.103499999999999995,0.1129,0.0917000000000000037,0.0883000000000000035,0.0840000000000000052,0.0986999999999999961],
      [0.0989000000000000018,0.0900999999999999995,0.0891499999999999931,0.107350000000000001,0.115049999999999999,0.09375,0.09375,0.0903999999999999942,0.0978500000000000064],
      [0.0887000000000000011,0.0793500000000000039,0.0796499999999999986,0.094200000000000006,0.0985000000000000042,0.0796499999999999986,0.0850500000000000006,0.081500000000000003,0.0798999999999999988],
      [0.100400000000000003,0.0902499999999999969,0.0906,0.106749999999999998,0.112100000000000005,0.0910500000000000059,0.0963500000000000051,0.0926000000000000018,0.0923500000000000015],
      [0.0936499999999999971,0.0844499999999999973,0.0845999999999999946,0.0994499999999999967,0.104300000000000004,0.0853000000000000008,0.0898999999999999938,0.0864000000000000046,0.0864999999999999936],
      [0.101400000000000004,0.0914500000000000035,0.0914500000000000035,0.108299999999999993,0.114250000000000004,0.092850000000000002,0.0970000000000000029,0.093299999999999994,0.0947500000000000009],
      [0.101800000000000002,0.0926000000000000018,0.0920500000000000068,0.1095,0.116300000000000001,0.0952999999999999958,0.0970000000000000029,0.0934999999999999998,0.0983500000000000069],
      [0.0969,0.0874000000000000055,0.0876500000000000057,0.102900000000000005,0.107899999999999996,0.0880999999999999978,0.0929999999999999993,0.0894500000000000017,0.0892000000000000015],
      [0.0959499999999999936,0.08745,0.0858499999999999958,0.104499999999999996,0.112500000000000003,0.0920500000000000068,0.0908000000000000057,0.0867499999999999938,0.0970499999999999974]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDJPY.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDJPY.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDJPY.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDJPY.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.TWD-TAIFEX-TWSE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","1M","2M","3M"],
    "COLUMNS" : ["1.00","0.90","1.10"],
    "VALUES" : [
      [0.149999999999999994,0.149999999999999994,0.149999999999999994],
      [0.149999999999999994,0.149999999999999994,0.149999999999999994],
      [0.149999999999999994,0.149999999999999994,0.149999999999999994],
      [0.149999999999999994,0.149999999999999994,0.149999999999999994]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.TWD-TAIFEX-TWSE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.TWD-TAIFEX-TWSE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.TWD-TAIFEX-TWSE.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.TWD-TAIFEX-TWSE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDCNY.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["4M","9M","2Y","1M","1W","6M","1Y","5M","2W","3M","2M"],
    "COLUMNS" : ["35D CALL","25D PUT","15D PUT","10D PUT","ATM","25D CALL","35D PUT","15D CALL","10D CALL"],
    "VALUES" : [
      [0.0709550000000000042,0.042380000000000001,0.0393049999999999997,0.0382450000000000012,0.0572300000000000031,0.0835150000000000059,0.0477249999999999966,0.100544999999999995,0.109295000000000003],
      [0.0729650000000000021,0.0518600000000000033,0.0356100000000000028,0.0512799999999999992,0.0507500000000000034,0.0568000000000000033,0.046760000000000003,0.107014999999999999,0.066199999999999995],
      [0.0843499999999999944,0.0458949999999999983,0.0422150000000000025,0.0419100000000000028,0.0668750000000000039,0.101135000000000003,0.0556099999999999997,0.12586,0.137380000000000002],
      [0.0611900000000000013,0.0498950000000000018,0.0388500000000000026,0.0499949999999999978,0.0473750000000000004,0.0504900000000000002,0.0438850000000000004,0.0846350000000000019,0.0564699999999999994],
      [0.057329999999999999,0.0455850000000000005,0.0534299999999999983,0.0465650000000000022,0.0417500000000000024,0.0440750000000000031,0.0494399999999999978,0.0767250000000000015,0.0490550000000000014],
      [0.0724049999999999971,0.0511249999999999968,0.0381700000000000025,0.0507999999999999979,0.050250000000000003,0.0559650000000000009,0.0480799999999999977,0.103895000000000001,0.0643600000000000005],
      [0.0782500000000000001,0.0522200000000000025,0.035854999999999998,0.0514049999999999993,0.0511249999999999968,0.0570599999999999996,0.0481899999999999967,0.113739999999999994,0.0669300000000000034],
      [0.071830000000000005,0.0421250000000000027,0.0386200000000000015,0.0373599999999999974,0.0577599999999999988,0.0847900000000000043,0.0479250000000000023,0.102559999999999998,0.111610000000000001],
      [0.0571400000000000033,0.0439099999999999976,0.0449849999999999972,0.0461099999999999982,0.0508749999999999966,0.0647900000000000004,0.0456599999999999992,0.0771749999999999936,0.0841849999999999959],
      [0.0693399999999999989,0.05058,0.0405399999999999996,0.0501049999999999968,0.0493750000000000022,0.0546600000000000003,0.0473799999999999985,0.0967400000000000065,0.0615250000000000033],
      [0.0657049999999999995,0.0505050000000000013,0.0400249999999999981,0.050014999999999997,0.0486849999999999991,0.052615000000000002,0.0460450000000000026,0.0910450000000000009,0.059464999999999997]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDCNY.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDCNY.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDCNY.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDCNY.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPUSD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["10Y","2W","1M","1Y","3Y","18M","3M","4Y","3W","1W","9M","5Y","6M","2M","6W","2Y"],
    "COLUMNS" : ["15D PUT","ATM","35D CALL","35D PUT","15D CALL","10D PUT","10D CALL","25D CALL","25D PUT"],
    "VALUES" : [
      [0.122050000000000006,0.103999999999999995,0.100500000000000006,0.109549999999999995,0.0985999999999999932,0.127400000000000013,0.0976999999999999952,0.0992500000000000049,0.114849999999999994],
      [0.0773999999999999966,0.0735999999999999988,0.0727000000000000007,0.0748999999999999944,0.0717499999999999943,0.077899999999999997,0.0709999999999999937,0.0722499999999999948,0.0760500000000000065],
      [0.0815499999999999975,0.0759999999999999981,0.0748999999999999944,0.0777000000000000052,0.0741499999999999937,0.0830999999999999933,0.0739999999999999963,0.0743999999999999939,0.0793999999999999984],
      [0.100800000000000001,0.0839000000000000024,0.0811999999999999944,0.0884000000000000064,0.080600000000000005,0.106399999999999995,0.0812500000000000028,0.0803999999999999992,0.0937000000000000055],
      [0.111449999999999994,0.0932499999999999996,0.0899999999999999967,0.0986999999999999961,0.0885500000000000037,0.116849999999999996,0.0879999999999999949,0.0889999999999999958,0.104099999999999998],
      [0.104599999999999999,0.0864000000000000046,0.0836999999999999966,0.0908999999999999947,0.0828499999999999931,0.110799999999999996,0.0835000000000000048,0.0827500000000000041,0.0967500000000000027],
      [0.0884500000000000008,0.0791499999999999981,0.0773999999999999966,0.0819499999999999951,0.0763500000000000012,0.0911499999999999949,0.0761499999999999955,0.0767499999999999988,0.0848000000000000004],
      [0.116599999999999995,0.0985000000000000042,0.0951499999999999985,0.103950000000000001,0.0936000000000000026,0.121899999999999994,0.0928999999999999965,0.0941000000000000031,0.109350000000000003],
      [0.0801000000000000045,0.075200000000000003,0.0741499999999999937,0.0767499999999999988,0.073300000000000004,0.0812500000000000028,0.0729000000000000065,0.0737000000000000016,0.0782500000000000001],
      [0.0780499999999999944,0.0751499999999999946,0.0745500000000000052,0.0761499999999999955,0.0738000000000000045,0.0779500000000000054,0.0727499999999999952,0.0742000000000000021,0.0772000000000000047],
      [0.0976999999999999952,0.0823500000000000065,0.0796999999999999931,0.0865999999999999964,0.0786499999999999977,0.102499999999999994,0.0788500000000000034,0.0788500000000000034,0.0913500000000000006],
      [0.119499999999999995,0.101500000000000007,0.0981500000000000011,0.107050000000000006,0.0964499999999999941,0.12475,0.0956000000000000044,0.0970000000000000029,0.1124],
      [0.0937000000000000055,0.0805000000000000021,0.0782000000000000056,0.0842999999999999999,0.0769500000000000045,0.0976500000000000007,0.0768500000000000016,0.0773500000000000021,0.0884500000000000008],
      [0.0862499999999999933,0.0785000000000000003,0.076999999999999999,0.0808999999999999997,0.0760500000000000065,0.0884000000000000064,0.0759999999999999981,0.0763999999999999957,0.0832500000000000046],
      [0.0860500000000000015,0.0791000000000000036,0.0776499999999999968,0.0812500000000000028,0.0766499999999999959,0.0879000000000000059,0.0764999999999999986,0.0770499999999999935,0.0833499999999999935],
      [0.106899999999999995,0.0888499999999999984,0.0858000000000000013,0.094200000000000006,0.0850000000000000061,0.112600000000000006,0.0853499999999999953,0.0850999999999999951,0.0995999999999999941]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPUSD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPUSD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPUSD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPUSD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURCAD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y","2M","9M","1W","2W","3M","1M","3W","2Y","6M"],
    "COLUMNS" : ["ATM","10D PUT","25D CALL","25D PUT","10D CALL"],
    "VALUES" : [
      [0.0671000000000000069,0.0767000000000000043,0.0699499999999999983,0.0696999999999999981,0.0771499999999999964],
      [0.0667500000000000038,0.071599999999999997,0.0683499999999999941,0.0683499999999999941,0.071599999999999997],
      [0.0666000000000000064,0.074749999999999997,0.0691500000000000031,0.0688499999999999945,0.0752499999999999974],
      [0.0680000000000000049,0.071599999999999997,0.0688499999999999945,0.0685999999999999943,0.0717499999999999943],
      [0.0652500000000000024,0.0657500000000000029,0.0662500000000000033,0.0662999999999999978,0.0657999999999999974],
      [0.0665000000000000036,0.071599999999999997,0.0683499999999999941,0.0680999999999999939,0.0720500000000000029],
      [0.0672500000000000042,0.0705999999999999961,0.068449999999999997,0.068449999999999997,0.0705999999999999961],
      [0.0645000000000000018,0.0666500000000000009,0.0656000000000000055,0.0656000000000000055,0.0666999999999999954],
      [0.0702500000000000069,0.0777499999999999997,0.0731500000000000067,0.072400000000000006,0.0791499999999999981],
      [0.0660499999999999976,0.0728000000000000036,0.0682999999999999996,0.0680499999999999994,0.0732499999999999957]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURCAD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURCAD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURCAD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURCAD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.AUDUSD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["2Y","6W","1M","4M","1W","18M","2W","5M","9M","3W","2M","3Y","1Y","6M","3M"],
    "COLUMNS" : ["25D CALL","15D CALL","35D CALL","25D PUT","15D PUT","ATM","10D CALL","10D PUT","35D PUT"],
    "VALUES" : [
      [0.101449999999999999,0.101650000000000004,0.102050000000000002,0.117050000000000001,0.12584999999999999,0.105249999999999996,0.102349999999999997,0.132950000000000013,0.111100000000000004],
      [0.0950000000000000011,0.0942999999999999949,0.0956999999999999934,0.102599999999999997,0.1061,0.097449999999999995,0.0938999999999999974,0.108700000000000005,0.10005],
      [0.0941499999999999976,0.0936000000000000026,0.0947000000000000064,0.100800000000000001,0.103800000000000003,0.0962500000000000022,0.093299999999999994,0.106050000000000005,0.0985000000000000042],
      [0.0965499999999999969,0.0957500000000000018,0.097449999999999995,0.107499999999999998,0.112949999999999995,0.0998499999999999943,0.0954499999999999932,0.117150000000000004,0.103650000000000006],
      [0.0950499999999999956,0.0948500000000000038,0.0951499999999999985,0.0986999999999999961,0.100449999999999998,0.0957500000000000018,0.094200000000000006,0.101199999999999998,0.0971500000000000002],
      [0.100150000000000003,0.100400000000000003,0.100849999999999995,0.115099999999999994,0.124549999999999994,0.103749999999999995,0.101250000000000007,0.13214999999999999,0.108749999999999999],
      [0.0918000000000000066,0.0913999999999999951,0.0921000000000000013,0.0967500000000000027,0.0990000000000000047,0.0931499999999999967,0.0908500000000000002,0.100199999999999997,0.0949500000000000066],
      [0.0967500000000000027,0.0961499999999999994,0.0976000000000000062,0.108299999999999993,0.114299999999999999,0.10005,0.0959499999999999936,0.11895,0.104099999999999998],
      [0.0987500000000000044,0.0985999999999999932,0.0994499999999999967,0.111949999999999994,0.119450000000000001,0.102150000000000005,0.0989000000000000018,0.125400000000000011,0.106749999999999998],
      [0.0933500000000000024,0.0928999999999999965,0.0938999999999999974,0.0994499999999999967,0.102099999999999996,0.0952500000000000013,0.0924500000000000044,0.103900000000000006,0.0972999999999999976],
      [0.0963999999999999996,0.0956000000000000044,0.0971999999999999947,0.104849999999999999,0.108749999999999999,0.099150000000000002,0.0951499999999999985,0.111649999999999999,0.101999999999999993],
      [0.103849999999999998,0.104550000000000004,0.104300000000000004,0.120849999999999999,0.130649999999999988,0.107749999999999999,0.105649999999999994,0.13869999999999999,0.114250000000000004],
      [0.100099999999999995,0.1003,0.100699999999999998,0.114250000000000004,0.122850000000000001,0.103499999999999995,0.100900000000000004,0.129799999999999999,0.108399999999999996],
      [0.097350000000000006,0.0969,0.0981000000000000066,0.109299999999999994,0.115750000000000006,0.100650000000000003,0.0969,0.120749999999999996,0.104849999999999999],
      [0.096000000000000002,0.0952000000000000068,0.0969,0.105999999999999997,0.110899999999999999,0.099150000000000002,0.0948500000000000038,0.114549999999999999,0.102599999999999997]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.AUDUSD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.AUDUSD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.AUDUSD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.AUDUSD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.NZDJPY.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3W","9M","1M","6M","2M","1Y","1W","2W","3M"],
    "COLUMNS" : ["10D PUT","25D PUT","ATM","25D CALL","10D CALL"],
    "VALUES" : [
      [0.106550000000000006,0.0980000000000000038,0.0898999999999999938,0.0861999999999999988,0.0840000000000000052],
      [0.148650000000000004,0.127650000000000013,0.112000000000000002,0.105599999999999999,0.106800000000000006],
      [0.110700000000000007,0.100900000000000004,0.0924500000000000044,0.0886500000000000066,0.0877000000000000002],
      [0.141100000000000003,0.123499999999999999,0.109200000000000005,0.103050000000000003,0.102300000000000002],
      [0.121800000000000005,0.110149999999999998,0.099699999999999997,0.0947500000000000009,0.0933999999999999969],
      [0.156599999999999989,0.13155,0.114299999999999999,0.107450000000000004,0.110200000000000006],
      [0.0999000000000000027,0.0938999999999999974,0.0862499999999999933,0.0817500000000000032,0.0845000000000000057],
      [0.101199999999999998,0.0945499999999999952,0.086900000000000005,0.0831999999999999962,0.0786499999999999977],
      [0.130399999999999988,0.116500000000000006,0.104300000000000004,0.0988499999999999934,0.0979000000000000009]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.NZDJPY.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.NZDJPY.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.NZDJPY.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.NZDJPY.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURUSD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3Y","3M","4Y","6M","18M","5M","7Y","10Y","2W","1W","1Y","9M","3W","1M","4M","6W","2Y","2M","5Y"],
    "COLUMNS" : ["35D PUT","10D CALL","15D CALL","10D PUT","15D PUT","35D CALL","ATM","25D CALL","25D PUT"],
    "VALUES" : [
      [0.080149999999999999,0.0773500000000000021,0.0760500000000000065,0.09375,0.089249999999999996,0.0751499999999999946,0.0767499999999999988,0.0751000000000000001,0.083849999999999994],
      [0.0723499999999999976,0.0680499999999999994,0.0681500000000000022,0.0793999999999999984,0.0773999999999999966,0.0689000000000000029,0.0702500000000000069,0.068449999999999997,0.0745999999999999996],
      [0.0830999999999999933,0.0816000000000000059,0.0800499999999999962,0.0962999999999999967,0.0918500000000000011,0.0785499999999999948,0.0798999999999999988,0.0787500000000000006,0.0865500000000000019],
      [0.0728000000000000036,0.0680000000000000049,0.0678499999999999936,0.0826500000000000012,0.0796999999999999931,0.0684000000000000025,0.0699499999999999983,0.0679499999999999965,0.0757499999999999979],
      [0.0759999999999999981,0.0723499999999999976,0.0714999999999999941,0.0903499999999999998,0.0858499999999999958,0.0709499999999999992,0.0726500000000000062,0.0708000000000000018,0.0801000000000000045],
      [0.072499999999999995,0.0676500000000000018,0.0676500000000000018,0.0816500000000000004,0.0789500000000000063,0.0682999999999999996,0.0699000000000000038,0.0678499999999999936,0.0753000000000000058],
      [0.0864999999999999936,0.0895999999999999991,0.0870999999999999969,0.0992500000000000049,0.0947500000000000009,0.0835999999999999938,0.0840000000000000052,0.0845500000000000002,0.0896499999999999936],
      [0.0907499999999999973,0.0974000000000000005,0.0940000000000000002,0.104300000000000004,0.0994000000000000022,0.0887000000000000011,0.0884999999999999953,0.0903999999999999942,0.0939500000000000057],
      [0.069349999999999995,0.0669000000000000011,0.0670499999999999985,0.0729000000000000065,0.0719000000000000056,0.0674499999999999961,0.0681999999999999967,0.0671999999999999958,0.0704000000000000042],
      [0.0700999999999999956,0.0680499999999999994,0.0684000000000000025,0.0723000000000000032,0.0718000000000000027,0.0686999999999999972,0.069250000000000006,0.0685499999999999998,0.0708499999999999963],
      [0.0743999999999999939,0.070150000000000004,0.0695500000000000007,0.0879000000000000059,0.083750000000000005,0.069250000000000006,0.0709999999999999937,0.0690500000000000003,0.0784500000000000058],
      [0.0734999999999999959,0.0687500000000000056,0.0683499999999999941,0.0853499999999999953,0.0817500000000000032,0.0685999999999999943,0.0703499999999999959,0.0682500000000000051,0.0771000000000000019],
      [0.0690000000000000058,0.0661500000000000005,0.0662500000000000033,0.0731500000000000067,0.0719500000000000001,0.0667999999999999983,0.0676500000000000018,0.0665000000000000036,0.0702500000000000069],
      [0.0710999999999999965,0.0676999999999999963,0.067900000000000002,0.0757000000000000034,0.0743499999999999994,0.0686500000000000027,0.0695999999999999952,0.0682500000000000051,0.0725500000000000034],
      [0.0726500000000000062,0.0678499999999999936,0.0679499999999999965,0.0808500000000000052,0.0784500000000000058,0.0686999999999999972,0.0701999999999999985,0.0681500000000000022,0.0751499999999999946],
      [0.0718499999999999972,0.0680499999999999994,0.0681999999999999967,0.0772499999999999992,0.0757000000000000034,0.0690000000000000058,0.0700999999999999956,0.0685499999999999998,0.0735500000000000043],
      [0.0782000000000000056,0.0743000000000000049,0.0733499999999999985,0.091950000000000004,0.0875500000000000028,0.0727000000000000007,0.0744999999999999968,0.0725999999999999979,0.0820499999999999979],
      [0.0720999999999999974,0.0682500000000000051,0.0682999999999999996,0.0782500000000000001,0.0764999999999999986,0.0690500000000000003,0.0701999999999999985,0.0685499999999999998,0.0740500000000000047],
      [0.0848000000000000004,0.0841999999999999971,0.0824499999999999955,0.0980000000000000038,0.0934500000000000053,0.0805499999999999966,0.0817500000000000032,0.0808999999999999997,0.0881500000000000061]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURUSD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURUSD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURUSD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURUSD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDNTD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6W","18M","4M","3M","6M","2W","1Y","9M","1W","5M","3W","2Y","2M","1M"],
    "COLUMNS" : ["ATM","10D CALL","35D PUT","25D PUT","25D CALL","35D CALL","10D PUT","15D CALL","15D PUT"],
    "VALUES" : [
      [0.0542499999999999996,0.0655000000000000027,0.053949999999999998,0.0546499999999999972,0.0580000000000000029,0.0558999999999999983,0.0576499999999999999,0.0619999999999999996,0.0560999999999999971],
      [0.0714499999999999996,0.0975000000000000033,0.0696999999999999981,0.0703499999999999959,0.0811999999999999944,0.0759999999999999981,0.0770499999999999935,0.0895999999999999991,0.0734999999999999959],
      [0.0604999999999999982,0.0772999999999999937,0.0595499999999999988,0.0601000000000000006,0.0666000000000000064,0.0633500000000000035,0.0641999999999999932,0.0722000000000000003,0.0619999999999999996],
      [0.0582000000000000017,0.0729999999999999954,0.057549999999999997,0.0582000000000000017,0.0636000000000000038,0.060699999999999997,0.0621499999999999969,0.0685000000000000053,0.0601000000000000006],
      [0.0626499999999999974,0.0820000000000000034,0.0614999999999999991,0.0621000000000000024,0.0695000000000000062,0.0658500000000000058,0.0668500000000000066,0.0759999999999999981,0.0642500000000000016],
      [0.0496499999999999997,0.0536000000000000018,0.0500999999999999987,0.0510499999999999982,0.0513499999999999998,0.050250000000000003,0.0531500000000000028,0.0531500000000000028,0.0526999999999999968],
      [0.0677999999999999992,0.0913999999999999951,0.0662999999999999978,0.0669499999999999956,0.0766499999999999959,0.0719500000000000001,0.073300000000000004,0.0842999999999999999,0.0698499999999999954],
      [0.0659499999999999947,0.0879500000000000004,0.0645499999999999963,0.0650499999999999967,0.0740500000000000047,0.0697500000000000064,0.0704000000000000042,0.0812500000000000028,0.0675499999999999989],
      [0.0473500000000000032,0.0597499999999999976,0.0476999999999999993,0.0481499999999999984,0.0481999999999999998,0.0476999999999999993,0.0598500000000000004,0.0510999999999999996,0.0510999999999999996],
      [0.0615500000000000005,0.0796999999999999931,0.0604999999999999982,0.0610500000000000001,0.0680499999999999994,0.0645499999999999963,0.0654499999999999943,0.0740999999999999992,0.0631000000000000033],
      [0.0514000000000000012,0.0587999999999999981,0.0514500000000000027,0.0522999999999999993,0.053949999999999998,0.0524499999999999966,0.0546999999999999986,0.0567500000000000018,0.0537499999999999992],
      [0.0734999999999999959,0.101449999999999999,0.0716999999999999998,0.072400000000000006,0.0839499999999999968,0.078350000000000003,0.0797500000000000014,0.0929999999999999993,0.0758500000000000008],
      [0.0558499999999999969,0.0685999999999999943,0.0554499999999999993,0.0561499999999999985,0.0602999999999999994,0.0579000000000000001,0.0594999999999999973,0.0646999999999999936,0.0577999999999999972],
      [0.0534999999999999989,0.0634500000000000064,0.053400000000000003,0.0541000000000000023,0.0568000000000000033,0.0548999999999999974,0.057099999999999998,0.0602999999999999994,0.0555999999999999966]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDNTD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDNTD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDNTD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDNTD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.AUDCNH.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","2Y","3W","9M","1W","6M","1Y","2M","3M","2W"],
    "COLUMNS" : ["25D CALL","10D CALL","25D PUT","10D PUT","ATM"],
    "VALUES" : [
      [0.0799499999999999933,0.0830000000000000043,0.086099999999999996,0.0921000000000000013,0.0811000000000000054],
      [0.0849000000000000032,0.091499999999999998,0.0900999999999999995,0.100849999999999995,0.0830000000000000043],
      [0.0776499999999999968,0.0792999999999999955,0.0843499999999999944,0.0893499999999999989,0.0791499999999999981],
      [0.0826500000000000012,0.090149999999999994,0.0875999999999999973,0.0986999999999999961,0.0816000000000000059],
      [0.0785499999999999948,0.0804499999999999937,0.0859999999999999931,0.0877499999999999947,0.0807500000000000023],
      [0.0845999999999999946,0.0913999999999999951,0.089700000000000002,0.0995999999999999941,0.0840999999999999942],
      [0.0821999999999999953,0.0903499999999999998,0.0870999999999999969,0.0990999999999999936,0.080600000000000005],
      [0.0815499999999999975,0.0842500000000000054,0.0873000000000000026,0.0931499999999999967,0.0822999999999999982],
      [0.0826999999999999957,0.0850000000000000061,0.0880999999999999978,0.0936499999999999971,0.0830499999999999988],
      [0.0760500000000000065,0.075649999999999995,0.0831500000000000017,0.0867499999999999938,0.077899999999999997]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.AUDCNH.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.AUDCNH.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.AUDCNH.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.AUDCNH.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-JPMRDIAN.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","1Y","3M","6M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.0420948800000000012],
      [0.0416621199999999969],
      [0.0446657300000000007],
      [0.0435052199999999972]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-JPMRDIAN.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-JPMRDIAN.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-JPMRDIAN.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-JPMRDIAN.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.USD-LIBOR-3M.VOL.CAP.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3Y","30Y","10Y","1Y","25Y","4Y","15Y","20Y","7Y","2Y","5Y"],
    "COLUMNS" : ["0.035","0.05","0.005","0.02","0.01","0.015","0.03","ATM","0.04","0.025"],
    "VALUES" : [
      [0.388400000000000023,0.290700000000000014,1.04249999999999998,0.549100000000000033,0.774399999999999977,0.638499999999999956,0.431200000000000028,0.302200000000000024,0.35199999999999998,0.483200000000000018],
      [0.247799999999999992,0.21959999999999999,0.624600000000000044,0.315599999999999992,0.437699999999999978,0.36080000000000001,0.26369999999999999,0.233000000000000013,0.23580000000000001,0.285399999999999987],
      [0.316900000000000015,0.274299999999999988,0.787699999999999956,0.41449999999999998,0.574699999999999989,0.475800000000000001,0.340500000000000025,0.2878,0.298899999999999999,0.371900000000000008],
      [0.367900000000000005,0.211499999999999994,1.17090000000000005,0.595899999999999985,0.875499999999999945,0.710999999999999965,0.431999999999999995,0.163300000000000001,0.310800000000000021,0.506299999999999972],
      [0.251000000000000001,0.22320000000000001,0.623500000000000054,0.320000000000000007,0.443000000000000005,0.365800000000000014,0.267100000000000004,0.234300000000000008,0.239100000000000007,0.289100000000000024],
      [0.383799999999999975,0.30209999999999998,1.01279999999999992,0.531599999999999961,0.747600000000000042,0.616500000000000048,0.42220000000000002,0.319699999999999984,0.352200000000000013,0.469899999999999984],
      [0.280200000000000005,0.245999999999999996,0.6875,0.361700000000000021,0.499400000000000011,0.413999999999999979,0.299599999999999977,0.256599999999999995,0.265600000000000003,0.325799999999999979],
      [0.258799999999999975,0.229599999999999999,0.639700000000000046,0.331899999999999973,0.459699999999999998,0.379900000000000015,0.275899999999999979,0.239300000000000013,0.246200000000000002,0.299200000000000021],
      [0.347399999999999987,0.293899999999999995,0.89249999999999996,0.464799999999999991,0.651000000000000023,0.536699999999999955,0.376300000000000023,0.309900000000000009,0.325199999999999989,0.413999999999999979],
      [0.393100000000000005,0.267699999999999994,1.121,0.582200000000000051,0.833600000000000008,0.683200000000000029,0.444900000000000018,0.258599999999999997,0.347499999999999976,0.506199999999999983],
      [0.37230000000000002,0.303300000000000014,0.974999999999999978,0.508499999999999952,0.715099999999999958,0.589099999999999957,0.406799999999999995,0.321299999999999975,0.344700000000000006,0.45069999999999999]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.USD-LIBOR-3M.VOL.CAP.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.USD-LIBOR-3M.VOL.CAP.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.USD-LIBOR-3M.VOL.CAP.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.USD-LIBOR-3M.VOL.CAP.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.AUDZAR.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","2Y","9M","3W","2W","3M","6M","1Y","1W","2M"],
    "COLUMNS" : ["10D PUT","25D PUT","10D CALL","ATM","25D CALL"],
    "VALUES" : [
      [0.111049999999999996,0.111799999999999997,0.128599999999999992,0.113500000000000004,0.121399999999999994],
      [0.136899999999999994,0.127599999999999991,0.143749999999999989,0.123799999999999993,0.131950000000000012],
      [0.127799999999999997,0.123100000000000001,0.136800000000000005,0.120950000000000002,0.128349999999999992],
      [0.108499999999999999,0.108299999999999993,0.118400000000000005,0.110850000000000004,0.118999999999999995],
      [0.116000000000000006,0.108299999999999993,0.125950000000000006,0.110850000000000004,0.117650000000000005],
      [0.117400000000000004,0.116500000000000006,0.13105,0.116500000000000006,0.123899999999999996],
      [0.123399999999999996,0.120399999999999993,0.134149999999999991,0.118999999999999995,0.126299999999999996],
      [0.131399999999999989,0.125099999999999989,0.13869999999999999,0.122249999999999998,0.129750000000000004],
      [0.1245,0.107550000000000007,0.134399999999999992,0.110750000000000001,0.116849999999999996],
      [0.115500000000000005,0.115349999999999994,0.1313,0.116250000000000006,0.123899999999999996]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.AUDZAR.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.AUDZAR.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.AUDZAR.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.AUDZAR.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.TWD-TAIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","3Y","25Y","20Y","2Y","1M","10Y","1Y","7Y","5Y","30Y","6M","3M","4Y","15Y"],
    "COLUMNS" : ["1Y","3Y","20Y","4Y","5Y","25Y","10Y","7Y","30Y","15Y","2Y"],
    "VALUES" : [
      [0.00417481000000000015,0.00451615000000000003,0.00501286000000000006,0.00471908999999999957,0.00495383000000000021,0.00501286000000000006,0.00501286000000000006,0.00496082000000000033,0.00501286000000000006,0.00501286000000000006,0.00433695999999999995],
      [0.00392333000000000005,0.00387704999999999994,0.00409468999999999979,0.0038165199999999999,0.00379217000000000009,0.00409468999999999979,0.00409468999999999979,0.00394877999999999982,0.00409468999999999979,0.00409468999999999979,0.00391620999999999983],
      [0.00361137999999999997,0.00296190999999999989,0.00339141000000000008,0.00265628000000000001,0.00234820999999999988,0.00339141000000000008,0.00339141000000000008,0.0027640999999999998,0.00339141000000000008,0.00339141000000000008,0.00325160999999999983],
      [0.00361137999999999997,0.00296190999999999989,0.00339141000000000008,0.00265628000000000001,0.00234820999999999988,0.00339141000000000008,0.00339141000000000008,0.0027640999999999998,0.00339141000000000008,0.00339141000000000008,0.00325160999999999983],
      [0.00404269999999999977,0.00419545999999999981,0.00449018999999999981,0.00428100000000000008,0.00437388000000000013,0.00449018999999999981,0.00449018999999999981,0.00447209999999999969,0.00449018999999999981,0.00449018999999999981,0.00409137000000000042],
      [0.00419086000000000024,0.00447330000000000037,0.00532320000000000015,0.00458468999999999977,0.00473702999999999971,0.00532320000000000015,0.00532320000000000015,0.00494920999999999989,0.00532320000000000015,0.00532320000000000015,0.00435825000000000014],
      [0.00361137999999999997,0.00296190999999999989,0.00339141000000000008,0.00265628000000000001,0.00234820999999999988,0.00339141000000000008,0.00339141000000000008,0.0027640999999999998,0.00339141000000000008,0.00339141000000000008,0.00325160999999999983],
      [0.00421520999999999962,0.0045736300000000004,0.00489909999999999998,0.00480078000000000015,0.00505580000000000005,0.00489909999999999998,0.00489909999999999998,0.00498788000000000009,0.00489909999999999998,0.00489909999999999998,0.00438620999999999976],
      [0.00399635000000000008,0.00326269999999999989,0.00339239999999999984,0.00291768000000000019,0.00255458999999999981,0.00339239999999999984,0.00339239999999999984,0.00288784999999999997,0.00339239999999999984,0.00339239999999999984,0.00364416999999999996],
      [0.00394875,0.00330014999999999996,0.00329934999999999994,0.00296992000000000003,0.00262290000000000006,0.00329934999999999994,0.00329934999999999994,0.00288496000000000022,0.00329934999999999994,0.00329934999999999994,0.00358602000000000009],
      [0.00361137999999999997,0.00296190999999999989,0.00339141000000000008,0.00265628000000000001,0.00234820999999999988,0.00339141000000000008,0.00339141000000000008,0.0027640999999999998,0.00339141000000000008,0.00339141000000000008,0.00325160999999999983],
      [0.00414915999999999983,0.00449115000000000018,0.00513054000000000027,0.00465844999999999974,0.00487081999999999966,0.00513054000000000027,0.00513054000000000027,0.00494772000000000007,0.00513054000000000027,0.00513054000000000027,0.00432886000000000035],
      [0.00418779000000000026,0.0044818499999999999,0.0052505099999999999,0.00460964999999999986,0.00479449000000000021,0.0052505099999999999,0.0052505099999999999,0.00494625000000000013,0.0052505099999999999,0.0052505099999999999,0.00434429999999999972],
      [0.00397547999999999999,0.00358474999999999983,0.00370326999999999983,0.00342730999999999982,0.00324794999999999988,0.00370326999999999983,0.00370326999999999983,0.0034360599999999999,0.00370326999999999983,0.00370326999999999983,0.00379115000000000008],
      [0.00361137999999999997,0.00296190999999999989,0.00339141000000000008,0.00265628000000000001,0.00234820999999999988,0.00339141000000000008,0.00339141000000000008,0.0027640999999999998,0.00339141000000000008,0.00339141000000000008,0.00325160999999999983]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.TWD-TAIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.TWD-TAIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.TWD-TAIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.TWD-TAIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.USD-LIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3Y","25Y","3M","5Y","9M","6M","15Y","7Y","1Y","4Y","2M","20Y","10Y","1M","2Y"],
    "COLUMNS" : ["4Y","3Y","20Y","2Y","10Y","15Y","5Y","30Y","7Y","25Y","1Y"],
    "VALUES" : [
      [0.01230996,0.0125615799999999993,0.00998020999999999978,0.0129499300000000001,0.0108411800000000006,0.0103894499999999997,0.0120030399999999995,0.00964016999999999999,0.0114400200000000004,0.00975999999999999958,0.0134597799999999993],
      [0.00669939000000000038,0.00679919000000000009,0.00579993000000000002,0.00696774999999999999,0.00608049000000000003,0.0059102,0.00658002999999999973,0.00575003999999999967,0.00643055000000000015,0.00576003000000000018,0.00708755999999999969],
      [0.0122095299999999997,0.0121508399999999996,0.0116736900000000005,0.0121263699999999992,0.0121216999999999991,0.0118833299999999992,0.0122376299999999993,0.0114445799999999993,0.0121701499999999994,0.0115498900000000002,0.00868729000000000029],
      [0.0111141399999999998,0.0113543499999999992,0.00913166999999999972,0.0115678699999999992,0.00998772000000000028,0.00951855000000000062,0.0108575000000000008,0.00881864000000000085,0.0104901300000000003,0.00891995999999999935,0.01190569],
      [0.0127895400000000003,0.0129009299999999997,0.0111806400000000004,0.0131715400000000007,0.0118606900000000001,0.0114926300000000002,0.0126072400000000005,0.0108762000000000008,0.0122504999999999992,0.0109799800000000003,0.0121343400000000004],
      [0.0124892600000000003,0.0125412300000000004,0.0113894600000000006,0.0128247900000000008,0.0119396099999999998,0.0116260400000000007,0.0124297599999999998,0.0111022699999999992,0.0121910300000000003,0.0112199099999999996,0.0109902100000000003],
      [0.00766834999999999999,0.00778582999999999966,0.00647039000000000034,0.00796136000000000066,0.00698746999999999997,0.00667908000000000043,0.00753888000000000041,0.00638101000000000033,0.00733091000000000038,0.00638999999999999985,0.00813198000000000046],
      [0.0100991399999999995,0.0102700900000000008,0.00832988999999999952,0.0104689699999999993,0.00916992999999999975,0.00871055999999999914,0.00990049999999999958,0.00812009999999999989,0.00960145999999999916,0.00821009999999999969,0.0106714800000000005],
      [0.0130900099999999991,0.0132501500000000005,0.0109974300000000007,0.0135016100000000007,0.0117739300000000002,0.0113598799999999993,0.0127754400000000008,0.0106560000000000005,0.0123220799999999991,0.0107499099999999997,0.0133019100000000001],
      [0.0117536700000000008,0.0119993400000000007,0.00946999999999999925,0.01223021,0.0103509099999999996,0.00988968999999999959,0.0114247600000000008,0.00914013999999999972,0.0109295499999999997,0.00924986000000000037,0.0125498299999999997],
      [0.0119481399999999995,0.0118939000000000007,0.0117064100000000004,0.0118031500000000001,0.0120281799999999994,0.0118599199999999995,0.0120037200000000007,0.0115298499999999995,0.01198953,0.0116117100000000008,0.00777969999999999964],
      [0.00688087999999999981,0.00698305000000000019,0.00594017999999999977,0.00715001000000000005,0.0062765099999999999,0.00606884999999999977,0.00675866999999999961,0.00588154000000000021,0.00659942999999999988,0.0058899499999999997,0.0073096999999999997],
      [0.00886310000000000049,0.00902439000000000019,0.00735091000000000043,0.00922776999999999972,0.00809050000000000047,0.00764907999999999994,0.0086786099999999998,0.00721916999999999958,0.00843840000000000041,0.00725007999999999989,0.00942232999999999959],
      [0.0116597999999999997,0.0116103700000000001,0.0117425199999999993,0.0114465799999999996,0.0119249899999999999,0.0118341399999999999,0.01174562,0.0116239399999999993,0.0117900499999999998,0.0116799699999999996,0.00679918000000000015],
      [0.0128007999999999993,0.0130107999999999994,0.0105128700000000005,0.0133688599999999998,0.0113286199999999993,0.0109025200000000006,0.0124899899999999994,0.0101747299999999999,0.0118863800000000002,0.0102898899999999995,0.0136641499999999999]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.USD-LIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.USD-LIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.USD-LIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.USD-LIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPZAR.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","1M","1Y","9M","6M","3M"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.243999999999999995],
      [0.20749999999999999],
      [0.184499999999999997],
      [0.187434999999999991],
      [0.193000000000000005],
      [0.200500000000000012]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPZAR.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPZAR.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPZAR.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPZAR.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.ZAR-JIBAR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["18M","5Y","2Y","3M","1M","4Y","9M","3Y","1Y","6M"],
    "COLUMNS" : ["7Y","3Y","2Y","4Y","1Y","10Y","5Y"],
    "VALUES" : [
      [0.0163488399999999999,0.0154772299999999998,0.0147357700000000005,0.0163635399999999993,0.0140474599999999995,0.01617474,0.0169228800000000013],
      [0.0155000799999999994,0.0169763199999999996,0.0165426899999999988,0.0169747500000000003,0.0161534699999999996,0.0142531299999999993,0.0170575500000000012],
      [0.0159968899999999997,0.0156548999999999994,0.0149691500000000005,0.0164603299999999987,0.0143495299999999992,0.0152760199999999995,0.0167765300000000013],
      [0.0180719499999999998,0.0141275199999999993,0.0125662299999999994,0.0160025300000000009,0.0119119399999999993,0.0176861999999999991,0.0173752900000000016],
      [0.017350850000000001,0.01379821,0.0123043700000000002,0.0153770199999999999,0.0119112200000000001,0.0167983599999999983,0.0168133799999999993],
      [0.0154616800000000002,0.0168750800000000006,0.0163901099999999994,0.0169555400000000016,0.0161306199999999983,0.01464646,0.0171537600000000005],
      [0.0175657500000000015,0.0150084399999999996,0.0137483299999999996,0.01627696,0.0130774800000000007,0.0176920199999999993,0.0170951100000000002],
      [0.0156512800000000001,0.0164484699999999998,0.015996090000000001,0.0168588799999999997,0.0155219999999999993,0.01477119,0.0171251699999999986],
      [0.0170225399999999992,0.01528528,0.0142397600000000006,0.0162461500000000009,0.0138760399999999992,0.0171933200000000015,0.0171082299999999986],
      [0.0176522700000000012,0.01481472,0.0131925400000000009,0.016249099999999999,0.0123739100000000001,0.0176379200000000014,0.0171362000000000007]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.ZAR-JIBAR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.ZAR-JIBAR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.ZAR-JIBAR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.ZAR-JIBAR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURHKD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","1M","3M","9M","1Y","1W"],
    "COLUMNS" : ["10D PUT","ATM","10D CALL","25D PUT","25D CALL"],
    "VALUES" : [
      [0.0691500000000000031,0.0691500000000000031,0.0691500000000000031,0.0691500000000000031,0.0691500000000000031],
      [0.0695000000000000062,0.0695000000000000062,0.0695000000000000062,0.0695000000000000062,0.0695000000000000062],
      [0.0694499999999999978,0.0694499999999999978,0.0694499999999999978,0.0694499999999999978,0.0694499999999999978],
      [0.0698499999999999954,0.0698499999999999954,0.0698499999999999954,0.0698499999999999954,0.0698499999999999954],
      [0.0705500000000000016,0.0705500000000000016,0.0705500000000000016,0.0705500000000000016,0.0705500000000000016],
      [0.0690999999999999948,0.0690999999999999948,0.0690999999999999948,0.0690999999999999948,0.0690999999999999948]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURHKD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURHKD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURHKD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURHKD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDHKD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","3W","2Y","3M","1Y","1M","9M","2M","6M"],
    "COLUMNS" : ["15D PUT","ATM","35D PUT","15D CALL","25D CALL","10D CALL","10D PUT","25D PUT","35D CALL"],
    "VALUES" : [
      [0.0222550000000000005,0.0133349999999999996,0.01222,0.0235350000000000004,0.0126099999999999997,0.0126750000000000005,0.0221149999999999992,0.0161400000000000016,0.0126199999999999993],
      [0.0225050000000000007,0.0119799999999999993,0.0125100000000000003,0.0239399999999999995,0.0165949999999999986,0.0283349999999999991,0.0266699999999999993,0.0156750000000000014,0.0129949999999999996],
      [0.0612800000000000011,0.0280000000000000006,0.0301349999999999986,0.0568200000000000024,0.0376850000000000032,0.0678099999999999953,0.0755549999999999972,0.0395150000000000015,0.0290200000000000007],
      [0.0320150000000000018,0.0097750000000000007,0.0167750000000000017,0.0335949999999999999,0.00924499999999999975,0.0100350000000000005,0.0156950000000000006,0.0121700000000000003,0.0173750000000000016],
      [0.0473000000000000018,0.0116249999999999999,0.0235649999999999991,0.0486849999999999991,0.012005,0.0183900000000000001,0.0239399999999999995,0.0141200000000000006,0.0240749999999999992],
      [0.0225300000000000014,0.0105500000000000003,0.0125450000000000006,0.0240049999999999986,0.00947500000000000078,0.00877499999999999981,0.0175450000000000016,0.0134350000000000008,0.0130449999999999993],
      [0.0394100000000000006,0.0107250000000000002,0.0205499999999999988,0.0403099999999999986,0.0107899999999999992,0.0185750000000000012,0.0224050000000000013,0.0129750000000000004,0.0210599999999999989],
      [0.0269900000000000001,0.0098250000000000004,0.0145649999999999998,0.0284650000000000007,0.00903999999999999942,0.00929499999999999944,0.0158149999999999992,0.01239,0.0151000000000000006],
      [0.0374649999999999983,0.00992499999999999979,0.0193450000000000011,0.0388300000000000034,0.00967499999999999957,0.0126949999999999997,0.0182949999999999988,0.0123149999999999996,0.0199149999999999987]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDHKD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDHKD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDHKD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDHKD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDKRW.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","6M","2M","3M","1Y","3W","2W","1M","1W","2Y"],
    "COLUMNS" : ["35D CALL","25D CALL","35D PUT","10D PUT","15D CALL","15D PUT","25D PUT","ATM","10D CALL"],
    "VALUES" : [
      [0.134424999999999989,0.100199999999999997,0.116569999999999993,0.0901150000000000007,0.162514999999999993,0.111595,0.0881050000000000028,0.090149999999999994,0.115504999999999997],
      [0.130365000000000009,0.0971800000000000025,0.114019999999999996,0.0888000000000000039,0.154044999999999987,0.109109999999999999,0.0870699999999999946,0.0886900000000000049,0.109255000000000005],
      [0.121675000000000005,0.0929299999999999987,0.1129,0.0894350000000000006,0.135225000000000012,0.111695000000000003,0.0872200000000000059,0.0874999999999999944,0.100489999999999996],
      [0.124875,0.0935600000000000043,0.112879999999999994,0.0892399999999999999,0.142380000000000007,0.11043,0.0865400000000000058,0.0872499999999999942,0.103190000000000004],
      [0.137410000000000004,0.101415000000000005,0.118120000000000003,0.0892349999999999949,0.169030000000000014,0.111005000000000006,0.0879950000000000038,0.0904999999999999971,0.117029999999999995],
      [0.117485000000000006,0.121584999999999999,0.111524999999999999,0.112174999999999997,0.127464999999999995,0.111619999999999997,0.110994999999999996,0.113625000000000004,0.130649999999999988],
      [0.119595000000000007,0.123344999999999996,0.114495,0.115625000000000006,0.128624999999999989,0.115055000000000004,0.114290000000000003,0.116129999999999997,0.131505000000000011],
      [0.116004999999999997,0.0895999999999999991,0.109420000000000003,0.0874400000000000038,0.126629999999999993,0.109140000000000001,0.085205000000000003,0.0851500000000000035,0.0958100000000000063],
      [0.125560000000000005,0.0874049999999999966,0.122814999999999994,0.0874899999999999983,0.131645000000000012,0.124369999999999994,0.0847350000000000048,0.0843499999999999944,0.0922749999999999959],
      [0.150980000000000003,0.16508500000000001,0.131454999999999989,0.125585000000000002,0.185760000000000008,0.12346,0.123945,0.13650000000000001,0.194369999999999987]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDKRW.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDKRW.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDKRW.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDKRW.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.CNHJPY.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3W","1M","1W","2Y","6M","2W","1Y","2M","3M","9M"],
    "COLUMNS" : ["10D CALL","25D CALL","10D PUT","ATM","25D PUT"],
    "VALUES" : [
      [0.0787500000000000006,0.0739999999999999963,0.0855999999999999955,0.0736499999999999932,0.0785499999999999948],
      [0.0793999999999999984,0.0745999999999999996,0.0887000000000000011,0.0749999999999999972,0.0808500000000000052],
      [0.0817500000000000032,0.0787500000000000006,0.085199999999999998,0.0775499999999999939,0.0810000000000000026],
      [0.0892000000000000015,0.0846999999999999975,0.114650000000000002,0.0864999999999999936,0.0987999999999999989],
      [0.0934999999999999998,0.086999999999999994,0.113549999999999998,0.0894999999999999962,0.0994000000000000022],
      [0.0782999999999999946,0.0739500000000000018,0.0834499999999999964,0.0732000000000000012,0.0773999999999999966],
      [0.0967999999999999972,0.0911499999999999949,0.121149999999999994,0.0934999999999999998,0.104700000000000001],
      [0.0851500000000000035,0.0816500000000000004,0.0982999999999999985,0.0830000000000000043,0.090149999999999994],
      [0.0874000000000000055,0.0853499999999999953,0.104349999999999998,0.0874999999999999944,0.0958500000000000046],
      [0.095549999999999996,0.0894500000000000017,0.117749999999999994,0.0918999999999999956,0.102400000000000005]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.CNHJPY.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.CNHJPY.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.CNHJPY.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.CNHJPY.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.USD-SOFR-ON.VOL.SWPT.ATM.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["5Y","20Y","10Y","25Y","7Y","3M","4Y","1Y","3Y","30Y","2Y","1M","2M","9M","6M","15Y"],
    "COLUMNS" : ["25Y","7Y","15Y","3Y","20Y","5Y","10Y","4Y","2Y","1Y","30Y"],
    "VALUES" : [
      [0.219873000000000013,0.243244999999999989,0.236337999999999993,0.288295000000000023,0.234453999999999996,0.272502000000000022,0.245658999999999988,0.261541000000000023,0.275183000000000011,0.285550000000000026,0.242122000000000004],
      [0.229888000000000009,0.191584000000000004,0.20815800000000001,0.192493999999999998,0.195758999999999989,0.192149999999999987,0.204050000000000009,0.192926999999999987,0.193465999999999999,0.195112000000000008,0.216765999999999986],
      [0.191195000000000004,0.192127999999999993,0.185982000000000008,0.20468900000000001,0.200955999999999996,0.196560000000000012,0.187578999999999996,0.200752000000000014,0.224787999999999988,0.216305999999999998,0.216127999999999987],
      [0.235932000000000003,0.230702999999999991,0.212490000000000012,0.214280999999999999,0.253205999999999987,0.231343999999999994,0.203926999999999997,0.234319,0.219164999999999999,0.224071999999999993,0.28447699999999998],
      [0.223016999999999993,0.235001999999999989,0.20419000000000001,0.256004000000000009,0.202935000000000004,0.227902999999999994,0.209718999999999989,0.250284000000000006,0.244657999999999987,0.252211999999999992,0.212101000000000012],
      [0.267210999999999976,0.269838000000000022,0.28339700000000001,0.267262,0.281559999999999977,0.28437800000000002,0.270774000000000015,0.261226999999999987,0.236637999999999987,0.155108999999999997,0.271361999999999992],
      [0.226085000000000008,0.255361000000000005,0.228804000000000007,0.286169000000000007,0.224729000000000012,0.269585999999999992,0.256006000000000011,0.299453000000000025,0.29297200000000001,0.304487999999999981,0.247919],
      [0.272797999999999985,0.284741999999999995,0.259336999999999984,0.300364999999999993,0.253653999999999991,0.315334999999999976,0.270782999999999996,0.321485000000000021,0.297397000000000022,0.276351999999999987,0.277527000000000024],
      [0.236874000000000001,0.269500999999999991,0.240427000000000002,0.302010999999999974,0.252495000000000025,0.306696000000000024,0.252081,0.294513999999999998,0.337146999999999974,0.329708999999999974,0.240250999999999992],
      [0.26591999999999999,0.264919999999999989,0.241606999999999988,0.22975000000000001,0.254892000000000007,0.262467999999999979,0.22755800000000001,0.231137000000000009,0.230499000000000009,0.231396999999999992,0.27518999999999999],
      [0.247636999999999996,0.280617000000000005,0.269768000000000008,0.311603000000000019,0.246318000000000009,0.297289999999999999,0.283092999999999984,0.305674000000000001,0.320475999999999983,0.325008999999999992,0.251004000000000005],
      [0.269006000000000023,0.276494000000000018,0.26303399999999999,0.250321999999999989,0.263809999999999989,0.269440000000000013,0.282633999999999996,0.261573,0.218252000000000002,0.125311000000000006,0.294211999999999974],
      [0.26807700000000001,0.282534000000000007,0.282111000000000001,0.259029000000000009,0.281640000000000001,0.259871000000000019,0.28607100000000002,0.253771999999999998,0.241066000000000003,0.144524999999999987,0.292582999999999982],
      [0.257929999999999993,0.279542000000000013,0.27859299999999998,0.303271000000000013,0.256076999999999999,0.305408000000000013,0.270394000000000023,0.287019000000000024,0.279011999999999982,0.237773000000000012,0.281173000000000006],
      [0.261610000000000009,0.274305999999999994,0.261612000000000011,0.285177000000000014,0.276948000000000027,0.276125999999999983,0.269511999999999974,0.292229000000000017,0.260795999999999972,0.204225999999999991,0.284752000000000005],
      [0.208891999999999994,0.195231999999999989,0.180603000000000014,0.183288000000000006,0.199992000000000003,0.181412999999999991,0.194635000000000002,0.18241099999999999,0.185598000000000013,0.188902999999999988,0.200297000000000003]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.USD-SOFR-ON.VOL.SWPT.ATM.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.USD-SOFR-ON.VOL.SWPT.ATM.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.USD-SOFR-ON.VOL.SWPT.ATM.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.USD-SOFR-ON.VOL.SWPT.ATM.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.HKD-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["10Y","1Y","7Y","3Y","9M","5Y","1M","3M","4Y","6M","2Y"],
    "COLUMNS" : ["1Y","7Y","4Y","10Y","5Y","3Y","2Y"],
    "VALUES" : [
      [0.00926599999999999993,0.00751399999999999985,0.00771499999999999964,0.00744299999999999996,0.00718500000000000041,0.00819199999999999963,0.00857199999999999976],
      [0.0142699999999999997,0.013514,0.0133699999999999999,0.0137129999999999995,0.0131380000000000004,0.0136819999999999997,0.0139769999999999998],
      [0.0123339999999999995,0.0090320000000000001,0.0100169999999999999,0.00919200000000000052,0.00929100000000000065,0.0108430000000000002,0.0115829999999999995],
      [0.0133220000000000005,0.0122240000000000005,0.0124080000000000006,0.0117560000000000008,0.0122330000000000008,0.0128229999999999993,0.0130019999999999997],
      [0.0141279999999999999,0.0133939999999999997,0.0132540000000000002,0.0136939999999999996,0.0130100000000000007,0.0135510000000000005,0.0139069999999999992],
      [0.0126999999999999995,0.0104670000000000006,0.0116100000000000005,0.00988999999999999949,0.0111500000000000002,0.0119620000000000004,0.0120549999999999997],
      [0.0135270000000000008,0.0129899999999999998,0.0128109999999999995,0.0135849999999999999,0.0125649999999999998,0.0130399999999999995,0.0132969999999999998],
      [0.0137310000000000001,0.0130950000000000007,0.0129250000000000007,0.0136139999999999994,0.0126770000000000008,0.0131679999999999992,0.0134830000000000002],
      [0.0128039999999999994,0.0113729999999999994,0.0120859999999999995,0.0108330000000000006,0.0117560000000000008,0.0122290000000000003,0.0126949999999999997],
      [0.0137249999999999994,0.0132449999999999998,0.0130899999999999992,0.0136550000000000005,0.0128439999999999995,0.0133620000000000006,0.0137199999999999996],
      [0.0137830000000000001,0.0129119999999999999,0.0129689999999999996,0.0126730000000000002,0.0125789999999999999,0.0131800000000000007,0.0134929999999999998]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.HKD-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.HKD-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.HKD-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.HKD-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.CNH-HIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["15Y","20Y","3Y","1M","2Y","5Y","30Y","25Y","7Y","10Y","3M","1Y","2M","6M","4Y"],
    "COLUMNS" : ["20Y","5Y","1Y","3Y","2Y","30Y","10Y","4Y","15Y","25Y","7Y"],
    "VALUES" : [
      [0.272826000000000013,0.235144999999999993,0.231279000000000012,0.233437000000000006,0.22753799999999999,0.272826000000000013,0.272824999999999984,0.235802000000000012,0.272824999999999984,0.272826000000000013,0.252939000000000025],
      [0.277471999999999996,0.238047000000000009,0.234030999999999989,0.236274000000000012,0.230155999999999999,0.277471999999999996,0.277471999999999996,0.238730999999999999,0.277471999999999996,0.277471999999999996,0.256591999999999987],
      [0.272355000000000014,0.229937000000000002,0.23014699999999999,0.230606000000000005,0.226971000000000006,0.272355000000000014,0.272355000000000014,0.228938000000000003,0.272355000000000014,0.272355000000000014,0.24793599999999999],
      [0.243223999999999996,0.209715000000000013,0.263349,0.217066000000000009,0.210100000000000009,0.243455000000000005,0.242503999999999997,0.212784000000000001,0.242986000000000008,0.243363999999999997,0.223085000000000006],
      [0.268952999999999998,0.229574,0.250462000000000018,0.238205,0.243535000000000001,0.268952999999999998,0.268952999999999998,0.234125,0.268952999999999998,0.268952999999999998,0.249355999999999994],
      [0.277393000000000001,0.231495000000000006,0.227811999999999987,0.230598999999999998,0.225830000000000003,0.277393000000000001,0.277393000000000001,0.231590999999999991,0.277393000000000001,0.277393000000000001,0.247560000000000002],
      [0.287905000000000022,0.24434800000000001,0.239997999999999989,0.242424000000000001,0.235808999999999991,0.287905000000000022,0.287905000000000022,0.245093000000000005,0.287905000000000022,0.287905000000000022,0.264641000000000015],
      [0.282480000000000009,0.24110899999999999,0.236936000000000008,0.239265000000000005,0.232910000000000006,0.282480000000000009,0.28247899999999998,0.241821000000000008,0.282480000000000009,0.282480000000000009,0.26048300000000002],
      [0.283013000000000015,0.233821000000000001,0.237890999999999991,0.230780000000000013,0.237519000000000008,0.283011999999999986,0.283011999999999986,0.233865999999999991,0.283011999999999986,0.283011999999999986,0.255072999999999994],
      [0.26849400000000001,0.23238700000000001,0.228656999999999999,0.230740000000000001,0.225043999999999994,0.268494999999999984,0.26849400000000001,0.233022000000000007,0.26849400000000001,0.268494999999999984,0.249497999999999998],
      [0.248666999999999999,0.238711000000000007,0.250002000000000002,0.236614999999999992,0.255908999999999998,0.248743999999999993,0.248427000000000009,0.237099000000000004,0.248588000000000003,0.24871299999999999,0.239060999999999996],
      [0.266496000000000011,0.227013999999999994,0.275575999999999988,0.255357000000000001,0.249890000000000001,0.266496000000000011,0.266496000000000011,0.236674999999999996,0.266496000000000011,0.266496000000000011,0.246113999999999999],
      [0.246105999999999991,0.224833000000000005,0.257730999999999988,0.227446000000000009,0.234035999999999994,0.246240999999999988,0.245686999999999989,0.22553999999999999,0.245967999999999992,0.24618799999999999,0.23147100000000001],
      [0.255886000000000002,0.231222000000000011,0.264865000000000017,0.247412999999999994,0.267344000000000026,0.255886000000000002,0.255886000000000002,0.236271000000000009,0.255886000000000002,0.255886000000000002,0.239162000000000013],
      [0.275121999999999978,0.230642000000000014,0.21765000000000001,0.226442000000000004,0.225487999999999994,0.275121999999999978,0.275121999999999978,0.230298000000000003,0.275121999999999978,0.275121999999999978,0.248283000000000004]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.CNH-HIBOR-3M.VOL.SWPT.ATM.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.CNH-HIBOR-3M.VOL.SWPT.ATM.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.CNH-HIBOR-3M.VOL.SWPT.ATM.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.CNH-HIBOR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.CNH-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["4Y","6M","2Y","25Y","3M","1M","30Y","1Y","15Y","7Y","3Y","20Y","10Y","5Y","2M"],
    "COLUMNS" : ["2Y","4Y","15Y","30Y","5Y","1Y","3Y","7Y","25Y","10Y","20Y"],
    "VALUES" : [
      [0.00756530999999999957,0.00772390999999999963,0.00919268999999999989,0.00919268999999999989,0.00773524,0.00730660999999999984,0.00759677000000000009,0.0083152199999999999,0.00919268999999999989,0.00919268999999999989,0.00919268999999999989],
      [0.00903230999999999999,0.00798516999999999977,0.00864634000000000062,0.00864634000000000062,0.0078148699999999998,0.00894875000000000011,0.00836086999999999941,0.00808261000000000049,0.00864634000000000062,0.00864634000000000062,0.00864634000000000062],
      [0.00819963999999999936,0.00788572000000000058,0.00904558999999999919,0.00904558999999999919,0.00773378999999999994,0.00843060999999999984,0.00802187000000000039,0.00839358999999999938,0.00904558999999999919,0.00904558999999999919,0.00904558999999999919],
      [0.00745670000000000013,0.00770955999999999985,0.00881884999999999961,0.00881884999999999961,0.00768946000000000039,0.00757132000000000031,0.00763733000000000033,0.00822785000000000009,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961],
      [0.0087407600000000002,0.00805984000000000041,0.00841977999999999997,0.00841977999999999997,0.00810664999999999997,0.00862221999999999988,0.00805647999999999954,0.00810947000000000057,0.00841977999999999997,0.00841977999999999997,0.00841977999999999997],
      [0.00733079000000000022,0.00731558000000000035,0.00826250000000000075,0.00826250000000000075,0.00718853000000000027,0.00945523000000000023,0.00749983999999999981,0.00762058000000000006,0.00826250000000000075,0.00826250000000000075,0.00826250000000000075],
      [0.00745670000000000013,0.00770955999999999985,0.00881884999999999961,0.00881884999999999961,0.00768946000000000039,0.00757132000000000031,0.00763733000000000033,0.00822785000000000009,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961],
      [0.00843330999999999942,0.00798935999999999917,0.00899040000000000082,0.00899040000000000082,0.0076646800000000001,0.00929480000000000063,0.00861671999999999959,0.00830642000000000012,0.00899040000000000082,0.00899040000000000082,0.00899040000000000082],
      [0.00745670000000000013,0.00770955999999999985,0.00881884999999999961,0.00881884999999999961,0.00768946000000000039,0.00757132000000000031,0.00763733000000000033,0.00822785000000000009,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961],
      [0.00790628999999999985,0.00778850000000000028,0.00935670000000000078,0.00935670000000000078,0.00778703000000000034,0.00791818000000000036,0.00768891000000000019,0.00846948999999999966,0.00935670000000000078,0.00935670000000000078,0.00935670000000000078],
      [0.00763043999999999962,0.00769571999999999964,0.0091303700000000005,0.0091303700000000005,0.00772884999999999978,0.00773576000000000038,0.00775103999999999984,0.00832491999999999954,0.0091303700000000005,0.0091303700000000005,0.0091303700000000005],
      [0.00745670000000000013,0.00770955999999999985,0.00881884999999999961,0.00881884999999999961,0.00768946000000000039,0.00757132000000000031,0.00763733000000000033,0.00822785000000000009,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961],
      [0.00745670000000000013,0.00770955999999999985,0.00881884999999999961,0.00881884999999999961,0.00768946000000000039,0.00757132000000000031,0.00763733000000000033,0.00822785000000000009,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961],
      [0.00756058999999999985,0.00774927999999999988,0.00923734000000000013,0.00923734000000000013,0.00774613000000000038,0.00762555000000000004,0.00771679000000000028,0.00827051000000000001,0.00923734000000000013,0.00923734000000000013,0.00923734000000000013],
      [0.00805851999999999957,0.00769971000000000023,0.00834367999999999915,0.00834367999999999915,0.00766239999999999977,0.00902529000000000005,0.00778713999999999969,0.00787291000000000032,0.00834367999999999915,0.00834367999999999915,0.00834367999999999915]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.CNH-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.CNH-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.CNH-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.CNH-HIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDSEK.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y","2M","3M","6M","1W","9M","1M"],
    "COLUMNS" : ["25D PUT","25D CALL","10D CALL","10D PUT","ATM"],
    "VALUES" : [
      [0.105264999999999997,0.123429999999999998,0.139314999999999994,0.105704999999999993,0.109149999999999997],
      [0.105895000000000003,0.116510000000000002,0.126964999999999995,0.107255000000000003,0.108100000000000002],
      [0.105080000000000007,0.116915000000000005,0.12828500000000001,0.106105000000000005,0.107850000000000001],
      [0.104499999999999996,0.118855000000000002,0.132135000000000002,0.105469999999999994,0.107624999999999998],
      [0.107914999999999997,0.11326,0.119459999999999997,0.109810000000000005,0.108725000000000002],
      [0.104870000000000005,0.121940000000000007,0.137484999999999996,0.105459999999999998,0.108399999999999996],
      [0.103745000000000004,0.112714999999999996,0.121010000000000006,0.104450000000000001,0.105950000000000003]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDSEK.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDSEK.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDSEK.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDSEK.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURJPY.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","3W","1Y","2W","3M","2Y","6M","1W","2M","9M"],
    "COLUMNS" : ["ATM","10D PUT","25D CALL","10D CALL","25D PUT"],
    "VALUES" : [
      [0.0831500000000000017,0.100650000000000003,0.0795000000000000012,0.0790000000000000008,0.0911499999999999949],
      [0.0810000000000000026,0.0977500000000000036,0.0775499999999999939,0.0767999999999999933,0.0887499999999999956],
      [0.0981500000000000011,0.130500000000000005,0.0938500000000000029,0.0966000000000000053,0.111399999999999999],
      [0.0792000000000000065,0.095100000000000004,0.0758999999999999952,0.0749999999999999972,0.0866500000000000048],
      [0.0922499999999999987,0.115500000000000005,0.0879000000000000059,0.0877000000000000002,0.102449999999999999],
      [0.0985000000000000042,0.133200000000000013,0.094200000000000006,0.0978500000000000064,0.113199999999999995],
      [0.0956999999999999934,0.123100000000000001,0.0908500000000000002,0.0909999999999999976,0.107499999999999998],
      [0.0791000000000000036,0.0923500000000000015,0.0757000000000000034,0.0725999999999999979,0.0858499999999999958],
      [0.0893499999999999989,0.109600000000000003,0.085199999999999998,0.0845500000000000002,0.0985499999999999987],
      [0.0970000000000000029,0.127400000000000013,0.0922000000000000042,0.0934500000000000053,0.107499999999999998]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURJPY.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURJPY.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURJPY.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURJPY.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.TWD-TAIBOR-3M.VOL.CAP.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["4Y","7Y","10Y","25Y","20Y","5Y","2Y","1Y","15Y","3Y","30Y"],
    "COLUMNS" : ["0.025","0.04","0.02","ATM","0.015","0.03","0.01"],
    "VALUES" : [
      [0.296599999999999975,0.364900000000000002,0.270799999999999985,0.264000000000000012,0.268100000000000005,0.322699999999999987,0.339200000000000002],
      [0.277799999999999991,0.325299999999999978,0.259599999999999997,0.255199999999999982,0.259199999999999986,0.296099999999999974,0.316800000000000026],
      [0.246299999999999991,0.270199999999999996,0.239300000000000013,0.239999999999999991,0.245700000000000002,0.254900000000000015,0.294899999999999995],
      [0.204699999999999993,0.202800000000000008,0.210100000000000009,0.214900000000000008,0.225099999999999995,0.202800000000000008,0.266199999999999992],
      [0.208999999999999991,0.208699999999999997,0.21329999999999999,0.21790000000000001,0.227200000000000013,0.207800000000000012,0.268500000000000016],
      [0.284799999999999998,0.345999999999999974,0.261599999999999999,0.255699999999999983,0.260199999999999987,0.308300000000000018,0.32779999999999998],
      [0.32290000000000002,0.381900000000000017,0.304200000000000026,0.303400000000000003,0.306900000000000006,0.344600000000000017,0.374099999999999988],
      [0.377300000000000024,0.435099999999999987,0.360399999999999998,0.365499999999999992,0.369900000000000007,0.39800000000000002,0.453400000000000025],
      [0.218700000000000006,0.223599999999999993,0.220400000000000013,0.224299999999999999,0.232300000000000006,0.21959999999999999,0.275100000000000011],
      [0.309599999999999986,0.380000000000000004,0.284299999999999997,0.278600000000000014,0.282399999999999984,0.33610000000000001,0.353700000000000014],
      [0.202600000000000002,0.200199999999999989,0.208600000000000008,0.213400000000000006,0.224299999999999999,0.200399999999999995,0.265699999999999992]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.TWD-TAIBOR-3M.VOL.CAP.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.TWD-TAIBOR-3M.VOL.CAP.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.TWD-TAIBOR-3M.VOL.CAP.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.TWD-TAIBOR-3M.VOL.CAP.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDTHB.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y","3M","6M","1M","2W","9M","3W","2M","1W"],
    "COLUMNS" : ["10D PUT","25D CALL","10D CALL","25D PUT","ATM"],
    "VALUES" : [
      [0.0884550000000000058,0.0902300000000000046,0.102395,0.0820950000000000013,0.0820499999999999979],
      [0.0853850000000000026,0.0893250000000000016,0.0978200000000000042,0.0823699999999999988,0.0829749999999999932],
      [0.0847849999999999993,0.0877799999999999969,0.0977149999999999963,0.0803999999999999992,0.0806499999999999995],
      [0.0816950000000000037,0.0865199999999999997,0.0927000000000000046,0.0803100000000000064,0.0813249999999999945],
      [0.0874299999999999938,0.0983050000000000035,0.110994999999999996,0.085769999999999999,0.0897649999999999976],
      [0.0848600000000000049,0.0882300000000000029,0.0982149999999999967,0.0805700000000000027,0.081049999999999997],
      [0.0860199999999999992,0.0983949999999999964,0.111140000000000003,0.0845849999999999935,0.0891350000000000059],
      [0.0830300000000000066,0.0882899999999999935,0.0950000000000000011,0.0817549999999999943,0.0829249999999999987],
      [0.0820800000000000002,0.0871350000000000041,0.0911399999999999988,0.0821000000000000063,0.0835499999999999993]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDTHB.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDTHB.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDTHB.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDTHB.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.AUDJPY.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","2M","1W","1Y","2Y","1M","3M","6M"],
    "COLUMNS" : ["25D CALL","25D PUT","10D PUT","ATM","10D CALL"],
    "VALUES" : [
      [0.105499999999999997,0.128129999999999994,0.149345000000000006,0.1124,0.105844999999999995],
      [0.0966100000000000014,0.112394999999999995,0.125404999999999989,0.101699999999999999,0.0954200000000000048],
      [0.0872600000000000042,0.0984600000000000058,0.109185000000000004,0.0906,0.0865400000000000058],
      [0.10696,0.130675000000000013,0.15626000000000001,0.114400000000000002,0.107585],
      [0.10771,0.129165000000000002,0.159709999999999991,0.115699999999999997,0.108634999999999995],
      [0.0903899999999999981,0.103959999999999997,0.114754999999999996,0.0947000000000000064,0.0893749999999999961],
      [0.0993850000000000011,0.117035,0.132154999999999995,0.105099999999999999,0.0988050000000000039],
      [0.103565000000000004,0.124225000000000002,0.143215000000000009,0.110100000000000003,0.102889999999999995]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.AUDJPY.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.AUDJPY.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.AUDJPY.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.AUDJPY.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDCN1.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","3M","6M","9M","5M","1W","2W","1Y","4M","2M"],
    "COLUMNS" : ["10D PUT","10D CALL","15D CALL","15D PUT","25D PUT","25D CALL","35D PUT","ATM","35D CALL"],
    "VALUES" : [
      [0.0500950000000000006,0.0565750000000000003,0.077679999999999999,0.031019999999999999,0.0498999999999999999,0.0503699999999999981,0.0371799999999999978,0.0472500000000000003,0.0545100000000000029],
      [0.0499199999999999991,0.0613399999999999987,0.0939650000000000069,0.0354300000000000032,0.0502249999999999988,0.0543449999999999975,0.043395000000000003,0.0490000000000000019,0.065765000000000004],
      [0.0512999999999999984,0.064860000000000001,0.100815000000000002,0.0337000000000000008,0.051485000000000003,0.0562949999999999978,0.0443450000000000025,0.0505000000000000032,0.0686650000000000038],
      [0.051819999999999998,0.0667350000000000027,0.105785000000000004,0.0331450000000000009,0.0522999999999999993,0.0570099999999999982,0.0450499999999999998,0.0509999999999999967,0.0714349999999999985],
      [0.0326750000000000027,0.108984999999999999,0.0994950000000000001,0.0340350000000000028,0.0378300000000000025,0.0810599999999999932,0.0441399999999999987,0.054519999999999999,0.0681100000000000039],
      [0.0453199999999999992,0.0478099999999999983,0.0650600000000000067,0.0427799999999999986,0.0444700000000000026,0.0429599999999999982,0.0399899999999999978,0.0405000000000000013,0.0489699999999999996],
      [0.0363699999999999996,0.0720049999999999996,0.0660250000000000004,0.0357750000000000012,0.0355099999999999999,0.0553849999999999967,0.0374600000000000002,0.0425000000000000031,0.0485500000000000029],
      [0.0518600000000000033,0.0673850000000000005,0.110939999999999997,0.0329949999999999966,0.0524999999999999981,0.0572399999999999992,0.0460699999999999998,0.0512499999999999969,0.0755149999999999988],
      [0.0332300000000000026,0.106719999999999995,0.0975749999999999951,0.0345200000000000021,0.0380549999999999986,0.0799450000000000022,0.0438800000000000023,0.0538249999999999978,0.0672900000000000026],
      [0.0497500000000000026,0.0591949999999999976,0.0869349999999999984,0.0347700000000000023,0.0503849999999999992,0.052049999999999999,0.0420550000000000021,0.0482500000000000012,0.0616150000000000031]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDCN1.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDCN1.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDCN1.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDCN1.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURZAR.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","1W","3M","1M","1Y"],
    "COLUMNS" : ["10D CALL","10D PUT","25D CALL","ATM","25D PUT"],
    "VALUES" : [
      [0.161530000000000007,0.129260000000000014,0.146499999999999991,0.132780000000000009,0.129319999999999991],
      [0.143540000000000001,0.125920000000000004,0.131110000000000004,0.123050000000000007,0.121099999999999999],
      [0.154999999999999999,0.126730000000000009,0.141660000000000008,0.129580000000000001,0.126290000000000013],
      [0.148020000000000013,0.125040000000000012,0.136039999999999994,0.12584999999999999,0.123289999999999997],
      [0.169380000000000003,0.132750000000000007,0.15328,0.138000000000000012,0.134310000000000013]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURZAR.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURZAR.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURZAR.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURZAR.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.USD-SOFR-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","1Y","2M","30Y","15Y","7Y","4Y","20Y","2Y","3Y","9M","6M","5Y","10Y","1M","25Y"],
    "COLUMNS" : ["4Y","2Y","10Y","30Y","20Y","25Y","7Y","5Y","3Y","15Y","1Y"],
    "VALUES" : [
      [0.0122095299999999997,0.0121263699999999992,0.0121216999999999991,0.0114445799999999993,0.0116736900000000005,0.0115498900000000002,0.0121701499999999994,0.0122376299999999993,0.0121508399999999996,0.0118833299999999992,0.00868729000000000029],
      [0.0130900099999999991,0.0135016100000000007,0.0117739300000000002,0.0106560000000000005,0.0109974300000000007,0.0107499099999999997,0.0123220799999999991,0.0127754400000000008,0.0132501500000000005,0.0113598799999999993,0.0133019100000000001],
      [0.0119481399999999995,0.0118031500000000001,0.0120281799999999994,0.0115298499999999995,0.0117064100000000004,0.0116117100000000008,0.01198953,0.0120037200000000007,0.0118939000000000007,0.0118599199999999995,0.00777969999999999964],
      [0.0064019000000000003,0.00661226999999999995,0.00573071999999999991,0.00550009000000000001,0.00553003000000000002,0.00550006000000000019,0.00614050000000000012,0.00632112000000000038,0.00648210000000000019,0.00560996999999999971,0.00671192999999999963],
      [0.00766834999999999999,0.00796136000000000066,0.00698746999999999997,0.00638101000000000033,0.00647039000000000034,0.00638999999999999985,0.00733091000000000038,0.00753888000000000041,0.00778582999999999966,0.00667908000000000043,0.00813198000000000046],
      [0.0100991399999999995,0.0104689699999999993,0.00916992999999999975,0.00812009999999999989,0.00832988999999999952,0.00821009999999999969,0.00960145999999999916,0.00990049999999999958,0.0102700900000000008,0.00871055999999999914,0.0106714800000000005],
      [0.0117536700000000008,0.01223021,0.0103509099999999996,0.00914013999999999972,0.00946999999999999925,0.00924986000000000037,0.0109295499999999997,0.0114247600000000008,0.0119993400000000007,0.00988968999999999959,0.0125498299999999997],
      [0.00688087999999999981,0.00715001000000000005,0.0062765099999999999,0.00588154000000000021,0.00594017999999999977,0.0058899499999999997,0.00659942999999999988,0.00675866999999999961,0.00698305000000000019,0.00606884999999999977,0.0073096999999999997],
      [0.0128007999999999993,0.0133688599999999998,0.0113286199999999993,0.0101747299999999999,0.0105128700000000005,0.0102898899999999995,0.0118863800000000002,0.0124899899999999994,0.0130107999999999994,0.0109025200000000006,0.0136641499999999999],
      [0.01230996,0.0129499300000000001,0.0108411800000000006,0.00964016999999999999,0.00998020999999999978,0.00975999999999999958,0.0114400200000000004,0.0120030399999999995,0.0125615799999999993,0.0103894499999999997,0.0134597799999999993],
      [0.0127895400000000003,0.0131715400000000007,0.0118606900000000001,0.0108762000000000008,0.0111806400000000004,0.0109799800000000003,0.0122504999999999992,0.0126072400000000005,0.0129009299999999997,0.0114926300000000002,0.0121343400000000004],
      [0.0124892600000000003,0.0128247900000000008,0.0119396099999999998,0.0111022699999999992,0.0113894600000000006,0.0112199099999999996,0.0121910300000000003,0.0124297599999999998,0.0125412300000000004,0.0116260400000000007,0.0109902100000000003],
      [0.0111141399999999998,0.0115678699999999992,0.00998772000000000028,0.00881864000000000085,0.00913166999999999972,0.00891995999999999935,0.0104901300000000003,0.0108575000000000008,0.0113543499999999992,0.00951855000000000062,0.01190569],
      [0.00886310000000000049,0.00922776999999999972,0.00809050000000000047,0.00721916999999999958,0.00735091000000000043,0.00725007999999999989,0.00843840000000000041,0.0086786099999999998,0.00902439000000000019,0.00764907999999999994,0.00942232999999999959],
      [0.0116597999999999997,0.0114465799999999996,0.0119249899999999999,0.0116239399999999993,0.0117425199999999993,0.0116799699999999996,0.0117900499999999998,0.01174562,0.0116103700000000001,0.0118341399999999999,0.00679918000000000015],
      [0.00669939000000000038,0.00696774999999999999,0.00608049000000000003,0.00575003999999999967,0.00579993000000000002,0.00576003000000000018,0.00643055000000000015,0.00658002999999999973,0.00679919000000000009,0.0059102,0.00708755999999999969]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.USD-SOFR-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.USD-SOFR-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.USD-SOFR-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.USD-SOFR-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.NZDCNH.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["2W","2Y","9M","3M","2M","1W","3W","6M","1M","1Y"],
    "COLUMNS" : ["25D PUT","10D CALL","ATM","10D PUT","25D CALL"],
    "VALUES" : [
      [0.0861500000000000044,0.0774999999999999994,0.0812500000000000028,0.0883000000000000035,0.0793500000000000039],
      [0.0925499999999999934,0.0952500000000000013,0.0859000000000000041,0.10295,0.0882499999999999951],
      [0.0926000000000000018,0.0956999999999999934,0.0871500000000000052,0.102900000000000005,0.0884000000000000064],
      [0.0941499999999999976,0.0918000000000000066,0.0895500000000000046,0.0993499999999999939,0.0894500000000000017],
      [0.0932499999999999996,0.0909500000000000031,0.0886500000000000066,0.0987500000000000044,0.0882499999999999951],
      [0.085199999999999998,0.0817999999999999977,0.0802999999999999964,0.0890500000000000042,0.077899999999999997],
      [0.0889000000000000068,0.083750000000000005,0.0840999999999999942,0.0931499999999999967,0.0826999999999999957],
      [0.0963999999999999996,0.0984499999999999958,0.0911499999999999949,0.105899999999999994,0.0918500000000000011],
      [0.0917000000000000037,0.0893000000000000044,0.0871500000000000052,0.0972999999999999976,0.0863499999999999962],
      [0.0911000000000000004,0.095100000000000004,0.0854000000000000037,0.102050000000000002,0.0872499999999999942]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.NZDCNH.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.NZDCNH.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.NZDCNH.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.NZDCNH.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPNZD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","1Y","1W","3M","1M"],
    "COLUMNS" : ["10D CALL","25D PUT","25D CALL","10D PUT","ATM"],
    "VALUES" : [
      [0.0908599999999999963,0.0839799999999999991,0.0852799999999999947,0.0889999999999999958,0.0826000000000000068],
      [0.095890000000000003,0.0816400000000000042,0.0865100000000000036,0.0882200000000000067,0.0808500000000000052],
      [0.0754699999999999954,0.073300000000000004,0.073300000000000004,0.0755299999999999999,0.0725500000000000034],
      [0.0878799999999999998,0.0827500000000000041,0.0836999999999999966,0.0863600000000000062,0.0816999999999999948],
      [0.0824700000000000016,0.0792699999999999932,0.0797899999999999998,0.0814499999999999946,0.0785499999999999948]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPNZD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPNZD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPNZD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPNZD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURCN1.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","3M","1Y","2W","3W","2M","1W","1M","6M","2Y"],
    "COLUMNS" : ["10D CALL","10D PUT","ATM","25D PUT","25D CALL"],
    "VALUES" : [
      [0.0793050000000000005,0.0747599999999999931,0.0690000000000000058,0.0699499999999999983,0.0723450000000000065],
      [0.0704150000000000054,0.0697249999999999953,0.0647999999999999965,0.0661250000000000032,0.0663949999999999957],
      [0.0827399999999999941,0.076325000000000004,0.0704999999999999932,0.0711500000000000049,0.0746150000000000008],
      [0.0670649999999999996,0.0685400000000000037,0.0633050000000000002,0.0650150000000000033,0.0641749999999999959],
      [0.0678150000000000003,0.0692849999999999994,0.0640550000000000008,0.065759999999999999,0.0649300000000000016],
      [0.068915000000000004,0.069245000000000001,0.0638999999999999985,0.0655000000000000027,0.0652400000000000063],
      [0.0647549999999999931,0.0662350000000000022,0.0609999999999999987,0.062725000000000003,0.0618650000000000033],
      [0.0682650000000000062,0.0697149999999999992,0.0645000000000000018,0.0661950000000000038,0.0653799999999999937],
      [0.0757450000000000068,0.0732649999999999968,0.0675000000000000044,0.0686950000000000061,0.0701100000000000056],
      [0.0916799999999999976,0.0822449999999999987,0.0767000000000000043,0.0765450000000000019,0.081500000000000003]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURCN1.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURCN1.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURCN1.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURCN1.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.CNY-SHIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["4Y","20Y","5Y","7Y","10Y","1Y","15Y","2Y","30Y","3Y","25Y"],
    "COLUMNS" : ["2Y","1Y","5Y","3Y","10Y","20Y","30Y","15Y","7Y","25Y","4Y"],
    "VALUES" : [
      [0.00756530999999999957,0.00730660999999999984,0.00773524,0.00759677000000000009,0.00919268999999999989,0.00919268999999999989,0.00919268999999999989,0.00919268999999999989,0.0083152199999999999,0.00919268999999999989,0.00772390999999999963],
      [0.00745670000000000013,0.00757132000000000031,0.00768946000000000039,0.00763733000000000033,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00822785000000000009,0.00881884999999999961,0.00770955999999999985],
      [0.00756058999999999985,0.00762555000000000004,0.00774613000000000038,0.00771679000000000028,0.00923734000000000013,0.00923734000000000013,0.00923734000000000013,0.00923734000000000013,0.00827051000000000001,0.00923734000000000013,0.00774927999999999988],
      [0.00790628999999999985,0.00791818000000000036,0.00778703000000000034,0.00768891000000000019,0.00935670000000000078,0.00935670000000000078,0.00935670000000000078,0.00935670000000000078,0.00846948999999999966,0.00935670000000000078,0.00778850000000000028],
      [0.00745670000000000013,0.00757132000000000031,0.00768946000000000039,0.00763733000000000033,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00822785000000000009,0.00881884999999999961,0.00770955999999999985],
      [0.00843330999999999942,0.00929480000000000063,0.0076646800000000001,0.00861671999999999959,0.00899040000000000082,0.00899040000000000082,0.00899040000000000082,0.00899040000000000082,0.00830642000000000012,0.00899040000000000082,0.00798935999999999917],
      [0.00745670000000000013,0.00757132000000000031,0.00768946000000000039,0.00763733000000000033,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00822785000000000009,0.00881884999999999961,0.00770955999999999985],
      [0.00819963999999999936,0.00843060999999999984,0.00773378999999999994,0.00802187000000000039,0.00904558999999999919,0.00904558999999999919,0.00904558999999999919,0.00904558999999999919,0.00839358999999999938,0.00904558999999999919,0.00788572000000000058],
      [0.00745670000000000013,0.00757132000000000031,0.00768946000000000039,0.00763733000000000033,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00822785000000000009,0.00881884999999999961,0.00770955999999999985],
      [0.00763043999999999962,0.00773576000000000038,0.00772884999999999978,0.00775103999999999984,0.0091303700000000005,0.0091303700000000005,0.0091303700000000005,0.0091303700000000005,0.00832491999999999954,0.0091303700000000005,0.00769571999999999964],
      [0.00745670000000000013,0.00757132000000000031,0.00768946000000000039,0.00763733000000000033,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00881884999999999961,0.00822785000000000009,0.00881884999999999961,0.00770955999999999985]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.CNY-SHIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.CNY-SHIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.CNY-SHIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.CNY-SHIBOR-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDSGD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","6M","2W","9M","1Y","1M","2M","3W","3M","2Y"],
    "COLUMNS" : ["15D CALL","35D PUT","10D CALL","25D CALL","10D PUT","15D PUT","ATM","25D PUT","35D CALL"],
    "VALUES" : [
      [0.0954900000000000054,0.0859000000000000041,0.0460500000000000007,0.0440600000000000019,0.0442400000000000015,0.0881399999999999961,0.0428499999999999992,0.043049999999999998,0.0892949999999999994],
      [0.102300000000000002,0.0732050000000000062,0.0563900000000000026,0.0498750000000000027,0.0480900000000000008,0.0697350000000000053,0.0456999999999999976,0.045420000000000002,0.0851549999999999946],
      [0.095890000000000003,0.0835800000000000015,0.0983099999999999946,0.0915350000000000052,0.0847149999999999986,0.0839400000000000007,0.0857600000000000029,0.0830250000000000016,0.0886300000000000004],
      [0.104679999999999995,0.072614999999999999,0.0576499999999999999,0.0506300000000000014,0.0485550000000000009,0.0690299999999999941,0.0459999999999999992,0.0457050000000000026,0.0856200000000000017],
      [0.106850000000000001,0.0717300000000000021,0.0593899999999999983,0.0516150000000000012,0.0491149999999999989,0.0675850000000000062,0.0466999999999999985,0.0461700000000000027,0.0856399999999999939],
      [0.0955450000000000049,0.0817750000000000005,0.0501100000000000018,0.0475000000000000006,0.046195,0.0809700000000000003,0.0456000000000000016,0.0453300000000000022,0.0877499999999999947],
      [0.0995400000000000035,0.0802500000000000019,0.0520899999999999974,0.0486349999999999977,0.0467749999999999971,0.0786049999999999943,0.0460749999999999979,0.0457050000000000026,0.0883349999999999969],
      [0.0957250000000000045,0.0825550000000000034,0.0981599999999999973,0.091274999999999995,0.0827449999999999991,0.0822350000000000025,0.0849099999999999994,0.0817699999999999955,0.0881500000000000061],
      [0.100345000000000004,0.0770949999999999969,0.0536449999999999982,0.049119999999999997,0.0473150000000000029,0.0749549999999999939,0.0459499999999999978,0.0456200000000000008,0.086675000000000002],
      [0.117215,0.0749599999999999989,0.124810000000000004,0.101400000000000004,0.0700899999999999995,0.0695000000000000062,0.0802500000000000019,0.0703600000000000059,0.0907250000000000001]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDSGD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDSGD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDSGD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDSGD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDCHF.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","2M","1Y","6M","1W","9M","1M"],
    "COLUMNS" : ["10D PUT","10D CALL","ATM","25D PUT","25D CALL"],
    "VALUES" : [
      [0.076999999999999999,0.0729000000000000065,0.0706500000000000045,0.0730999999999999983,0.0707499999999999934],
      [0.0754999999999999977,0.0720500000000000029,0.0703499999999999959,0.0723000000000000032,0.0703000000000000014],
      [0.0855999999999999955,0.0790000000000000008,0.0729000000000000065,0.0770499999999999935,0.0734500000000000014],
      [0.0803999999999999992,0.0751000000000000001,0.0710999999999999965,0.0743000000000000049,0.0714000000000000051],
      [0.0704499999999999987,0.0682500000000000051,0.0705999999999999961,0.0714000000000000051,0.070150000000000004],
      [0.0831999999999999962,0.0771000000000000019,0.0721500000000000058,0.0758500000000000008,0.072499999999999995],
      [0.0742499999999999966,0.0714999999999999941,0.0696999999999999981,0.0713499999999999968,0.0696999999999999981]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDCHF.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDCHF.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDCHF.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDCHF.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.ZAR-JIBAR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["5Y","3M","4Y","18M","6M","1M","1Y","2Y","3Y","9M"],
    "COLUMNS" : ["5Y","7Y","3Y","4Y","10Y","2Y","1Y"],
    "VALUES" : [
      [0.147992000000000012,0.133000000000000007,0.15129999999999999,0.148699999999999999,0.121679999999999996,0.151201000000000002,0.15179999999999999],
      [0.195200000000000012,0.192304000000000003,0.166704999999999992,0.184904000000000013,0.177919999999999995,0.149202000000000001,0.139800000000000008],
      [0.155200000000000005,0.137000000000000011,0.159700000000000009,0.156299999999999994,0.128099999999999992,0.159700000000000009,0.162700000000000011],
      [0.17930299999999999,0.164102999999999999,0.175606000000000012,0.179104000000000013,0.155703000000000008,0.173010999999999998,0.168707999999999997],
      [0.190703000000000011,0.185903000000000013,0.174206,0.186303999999999997,0.176002999999999993,0.157004000000000005,0.146199999999999997],
      [0.190201000000000009,0.186001,0.163303000000000004,0.178702,0.170001000000000013,0.146181000000000005,0.139988000000000001],
      [0.186285000000000006,0.175302999999999987,0.177706000000000003,0.182704000000000005,0.168692000000000009,0.169711000000000001,0.167199999999999988],
      [0.172103000000000006,0.156203000000000009,0.171705999999999998,0.174204999999999999,0.144001999999999991,0.17080999999999999,0.169220000000000009],
      [0.164300000000000002,0.14499999999999999,0.167300000000000004,0.166199999999999987,0.133700000000000013,0.168800000000000006,0.171199999999999991],
      [0.188302999999999998,0.183002999999999999,0.175706000000000001,0.185004000000000002,0.175103000000000009,0.164006999999999986,0.156099999999999989]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.ZAR-JIBAR-3M.VOL.SWPT.ATM.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.ZAR-JIBAR-3M.VOL.SWPT.ATM.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.ZAR-JIBAR-3M.VOL.SWPT.ATM.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.ZAR-JIBAR-3M.VOL.SWPT.ATM.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.USD-SOFR-ON.VOL.CAP.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9Y","7Y","6Y","20Y","15Y","30Y","5Y","3Y","25Y","8Y","10Y","4Y","2Y","1Y"],
    "COLUMNS" : ["0.005","0.04","0.02","0.05","0.015","0.03","0.025","ATM","0.01","0.035"],
    "VALUES" : [
      [0.0122150000000000002,0.01239,0.0121989999999999998,0.0127799999999999997,0.0122229999999999995,0.0122050000000000006,0.0121860000000000007,0.0125249999999999997,0.0122360000000000003,0.0122699999999999997],
      [0.0133589999999999993,0.0131339999999999998,0.0131970000000000004,0.0134109999999999993,0.0132789999999999991,0.0130740000000000006,0.0131210000000000007,0.0132309999999999997,0.0133419999999999997,0.0130740000000000006],
      [0.0140699999999999992,0.0135879999999999994,0.0138370000000000003,0.0137409999999999997,0.0139489999999999996,0.0136329999999999993,0.0137240000000000001,0.0136390000000000001,0.0140359999999999999,0.0135840000000000006],
      [0.0092580000000000006,0.00989499999999999928,0.00939899999999999937,0.0103859999999999994,0.0093530000000000002,0.00956500000000000059,0.00946499999999999946,0.0100529999999999994,0.0093130000000000001,0.00970700000000000035],
      [0.0102559999999999995,0.0107589999999999995,0.0103579999999999992,0.0112149999999999993,0.0103309999999999999,0.0104759999999999992,0.0104010000000000005,0.0109210000000000002,0.0103040000000000007,0.0105939999999999993],
      [0.00791200000000000063,0.00906700000000000041,0.0083750000000000005,0.00952800000000000001,0.00823100000000000047,0.00868299999999999975,0.00852200000000000006,0.00912999999999999923,0.00808099999999999964,0.00886400000000000035],
      [0.0147939999999999999,0.0140179999999999992,0.0144989999999999997,0.0139690000000000005,0.0146409999999999995,0.0142039999999999996,0.0143459999999999994,0.0139799999999999994,0.0147480000000000007,0.0140909999999999994],
      [0.0167080000000000006,0.014749,0.0161299999999999985,0.0138460000000000007,0.0163899999999999983,0.0154929999999999998,0.0158270000000000008,0.0140470000000000005,0.0165910000000000016,0.0151339999999999999],
      [0.00845699999999999924,0.00939899999999999937,0.00877400000000000055,0.00988799999999999922,0.00867300000000000015,0.0090270000000000003,0.00888899999999999933,0.00951100000000000036,0.00857300000000000076,0.00919599999999999931],
      [0.0127390000000000003,0.0127360000000000008,0.0126560000000000006,0.0130840000000000001,0.0127060000000000003,0.0126040000000000006,0.0126140000000000002,0.0128559999999999994,0.0127430000000000009,0.0126409999999999995],
      [0.0117689999999999999,0.0120649999999999993,0.0117990000000000005,0.0124810000000000008,0.0118040000000000003,0.0118440000000000004,0.0118060000000000005,0.0122080000000000001,0.011802,0.0119279999999999994],
      [0.0156370000000000016,0.0144569999999999994,0.0152800000000000002,0.0140739999999999997,0.0154570000000000003,0.0148620000000000002,0.0150760000000000009,0.0142229999999999995,0.0155849999999999999,0.0146529999999999994],
      [0.0192830000000000015,0.0151850000000000006,0.0179750000000000014,0.0132720000000000008,0.018495000000000001,0.0167269999999999988,0.0173850000000000011,0.013011,0.018936999999999999,0.0159970000000000008],
      [0.0233919999999999996,0.0146129999999999993,0.0203599999999999996,0.0111299999999999993,0.0215100000000000013,0.0177070000000000005,0.0190899999999999993,0.0091170000000000001,0.0225279999999999994,0.0162139999999999992]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.USD-SOFR-ON.VOL.CAP.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.USD-SOFR-ON.VOL.CAP.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.USD-SOFR-ON.VOL.CAP.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.USD-SOFR-ON.VOL.CAP.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.AUDCAD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","6M","2Y","1Y","3W","2M","1M","9M","2W","3M"],
    "COLUMNS" : ["10D PUT","25D CALL","10D CALL","ATM","25D PUT"],
    "VALUES" : [
      [0.0773500000000000021,0.0722000000000000003,0.0729999999999999954,0.0723000000000000032,0.0748499999999999999],
      [0.0865999999999999964,0.0737499999999999961,0.0772499999999999992,0.0739500000000000018,0.0788500000000000034],
      [0.0956000000000000044,0.0783999999999999975,0.0840000000000000052,0.0784500000000000058,0.0849499999999999977],
      [0.0919999999999999984,0.0764999999999999986,0.0817999999999999977,0.0764999999999999986,0.0821000000000000063],
      [0.0764500000000000041,0.0693000000000000005,0.0708499999999999963,0.0694000000000000034,0.072499999999999995],
      [0.0812500000000000028,0.0718499999999999972,0.0740999999999999992,0.0719999999999999946,0.0758000000000000063],
      [0.0787000000000000061,0.0707499999999999934,0.072499999999999995,0.0709999999999999937,0.0743000000000000049],
      [0.0898499999999999993,0.0754999999999999977,0.0798500000000000043,0.075649999999999995,0.0809499999999999942],
      [0.0744500000000000023,0.0681500000000000022,0.0695500000000000007,0.0681500000000000022,0.0709999999999999937],
      [0.0826000000000000068,0.0720500000000000029,0.0745500000000000052,0.0723000000000000032,0.0764999999999999986]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.AUDCAD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.AUDCAD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.AUDCAD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.AUDCAD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDKR1.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","9M","6M","1Y","1M","3M"],
    "COLUMNS" : ["25D PUT","ATM","10D CALL","10D PUT","25D CALL"],
    "VALUES" : [
      [0.0847350000000000048,0.0843499999999999944,0.0922749999999999959,0.0874899999999999983,0.0874049999999999966],
      [0.0881050000000000028,0.090149999999999994,0.115504999999999997,0.0901150000000000007,0.100199999999999997],
      [0.0870699999999999946,0.0886900000000000049,0.109255000000000005,0.0888000000000000039,0.0971800000000000025],
      [0.0879950000000000038,0.0904999999999999971,0.117029999999999995,0.0892349999999999949,0.101415000000000005],
      [0.085205000000000003,0.0851500000000000035,0.0958100000000000063,0.0874400000000000038,0.0895999999999999991],
      [0.0865400000000000058,0.0872499999999999942,0.103190000000000004,0.0892399999999999999,0.0935600000000000043]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDKR1.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDKR1.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDKR1.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDKR1.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.NZDSGD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","1W","1M","3M","9M","1Y"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0738999999999999935],
      [0.0600499999999999992],
      [0.0681500000000000022],
      [0.0708499999999999963],
      [0.0750500000000000056],
      [0.076100000000000001]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.NZDSGD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.NZDSGD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.NZDSGD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.NZDSGD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDINR.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","1M","1W","6M","9M","1Y"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0396499999999999977],
      [0.0364500000000000032],
      [0.0330999999999999975],
      [0.0438500000000000001],
      [0.0473999999999999977],
      [0.0498999999999999999]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDINR.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDINR.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDINR.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDINR.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.AUDNZD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["2M","3M","1W","5M","4M","6M","1Y","1M","9M"],
    "COLUMNS" : ["10D PUT","25D CALL","10D CALL","25D PUT","ATM"],
    "VALUES" : [
      [0.0519999999999999976,0.0509500000000000022,0.0525499999999999995,0.0506500000000000006,0.0501500000000000001],
      [0.0527499999999999983,0.0517499999999999974,0.0531999999999999973,0.0514500000000000027,0.0508499999999999994],
      [0.0495000000000000023,0.0494500000000000009,0.0497500000000000026,0.0492999999999999966,0.0489500000000000005],
      [0.0541000000000000023,0.0530499999999999999,0.0548500000000000029,0.0526500000000000024,0.052049999999999999],
      [0.0536000000000000018,0.0526000000000000009,0.0542499999999999996,0.0522499999999999978,0.0517000000000000029],
      [0.0548000000000000015,0.0536500000000000032,0.0555500000000000022,0.0531500000000000028,0.0526500000000000024],
      [0.0577999999999999972,0.0563000000000000028,0.0586500000000000007,0.0558499999999999969,0.0551499999999999976],
      [0.0519500000000000031,0.0508499999999999994,0.0524499999999999966,0.0506500000000000006,0.0500999999999999987],
      [0.056550000000000003,0.0553000000000000019,0.0573499999999999982,0.0548000000000000015,0.0541499999999999967]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.AUDNZD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.AUDNZD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.AUDNZD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.AUDNZD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPCNH.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["2M","1Y","1W","2Y","6M","3M","3W","9M","2W","1M"],
    "COLUMNS" : ["25D PUT","10D CALL","25D CALL","10D PUT","ATM"],
    "VALUES" : [
      [0.0781499999999999972,0.0763999999999999957,0.0737499999999999961,0.0831500000000000017,0.0739500000000000018],
      [0.0782000000000000056,0.0811999999999999944,0.0739999999999999963,0.0888000000000000039,0.0725500000000000034],
      [0.0742499999999999966,0.0714000000000000051,0.0671500000000000014,0.0785499999999999948,0.0694000000000000034],
      [0.0825499999999999984,0.0844499999999999973,0.0782999999999999946,0.0922000000000000042,0.0763500000000000012],
      [0.0821000000000000063,0.0841500000000000026,0.0777000000000000052,0.0912000000000000033,0.0771000000000000019],
      [0.0790000000000000008,0.0774999999999999994,0.0751000000000000001,0.083849999999999994,0.0748499999999999999],
      [0.0745500000000000052,0.0699499999999999983,0.0688,0.0787500000000000006,0.0700999999999999956],
      [0.079250000000000001,0.0818500000000000061,0.0749999999999999972,0.0892000000000000015,0.0738999999999999935],
      [0.0730500000000000038,0.0661500000000000005,0.0666000000000000064,0.075550000000000006,0.0684000000000000025],
      [0.0763000000000000067,0.0743499999999999994,0.0714999999999999941,0.0815499999999999975,0.0721500000000000058]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPCNH.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPCNH.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPCNH.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPCNH.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDCNH.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","5M","2M","1Y","6M","2W","1M","6W","4M","2Y","3M","18M","9M"],
    "COLUMNS" : ["35D CALL","25D PUT","ATM","15D CALL","15D PUT","10D PUT","25D CALL","10D CALL","35D PUT"],
    "VALUES" : [
      [0.0440499999999999989,0.0502999999999999975,0.0454000000000000029,0.0429500000000000021,0.054399999999999997,0.0571499999999999994,0.0437499999999999972,0.0450499999999999998,0.0478499999999999967],
      [0.0587000000000000022,0.0560999999999999971,0.0564500000000000002,0.0657999999999999974,0.0568499999999999978,0.0577999999999999972,0.0612499999999999989,0.0696999999999999981,0.0556999999999999995],
      [0.0529499999999999971,0.0531000000000000014,0.0519999999999999976,0.0569500000000000006,0.0546999999999999986,0.0561499999999999985,0.054399999999999997,0.0590999999999999998,0.0522000000000000033],
      [0.0651000000000000051,0.0606500000000000025,0.0618500000000000022,0.0750500000000000056,0.0613000000000000003,0.0622499999999999998,0.0686999999999999972,0.080699999999999994,0.0604499999999999968],
      [0.0597499999999999976,0.0568000000000000033,0.0573499999999999982,0.0672999999999999987,0.0575999999999999984,0.0585000000000000034,0.0624499999999999986,0.0714999999999999941,0.0564500000000000002],
      [0.0450499999999999998,0.0485999999999999974,0.0454999999999999988,0.0458500000000000019,0.0514000000000000012,0.0536000000000000018,0.0453500000000000014,0.0461499999999999966,0.0469499999999999987],
      [0.0502999999999999975,0.0522000000000000033,0.0500000000000000028,0.0528500000000000011,0.0544999999999999998,0.056550000000000003,0.0512000000000000025,0.054399999999999997,0.0508499999999999994],
      [0.052049999999999999,0.0529999999999999985,0.0514000000000000012,0.0553500000000000034,0.0548999999999999974,0.056649999999999999,0.0532499999999999987,0.0572000000000000008,0.0519000000000000017],
      [0.0575000000000000025,0.0553000000000000019,0.0555500000000000022,0.0639500000000000068,0.0561499999999999985,0.057099999999999998,0.0598500000000000004,0.0675000000000000044,0.0548999999999999974],
      [0.0695000000000000062,0.0642500000000000016,0.0657500000000000029,0.0807999999999999968,0.0650000000000000022,0.0660499999999999976,0.0735999999999999988,0.0870999999999999969,0.0641000000000000042],
      [0.0552500000000000005,0.053949999999999998,0.0536500000000000032,0.0606000000000000011,0.0550500000000000017,0.0562,0.0571499999999999994,0.0635499999999999954,0.0533500000000000016],
      [0.0675000000000000044,0.0625,0.0639500000000000068,0.0782500000000000001,0.0632000000000000062,0.0641999999999999932,0.0714000000000000051,0.0842500000000000054,0.0623500000000000026],
      [0.0631499999999999978,0.0591500000000000012,0.0601999999999999966,0.0719999999999999946,0.0597499999999999976,0.0606000000000000011,0.0663500000000000062,0.0768999999999999961,0.058900000000000001]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDCNH.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDCNH.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDCNH.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDCNH.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDBRL.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","1M","1Y","2Y","6M","2M","9M"],
    "COLUMNS" : ["25D PUT","10D CALL","25D CALL","10D PUT","ATM"],
    "VALUES" : [
      [0.127679999999999988,0.167949999999999988,0.15182000000000001,0.124060000000000004,0.135520000000000002],
      [0.124104999999999993,0.161409999999999998,0.144969999999999988,0.12321,0.130920000000000009],
      [0.137649999999999995,0.18528,0.164910000000000001,0.133640000000000009,0.146469999999999989],
      [0.144800000000000012,0.193390000000000006,0.171229999999999993,0.140169999999999989,0.152400000000000008],
      [0.131340000000000012,0.175529999999999992,0.157049999999999995,0.128269999999999995,0.139369999999999994],
      [0.125459999999999988,0.164179999999999993,0.147650000000000003,0.123939999999999995,0.132429999999999992],
      [0.134660000000000002,0.183545000000000014,0.161624999999999991,0.132450000000000012,0.142749999999999988]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDBRL.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDBRL.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDBRL.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDBRL.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.NZDUSD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","3M","4M","2W","6M","2Y","9M","1Y","2M","5M","1W","3W"],
    "COLUMNS" : ["10D CALL","10D PUT","15D CALL","25D CALL","ATM","25D PUT","15D PUT","35D PUT","35D CALL"],
    "VALUES" : [
      [0.094200000000000006,0.104950000000000002,0.0943999999999999978,0.0947500000000000009,0.0965000000000000024,0.100500000000000006,0.103099999999999997,0.0984499999999999958,0.0952500000000000013],
      [0.0953500000000000042,0.112750000000000003,0.0956499999999999989,0.0962999999999999967,0.0990499999999999992,0.105300000000000005,0.109600000000000003,0.102150000000000005,0.0970499999999999974],
      [0.0958999999999999991,0.11555,0.0961000000000000049,0.0967500000000000027,0.0997999999999999998,0.106950000000000003,0.111899999999999999,0.103300000000000003,0.0975499999999999978],
      [0.0908000000000000057,0.0987500000000000044,0.0916000000000000009,0.0919999999999999984,0.0932000000000000051,0.0961499999999999994,0.0979000000000000009,0.094649999999999998,0.0922499999999999987],
      [0.0970499999999999974,0.11895,0.0970000000000000029,0.0972999999999999976,0.100400000000000003,0.108649999999999997,0.114500000000000005,0.104349999999999998,0.0980499999999999983],
      [0.103700000000000001,0.1313,0.102749999999999994,0.102199999999999999,0.105450000000000002,0.116699999999999998,0.12475,0.111000000000000001,0.102599999999999997],
      [0.0992500000000000049,0.122950000000000004,0.0990000000000000047,0.0990499999999999992,0.102199999999999999,0.111250000000000002,0.117900000000000005,0.106399999999999995,0.0997500000000000053],
      [0.101500000000000007,0.126650000000000013,0.101000000000000006,0.100849999999999995,0.103900000000000006,0.113699999999999996,0.120999999999999996,0.108299999999999993,0.101400000000000004],
      [0.095549999999999996,0.109899999999999998,0.0956999999999999934,0.0961000000000000049,0.0982999999999999985,0.103599999999999998,0.107200000000000004,0.100949999999999998,0.0966499999999999998],
      [0.0961000000000000049,0.117000000000000007,0.0962500000000000022,0.0966999999999999943,0.0997999999999999998,0.107499999999999998,0.112949999999999995,0.103550000000000003,0.097449999999999995],
      [0.0857500000000000068,0.0921499999999999958,0.0874999999999999944,0.0882000000000000006,0.089249999999999996,0.0913999999999999951,0.0924500000000000044,0.0903499999999999998,0.0884999999999999953],
      [0.0932499999999999996,0.103050000000000003,0.0937000000000000055,0.0941000000000000031,0.0956999999999999934,0.0992999999999999994,0.101599999999999996,0.0975000000000000033,0.0945499999999999952]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.NZDUSD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.NZDUSD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.NZDUSD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.NZDUSD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURCNH.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","2M","9M","1Y","2W","6M","2Y","3W","3M","1M"],
    "COLUMNS" : ["10D PUT","ATM","25D CALL","25D PUT","10D CALL"],
    "VALUES" : [
      [0.0645499999999999963,0.0618000000000000008,0.0614999999999999991,0.0638999999999999985,0.061600000000000002],
      [0.071599999999999997,0.0665000000000000036,0.0675499999999999989,0.068449999999999997,0.0701999999999999985],
      [0.0753500000000000003,0.0697500000000000064,0.0732000000000000012,0.0705999999999999961,0.0797999999999999959],
      [0.0766000000000000014,0.0708000000000000018,0.0748499999999999999,0.0717499999999999943,0.0822500000000000037],
      [0.0652500000000000024,0.0611000000000000015,0.0611999999999999975,0.0630499999999999949,0.0624499999999999986],
      [0.0739500000000000018,0.0680999999999999939,0.0708000000000000018,0.0693000000000000005,0.0763500000000000012],
      [0.0776000000000000023,0.0733499999999999985,0.0782000000000000056,0.0740999999999999992,0.0850500000000000006],
      [0.0674000000000000016,0.0627000000000000057,0.062950000000000006,0.0646999999999999936,0.0647999999999999965],
      [0.0704999999999999932,0.0666999999999999954,0.0680999999999999939,0.0681999999999999967,0.0703499999999999959],
      [0.072499999999999995,0.0672500000000000042,0.0676500000000000018,0.069349999999999995,0.0699000000000000038]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURCNH.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURCNH.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURCNH.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURCNH.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURCHF.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","9M","3M","1Y","6M","1W"],
    "COLUMNS" : ["25D CALL","25D PUT","ATM"],
    "VALUES" : [
      [0.0505000000000000032,0.0505000000000000032,0.0505000000000000032],
      [0.0544999999999999998,0.0544999999999999998,0.0544999999999999998],
      [0.0512999999999999984,0.0512999999999999984,0.0512999999999999984],
      [0.0558000000000000024,0.0558000000000000024,0.0558000000000000024],
      [0.0529999999999999985,0.0529999999999999985,0.0529999999999999985],
      [0.0517499999999999974,0.0517499999999999974,0.0517499999999999974]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURCHF.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURCHF.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURCHF.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURCHF.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPJPY.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","1M","2M","1Y","6M"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0981999999999999956],
      [0.086099999999999996],
      [0.0950000000000000011],
      [0.106999999999999998],
      [0.103050000000000003]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPJPY.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPJPY.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPJPY.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPJPY.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURTWD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","6W","4M","3W","3M","1Y","2W","2M","1W","5M","9M","1M","2Y"],
    "COLUMNS" : ["ATM","25D CALL","25D PUT"],
    "VALUES" : [
      [0.076999999999999999,0.0779999999999999999,0.0790000000000000008],
      [0.0735999999999999988,0.0734000000000000069,0.0751000000000000001],
      [0.0772999999999999937,0.0779999999999999999,0.0791000000000000036],
      [0.0720999999999999974,0.0719000000000000056,0.0734000000000000069],
      [0.0751000000000000001,0.0753999999999999948,0.0768999999999999961],
      [0.0709000000000000047,0.0725999999999999979,0.072400000000000006],
      [0.0708000000000000018,0.070699999999999999,0.0719999999999999946],
      [0.0742000000000000021,0.0742000000000000021,0.0758999999999999952],
      [0.0696999999999999981,0.0693000000000000005,0.0709999999999999937],
      [0.0776000000000000023,0.0783999999999999975,0.0795000000000000012],
      [0.0732000000000000012,0.0745999999999999996,0.0748999999999999944],
      [0.0727000000000000007,0.072499999999999995,0.0743000000000000049],
      [0.0777000000000000052,0.0797999999999999959,0.0790000000000000008]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURTWD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURTWD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURTWD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURTWD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.AUD-BBSW-6M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["5Y","10Y","1Y"],
    "COLUMNS" : ["1Y","10Y","5Y"],
    "VALUES" : [
      [0.00966599999999999925,0.00898499999999999993,0.00917600000000000013],
      [0.0081390000000000004,0.0074920000000000004,0.00754900000000000015],
      [0.0105430000000000003,0.0110089999999999997,0.011096]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.AUD-BBSW-6M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.AUD-BBSW-6M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.AUD-BBSW-6M.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.AUD-BBSW-6M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDMXN.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["2Y","6M","1M","3M","9M","1Y","1W"],
    "COLUMNS" : ["10D PUT","ATM","25D PUT","10D CALL","25D CALL"],
    "VALUES" : [
      [0.117120000000000002,0.130500000000000005,0.121099999999999999,0.179909999999999987,0.153260000000000007],
      [0.103410000000000002,0.122800000000000006,0.110850000000000004,0.172270000000000006,0.147919999999999996],
      [0.103470000000000006,0.127700000000000008,0.114119999999999999,0.178809999999999997,0.154409999999999992],
      [0.101599999999999996,0.123100000000000001,0.110350000000000004,0.173880000000000007,0.149240000000000012],
      [0.109579999999999997,0.125200000000000006,0.114750000000000005,0.171999999999999986,0.149350000000000011],
      [0.110030000000000003,0.125799999999999995,0.115909999999999999,0.172779999999999989,0.148719999999999991],
      [0.118309999999999998,0.140300000000000008,0.126590000000000008,0.188959999999999989,0.16417000000000001]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDMXN.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDMXN.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDMXN.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDMXN.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURAUD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","3W","9M","2Y","2M","1Y","3M","6M","1W","2W"],
    "COLUMNS" : ["10D PUT","15D CALL","15D PUT","25D PUT","25D CALL","10D CALL","ATM"],
    "VALUES" : [
      [0.0791499999999999981,0.0826000000000000068,0.0783999999999999975,0.0776499999999999968,0.0803999999999999992,0.0842500000000000054,0.0777000000000000052],
      [0.0770499999999999935,0.0806499999999999995,0.0767000000000000043,0.0759999999999999981,0.0787000000000000061,0.0819499999999999951,0.076100000000000001],
      [0.0868499999999999966,0.0947000000000000064,0.084650000000000003,0.0825000000000000039,0.0893499999999999989,0.0991999999999999965,0.0830499999999999988],
      [0.0886500000000000066,0.0985499999999999987,0.0864000000000000046,0.0840999999999999942,0.0926000000000000018,0.103550000000000003,0.0850000000000000061],
      [0.0808500000000000052,0.0856999999999999984,0.0798999999999999988,0.0789500000000000063,0.0827999999999999986,0.0879500000000000004,0.0792000000000000065],
      [0.0889000000000000068,0.0968500000000000055,0.0861500000000000044,0.0835999999999999938,0.0909999999999999976,0.101999999999999993,0.0840999999999999942],
      [0.0816999999999999948,0.0875999999999999973,0.0804499999999999937,0.0792000000000000065,0.0840000000000000052,0.0905500000000000055,0.0796999999999999931],
      [0.0842500000000000054,0.0917499999999999982,0.0825499999999999984,0.0808999999999999997,0.0870500000000000024,0.0957500000000000018,0.0815499999999999975],
      [0.076999999999999999,0.0806499999999999995,0.0779999999999999999,0.0779999999999999999,0.0797500000000000014,0.0793500000000000039,0.0778500000000000025],
      [0.0752499999999999974,0.0792000000000000065,0.0754999999999999977,0.0749500000000000027,0.0774999999999999994,0.0798999999999999988,0.0749999999999999972]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURAUD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURAUD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURAUD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURAUD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.CADTWD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","3M","6M","1M","2M","9M","1Y"],
    "COLUMNS" : ["ATM","25D PUT","25D CALL"],
    "VALUES" : [
      [0.0599000000000000019,0.0611000000000000015,0.0597000000000000031],
      [0.067900000000000002,0.0690999999999999948,0.0690000000000000058],
      [0.0709000000000000047,0.0722000000000000003,0.0728000000000000036],
      [0.0636000000000000038,0.0646999999999999936,0.0637999999999999956],
      [0.0655000000000000027,0.0665000000000000036,0.066199999999999995],
      [0.0716999999999999998,0.0729000000000000065,0.0740999999999999992],
      [0.0722000000000000003,0.073300000000000004,0.0748000000000000054]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.CADTWD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.CADTWD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.CADTWD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.CADTWD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPTWD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","2M","1Y","9M","1M","1W","3M"],
    "COLUMNS" : ["ATM","25D PUT","25D CALL"],
    "VALUES" : [
      [0.0821999999999999953,0.0855000000000000066,0.0820000000000000034],
      [0.080600000000000005,0.0830000000000000043,0.0798999999999999988],
      [0.082400000000000001,0.0855999999999999955,0.0826000000000000068],
      [0.0830999999999999933,0.0864999999999999936,0.0830000000000000043],
      [0.0779999999999999999,0.0800000000000000017,0.0772999999999999937],
      [0.0744999999999999968,0.0762000000000000038,0.0737000000000000016],
      [0.082400000000000001,0.0850999999999999951,0.0819000000000000006]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPTWD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPTWD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPTWD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPTWD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDPHP.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","6M","1M","9M","1Y","3M"],
    "COLUMNS" : ["25D PUT","10D CALL","10D PUT","ATM","25D CALL"],
    "VALUES" : [
      [0.0561450000000000005,0.0640150000000000025,0.0587999999999999981,0.057099999999999998,0.0608700000000000005],
      [0.0633599999999999997,0.0809499999999999942,0.0649949999999999972,0.0646000000000000046,0.0712499999999999939],
      [0.0602950000000000014,0.0703150000000000025,0.0613850000000000021,0.0611000000000000015,0.0650450000000000056],
      [0.0647199999999999998,0.082290000000000002,0.0653149999999999981,0.0662999999999999978,0.0730800000000000061],
      [0.0655649999999999983,0.0872649999999999954,0.068125000000000005,0.0667999999999999983,0.0748899999999999982],
      [0.0625300000000000022,0.0775750000000000051,0.0644050000000000039,0.0632999999999999952,0.0690800000000000025]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDPHP.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDPHP.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDPHP.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDPHP.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPAUD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","1M","1W","1Y","6M"],
    "COLUMNS" : ["10D CALL","10D PUT","25D PUT","25D CALL","ATM"],
    "VALUES" : [
      [0.0837200000000000027,0.0850800000000000028,0.0799600000000000033,0.0794300000000000006,0.0777000000000000052],
      [0.0790799999999999975,0.0803200000000000025,0.0762199999999999961,0.0756300000000000028,0.0744999999999999968],
      [0.0780600000000000044,0.078240000000000004,0.0755299999999999999,0.0753700000000000064,0.0740500000000000047],
      [0.0909599999999999992,0.0927499999999999991,0.0845999999999999946,0.0842799999999999938,0.0815499999999999975],
      [0.0870800000000000046,0.0883199999999999957,0.0820499999999999979,0.0817399999999999932,0.0793999999999999984]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPAUD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPAUD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPAUD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPAUD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURNZD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["2W","9M","3M","2M","6M","1M","1Y","2Y","3W","1W"],
    "COLUMNS" : ["10D PUT","10D CALL","ATM","25D PUT","25D CALL"],
    "VALUES" : [
      [0.0722000000000000003,0.0768999999999999961,0.0748499999999999999,0.0745500000000000052,0.0771000000000000019],
      [0.086999999999999994,0.0984499999999999958,0.0825000000000000039,0.0822500000000000037,0.0884999999999999953],
      [0.0814499999999999946,0.0895500000000000046,0.0792000000000000065,0.0790000000000000008,0.0835000000000000048],
      [0.080149999999999999,0.0866500000000000048,0.0783999999999999975,0.0782999999999999946,0.0818500000000000061],
      [0.0841999999999999971,0.0949500000000000066,0.0808500000000000052,0.0805000000000000021,0.0863499999999999962],
      [0.0785499999999999948,0.0830999999999999933,0.0771499999999999964,0.0772000000000000047,0.0797500000000000014],
      [0.0889500000000000013,0.101800000000000002,0.0836500000000000021,0.083299999999999999,0.0903999999999999942],
      [0.0888499999999999984,0.103849999999999998,0.0855000000000000066,0.0845999999999999946,0.0928999999999999965],
      [0.075649999999999995,0.0801999999999999935,0.0758999999999999952,0.0757499999999999979,0.078350000000000003],
      [0.0757499999999999979,0.0776000000000000023,0.0714999999999999941,0.0711999999999999994,0.0729999999999999954]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURNZD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURNZD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURNZD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURNZD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPCAD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y","1W","1M","6M","3M"],
    "COLUMNS" : ["10D CALL","ATM","25D CALL","10D PUT","25D PUT"],
    "VALUES" : [
      [0.0773800000000000043,0.0735999999999999988,0.0738899999999999973,0.0858399999999999996,0.077340000000000006],
      [0.069580000000000003,0.0691999999999999976,0.0690899999999999986,0.0720200000000000007,0.0703099999999999975],
      [0.0712300000000000016,0.0708000000000000018,0.0704899999999999971,0.0750399999999999956,0.0724400000000000044],
      [0.0733499999999999985,0.0711500000000000049,0.0710400000000000059,0.0805199999999999944,0.0743100000000000011],
      [0.0745999999999999996,0.073300000000000004,0.0734000000000000069,0.0803500000000000048,0.0762000000000000038]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPCAD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPCAD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPCAD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPCAD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.USDID1.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","1Y","6M","1M","3M"],
    "COLUMNS" : ["25D PUT","ATM","25D CALL","10D CALL","10D PUT"],
    "VALUES" : [
      [0.0934999999999999998,0.0934999999999999998,0.0934999999999999998,0.0934999999999999998,0.0934999999999999998],
      [0.10925,0.10925,0.10925,0.10925,0.10925],
      [0.0970000000000000029,0.0970000000000000029,0.0970000000000000029,0.0970000000000000029,0.0970000000000000029],
      [0.0855000000000000066,0.0855000000000000066,0.0855000000000000066,0.0855000000000000066,0.0855000000000000066],
      [0.0909999999999999976,0.0909999999999999976,0.0909999999999999976,0.0909999999999999976,0.0909999999999999976]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.USDID1.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.USDID1.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.USDID1.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.USDID1.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPHKD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","1W","1M","6M","1Y"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0773500000000000021],
      [0.0716999999999999998],
      [0.073849999999999999],
      [0.0791499999999999981],
      [0.0834499999999999964]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPHKD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPHKD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPHKD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPHKD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.NZDZAR.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["2W","1Y","1W","2M","1M","9M","3W","6M","3M","2Y"],
    "COLUMNS" : ["25D PUT","10D PUT","25D CALL","ATM","10D CALL"],
    "VALUES" : [
      [0.121450000000000002,0.116199999999999998,0.131000000000000005,0.123499999999999999,0.134550000000000003],
      [0.130649999999999988,0.138300000000000006,0.136199999999999988,0.128299999999999997,0.146800000000000014],
      [0.1192,0.120999999999999996,0.128450000000000009,0.121450000000000002,0.130599999999999994],
      [0.130500000000000005,0.132250000000000006,0.139750000000000013,0.131649999999999989,0.148900000000000005],
      [0.125099999999999989,0.126049999999999995,0.135349999999999998,0.127000000000000002,0.144300000000000012],
      [0.1318,0.137949999999999989,0.137800000000000006,0.130000000000000004,0.147999999999999993],
      [0.123100000000000001,0.121950000000000003,0.132950000000000013,0.125049999999999994,0.139800000000000008],
      [0.135399999999999993,0.140149999999999997,0.141850000000000004,0.134200000000000014,0.151450000000000001],
      [0.131649999999999989,0.134399999999999992,0.139699999999999991,0.131899999999999989,0.14885000000000001],
      [0.134500000000000008,0.143999999999999989,0.139750000000000013,0.131099999999999994,0.152249999999999996]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.NZDZAR.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.NZDZAR.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.NZDZAR.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.NZDZAR.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-SGQJEBAP.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","1Y","9M","6M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.0446209499999999995],
      [0.0482968199999999973],
      [0.0488308400000000004],
      [0.0460870099999999977]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-SGQJEBAP.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-SGQJEBAP.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-SGQJEBAP.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-SGQJEBAP.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.NZDCAD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","1Y","6M","1M","1W"],
    "COLUMNS" : ["25D CALL","25D PUT","10D CALL","10D PUT","ATM"],
    "VALUES" : [
      [0.0726300000000000001,0.0771400000000000002,0.071720000000000006,0.0825400000000000023,0.0734000000000000069],
      [0.0769100000000000061,0.0830100000000000005,0.0809300000000000019,0.0937599999999999961,0.0771000000000000019],
      [0.0767599999999999949,0.0817999999999999977,0.0788200000000000012,0.0897600000000000064,0.077450000000000005],
      [0.0706500000000000045,0.0740600000000000008,0.0723499999999999976,0.0786899999999999961,0.0717499999999999943],
      [0.0659200000000000064,0.0682200000000000029,0.0667299999999999977,0.0710699999999999943,0.0661500000000000005]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.NZDCAD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.NZDCAD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.NZDCAD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.NZDCAD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.CNHTW1.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["5M","6M","4M","6W","1M","1Y","2Y","2M","3M","9M"],
    "COLUMNS" : ["25D PUT","ATM","25D CALL"],
    "VALUES" : [
      [0.0648999999999999994,0.0643999999999999989,0.0666000000000000064],
      [0.0653999999999999998,0.0646999999999999936,0.067000000000000004],
      [0.0621999999999999983,0.0618999999999999967,0.0641000000000000042],
      [0.0553999999999999979,0.0551999999999999991,0.0568000000000000033],
      [0.0541000000000000023,0.0536999999999999977,0.0550000000000000003],
      [0.0594000000000000014,0.0587999999999999981,0.0613000000000000003],
      [0.0666000000000000064,0.0660000000000000031,0.0690000000000000058],
      [0.0565999999999999975,0.0563000000000000028,0.0580000000000000029],
      [0.0587000000000000022,0.0582999999999999977,0.0601999999999999966],
      [0.0592000000000000026,0.0585999999999999993,0.0609000000000000027]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.CNHTW1.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.CNHTW1.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.CNHTW1.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.CNHTW1.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.AUD-AONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["5Y","10Y","1Y"],
    "COLUMNS" : ["5Y","1Y","10Y"],
    "VALUES" : [
      [0.00917600000000000013,0.00966599999999999925,0.00898499999999999993],
      [0.00754900000000000015,0.0081390000000000004,0.0074920000000000004],
      [0.011096,0.0105430000000000003,0.0110089999999999997]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.AUD-AONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.AUD-AONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.AUD-AONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.AUD-AONIA-ON.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPSEK.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y","1W","1M","3M","6M","9M"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0803200000000000025],
      [0.0758000000000000063],
      [0.0723799999999999999],
      [0.0743700000000000055],
      [0.0764800000000000063],
      [0.0800000000000000017]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPSEK.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPSEK.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPSEK.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPSEK.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURGBP.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1W","1Y","3M","9M","1M","6M"],
    "COLUMNS" : ["10D CALL","ATM","10D PUT","25D CALL","25D PUT"],
    "VALUES" : [
      [0.0519750000000000004,0.0478499999999999967,0.046765000000000001,0.0491650000000000004,0.0461550000000000016],
      [0.075090000000000004,0.059799999999999999,0.0584599999999999981,0.0670400000000000024,0.057779999999999998],
      [0.0601550000000000001,0.051150000000000001,0.0502000000000000016,0.0551849999999999979,0.0497749999999999998],
      [0.0714100000000000013,0.0579000000000000001,0.0568400000000000016,0.0641499999999999987,0.0560099999999999973],
      [0.0537149999999999989,0.0486499999999999988,0.0473049999999999998,0.0508250000000000021,0.0471900000000000028],
      [0.0672399999999999942,0.0548999999999999974,0.0541099999999999984,0.0603949999999999973,0.0532549999999999968]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURGBP.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURGBP.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURGBP.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURGBP.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-SGEPVQVE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","1Y","3M","9M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.0352822799999999992],
      [0.035102880000000003],
      [0.0350304099999999979],
      [0.035668169999999999]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-SGEPVQVE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-SGEPVQVE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-SGEPVQVE.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-SGEPVQVE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.CHFZAR.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","3M","1M","1Y","6M","1W"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.133700000000000013],
      [0.129000000000000004],
      [0.125549999999999995],
      [0.134500000000000008],
      [0.131000000000000005],
      [0.121550000000000005]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.CHFZAR.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.CHFZAR.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.CHFZAR.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.CHFZAR.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-CIJPINMO.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","1Y","9M","3M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.0368516799999999978],
      [0.0357427800000000018],
      [0.0358943799999999966],
      [0.0405085800000000024]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-CIJPINMO.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-CIJPINMO.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-CIJPINMO.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-CIJPINMO.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.AUD-BBSW-6M.VOL.SWPT.ATM.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["10Y","1Y","5Y"],
    "COLUMNS" : ["5Y","10Y","1Y"],
    "VALUES" : [
      [0.148199999999999998,0.153400000000000009,0.158099999999999991],
      [0.250199999999999978,0.233699999999999991,0.23899999999999999],
      [0.185999999999999999,0.178999999999999992,0.206699999999999995]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.AUD-BBSW-6M.VOL.SWPT.ATM.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.AUD-BBSW-6M.VOL.SWPT.ATM.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.AUD-BBSW-6M.VOL.SWPT.ATM.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.AUD-BBSW-6M.VOL.SWPT.ATM.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-SGIXACE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","1Y","6M","3M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [1.0105294199999999],
      [0.896720030000000001],
      [1.23575265000000001],
      [1.7392104100000001]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-SGIXACE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-SGIXACE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-SGIXACE.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-SGIXACE.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-CSEADR5U.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","9M","1Y","3M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.0485179199999999991],
      [0.0461969600000000022],
      [0.0474150500000000003],
      [0.057349940000000002]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-CSEADR5U.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-CSEADR5U.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-CSEADR5U.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-CSEADR5U.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.CADCHF.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","6M","1Y","9M","3M","1W"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.072499999999999995],
      [0.0774999999999999994],
      [0.0688],
      [0.0748000000000000054],
      [0.0735999999999999988],
      [0.0710999999999999965]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.CADCHF.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.CADCHF.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.CADCHF.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.CADCHF.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-CNTBI1.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","3M","1Y","9M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.187007480000000004],
      [0.224368280000000003],
      [0.209066079999999987],
      [0.190093020000000001]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-CNTBI1.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-CNTBI1.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-CNTBI1.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-CNTBI1.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-JMOZWKUX.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y","9M","3M","6M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.135503420000000013],
      [0.152867690000000001],
      [0.257797149999999975],
      [0.183683259999999987]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-JMOZWKUX.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-JMOZWKUX.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-JMOZWKUX.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-JMOZWKUX.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-JMOZUSD.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","1Y","3M","6M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.0326062699999999997],
      [0.030091070000000001],
      [0.036298030000000002],
      [0.0331239200000000011]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-JMOZUSD.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-JMOZUSD.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-JMOZUSD.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-JMOZUSD.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-HIHD03M.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","6M","9M","1Y"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.194966689999999998],
      [0.235089949999999992],
      [0.253674979999999994],
      [0.284388470000000004]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-HIHD03M.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-HIHD03M.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-HIHD03M.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-HIHD03M.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.AUD-BBSW-3M.VOL.SWPT.ATM.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["5Y","1Y","10Y"],
    "COLUMNS" : ["5Y","10Y","1Y"],
    "VALUES" : [
      [0.185999999999999999,0.178999999999999992,0.206699999999999995],
      [0.250199999999999978,0.233699999999999991,0.23899999999999999],
      [0.148199999999999998,0.153400000000000009,0.158099999999999991]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.AUD-BBSW-3M.VOL.SWPT.ATM.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.AUD-BBSW-3M.VOL.SWPT.ATM.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.AUD-BBSW-3M.VOL.SWPT.ATM.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.AUD-BBSW-3M.VOL.SWPT.ATM.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.GBPCHF.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","3M","1W","9M","1M","2M","1Y"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0685000000000000053],
      [0.0646999999999999936],
      [0.0599999999999999978],
      [0.0705999999999999961],
      [0.0607999999999999999],
      [0.063399999999999998],
      [0.0732000000000000012]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.GBPCHF.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.GBPCHF.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.GBPCHF.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.GBPCHF.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.ZAR-JIBAR-3M.VOL.CAP.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["5Y","2Y","4Y","1Y","3Y"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0862499999999999933],
      [0.0786300000000000054],
      [0.0824799999999999978],
      [0.0922999999999999932],
      [0.0808699999999999974]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.ZAR-JIBAR-3M.VOL.CAP.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.ZAR-JIBAR-3M.VOL.CAP.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.ZAR-JIBAR-3M.VOL.CAP.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.ZAR-JIBAR-3M.VOL.CAP.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-DBDMA.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y","3M","6M","9M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.0515758799999999976],
      [0.0372667500000000013],
      [0.04765287],
      [0.0512502700000000005]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-DBDMA.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-DBDMA.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-DBDMA.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-DBDMA.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-PINEEHAID.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["9M","3M","1Y","6M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.0574437400000000001],
      [0.04496174],
      [0.0624280799999999969],
      [0.0445574600000000001]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-PINEEHAID.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-PINEEHAID.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-PINEEHAID.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-PINEEHAID.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_IR.AUD-BBSW-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["5Y","1Y","10Y"],
    "COLUMNS" : ["5Y","10Y","1Y"],
    "VALUES" : [
      [0.00917600000000000013,0.00898499999999999993,0.00966599999999999925],
      [0.011096,0.0110089999999999997,0.0105430000000000003],
      [0.00754900000000000015,0.0074920000000000004,0.0081390000000000004]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.AUD-BBSW-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "IR.AUD-BBSW-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "IR.AUD-BBSW-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_IR.AUD-BBSW-3M.VOL.SWPT.RLTV.ATM.NORMAL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-SGIXHEER.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["3M","9M","1Y","6M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.0488014000000000017],
      [0.0477442900000000017],
      [0.0463551499999999977],
      [0.0521104199999999976]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-SGIXHEER.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-SGIXHEER.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-SGIXHEER.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-SGIXHEER.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.EURNTD.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0983799999999999952]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.EURNTD.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.EURNTD.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.EURNTD.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.EURNTD.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_EQ.USD-NYSE-DJGT.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["6M","9M","1Y","3M"],
    "COLUMNS" : ["1"],
    "VALUES" : [
      [0.132309330000000003],
      [0.165734269999999989],
      [0.19525961],
      [0.127494720000000006]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQ.USD-NYSE-DJGT.SPOT.VOL.STRIKE-RLTV.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "EQ.USD-NYSE-DJGT.SPOT.VOL.STRIKE-RLTV.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "EQ.USD-NYSE-DJGT.SPOT.VOL.STRIKE-RLTV.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_EQ.USD-NYSE-DJGT.SPOT.VOL.STRIKE-RLTV.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.CHFJPY.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["2M","1Y","1M","6M","3M"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0865500000000000019],
      [0.091499999999999998],
      [0.0816500000000000004],
      [0.0923500000000000015],
      [0.0892000000000000015]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.CHFJPY.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.CHFJPY.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.CHFJPY.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.CHFJPY.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.AUDCNY.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1Y","1M","6M","3M","1W"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0827969999999999956],
      [0.0796469999999999956],
      [0.081054000000000001],
      [0.0803589999999999999],
      [0.0798279999999999962]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.AUDCNY.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.AUDCNY.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.AUDCNY.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.AUDCNY.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^QUOTES_FX.CNHEUR.VOL.MID_MATRIX_DATA": {
    "TYPE" : "MATRIX",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "ROWS" : ["1M","1W"],
    "COLUMNS" : ["ATM"],
    "VALUES" : [
      [0.0695999999999999952],
      [0.069250000000000006]
    ]
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FX.CNHEUR.VOL.MID_MATRIX": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "FX.CNHEUR.VOL.MID_MATRIX",
      "OBJECT" : "MARKET DATA",
      "TYPE" : "QUOTE",
      "QUOTEPREFIX" : "FX.CNHEUR.VOL.MID",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "GRID" : "QUOTES_FX.CNHEUR.VOL.MID_MATRIX_DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^TODAY": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "ID" : "TODAY",
      "NAME" : "TODAY",
      "OBJECT" : "EVENTS",
      "TYPE" : "SINGLE DATE",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "DATES" : 45195
    }
  },
  "MARKETPOLICY.DEFAULT.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Discount Curve Rules","Market Policy ID","Quote Type","Options","Projection Curve Rules","CSA Discount Curve Rules","Bond Curve Rules","Cap Volatility Surface Rules","Swaption Volatility Surface Rules","Dividend Curve Rules","Volatility Spread Curve Rules","EQ Volatility Surface Rules","CMDTY Forward Curve Rules","CMDTY Volatility Surface Rules","FX Spot Rules","FX Discount Curve Rules","FX Volatility Surface Rules","CC Discount Curve Rules","Diagnostics","CDS Curve Rules","CR Bond Curve Rules","Index Matched Credit Curve Factory Rules","Credit Curve Factory Rules","Base Correlation Surface Rules","ZCIIS Curve Rules","ID Resolution Rules"],
      "TYPE" : ["Table(MARKETPOLICY.DEFAULT.DISCOUNT_CURVE_RULES_SPEC)","String","String","Table(MARKETPOLICY.DEFAULT.NAME_VALUE_SPEC)","Table(MARKETPOLICY.DEFAULT.IR_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.CSA_DISCOUNT_CURVE_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.IR_BOND_CURVE_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.IR_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.SWAPTION_VOLATILTY_SURFACE_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.EQ_CMDTY_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.EQ_CMDTY_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.EQ_CMDTY_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.EQ_CMDTY_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.EQ_CMDTY_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.FX_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.FX_DISCOUNT_CURVE_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.FX_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.CC_RULES_SPEC)","Boolean","Table(MARKETPOLICY.DEFAULT.CDS_CURVE_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.CR_BOND_CURVE_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.IM_CREDIT_CURVE_FACTORY_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.CREDIT_CURVE_FACTORY_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.IM_CREDIT_CURVE_FACTORY_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.ZCIIS_CURVE_RULES_SPEC)","Table(MARKETPOLICY.DEFAULT.ID_RESOLUTION_RULES_SPEC)"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,null,"MID",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,false,null,null,null,null,null,null,null],
      "GROUPING" : ["IR","General","General","General","IR","IR","IR","IR","IR","EQ","EQ","EQ","CMDTY","CMDTY","FX","FX","FX","CC","General","CR","CR","CR","CR","CR","INFL","General"],
      "DESCRIPTION" : ["Table of rules for selecting and configuring discount curves.","An optional identifier for this market policy.","The default quote type to use.","An arbitrary set of named values that can be used to customize the behavior of the market policy.","Table of rules for selecting and configuring projection curves.","Table of rules for selecting and configuring CSA discounting curves.","Table of rules for selecting and configuring zero rate curves.","Table of rules for selecting and configuring cap volatility surfaces.","Table of rules for selecting and configuring swaption volatility surfaces.","Table of rules for selecting and configuring dividend curves.","Table of rules for selecting and configuring volatility spread curves.","Table of rules for selecting and configuring equity volatility surfaces.","Table of rules for selecting and configuring commidty forward curves.","Table of rules for selecting and configuring commodity volatility surfaces.","Table of rules for selecting and configuring FX spot objects.","Table of rules for selecting and configuring FX discount curves.","Table of rules for selecting and configuring FX volatility surfaces.","Table of rules for selecting and configuring CC discount curves.","Flag indicating whether or not to generate detailed diagnostics about policy matching.","Table of rules for selecting and configuring CDS curves.","Table of rules for selecting and configuring CR bond curves.",null,null,null,"Table of rules for selecting and configuring ZCIIS curves.","Table of rules for transforming IDs into MDEs."]
    }
  },
  "MARKETPOLICY.DEFAULT.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "MARKETPOLICY.DEFAULT.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name"],
      "TYPE" : ["String"],
      "VALUE" : ["Default Table-based Market Policy"]
    }
  },
  "MARKETPOLICY.DEFAULT.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "MARKETPOLICY.DEFAULT.DISCOUNT_CURVE_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.NAME_VALUE_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "OptionType" : ["String"],
      "Value" : ["String"]
    }
  },
  "MARKETPOLICY.DEFAULT.IR_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "IR Index" : ["String",null],
      "IR Index Tenor" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.EQ_CMDTY_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Exchange" : ["String",null],
      "Ticker" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.SWAPTION_VOLATILTY_SURFACE_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "IR Index" : ["String",null],
      "IR Index Tenor" : ["String",null],
      "Strike" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.FX_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Base Currency" : ["String",null],
      "Term Currency" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.FX_DISCOUNT_CURVE_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Counter Currency" : ["String",null],
      "IR Index" : ["String",null],
      "IR Index Tenor" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.CC_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Counter Currency" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.CDS_CURVE_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Reference Entity" : ["String",null],
      "Debt Type" : ["String",null],
      "Restructuring Clause" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.CR_BOND_CURVE_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Issuer" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.ZCIIS_CURVE_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Inflation Index" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.IR_BOND_CURVE_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Issuer" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.CREDIT_CURVE_FACTORY_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.IM_CREDIT_CURVE_FACTORY_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "CDS Index" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.ID_RESOLUTION_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String"],
      "Pattern" : ["String"],
      "Predicate" : ["String"],
      "MDE Template" : ["ID"],
      "MDE Parameters" : ["String"],
      "Comment" : ["String"]
    }
  },
  "MARKETPOLICY.DEFAULT.CSA_DISCOUNT_CURVE_RULES_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["String",null],
      "Variant" : ["String",null],
      "Currency" : ["String",null],
      "Counterparty" : ["String",null],
      "Legal Entity" : ["String",null],
      "Netting Set" : ["String",null],
      "Margin Set" : ["String",null],
      "Predicate" : ["String",null],
      "MDE ID" : ["String","OPTIONAL"],
      "MDE Template" : ["ID",null],
      "MDE Parameters" : ["String",null],
      "Comment" : ["String",null]
    }
  },
  "MARKETPOLICY.DEFAULT.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        "import \"script.nxpolicy\"",
        null,
        "//================================================================================",
        "// CC ",
        "//================================================================================",
        null,
        "// Common lookup routine for CC-related queries.",
        null,
        "function CCTableLookup(cc_currency, cc_counter_currency, cc_variant, cc_rules_table, cc_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot cc_rules_table:",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cc_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(cc_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Match variant and then currencies.",
        null,
        "	    if Match(cc_variant, row.Variant) : if Match(cc_currency, row.Currency) : if Match(cc_counter_currency, row.CounterCurrency)",
        "	 	{",
        "		    currency = cc_currency",
        "			countercurrency = cc_counter_currency",
        "			variant = cc_variant",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched							",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + cc_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "			// We have a match, resolve the MDE.",
        null,
        "			if matched",
        "			{",
        "                // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                mde_id = \"\"",
        "                if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                {",
        "			    try",
        "			    {",
        "                        // Allow for IDs to be generated from parameters.",
        null,
        "                        mde_id = Numerix::Execute(row.MdeId)",
        "                    }",
        "				    catch error",
        "				    {",
        "				        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + eq_type + \" rule '\" + row.Name + \"'. \" + error",
        "				    }",
        "                }",
        null,
        "			    try",
        "			    {",
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"CcParameters_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "				        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + cc_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "		    }",
        "        }",
        "	}",
        null,
        "	// No luck. Report error.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cc_type + \" for currency '\" + cc_currency + \", counter currency '\" + cc_counter_currency + \"', variant '\" + cc_variant + \"'.\"",
        "}",
        null,
        "// Get CC discount curve ID.",
        null,
        "constfunction CCDiscountCurveID(cc_currency, cc_counter_currency, cc_variant)",
        "{",
        "    return CCTableLookup(cc_currency, cc_counter_currency, cc_variant, CCDiscountCurveRules, \"CC Discount Curve\")",
        "}",
        null,
        "//================================================================================",
        "// CMDTY ",
        "//================================================================================",
        null,
        "// Common lookup routine for CMDTY-related queries.",
        null,
        "function CMDTYTableLookup(cmdty_currency, cmdty_exchange, cmdty_ticker, cmdty_variant, cmdty_rules_table, cmdty_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot cmdty_rules_table :",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cmdty_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(cmdty_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Check the variant, currency, exchange, ticker in order.",
        null,
        "	    if Match(cmdty_variant, row.Variant) : if Match(cmdty_currency, row.Currency) : if Match(cmdty_exchange, row.Exchange) : if Match(cmdty_ticker, row.Ticker)",
        "		{",
        "		    currency = cmdty_currency",
        "			variant = cmdty_variant",
        "			exchange = cmdty_exchange",
        "			ticker = cmdty_ticker",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched									",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + cmdty_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "            if matched",
        "			{",
        "                try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + cmdty_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"CMDTYParameters_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "				        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + cmdty_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "			}",
        "		}",
        "	}",
        null,
        "	// No luck.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cmdty_type + \" for currency '\" + cmdty_currency + \", exchange '\" + cmdty_exchange + \"', ticker '\" + cmdty_ticker + \"', variant '\" + cmdty_variant + \"'.\"",
        "}",
        null,
        "// Get forward curve ID.",
        null,
        "constfunction CommodityForwardCurveID(cmdty_currency, cmdty_exchange, cmdty_ticker, cmdty_variant)",
        "{",
        "    return CMDTYTableLookup(cmdty_currency, cmdty_exchange, cmdty_ticker, cmdty_variant, CMDTYForwardCurveRules, \"Commodity Forward Curve\")",
        "}",
        null,
        "// Get commodity volatility surface ID.",
        null,
        "constfunction CommodityVolatilitySurfaceID(cmdty_currency, cmdty_exchange, cmdty_ticker, cmdty_variant)",
        "{",
        "    return CMDTYTableLookup(cmdty_currency, cmdty_exchange, cmdty_ticker, cmdty_variant, CMDTYVolatilitySurfaceRules, \"Commodity Volatility Surface\")",
        "}",
        null,
        "//================================================================================",
        "// CR",
        "//================================================================================",
        null,
        "// Common lookup routine for CR-related queries.",
        null,
        "function CRTableLookup(cr_currency, cr_reference_entity, cr_debt_type, cr_restructuring_clause, cr_variant, cr_rules_table, cr_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot cr_rules_table :",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cr_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(cr_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Check the variant, currency, reference entity, debt type, restructuring clause in order.",
        null,
        "	    if Match(cr_variant, row.Variant) : if Match(cr_currency, row.Currency) : if Match(cr_reference_entity, row.ReferenceEntity) : if Match(cr_debt_type, row.DebtType) : if Match(cr_restructuring_clause, row.RestructuringClause)",
        "		{",
        "		    currency = cr_currency",
        "			variant = cr_variant",
        "			referenceentity = cr_reference_entity",
        "			debttype = cr_debt_type",
        "			restructuringclause = cr_restructuring_clause",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched									",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + cr_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "            if matched",
        "			{",
        "                try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + cr_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"CRParameters_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "                        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + cr_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "			}",
        "		}",
        "	}",
        null,
        "	// No luck.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cr_type + \" for currency '\" + cr_currency + \", reference entity '\" + cr_reference_entity + \"', debt type '\" + cr_debt_type + \"', restructuring clause '\" + cr_restructuring_clause + \"', variant '\" + cr_variant + \"'.\"",
        "}",
        null,
        "// Common lookup routine for CR-related queries.",
        null,
        "function CRTableLookup2(cr_currency, cr_issuer, cr_variant, cr_rules_table, cr_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot cr_rules_table :",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cr_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(cr_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Check the variant, currency, issuer in order.",
        null,
        "	    if Match(cr_variant, row.Variant) : if Match(cr_currency, row.Currency) : if Match(cr_issuer, row.Issuer)",
        "		{",
        "		    currency = cr_currency",
        "			variant = cr_variant",
        "			issuer = cr_issuer",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched									",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + cr_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "            if matched",
        "			{",
        "                try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + cr_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"CRParameters2_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "				        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + cr_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "			}",
        "		}",
        "	}",
        null,
        "	// No luck.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cr_type + \" for currency '\" + cr_currency + \", issuer '\" + cr_issuer + \"', variant '\" + cr_variant + \"'.\"",
        "}",
        null,
        "// Common lookup routine for Index Matched Credit Curve Factory.",
        null,
        "function CRTableLookup3(cr_currency, cr_index, cr_variant, cr_rules_table, cr_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot cr_rules_table :",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cr_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(cr_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Check the variant, currency, issuer in order.",
        null,
        "	    if Match(cr_variant, row.Variant) : if Match(cr_currency, row.Currency)",
        "		{",
        "		    currency = cr_currency",
        "			variant = cr_variant",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = false",
        "            if cr_index == #\"N/A\" : matched = true",
        null,
        "            CDSindex = \"\"",
        null,
        "            ifnot matched",
        "            {",
        "                if Match(cr_index, row.CDSIndex)",
        "                {",
        "                    CDSindex = cr_index",
        "                    matched = true",
        "                }",
        "            }",
        null,
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched									",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + cr_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "            if matched",
        "			{",
        "                try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + cr_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				        paramsTable = Numerix::Table(\"CRParameters3_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "                        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + cr_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "			}",
        "		}",
        "	}",
        null,
        "	// No luck.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + cr_type + \" for currency '\" + cr_currency + \", issuer '\" + cr_index + \"', variant '\" + cr_variant + \"'.\"",
        "}",
        null,
        "// Get CDS curve ID.",
        null,
        "constfunction CDSCurveID(cr_currency, cr_reference_entity, cr_debt_type, cr_restructuring_clause, cr_variant)",
        "{",
        "    return CRTableLookup(cr_currency, cr_reference_entity, cr_debt_type, cr_restructuring_clause, cr_variant, CDSCurveRules, \"CDS Curve\")",
        "}",
        null,
        "// Get CR bond curve curve ID.",
        null,
        "constfunction CreditBondCurveID(cr_currency, cr_issuer, cr_variant)",
        "{",
        "    return CRTableLookup2(cr_currency, cr_issuer, cr_variant, CRBondCurveRules, \"CR Bond Curve\")",
        "}",
        null,
        "// Get credit curve Factory ID.",
        null,
        "constfunction CreditCurveFactoryID(cr_currency,cr_variant)",
        "{",
        "    return CRTableLookup3(cr_currency,\"N/A\",cr_variant,CreditCurveFactoryRules, \"Credit Curve Factory\")",
        "}",
        null,
        "// Get index matched credit curve factory ID.",
        null,
        "constfunction IMCreditCurveFactoryID(cr_currency,cr_index,cr_variant)",
        "{",
        "    return CRTableLookup3(cr_currency,cr_index,cr_variant,IndexMatchedCreditCurveFactoryRules,\"Index Matched Credit Curve Factory\")",
        "}",
        null,
        "// Get base correlation surface ID.",
        null,
        "constfunction BaseCorrelationSurfaceID(cr_currency,cr_index,cr_variant)",
        "{",
        "    return CRTableLookup3(cr_currency,cr_index,cr_variant,BaseCorrelationSurfaceRules,\"BaseCorrelation Surface\")",
        "}",
        null,
        "//================================================================================",
        "// EQ ",
        "//================================================================================",
        null,
        "// Common lookup routine for EQ-related queries.",
        null,
        "function EQTableLookup(eq_currency, eq_exchange, eq_ticker, eq_variant, eq_rules_table, eq_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot eq_rules_table :",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + eq_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(eq_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Check the variant, currency, exchange, ticker in order.",
        null,
        "	    if Match(eq_variant, row.Variant) : if Match(eq_currency, row.Currency) : if Match(eq_exchange, row.Exchange) : if Match(eq_ticker, row.Ticker)",
        "		{",
        "		    currency = eq_currency",
        "			variant = eq_variant",
        "			exchange = eq_exchange",
        "			ticker = eq_ticker",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched									",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + eq_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "            if matched",
        "			{",
        "                try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + eq_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"EQParameters_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "				        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + eq_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "			}",
        "		}",
        "	}",
        null,
        "	// No luck.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + eq_type + \" for currency '\" + eq_currency + \", exchange '\" + eq_exchange + \"', ticker '\" + eq_ticker + \"', variant '\" + eq_variant + \"'.\"",
        "}",
        null,
        "// Get dividend curve ID.",
        null,
        "constfunction DividendCurveID(eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "{",
        "    return EQTableLookup(eq_currency, eq_exchange, eq_ticker, eq_variant, DividendCurveRules, \"Dividend Curve\")",
        "}",
        null,
        "// Get equity volatility surface ID.",
        null,
        "constfunction EquityVolatilitySurfaceID(eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "{",
        "    return EQTableLookup(eq_currency, eq_exchange, eq_ticker, eq_variant, EQVolatilitySurfaceRules, \"Equity Volatility Surface\")",
        "}",
        null,
        "// Get Volatility Spread curve ID.",
        null,
        "constfunction VolatilitySpreadCurveID(eq_currency, eq_exchange, eq_ticker, eq_variant)",
        "{",
        "    return EQTableLookup(eq_currency, eq_exchange, eq_ticker, eq_variant, VolatilitySpreadCurveRules, \"Volatility Spread Curve\")",
        "}",
        null,
        "//================================================================================",
        "// FX",
        "//================================================================================",
        null,
        "// Common lookup routine for FX-related queries.",
        null,
        "function FXTableLookup(fx_base_currency, fx_term_currency, fx_variant, fx_rules_table, fx_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot fx_rules_table:",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + fx_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(fx_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Match variant and currencies",
        null,
        "	    if Match(fx_variant, row.Variant) : if Match(fx_base_currency, row.BaseCurrency) : if Match(fx_term_currency, row.TermCurrency)",
        "	 	{",
        "		    basecurrency = fx_base_currency",
        "			termcurrency = fx_term_currency",
        "			variant = fx_variant",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched									",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + fx_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "			// We have a match, resolve the MDE.",
        null,
        "			if matched",
        "			{",
        "			    try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + fx_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"FxParameters_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "                        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + fx_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "		    }",
        "        }",
        "	}",
        null,
        "	// No luck. Report error.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + fx_type + \" for base currency '\" + fx_base_currency + \", term currency '\" + fx_term_currency + \"', variant '\" + fx_variant + \"'.\"",
        "}",
        null,
        "// Special lookup for FX Discount curves.",
        null,
        "function FXTableLookup2(fx_currency, fx_counter_currency, ir_index, ir_index_tenor, fx_variant, fx_rules_table, fx_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot fx_rules_table:",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + fx_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(fx_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Match currencies, index, and index tenor.",
        null,
        "	    if Match(fx_variant, row.Variant) : if Match(fx_currency, row.Currency) : if Match(fx_counter_currency, row.CounterCurrency) : if Match(ir_index, row.IrIndex) : if Match(ir_index_tenor, row.IrIndexTenor)",
        "	 	{",
        "		    currency = fx_currency",
        "			countercurrency = fx_counter_currency",
        "			irindex = ir_index",
        "			irindextenor = ir_index_tenor",
        "			variant = fx_variant",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched									",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + fx_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "			// We have a match, resolve the MDE.",
        null,
        "			if matched",
        "			{",
        "			    try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + fx_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"FxParameters2_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "				        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + fx_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "		    }",
        "        }",
        "	}",
        null,
        "	// No luck. Report error.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + fx_type + \" for currency '\" + fx_currency + \", counter currency '\" + fx_counter_currency + \", IR index '\" + ir_index + \"', IR index tenor '\" + ir_index_tenor + \"', variant '\" + fx_variant + \"'.\"",
        "}",
        null,
        "// Get spot matrix ID.",
        null,
        "constfunction FXSpotID(fx_base_currency, fx_term_currency, fx_variant)",
        "{",
        "    return FXTableLookup(fx_base_currency, fx_term_currency, fx_variant, FXSpotRules, \"FX Spot Object\")",
        "}",
        null,
        "// Get FX discount curve ID. Note currency arguments are reversed.",
        null,
        "constfunction FXDiscountCurveID(fx_currency, fx_counter_currency, ir_index, ir_index_tenor, fx_variant)",
        "{",
        "    return FXTableLookup2(fx_currency, fx_counter_currency, ir_index, ir_index_tenor, fx_variant, FXDiscountCurveRules, \"FX Discount Curve\")",
        "}",
        null,
        "// Get FX volatility surface ID.",
        null,
        "constfunction FXVolatilitySurfaceID(fx_base_currency, fx_term_currency, fx_variant)",
        "{",
        "    return FXTableLookup(fx_base_currency, fx_term_currency, fx_variant, FXVolatilitySurfaceRules, \"FX Volatilty Surface\")",
        "}",
        null,
        "//================================================================================",
        "// INFL ",
        "//================================================================================",
        null,
        "// Common lookup routine for INFLCR-related queries.",
        null,
        "function INFLTableLookup(infl_currency, infl_index, infl_variant, infl_rules_table, infl_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot infl_rules_table :",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + infl_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(infl_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Check the variant, currency, index in order.",
        null,
        "	    if Match(infl_variant, row.Variant) : if Match(infl_currency, row.Currency) : if Match(infl_index, row.InflationIndex)",
        "		{",
        "		    currency = infl_currency",
        "			variant = infl_variant",
        "			inflationindex = infl_index",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched									",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + infl_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "            if matched",
        "			{",
        "                try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + infl_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"INFLParameters_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "				        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + infl_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "			}",
        "		}",
        "	}",
        null,
        "	// No luck.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + infl_type + \" for currency '\" + infl_currency + \", inflation index '\" + infl_index + \"', variant '\" + infl_variant + \"'.\"",
        "}",
        null,
        "// Get ZCIIS curve ID.",
        null,
        "constfunction ZCIISCurveID(infl_currency, infl_index, infl_variant)",
        "{",
        "    return INFLTableLookup(infl_currency, infl_index, infl_variant, ZCIISCurveRules, \"ZCIIS Curve\")",
        "}",
        null,
        "//================================================================================",
        "// IR ",
        "//================================================================================",
        null,
        "// Common lookup routine for IR-related queries.",
        null,
        "function IRTableLookup(ir_currency, ir_index, ir_index_tenor, ir_strike, ir_variant, ir_rules_table, ir_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot ir_rules_table:",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + ir_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(ir_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Check the variant and currency first.",
        null,
        "	    if Match(ir_variant, row.Variant) : if Match(ir_currency, row.Currency)",
        "	 	{",
        "		    currency = ir_currency",
        "			variant = ir_variant",
        null,
        "			// The index and tenor are not always applicable. If they are, attempt to match.",
        null,
        "            matched = false",
        "            if ir_index == \"N/A\" : matched = true",
        "            irindex = \"\"",
        "            irindextenor = \"\"",
        "            ifnot matched",
        "            {",
        "			     if Match(ir_index, row.IrIndex) : if Match(ir_index_tenor, row.IrIndexTenor)",
        "			     {",
        "			         irindex = ir_index",
        "				     irindextenor = ir_index_tenor",
        "				     matched = true",
        "			     }",
        "			 }",
        null,
        "			// The strike not always applicable. If it is, attempt to match.",
        null,
        "            matched2 = false",
        "            if ir_strike == \"N/A\" : matched2 = true",
        "            strike = \"\"",
        "            ifnot matched2",
        "		     {",
        "			     if Match(ir_strike, row.Strike)",
        "			     {",
        "			         strike = ir_strike",
        "				     matched2 = true",
        "			     }",
        "			 }",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched3 = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched3 = Numerix::Execute(row.Predicate)",
        "					if matched3 isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \"+matched									",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + ir_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "			// We have a match, resolve the MDE.",
        null,
        "			if matched AND matched2 AND matched3",
        "			{",
        "                // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                mde_id = \"\"",
        "                if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                {",
        "                    try",
        "                    {",
        "                        // Allow for IDs to be generated from parameters.",
        null,
        "                        mde_id = Numerix::Execute(row.MdeId)",
        "                    }",
        "				    catch error",
        "				    {",
        "				        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + ir_type + \" rule '\" + row.Name + \"'. \" + error",
        "				    }",
        "                }",
        null,
        "			    if Diagnostics :",
        "				    Numerix::SetNormal(\"Default market policy '\" + MarketPolicyID + \"': matched \" + ir_type + \" with rule '\" + row.Name +  + \"' for currency '\" + ir_currency + \", IR index '\" + ir_index + \"', IR index tenor '\" + ir_index_tenor + \"', IR strike '\" + ir_strike + \"', variant '\" + ir_variant + \"'.\")",
        "			    try",
        "			    {",
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"IrParameters_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose.Canonical)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "				        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + ir_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "		    }",
        "        }",
        "	}",
        null,
        "	// No luck. Report error.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + ir_type + \" for currency '\" + ir_currency + \", IR index '\" + ir_index + \"', IR index tenor '\" + ir_index_tenor + \"', IR strike '\" + ir_strike + \"', variant '\" + ir_variant + \"'.\"",
        "}",
        null,
        "// Common lookup routine for IR-related Bond Curve queries.",
        null,
        "function IRTableLookup2(ir_currency, ir_issuer, ir_variant, ir_rules_table, ir_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot ir_rules_table :",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + ir_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(ir_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Check the variant, currency, issuer in order.",
        null,
        "	    if Match(ir_variant, row.Variant) : if Match(ir_currency, row.Currency) : if Match(ir_issuer, row.Issuer)",
        "		{",
        "		    currency = ir_currency",
        "			variant = ir_variant",
        "			issuer = ir_issuer",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \" + matched + \".\"",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + ir_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "            if matched",
        "			{",
        "                try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + ir_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"IRParameters2_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "                        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + ir_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "			}",
        "		}",
        "	}",
        null,
        "	// No luck.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + ir_type + \" for currency '\" + ir_currency + \", issuer '\" + ir_issuer + \"', variant '\" + ir_variant + \"'.\"",
        "}",
        null,
        "function IRTableLookup3(ir_currency, ir_cp,ir_le,ir_ns,ir_ms, ir_variant, ir_rules_table, ir_type)",
        "{",
        "    // If we don't have a table, nothing to do.",
        null,
        "	ifnot ir_rules_table :",
        "        throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + ir_type + \" because of missing rules table.\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(ir_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // Check the variant, currency, issuer in order.",
        null,
        "	    if Match(ir_variant, row.Variant) : if Match(ir_currency, row.Currency) : if Match(ir_cp, row.Counterparty) : if Match(ir_le, row.LegalEntity) : if Match(ir_ns, row.NettingSet) : if Match(ir_ms, row.MarginSet) :",
        "		{",
        "		    currency = ir_currency",
        "			variant = ir_variant",
        "			counterparty = ir_cp",
        "            legalentity = ir_le",
        "            nettingset = ir_ns",
        "            marginset = ir_ms",
        null,
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \" + matched + \".\"",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + ir_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "            if matched",
        "			{",
        "                try",
        "			    {",
        "                    // See if the caller specified the MDE ID. If so, then attempt to resolve it.",
        null,
        "                    mde_id = \"\"",
        "                    if rules.ColumnHeaders.Canonical.Find(\"MDEID\") : if row.MdeId :",
        "                    {",
        "                        try",
        "                        {",
        "                            // Allow for IDs to be generated from parameters.",
        null,
        "                            mde_id = Numerix::Execute(row.MdeId)",
        "                        }",
        "				        catch error",
        "				        {",
        "				            throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve MDE ID for \" + ir_type + \" rule '\" + row.Name + \"'. \" + error",
        "				        }",
        "                    }",
        null,
        "				    // If we have a template, create the parameter table by translating the rule's parameters to script and executing;",
        "                    // otherwise, just return the ID for future processing.",
        null,
        "                    if row.MdeTemplate",
        "                    {",
        "				    nameValues = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    paramsTable = Numerix::Table(\"IRParameters3_\" + Numerix::UniqueNumber(\"MP\"), {\"NAME\", \"VALUE\"}, nameValues.Transpose)",
        "				    parameters = Numerix::Create(paramsTable)",
        null,
        "                        return Numerix::MarketResolve(mde_id, parameters, \"MDE.\" + row.MdeTemplate, if mde_id ? true : false).LocalID",
        "                    }",
        "                    return mde_id",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + ir_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "			}",
        "		}",
        "	}",
        null,
        "	// No luck.",
        null,
        "    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve \" + ir_type + \" for currency '\" + ir_currency + \", issuer '\" + ir_issuer + \"', variant '\" + ir_variant + \"'.\"",
        "}",
        null,
        "// Get discount curve ID.",
        null,
        "constfunction DiscountCurveID(dc_currency, dc_variant)",
        "{",
        "    return IRTableLookup(dc_currency, \"N/A\", \"N/A\", \"N/A\", dc_variant, DiscountCurveRules, \"Discount Curve\")",
        "}",
        null,
        "// Get projection curve ID.",
        null,
        "constfunction ProjectionCurveID(pc_currency, pc_index, pc_index_tenor, pc_variant)",
        "{",
        "    return IRTableLookup(pc_currency, pc_index, pc_index_tenor, \"N/A\", pc_variant, ProjectionCurveRules, \"Projection Curve\")",
        "}",
        null,
        "//get CSA discounting curve ID",
        null,
        "constfunction CSADiscountCurveID(csac_currency,csac_cp, csac_le, csac_ns,csac_ms, csac_variant)",
        "{",
        "    return IRTableLookup3(csac_currency, csac_cp,csac_le, csac_ns,csac_ms, csac_variant, CSADiscountCurveRules, \"CSA Discount Curve\")",
        "}",
        null,
        "//Get bond curve ID.",
        null,
        "constfunction BondCurveID(bc_currency,bc_issuer,bc_variant)",
        "{",
        "    return IRTableLookup2(bc_currency,bc_issuer,bc_variant,BondCurveRules,\"Bond Curve\")",
        "}",
        null,
        "// Get cap volatility surface ID.",
        null,
        "constfunction CapVolatilitySurfaceID(cv_currency, cv_index, cv_index_tenor, cv_variant)",
        "{",
        "    return IRTableLookup(cv_currency, cv_index, cv_index_tenor, \"N/A\", cv_variant, CapVolatilitySurfaceRules, \"Cap Volatility\")",
        "}",
        null,
        "// Get swaption volatility surface ID.",
        null,
        "constfunction SwaptionVolatilitySurfaceID(sv_currency, sv_index, sv_index_tenor, sv_strike, sv_variant)",
        "{",
        "    return IRTableLookup(sv_currency, sv_index, sv_index_tenor, sv_strike, sv_variant, SwaptionVolatilitySurfaceRules, \"Swaption Volatility\")",
        "}",
        null,
        null,
        "//================================================================================",
        "// ID Resolution ",
        "//================================================================================",
        null,
        "// Common lookup routine for ID-related queries.",
        null,
        "function IDResolutionTableLookup(id_id, id_rules_table, id_type)",
        "{",
        "    // If we don't have a table, nothing to do. Unlike other tables, this is not an error. Just return empty string.",
        null,
        "	ifnot id_rules_table :",
        "        return \"\"",
        null,
        "	// Proceed through the set of rules and see if we match any of these.",
        null,
        "	rules = Numerix::Load(id_rules_table)",
        null,
        "    foreach row in rules",
        "	{",
        "        // See if the pattern matches the ID.",
        null,
        "        id = id_id",
        "        pattern = Numerix::CreateMetaData(id) == row.Pattern",
        null,
        "	    if pattern is \"TABLE\" ",
        "		{",
        "			// If there is a predicate, it needs to match as well.",
        null,
        "            matched = true",
        "            if row.Predicate",
        "            {",
        "                try",
        "				{",
        "				    matched = Numerix::Execute(row.Predicate)",
        "					if matched isnot \"BOOL\" : throw \"the value for predicate is not boolean, but instead is: \" + matched + \".\"",
        "				}",
        "				catch error",
        "				{",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': could not resolve predicate for \" + id_type + \" rule '\" + row.Name + \"'. \" + error",
        "				}",
        "			 }",
        null,
        "            if matched",
        "			{",
        "                try",
        "			    {",
        "                    // Resolve the template key.",
        null,
        "                    mdeParameters = {}",
        "                    mdeParameters &= { \"MDE TEMPLATE\" : \"MDE.\" + row.MdeTemplate }",
        null,
        "			        // Create the parameter table by translating the rule's parameters to script and executing.",
        null,
        "				    parameters = Numerix::Execute(\"{ \" + row.MdeParameters + \" }\")",
        "				    foreach param in parameters :",
        "					    mdeParameters &= { param[1] : param[2] }",
        null,
        "				    // Return the parameters.",
        null,
        "                    return mdeParameters",
        "			    }",
        "			    catch error",
        "			    {",
        "				    throw \"Default market policy '\" + MarketPolicyID + \"': bad parameters for \" + id_type + \" rule '\" + row.Name + \"'. \" + error",
        "			    }",
        "			}",
        "		}",
        "	}",
        null,
        "	// No luck. Unlike other case, just return an empty string to allow lookups to be queried.",
        null,
        "    return \"\"",
        "}",
        null,
        "// Get resolved ID.",
        null,
        "constfunction ResolveID(id_id)",
        "{",
        "    return IDResolutionTableLookup(id_id, IDResolutionRules, \"ID\")",
        "}",
        null,
        "// Evaluate script.",
        null,
        "constfunction Evaluate(expr)",
        "{",
        "    results = {}",
        "    try",
        "    {",
        "        val = Numerix::Execute(expr)",
        "        results &= { \"Result\" : val }",
        "    }",
        "    catch error",
        "    {",
        "        results &= { \"Error\" : error }",
        "    }",
        "    return results",
        "}"]
    }
  },
  "SCRIPT.NXPOLICY": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DEFINITIONS" : [
        null,
        "//*****************************************************************************",
        "// Copyright (c) 1996-2015 Numerix LLC.  All rights reserved.",
        "// This software comprises valuable trade secrets and may be used,",
        "// copied, transmitted, stored, and distributed only in accordance",
        "// with the terms of a written license or trial agreement and with the",
        "// inclusion of this copyright notice.",
        "//*****************************************************************************",
        null,
        "// Tries to match a value, taking into account wild cards.",
        null,
        "function Match(candidate, target)",
        "{",
        "    // If the target is '*' we have a match.",
        null,
        "	if target == \"*\" :",
        "	    return true",
        null,
        "	// Otherwise, canonicalize and compare.",
        null,
        "	return candidate.Canonical == target.Canonical",
        "}",
        null,
        "function MatchBool(candidate, target)",
        "{",
        "    if target is \"BOOL\" :",
        "           return candidate == target",
        "              ",
        "       if target == \"*\" :",
        "           return true",
        "       ",
        "       // Otherwise, check possibilities. Note that candidate is a bool.",
        "       ",
        "       if candidate :",
        "           return target == #\"true\" || target == #\"yes\"",
        "       ",
        "       return target == #\"false\" || target == #\"no\"",
        null,
        "}",
        null,
        "// Tries to match a currency pair, taking into account wild cards.",
        null,
        "function MatchCurrencyPair(candidate, target)",
        "{    ",
        "    if target == \"*/*\":",
        "        return true",
        "    ",
        "    // If both the candidate and the target are empty, we call it a match.",
        null,
        "	if not candidate AND not target :",
        "	    return true",
        null,
        "	// If only one of them is empty, we don't have a match.",
        null,
        "	if not candidate OR not target :",
        "	    return false",
        null,
        "    ",
        "    // We expect that both the candidate and the target will be of the form ABC/DEF.",
        null,
        "	// Crack the candidate pair.",
        null,
        "    cslash = candidate.Find(\"/\")",
        "	if not cslash :",
        "	    throw \"Bad currency pair '\" + candidate + \"'.\"",
        "	c1 = candidate[1..cslash - 1]",
        "	if not c1 :",
        "	    throw \"Bad currency pair '\" + candidate + \"'.\"",
        "	c2 = candidate[cslash + 1..candidate.Size]",
        "	if not c2 :",
        "	    throw \"Bad currency pair '\" + candidate + \"'.\"",
        null,
        "	// Crack the target pair.",
        null,
        "    tslash = target.Find(\"/\")",
        "	if not tslash :",
        "	    throw \"Bad currency pair '\" + target + \"'.\"",
        "	t1 = target[1..tslash - 1]",
        "	if not t1 :",
        "	    throw \"Bad currency pair '\" + target + \"'.\"",
        "	t2 = target[tslash + 1..target.Size]",
        "	if not t2 :",
        "	    throw \"Bad currency pair '\" + target + \"'.\"",
        null,
        "	// Canonicalize and compare.",
        null,
        "	if not Match(c1, t1) :",
        "	    return false",
        "	return Match(c2, t2)",
        "}",
        null,
        "// Tries to resolve an option.",
        null,
        "function Option(name)",
        "{",
        "    if not Options :",
        "	    throw \"Attempted look up option '\" + name + \"' but specified no options table.\"",
        null,
        "	table = Numerix::Load(Options)",
        "	foreach row in table",
        "	{",
        "	    if row.Name.Canonical == name.Canonical :",
        "			return row.Value.Type(row.OptionType)",
        "	}",
        null,
        "	throw \"Attempted look up option '\" + name + \"' but could not find it in the specified options table.\"",
        "}"]
    }
  },
  "MARKETPOLICY.DEFAULT": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "MARKETPOLICY.DEFAULT",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "MARKETPOLICY.DEFAULT.PARAMETERS",
      "RESULTS" : "MARKETPOLICY.DEFAULT.RESULTS",
      "CLASSPROPERTIES" : "MARKETPOLICY.DEFAULT.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "MARKETPOLICY.DEFAULT.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "MARKETPOLICY.DEFAULT.DISCOUNT_CURVE_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.NAME_VALUE_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.IR_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.EQ_CMDTY_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.SWAPTION_VOLATILTY_SURFACE_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.FX_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.FX_DISCOUNT_CURVE_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.CC_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.CDS_CURVE_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.CR_BOND_CURVE_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.ZCIIS_CURVE_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.IR_BOND_CURVE_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.CREDIT_CURVE_FACTORY_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.IM_CREDIT_CURVE_FACTORY_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.ID_RESOLUTION_RULES_SPEC",
      "MEMBER" : "MARKETPOLICY.DEFAULT.CSA_DISCOUNT_CURVE_RULES_SPEC",
      "SCRIPT" : "MARKETPOLICY.DEFAULT.SCRIPT.NXSL"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^CCDISCOUNTCURVERULES_10359_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["CC ARR Discount Curve Rule (CCCurve1)","CC Discount Curve Rule (SwapDiscounting)","CC Discount Curve Rule (CCCurve1)","CC Discount Curve Rule (CCCurve2)"],
      "Variant" : ["*","*","*","*"],
      "Predicate" : ["Variant.Find(Currency) > 0","Numerix::GetSettings(\"Settings.Currency\", Currency, \"Rank\") < Numerix::GetSettings(\"Settings.Currency\", CounterCurrency, \"Rank\")","Numerix::KeyExists(\"Settings.CurrencyPair\",Currency+CounterCurrency)",null],
      "Currency" : ["*","*","*","*"],
      "Counter Currency" : ["*","*","*","*"],
      "Comment" : [null,null,null,null],
      "MDE Template" : [null,null,null,null],
      "MDE Parameters" : [null,null,null,null],
      "MDE ID" : ["\"IR.\" + Variant + \".\" + QuoteType","NxStd::DiscountCurveID(Currency)","\"IR.\" + Numerix::GetSettings(\"Settings.CurrencyPair\", Currency + CounterCurrency, \"CCBasisCurve\") + \".\" + QuoteType","\"IR.\" + Numerix::GetSettings(\"Settings.CurrencyPair\", CounterCurrency + Currency, \"CCBasisCurve\") + \".\" + QuoteType"]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^PROJECTIONCURVERULES_10361_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["Term SOFR Projection Curve","CNY 7D Projection","ARR Index Projection Curve","Overnight Index Projection Curve","Projection Basis Curve ARR Discounting","Projection Basis Curve Swap Discounting","Projection Curve ARR Discounting","Projection Curve OIS Discounting","Projection Curve Swap Discounting"],
      "Variant" : ["*","*","*","*","*","*","*","*","*"],
      "Predicate" : [null,null,"IRIndex == Numerix::GetSettings(\"Settings.Currency\",Currency,\"OvernightIndex\")",null,"IRIndexTenor <> Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndexTenor\") AND Numerix::GetSettings(\"Settings.Currency\",Currency,\"DualCurve\")","IRIndexTenor <> Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndexTenor\")","Numerix::GetSettings(\"Settings.Currency\",Currency,\"DualCurve\")","Numerix::GetSettings(\"Settings.Currency\",Currency,\"DualCurve\")",null],
      "Currency" : ["USD","CNY","*","*","*","*","*","*","*"],
      "IR Index" : ["TERMSOFR","REPO","*","*","*","*","*","*","*"],
      "IR Index Tenor" : ["*","7D","*","ON","*","*","*","*","*"],
      "Comment" : [null,null,"Overnight Index as configured in settings file are ARR",null,null,null,null,null,null],
      "MDE Template" : [null,null,null,null,null,null,null,null,null],
      "MDE Parameters" : [null,null,null,null,null,null,null,null,null],
      "MDE ID" : ["\"IR.USD-SOFR-ON.ARR.\"+QuoteType","\"IR.CNY-REPO-7D.\"+QuoteType","\"IR.\"+Currency+\"-\"+IRIndex+\"-\"+IRindexTenor+\".ARR.\"+QuoteType","\"IR.\"+Currency+\"-\"+IRIndex+\"-\"+IRindexTenor+\".\"+QuoteType","\"IR.\"+Currency+\"-\"+IRIndex+\"-\"+IRindexTenor+\"/\"+Currency+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndex\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndexTenor\")+\".ARRDISCOUNTING.\"+QuoteType","\"IR.\"+Currency+\"-\"+IRIndex+\"-\"+IRindexTenor+\"/\"+Currency+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndex\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndexTenor\")+\".SWAPDISCOUNTING.\"+QuoteType","\"IR.\"+Currency+\"-\"+IRIndex+\"-\"+IRindexTenor+\".ARRDISCOUNTING.\"+QuoteType","\"IR.\"+Currency+\"-\"+IRIndex+\"-\"+IRindexTenor+\".OISDISCOUNTING.\"+QuoteType","\"IR.\"+Currency+\"-\"+IRIndex+\"-\"+IRindexTenor+\".SWAPDISCOUNTING.\"+QuoteType"]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^CDSCURVERULES_10363_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["CDS Curve Rule for CDX","CDS Curve Rule"],
      "Variant" : ["*","*"],
      "Predicate" : ["Variant >= 0",null],
      "Currency" : ["*","*"],
      "ReferenceEntity" : ["*","*"],
      "DebtType" : ["*","*"],
      "RestructuringClause" : ["*","*"],
      "Comment" : [null,null],
      "MDE Template" : [null,null],
      "MDE Parameters" : [null,null],
      "MDE ID" : ["#\"CR.P(Currency)-P(ReferenceEntity)_P(DebtType)_P(RestructuringClause)_P(Variant)-.P(QuoteType)\"","#\"CR.P(Currency)-P(ReferenceEntity)_P(DebtType)_P(RestructuringClause).P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FXDISCOUNTCURVERULES_10365_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["FX Discount Curve Rule (Cross)","FX Discount Curve Rule (SwapDiscounting)","FX Discount Curve Rule (FWD)","FX Discount Curve Rule (FWD)","FX Discount Curve Rule (FWD)","FX Discount Curve Rule (FWD)"],
      "Variant" : ["*","*","*","*","*","*"],
      "Predicate" : ["Currency <> \"USD\" AND CounterCurrency <> \"USD\"","(NxStd::DirectFXPair(Currency, CounterCurrency) || NxStd::DirectFXPair(CounterCurrency, Currency)) && Numerix::GetSettings(\"Settings.Currency\", Currency, \"Rank\") < Numerix::GetSettings(\"Settings.Currency\", CounterCurrency, \"Rank\")","NxStd::DirectFXPair(Currency, CounterCurrency)","NxStd::DirectFXPair(CounterCurrency, Currency)","NxStd::InDirectFXPair(Currency, CounterCurrency)",null],
      "Currency" : ["*","*","*","*","*","*"],
      "Counter Currency" : ["*","*","*","*","*","*"],
      "IR Index" : ["*","*","*","*","*","*"],
      "IR Index Tenor" : ["*","*","*","*","*","*"],
      "Comment" : [null,null,null,null,null,null],
      "MDE Template" : ["CURVE.FXFWD",null,null,null,null,null],
      "MDE Parameters" : ["{\"Target Currency\",Currency},{\"Known Currency\",\"USD\"},{\"Quote Type\",QuoteType},{\"Maturity Type\",\"Tenor\"}",null,null,null,null,null],
      "MDE ID" : [null,"NxStd::DiscountCurveID(Currency)","#\"FX.P(Currency)/P(CounterCurrency).FWD.P(QuoteType)\"","#\"FX.P(Currency)/P(CounterCurrency).FWD.P(QuoteType)\"","#\"FX.P(Currency)/\"+Numerix::GetSettings(\"Settings.CurrencyPair\",Currency+CounterCurrency,\"Intermediate Currency\")+\".FWD.\"+QuoteType","#\"FX.P(Currency)/\"+Numerix::GetSettings(\"Settings.CurrencyPair\",CounterCurrency+Currency,\"Intermediate Currency\")+\".FWD.\"+QuoteType"]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^EQVOLATILITYSURFACERULES_10367_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["Equity Volatility Surface Rule"],
      "Variant" : ["*"],
      "Predicate" : [null],
      "Currency" : ["*"],
      "Exchange" : ["*"],
      "Ticker" : ["*"],
      "Comment" : [null],
      "MDE Template" : [null],
      "MDE Parameters" : [null],
      "MDE ID" : ["#\"EQ.VOL.P(Currency)-P(Exchange)-P(Ticker).P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^CAPVOLATILITYSURFACERULES_10369_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["Cap Vol from surface"],
      "Variant" : ["*"],
      "Predicate" : [null],
      "Currency" : ["*"],
      "IR Index" : ["*"],
      "IR Index Tenor" : ["*"],
      "Comment" : [null],
      "MDE Template" : [null],
      "MDE Parameters" : [null],
      "MDE ID" : ["#\"IR.VOL.CAP.P(Currency)-P(IRIndex)-P(IRIndextenor).P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^CMDTYVOLATILITYSURFACERULES_10371_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["CMDTY Volatility Surface Rule"],
      "Variant" : ["*"],
      "Predicate" : [null],
      "Currency" : ["*"],
      "Exchange" : ["*"],
      "Ticker" : ["*"],
      "Comment" : [null],
      "MDE Template" : [null],
      "MDE Parameters" : [null],
      "MDE ID" : ["#\"CMDTY.VOL.P(Currency)-P(Exchange)-P(Ticker).STRIKE-RLTV.P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^BASECORRELATIONSURFACERULES_10373_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["Stochastic Recovery Bespoke Correlation Surface Rule","Base Correlation Surface Rule"],
      "Variant" : ["*",null],
      "Currency" : ["*","*"],
      "CDS Index" : ["*","*"],
      "Predicate" : ["Variant >= 0",null],
      "MDE ID" : ["#\"CR.P(Currency)-P(CDSIndex)-P(Variant).BaseCorrelationSurface.P(QuoteType)\"","#\"CR.P(Currency)-P(CDSIndex).BaseCorrelationSurface.P(QuoteType)\""],
      "MDE Template" : [null,null],
      "MDE Parameters" : [null,null],
      "Comment" : ["Stochastic Recovery",null]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^CRBONDCURVERULES_10375_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["CR Bond Curve Rule"],
      "Variant" : ["*"],
      "Predicate" : [null],
      "Currency" : ["*"],
      "Issuer" : ["*"],
      "Comment" : [null],
      "MDE Template" : [null],
      "MDE Parameters" : [null],
      "MDE ID" : ["#\"CR.P(Currency)-P(Issuer).P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FXVOLATILITYSURFACERULES_10377_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["FX Volatility Surface Rule","FX Volatility Surface Rule"],
      "Variant" : ["*","*"],
      "Predicate" : ["Numerix::KeyExists(\"Settings.CurrencyPair\",BaseCurrency+TermCurrency)",null],
      "Base Currency" : ["*","*"],
      "Term Currency" : ["*","*"],
      "Comment" : [null,null],
      "MDE Template" : [null,null],
      "MDE Parameters" : [null,null],
      "MDE ID" : ["#\"FX.VOL.P(BaseCurrency)/P(TermCurrency).P(QuoteType)\"","#\"FX.VOL.P(TermCurrency)/P(BaseCurrency).P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^CSADISCOUNTCURVERULES_10379_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["Default CSA Curve rule"],
      "Variant" : ["*"],
      "Currency" : ["*"],
      "Counterparty" : ["*"],
      "Legal Entity" : ["*"],
      "Netting Set" : ["*"],
      "Margin Set" : ["*"],
      "Predicate" : [null],
      "MDE ID" : ["\"IR.\"+Currency+\".\"+Counterparty+\".\"+LegalEntity+\".\"+NettingSet+\".\"+MarginSet"],
      "MDE Template" : [null],
      "MDE Parameters" : [null],
      "Comment" : [null]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^INDEXMATCHEDCREDITCURVEFACTORYRULES_10381_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["IM CCF Rules"],
      "Variant" : ["*"],
      "Currency" : ["*"],
      "CDS Index" : ["*"],
      "Predicate" : [null],
      "MDE ID" : ["#\"CR.P(Currency)-P(CDSINDEX).CREDITCURVEFACTORY.P(QuoteType)\""],
      "MDE Template" : [null],
      "MDE Parameters" : [null],
      "Comment" : [null]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FXSPOTRULES_10383_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["FX Spot Object Rule 1","FX Spot Object Rule 2","FX Spot (when currency list is specified in variant)","FX Spot Object Rule 4","FX Spot Object Rule 4","FX Spot Object Rule 3","FX Spot Object Rule 3"],
      "Variant" : ["SYNTHETIC","SYNTHETIC","*","*","*","*","*"],
      "Predicate" : ["Numerix::KeyExists(\"Settings.CurrencyPair\", BaseCurrency + TermCurrency)",null,"Not Not Variant","NxStd::DirectFXPair(BaseCurrency, TermCurrency)","NxStd::DirectFXPair(TermCurrency, BaseCurrency)","NxStd::IndirectFXPair(BaseCurrency,TermCurrency)","NxStd::IndirectFXPair(TermCurrency,BaseCurrency)"],
      "Base Currency" : ["*","*","*","*","*","*","*"],
      "Term Currency" : ["*","*","*","*","*","*","*"],
      "Comment" : ["Check to see if currency pair key exists.","Key doesn't exist: reverse currencies.",null,"Key doesn't exist: reverse currencies.","Key doesn't exist: reverse currencies.","Check to see if currency pair key exists.","Check to see if currency pair key exists."],
      "MDE Template" : [null,null,null,null,null,null,null],
      "MDE Parameters" : [null,null,null,null,null,null,null],
      "MDE ID" : ["#\"FX.SPOT.P(TermCurrency)_P(BaseCurrency)_USD.P(QuoteType)\"","#\"FX.SPOT.P(BaseCurrency)_P(TermCurrency)_USD.P(QuoteType)\"","#\"FX.SPOT.P(Variant).P(QuoteType)\"","#\"FX.SPOT.P(TermCurrency)_P(BaseCurrency).P(QuoteType)\"","#\"FX.SPOT.P(BaseCurrency)_P(TermCurrency).P(QuoteType)\"","#\"FX.SPOT.\"+Numerix::GetSettings(\"Settings.CurrencyPair\",BaseCurrency+TermCurrency,\"Intermediate Currency\")+\"_\"+TermCurrency+\"_\"+BaseCurrency+\".\"+QuoteType","#\"FX.SPOT.\"+Numerix::GetSettings(\"Settings.CurrencyPair\",TermCurrency+BaseCurrency,\"Intermediate Currency\")+\"_\"+TermCurrency+\"_\"+BaseCurrency+\".\"+QuoteType"]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^DISCOUNTCURVERULES_10385_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["Crypto Discount Curve Rule","ARR Curve Rule","Swap Curve Rule","BRL","Swap Curve Rule for Asset Class","CR Discount Curve (ISDA) Rule","CNY OIS"],
      "Variant" : ["*","*","*","*","*","CR","*"],
      "Predicate" : ["Currency ==#\"BTC\" || Currency == #\"BCH\" || Currency ==#\"ETH\" || Currency ==#\"XRP\" || Currency ==#\"LTC\"","Currency ==#\"USD\" || Currency ==#\"GBP\" || Currency ==#\"JPY\" || Currency ==#\"CHF\" || Currency ==#\"EUR\" || Currency == #\"HKD\" || Currency ==#\"AUD\" || Currency ==#\"SGD\" || Currency ==#\"THB\"",null,null,"Variant ==#\"FX\" || Variant ==#\"CMDTY\" || Variant ==#\"INFL\"","Currency ==#\"USD\" || Currency == #\"GBP\" || Currency ==#\"JPY\"",null],
      "Currency" : ["*","*","*","BRL","*","*","CNY"],
      "Comment" : [null,"For USD, GBP, JPY, CHF, EUR, HKD, AUD, SGD, THB should switch to ARR discounting",null,null,null,null,null],
      "MDE Template" : [null,null,null,null,null,null,null],
      "MDE Parameters" : [null,null,null,null,null,null,null],
      "MDE ID" : ["#\"FX.P(Currency)/USD.FWD.P(QuoteType)\"","\"IR.\"+Currency+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"ARRIndex\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"ARRIndexTenor\")+\".ARR.\"+QuoteType","\"IR.\"+Currency+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndex\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndexTenor\")+\".SWAPDISCOUNTING.\"+QuoteType","\"IR.BRL-DI-ON.\"+QuoteType","\"IR.\"+Currency+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndex\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndexTenor\")+\".SWAPDISCOUNTING.\"+QuoteType","#\"IR.P(Currency)-ISDA-STDRATES.P(QuoteType)\"","\"IR.CNY-REPO-7D.\"+QuoteType"]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^CREDITCURVEFACTORYRULES_10387_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["CCF Rules"],
      "Variant" : ["*"],
      "Currency" : ["*"],
      "Predicate" : [null],
      "MDE ID" : ["#\"CR.P(Currency).CREDITCURVEFACTORY.P(QuoteType)"],
      "MDE Template" : [null],
      "MDE Parameters" : [null],
      "Comment" : [null]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^CMDTYFORWARDCURVERULES_10389_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["CMDTY Forward Curve Rule"],
      "Variant" : ["*"],
      "Predicate" : [null],
      "Currency" : ["*"],
      "Exchange" : ["*"],
      "Ticker" : ["*"],
      "Comment" : [null],
      "MDE Template" : [null],
      "MDE Parameters" : [null],
      "MDE ID" : ["#\"CMDTY.P(Currency)-P(Exchange)-P(Ticker).FWD.P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^SWAPTIONVOLATILITYSURFACERULES_10391_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["Swaption Vol (Normal) Rule","Swaption Vol Rule"],
      "Variant" : ["NORMAL","*"],
      "Predicate" : [null,null],
      "Currency" : ["*","*"],
      "IR Index" : ["*","*"],
      "IR Index Tenor" : ["*","*"],
      "Strike" : ["*","*"],
      "Comment" : [null,null],
      "MDE Template" : [null,null],
      "MDE Parameters" : [null,null],
      "MDE ID" : ["#\"IR.VOL.SWPT.P(Currency)-P(IRIndex)-P(IRIndexTenor).RLTV.P(Strike).NORMAL.P(QuoteType)\"","#\"IR.VOL.SWPT.P(Currency)-P(IRIndex)-P(IRIndexTenor).P(Strike).P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^DIVIDENDCURVERULES_10393_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["(Default) Dividend Curve Rule - Cont","Dividend Curve Rule","Dividend Curve Rule"],
      "Variant" : ["*","*","*"],
      "Predicate" : [null,"Variant is \"String\"",null],
      "Currency" : ["*","*","*"],
      "Exchange" : ["*","*","*"],
      "Ticker" : ["*","*","*"],
      "Comment" : [null,null,null],
      "MDE Template" : ["CURVE.DIVIDEND","CURVE.DIVIDEND","CURVE.DIVIDEND"],
      "MDE Parameters" : ["{\"CURRENCY\",Currency},{\"TICKER\",Ticker},{\"EXCHANGE\",Exchange},{\"DIVIDENDTYPE\",Variant}","{\"CURRENCY\",Currency},{\"TICKER\",Ticker},{\"EXCHANGE\",Exchange},{\"DIVIDENDTYPE\",Variant}","{\"CURRENCY\",Currency},{\"TICKER\",Ticker},{\"EXCHANGE\",Exchange}"],
      "MDE ID" : ["#\"EQ.P(Currency)-P(Exchange)-P(Ticker).DIV.CONT\"","#\"EQ.P(Currency)-P(Exchange)-P(Ticker).DIV.P(Variant)\"","#\"EQ.P(Currency)-P(Exchange)-P(Ticker).DIV\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^BONDCURVERULES_10395_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["USD XYZ Rule","Zero Bond Curve Rule","Mexico Sovereign Bond Curve Rule","ESun Sovereign Bond Curve Rule","Sovereign Bond Curve Rule"],
      "Variant" : ["*","ZERORATE","*","*","*"],
      "Predicate" : [null,null,null,null,null],
      "Currency" : ["USD","*","MXN","*","*"],
      "Issuer" : ["XYZ","*","*","*","*"],
      "Comment" : [null,null,null,null,null],
      "MDE Template" : [null,null,null,null,null],
      "MDE Parameters" : [null,null,null,null,null],
      "MDE ID" : ["#\"IR.USD-Proxy1.ZERORATE.P(QuoteType)\"","#\"IR.P(Currency)-P(Issuer).ZERORATE.P(QuoteType)\"","#\"IR.MXN-P(Variant)-P(Issuer).Sovereign.P(QuoteType)\"","#\"IR.P(Currency)-P(Variant)-P(Issuer).Sovereign.P(QuoteType)\"","#\"IR.P(Currency)-P(Issuer).P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^ZCIISCURVERULES_10397_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["ZCIISCurve Rule"],
      "Variant" : ["*"],
      "Predicate" : [null],
      "Currency" : ["*"],
      "Inflation Index" : ["*"],
      "Comment" : [null],
      "MDE Template" : [null],
      "MDE Parameters" : [null],
      "MDE ID" : ["#\"INFL.ZCIIS.P(Currency)-P(InflationIndex).P(QuoteType)\""]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IDRESOLUTIONRULES_10399_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Name" : ["Custom Currency Setting","FX Spot Strategy Rule","FX Spot Strategy Rule","Rate Spot Strategy (T+0) Rule","Rate Spot Strategy Rule","FallBack Rate Settings Rule","Rate Settings Rule","USD SOFR Curve Rule Addon","USD SOFR Curve Rule","GBP SONIA Curve Rule","JPY TONAR Curve Rule","EUR ESTR Curve Rule","CHF SARON Curve Rule","AUD AONIA Curve Rule","HKD HONIA Curve Rule","SGD SORA Curve Rule","THB THOR Curve Rule","USD Cap Vol Skew Rule","TWD Cap Vol Skew Rule","CNY Cap Vol Skew Rule","HKD Cap Vol Skew Rule","Cap Vol Skew Rule","USD Swaption Vol Surface Rule","TWD Swaption Vol Surface Rule","CNY Swaption Vol Surface Rule","CNH Swaption Vol Surface Rule","HKD Swaption Vol Surface Rule","ZAR Swaption Vol Surface Rule","Swaption Vol Surface (Lognormal Non-ATM)","Swaption Vol Surface (normal Non-ATM)","Swaption Vol Surface (TruncatedNormal Non-ATM)","Swaption Vol Surface (ShiftedLogNormal Non-ATM)","Swaption Vol Surface Rule","Swaption Cube Rule","CSA curve Rule","CSA Discounting Curve Rule","Lending Curve Rule","Borrowing Curve Rule","USD SIFMA Curve Rule","USD TBill Curve Rule","USD PRIME Curve Rule","USD CP Curve Rule","AUD Basis Curve Rule","AUD Basis Curve Rule","USD Basis Curve Rule","USD Basis Curve Rule","CAD Basis Curve Rule","JPY Basis Curve Rule","JPY Basis Curve Rule","GBP Basis Curve Rule","GBP Basis Curve Rule","EUR Basis Curve Rule","EUR Basis Curve Rule","NOK Basis Curve Rule","SEK Basis Curve Rule","DKK Basis Curve Rule","PLN Basis Curve Rule","Credit ISDA Disocunt Curve Rule","BRL DI Curve","CNY Repo 7D rule","GBP SONIA Non ARR Rule","CAD 3M Rule","Swap Curve Rule (Swap Discounting)","Swap Curve Rule (ARR Discounting)","Swap Curve Rule (OIS Discounting)","Zero Rate Curve Rule","CC Basis Curve Reset Rule","CC Basis Curve Rule","CC Fixed Float Curve Rule","OIS Curve Rule","MXN Sovereign Curve Rule","ESun Sovereign Curve Rule","Sovereign Curve Rule","Sovereign Curve Rule","INFL ZCIIS Curve Rule","FX Spot Rule","FX Spot Rule (all)","FX Custom Currency Forward Curve Rule","FX Forward Curve Rule","FX Vol Surface Rule","EQ Dividend Curve Rule (explicit type)","EQ Dividend Curve Rule","EQ Vol Surface Delta rule (INTC,META)","EQ Vol Surface Rule","Index Matched CCF Rule","Credit Curve Factory Rule","Stochastic Recovery Base Correlation Surface Rule","CDXPROTOTYPE Bespoke BCS Rule","Base Correlation Surface Rule","CDX CDS Equivalent Credit Curve Rule","Credit Curve Rule (CDS)","Credit Curve Rule (Bond)","CMDTY FWD Curve Rule","CMDTY Vol Surface Rule","EQ Volatility Spread Curve Rule"],
      "Pattern" : ["FX.CustomCurrencySettings","FX.Spot-Strategy.<CCYPair>.FWD","FX.Spot-Strategy.<CCYPair>.FWD","IR.Spot-Strategy.T+0","IR.Spot-Strategy.<Currency>-<IRIndex>.<SpotRule>","IR.Rate-Settings.<Currency>-<IRIndex>-<IRIndexTenor>.FALLBACK","IR.Rate-Settings.<Currency>-<IRIndex>-<IRIndexTenor>","IR.USD-SOFRADDON-ON.ARR.<QuoteType>","IR.USD-SOFR-ON.ARR.<QuoteType>","IR.GBP-SONIA-ON.ARR.<QuoteType>","IR.JPY-TONAR-ON.ARR.<QuoteType>","IR.EUR-ESTR-ON.ARR.<QuoteType>","IR.CHF-SARON-ON.ARR.<QuoteType>","IR.AUD-AONIA-ON.ARR.<QuoteType>","IR.HKD-HONIA-ON.ARR.<QuoteType>","IR.SGD-SORA-ON.ARR.<QuoteType>","IR.THB-THOR-ON.ARR.<QuoteType>","IR.VOL.CAP.USD-<IRIndex>-<IRIndexTenor>.<QuoteType>","IR.VOL.CAP.TWD-<IRIndex>-<IRIndexTenor>.<QuoteType>","IR.VOL.CAP.CNY-<IRIndex>-<IRIndexTenor>.<QuoteType>","IR.VOL.CAP.HKD-<IRIndex>-<IRIndexTenor>.<QuoteType>","IR.VOL.CAP.<Currency>-<IRIndex>-<IRIndexTenor>.<QuoteType>","IR.VOL.SWPT.USD-<IRIndex>-<IRIndexTenor>.ATM.<QuoteType>","IR.VOL.SWPT.TWD-<IRIndex>-<IRIndexTenor>.ATM.<QuoteType>","IR.VOL.SWPT.CNY-<IRIndex>-<IRIndexTenor>.ATM.<QuoteType>","IR.VOL.SWPT.CNH-<IRIndex>-<IRIndexTenor>.ATM.<QuoteType>","IR.VOL.SWPT.HKD-<IRIndex>-<IRIndexTenor>.ATM.<QuoteType>","IR.VOL.SWPT.ZAR-<IRIndex>-<IRIndexTenor>.ATM.<QuoteType>","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<StrikeType>.<SwaptionStrike>.LOGNORMAL.<QuoteType>","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<StrikeType>.<SwaptionStrike>.NORMAL.<QuoteType>","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<StrikeType>.<SwaptionStrike>.TRUNCATEDNORMAL.<QuoteType>","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<StrikeType>.<SwaptionStrike>.SHIFTEDLOGNORMAL.<QuoteType>","IR.VOL.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.ATM.<QuoteType>","IR.VOLCUBE.SWPT.<Currency>-<IRIndex>-<IRIndexTenor>.<QuoteType>","<ForeignCurve>.CSA.<BaseCcy>/<FxCcy>","IR.<Currency>.<Counterparty>.<LegalEntity>.<NettingSet>.<MarginSet>","IR.USD-LENDINGCURVE-<Counterparty>.<QuoteType>","IR.USD-BORROWINGCURVE-<Counterparty>.<QuoteType>","IR.USD-SIFMA-1W.<DiscountingType>.<QuoteType>","IR.USD-TBILL-3M.<DiscountingType>.<QuoteType>","IR.USD-PRIME-1D.<DiscountingType>.<QuoteType>","IR.USD-CP-1M.<DiscountingType>.<QuoteType>","IR.AUD-<IRIndex>-<IRIndexTenor>/AUD-<KnownIRIndex>-<KnownIRIndexTenor>.<DiscountingType>.<QuoteType>","IR.USD-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.USD-<IRIndex>-<IRIndexTenor>/USD-<KnownIRIndex>-<KnownIRIndexTenor>.<DiscountingType>.<QuoteType>","IR.USD-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.CAD-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.JPY-<IRIndex>-<IRIndexTenor>/JPY-<KnownIRIndex>-<KnownIRIndexTenor>.<DiscountingType>.<QuoteType>","IR.JPY-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.GBP-<IRIndex>-<IRIndexTenor>/GBP-<KnownIRIndex>-<KnownIRIndexTenor>.<DiscountingType>.<QuoteType>","IR.GBP-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.EUR-<IRIndex>-<IRIndexTenor>/EUR-<KnownIRIndex>-<KnownIRIndexTenor>.<DiscountingType>.<QuoteType>","IR.EUR-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.NOK-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.SEK-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.DKK-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.PLN-<IRIndex>-<IRIndexTenor>.<DiscountingType>.<QuoteType>","IR.<Currency>-ISDA-STDRATES.<QuoteType>","IR.BRL-DI-ON.<QuoteType>","IR.CNY-REPO-7D.<QuoteType>","IR.<Currency>-SONIA-ON.<QuoteType>","IR.CAD-<IRIndex>-3M.<DiscountType>.<QuoteType>","IR.<Currency>-<IRIndex>-<IRIndexTenor>.SWAPDISCOUNTING.<QuoteType>","IR.<Currency>-<IRIndex>-<IRIndexTenor>.ARRDISCOUNTING.<QuoteType>","IR.<Currency>-<IRIndex>-<IRIndexTenor>.OISDISCOUNTING.<QuoteType>","IR.<Currency>-<Issuer>.ZERORATE.<QuoteType>","IR.<TargetCurrency>-<TargetIRIndex>-<TargetIRIndexTenor>/<KnownCurrency>-<KnownIRIndex>-<KnownIRIndexTenor>.Reset.<QuoteType>","IR.<TargetCurrency>-<TargetIRIndex>-<TargetIRIndexTenor>/<KnownCurrency>-<KnownIRIndex>-<KnownIRIndexTenor>.<QuoteType>","IR.<FixedCurrency>-FIXED/<FloatCurrency>-<FloatIRIndex>-<FloatIRIndexTenor>.<MarketType>.<QuoteType>","IR.<Currency>-<IRIndex>-ON.<QuoteType>","IR.MXN-<BondType>-<Issuer>.SOVEREIGN.<QuoteType>","IR.<Currency>-<BondType>-<Issuer>.SOVEREIGN.<QuoteType>","IR.USD-USGOVT.<QuoteType>","IR.<Currency>-<Issuer>.<QuoteType>","INFL.ZCIIS.<Currency>-<InflationIndex>.<QuoteType>","FX.SPOT.<Currencies>.<QuoteType>","FX.SPOT.<QuoteType>","FX.<TargetCurrency>/USD.FWD.<QuoteType>","FX.<TargetCurrency>/<KnownCurrency>.FWD.<QuoteType>","FX.VOL.<BaseCurrency>/<TermCurrency>.<QuoteType>","EQ.<Currency>-<Exchange>-<Ticker>.DIV.<DividendType>","EQ.<Currency>-<Exchange>-<Ticker>.DIV","EQ.VOL.<Currency>-<Exchange>-<Ticker>.<QuoteType>","EQ.VOL.<Currency>-<Exchange>-<Ticker>.<QuoteType>","CR.<Currency>-<CDSIndex>.CREDITCURVEFACTORY.<QuoteType>","CR.<Currency>.CREDITCURVEFACTORY.<QuoteType>","CR.<Currency>-<CDSIndex>-<ScaleFactor>.BASECORRELATIONSURFACE.<QuoteType>","CR.USD-CDXPROTOTYPEB.BASECORRELATIONSURFACE.<QuoteType>","CR.<Currency>-<CDSIndex>.BASECORRELATIONSURFACE.<QuoteType>","CR.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>_<CDSIndexSpread>-.<QuoteType>","CR.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>.<QuoteType>","CR.<Currency>-<Issuer>.<QuoteType>","CMDTY.<Currency>-<Exchange>-<Ticker>.FWD.<QuoteType>","CMDTY.VOL.<Currency>-<Exchange>-<Ticker>.STRIKE-<STRIKEDEFINITION>.<QuoteType>","EQ.VOLSPREAD.<Currency>-<Exchange>-<Ticker>.<QuoteType>"],
      "Predicate" : [null,"Pattern.CCYPair ==#\"BTCUSD\" || Pattern.CCYPair ==#\"BCHUSD\" || Pattern.CCYPair ==#\"ETHUSD\"",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"6M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"6M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"6M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"6M\"","Pattern.IRIndexTenor ==#\"1M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"3M\" || Pattern.IRIndexTenor==#\"12M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor ==#\"3M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"3M\" || Pattern.IRIndexTenor==#\"12M\"","Pattern.IRIndexTenor==#\"12M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"3M\" || Pattern.IRIndexTenor==#\"12M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"3M\" || Pattern.IRIndexTenor==#\"12M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"3M\"","Pattern.IRIndexTenor ==#\"1M\" || Pattern.IRIndexTenor==#\"6M\"","Pattern.IRIndexTenor==#\"3M\"","Pattern.IRIndexTenor==#\"1M\"",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"Pattern.TargetCurrency in {\"BTC\", \"BCH\",\"ETH\",\"XRP\",\"LTC\"}",null,null,null,null,"Pattern.Ticker == #\"META\" || Pattern.Ticker == #\"INTC\"",null,null,null,null,null,null,null,"Pattern.Currency.Size<4","Pattern.Currency.Size<4",null,null,null],
      "MDE Template" : ["CUSTOMCURRENCYSETTINGS","FXSPOTSTRATEGY","FXSPOTSTRATEGY","RATESPOTSTRATEGY","RATESPOTSTRATEGY","FALLBACKRATESETTINGS","RATESETTINGS","CURVE.ARRADDON","CURVE.ARR","CURVE.ARR","CURVE.ARR","CURVE.ARR","CURVE.ARR","CURVE.ARR","CURVE.ARR","CURVE.ARR","CURVE.ARR","VOLATILITY.CAP","VOLATILITY.CAP","VOLATILITY.CAP","VOLATILITY.CAP","VOLATILITY.CAP","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITY.SWAPTION","VOLATILITYCUBE.SWAPTION","CURVE.CSA","CURVE.CTD","CURVE.SPREAD","CURVE.SPREAD","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.BASIS","CURVE.ISDA","CURVE.OIS","CURVE.OIS","CURVE.OIS","CURVE.CIS","CURVE.YIELD","CURVE.YIELD","CURVE.YIELD","CURVE.ZERORATE","CURVE.XCCYBASIS","CURVE.XCCYBASIS","CURVE.XCCYSWAP","CURVE.OIS","CURVE.SOVEREIGN","CURVE.SOVEREIGN","CURVE.SOVEREIGN","CURVE.SOVEREIGN","CURVE.ZCIISWAP","SPOT.FX","SPOT.FX","CURVE.FXFWD","CURVE.FXFWD","VOLATILITY.FX","CURVE.DIVIDEND","CURVE.DIVIDEND","VOLATILITY.EQ","VOLATILITY.EQ","CURVEFACTORY.IM","CURVEFACTORY","BASECORRELATIONSURFACE","BASECORRELATIONSURFACE","BASECORRELATIONSURFACE","CREDITCURVE.CDS","CREDITCURVE.CDS","CREDITCURVE.BOND","CURVE.CMDTYFWD","VOLATILITY.CMDTY","CURVE.VOLATILITYSPREAD"],
      "MDE Parameters" : [null,"{\"CCYPair\",Pattern.CCYPair},{\"Custom Currency\",True}","{\"CCYPair\",Pattern.CCYPair}","{\"Spot Rule\",\"T+0\"}","{\"Currency\",Pattern.Currency},{\"IRIndex\",Pattern.IRIndex},{\"Spot Rule\",Pattern.SpotRule}","{\"Currency\",Pattern.Currency},{\"IRIndex\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor}","{\"Currency\",Pattern.Currency},{\"IRIndex\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor}","{\"Currency\",\"USD\"},{\"IR Index\",\"SOFR\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/360\"}","{\"Currency\",\"USD\"},{\"IR Index\",\"SOFR\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/360\"}","{\"Currency\",\"GBP\"},{\"IR Index\",\"SONIA\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/365\"}","{\"Currency\",\"JPY\"},{\"IR Index\",\"TONAR\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/365\"}","{\"Currency\",\"EUR\"},{\"IR Index\",\"ESTR\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/360\"}","{\"Currency\",\"CHF\"},{\"IR Index\",\"SARON\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/360\"}","{\"Currency\",\"AUD\"},{\"IR Index\",\"AONIA\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/365\"}","{\"Currency\",\"HKD\"},{\"IR Index\",\"HONIA\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/365\"}","{\"Currency\",\"SGD\"},{\"IR Index\",\"SORA\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/365\"}","{\"Currency\",\"THB\"},{\"IR Index\",\"THOR\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Method\",\"Linear\"},{\"Interpolation Variable\",\"Continuous Rate\"},{\"Basis\",\"ACT/365\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"USD\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Extrapolation\",\"Flat Extrapolation\"},{\"Volatility Basis\",\"ACT/365\"},{\"Interpolation Variable\",\"Vol\"},{\"Interpolation Method\",\"Linear\"},{\"Vol Quote Type\",\"NORMAL\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"TWD\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Extrapolation\",\"Flat Extrapolation\"},{\"Volatility Basis\",\"ACT/365\"},{\"Interpolation Variable\",\"Vol\"},{\"Interpolation Method\",\"Linear\"},{\"Vol Quote Type\",\"NORMAL\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"CNY\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"NORMAL\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"HKD\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Extrapolation\",\"Flat Extrapolation\"},{\"Volatility Basis\",\"ACT/365\"},{\"Interpolation Variable\",\"Vol\"},{\"Interpolation Method\",\"Linear\"},{\"Vol Quote Type\",\"LOGNORMAL\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"NORMAL\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"USD\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"NORMAL\"},{\"Interpolation\",\"BiLinear\"},{\"Extrapolation\",\"Flat Extrapolation\"},{\"Volatility Basis\",\"ACT/365\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"TWD\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"NORMAL\"},{\"Interpolation\",\"BiLinear\"},{\"Extrapolation\",\"Flat Extrapolation\"},{\"Volatility Basis\",\"ACT/365\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"CNY\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"LOGNORMAL\"},{\"Interpolation\",\"BiLinear\"},{\"Extrapolation\",\"Flat Extrapolation\"},{\"Volatility Basis\",\"ACT/365\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"CNH\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"LOGNORMAL\"},{\"Interpolation\",\"BiLinear\"},{\"Extrapolation\",\"Flat Extrapolation\"},{\"Volatility Basis\",\"ACT/365\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"HKD\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"LOGNORMAL\"},{\"Interpolation\",\"BiLinear\"},{\"Extrapolation\",\"Flat Extrapolation\"},{\"Volatility Basis\",\"ACT/365\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"ZAR\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"NORMAL\"},{\"Interpolation\",\"BiLinear\"},{\"Extrapolation\",\"Flat Extrapolation\"},{\"Volatility Basis\",\"ACT/365\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"LOGNORMAL\"},{\"Swaption Strike\",Pattern.SwaptionStrike},{\"Strike Type\",Pattern.StrikeType}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"NORMAL\"},{\"Swaption Strike\",Pattern.SwaptionStrike},{\"Strike Type\",Pattern.StrikeType}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"TRUNCATEDNORMAL\"},{\"Swaption Strike\",Pattern.SwaptionStrike},{\"Strike Type\",Pattern.StrikeType}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"SHIFTEDLOGNORMAL\"},{\"Swaption Strike\",Pattern.SwaptionStrike},{\"Strike Type\",Pattern.StrikeType}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"NORMAL\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Vol Quote Type\",\"NORMAL\"}","{\"BaseCcy\",Pattern.BaseCcy},{\"FxCcy\",Pattern.FxCcy},{\"ForeignCurve\",Pattern.ForeignCurve}","{\"Currency\",Pattern.Currency},{\"Counterparty\",Pattern.Counterparty},{\"Legal Entity\",Pattern.LegalEntity},{\"Netting Set\",Pattern.NettingSet},{\"Margin Set\",Pattern.MarginSet}","{\"Currency\",\"USD\"},{\"Quote Type\",Pattern.QuoteType},{\"Base Curve\",\"IR.USD-LIBOR-3M.OISDISCOUNTING\"},{\"Counterparty\",Pattern.Counterparty}","{\"Currency\",\"USD\"},{\"Quote Type\",Pattern.QuoteType},{\"Base Curve\",\"IR.USD-LIBOR-3M.OISDISCOUNTING\"},{\"Counterparty\",Pattern.Counterparty}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"USD\"},{\"Use Cash\",true},{\"Basis Swap Type\",\"Basis\"},{\"Target LegIR Index\",\"SIFMA\"},{\"Target LegIR Index Tenor\",\"1W\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"USD\"},{\"Basis Swap Type\",\"Basis\"},{\"Target LegIR Index\",\"TBILL\"},{\"Target LegIR Index Tenor\",\"3M\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"USD\"},{\"Basis Swap Type\",\"Basis\"},{\"Target LegIR Index\",\"PRIME\"},{\"Target LegIR Index Tenor\",\"1D\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"USD\"},{\"Basis Swap Type\",\"Basis\"},{\"Target LegIR Index\",\"CP\"},{\"Target LegIR Index Tenor\",\"1M\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"AUD\"},{\"Known Leg IR Index Tenor\",Pattern.KnownIRIndexTenor},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"USD\"},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"USD\"},{\"Known Leg IR Index Tenor\",Pattern.KnownIRIndexTenor},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"USD\"},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"CAD\"},{\"Known Leg IR Index\",Pattern.IRIndex},{\"Target LegIR Index\",Pattern.IRIndex},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"JPY\"},{\"Known Leg IR Index Tenor\",Pattern.KnownIRIndexTenor},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"JPY\"},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"GBP\"},{\"Known Leg IR Index Tenor\",Pattern.KnownIRIndexTenor},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"GBP\"},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"EUR\"},{\"Known Leg IR Index Tenor\",Pattern.KnownIRIndexTenor},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"EUR\"},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"NOK\"},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"SEK\"},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"DKK\"},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",\"PLN\"},{\"Target LegIR Index Tenor\",Pattern.IRIndexTenor}","{\"Currency\",Pattern.Currency},{\"Quote Type\",Pattern.QuoteType}","{\"Currency\",\"BRL\"},{\"IR Index\",\"DI\"},{\"IR Index Tenor\",\"ON\"},{\"Quote Type\",Pattern.QuoteType},{\"Use Futures\",true}","{\"Currency\",\"CNY\"},{\"IR Index\",\"REPO\"},{\"IR Index Tenor\",\"7D\"},{\"Quote Type\",Pattern.QuoteType}","{\"Currency\",Pattern.Currency},{\"IR Index\",\"SONIA\"},{\"IR Index Tenor\",\"ON\"},{\"UseFutures\",false},{\"Quote Type\",Pattern.QuoteType}","{\"Currency\",\"CAD\"},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",\"3M\"}","{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Quote Type\",Pattern.QuoteType},{\"DualCurve\",false}","{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Quote Type\",Pattern.QuoteType},{\"Swap Start Tenor\",\"3Y\"}","{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"IR Index Tenor\",Pattern.IRIndexTenor},{\"Quote Type\",Pattern.QuoteType},{\"Swap Start Tenor\",\"3Y\"}","{\"Currency\",Pattern.Currency},{\"Issuer\",Pattern.Issuer},{\"Quote Type\",Pattern.QuoteType}","{\"Known Currency\",Pattern.KnownCurrency},{\"Target Currency\",Pattern.TargetCurrency},{\"Known IR Index\",Pattern.KnownIRIndex},{\"Known IR Index Tenor\",Pattern.KnownIRIndexTenor},{\"Target IR Index\",Pattern.TargetIRIndex},{\"Target IR Index Tenor\",Pattern.TargetIRIndexTenor},{\"Quote Type\",Pattern.QuoteType},{\"Use Resettable Basis Swap\",true}","{\"Known Currency\",Pattern.KnownCurrency},{\"Target Currency\",Pattern.TargetCurrency},{\"Known IR Index\",Pattern.KnownIRIndex},{\"Known IR Index Tenor\",Pattern.KnownIRIndexTenor},{\"Target IR Index\",Pattern.TargetIRIndex},{\"Target IR Index Tenor\",Pattern.TargetIRIndexTenor},{\"Quote Type\",Pattern.QuoteType}","{\"Quote Type\",Pattern.QuoteType},{\"Market Type\",Pattern.MarketType},{\"Fixed Currency\",Pattern.FixedCurrency},{\"Float Currency\",Pattern.FloatCurrency},{\"Float IR Index\",Pattern.FloatIRIndex},{\"Float IR Index Tenor \",Pattern.FloatIRIndexTenor}","{\"Currency\",Pattern.Currency},{\"IR Index\",Pattern.IRIndex},{\"Quote Type\",Pattern.QuoteType}","{\"Currency\",\"MXN\"},{\"Issuer\",Pattern.Issuer},{\"Bond Type\",Pattern.BondType},{\"Quote Type\",Pattern.QuoteType}","{\"Currency\",Pattern.Currency},{\"Issuer\",Pattern.Issuer},{\"Bond Type\",Pattern.BondType},{\"Quote Type\",Pattern.QuoteType},{\"Maturity Type\",\"Tenor\"}","{\"Currency\",\"USD\"},{\"Issuer\",\"USGOVT\"},{\"Bond Type\",\"USTREASURY\"},{\"Quote Type\",Pattern.QuoteType}","{\"Currency\",Pattern.Currency},{\"Issuer\",Pattern.Issuer}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"Inflation Index\",Pattern.InflationIndex}","{\"Quote Type\",Pattern.QuoteType},{\"Currencies\",Pattern.Currencies}","{\"Quote Type\",Pattern.QuoteType}","{\"Quote Type\",Pattern.QuoteType},{\"Known Currency\",\"USD\"},{\"Target Currency\",Pattern.TargetCurrency},{\"Maturity Type\",\"Tenor\"},{\"Custom Currency\",True}","{\"Quote Type\",Pattern.QuoteType},{\"MaturityType\",\"Tenor\"},{\"Known Currency\",Pattern.KnownCurrency},{\"Target Currency\",Pattern.TargetCurrency}","{\"Quote Type\",Pattern.QuoteType},{\"Term Currency\",Pattern.TermCurrency},{\"Base Currency\",Pattern.BaseCurrency}","{\"Currency\",Pattern.Currency},{\"Dividend Type\",Pattern.DividendType},{\"Ticker\",Pattern.Ticker},{\"Exchange\",Pattern.Exchange}","{\"Currency\",Pattern.Currency},{\"Ticker\",Pattern.Ticker},{\"Exchange\",Pattern.Exchange}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"Exchange\",Pattern.Exchange},{\"Ticker\",Pattern.Ticker},{\"Delta Type\",\"FORWARD\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"Exchange\",Pattern.Exchange},{\"Ticker\",Pattern.Ticker},{\"Strike Type\",\"RLTV\"},{\"Interpolation Variable\",\"VolSquareT\"},{\"Time Interpolation\",\"Linear\"},{\"Time Extrapolation\",\"Flat\"},{\"Strike Interpolation\",\"Linear Strike\"},{\"Strike Extrapolation\",\"Flat\"},{\"Volatility Basis\",\"ACT/365\"}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"CDS Index\",Pattern.CDSIndex}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency}","{\"CDS Index\",Pattern.CDSIndex},{\"Currency\",Pattern.Currency},{\"Quote Type\",Pattern.QuoteType},{\"Scale Factor\",Pattern.ScaleFactor}","{\"CDS Index\",\"CDXPROTOTYPEB\"},{\"Currency\",\"USD\"},{\"Quote Type\",Pattern.QuoteType},{\"Interpolation Specification\",Numerix::Table(\"CDXPROTOTYPEBInterpolation\",{\"Interpolation Direction\",\"Interpolation\",\"Flat Extrapolation\"},{{\"DETACHMENT\",\"TENOR\"},{\"LINEAR\",\"LINEAR\"},{true,false}}).Create},{\"Mapping Index\",\"CDXPROTOTYPE\"},{\"Insert 99pct Detachment\",true}","{\"CDS Index\",Pattern.CDSIndex},{\"Currency\",Pattern.Currency},{\"Quote Type\",Pattern.QuoteType}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"Reference Entity\",Pattern.ReferenceEntity},{\"Debt Type\",Pattern.DebtType},{\"Restructuring Clause\",Pattern.RestructuringClause},{\"CDS Index Spread\",Pattern.CDSIndexSpread}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"Reference Entity\",Pattern.ReferenceEntity},{\"Debt Type\",Pattern.DebtType},{\"Restructuring Clause\",Pattern.RestructuringClause}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"Issuer\",Pattern.Issuer}","{\"QuoteType\",Pattern.QuoteType},{\"Symbol\",Pattern.Ticker},{\"Exchange\",Pattern.Exchange},{\"Currency\",Pattern.Currency}","{\"Quote Type\",Pattern.QuoteType},{\"Currency\",Pattern.Currency},{\"Exchange\",Pattern.Exchange},{\"Symbol\",Pattern.Ticker},{\"Vol Quote Type\",\"Strike\"},{\"Strike Definition\",Pattern.StrikeDefinition}","{\"Currency\",Pattern.Currency},{\"Exchange\",Pattern.Exchange},{\"Ticker\",Pattern.Ticker},{\"UseTableInput\",true}"],
      "Comment" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_10401_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["CCDISCOUNTCURVERULES","PROJECTIONCURVERULES","CDSCURVERULES","FXDISCOUNTCURVERULES","EQVOLATILITYSURFACERULES","QUOTETYPE","CAPVOLATILITYSURFACERULES","CMDTYVOLATILITYSURFACERULES","BASECORRELATIONSURFACERULES","CRBONDCURVERULES","FXVOLATILITYSURFACERULES","CSADISCOUNTCURVERULES","INDEXMATCHEDCREDITCURVEFACTORYRULES","FXSPOTRULES","MARKETPOLICYID","DISCOUNTCURVERULES","CREDITCURVEFACTORYRULES","CMDTYFORWARDCURVERULES","SWAPTIONVOLATILITYSURFACERULES","DIVIDENDCURVERULES","BONDCURVERULES","DIAGNOSTICS","ZCIISCURVERULES","IDRESOLUTIONRULES"],
      "VALUE" : ["CCDISCOUNTCURVERULES_10359_NX_AUTOGEN","PROJECTIONCURVERULES_10361_NX_AUTOGEN","CDSCURVERULES_10363_NX_AUTOGEN","FXDISCOUNTCURVERULES_10365_NX_AUTOGEN","EQVOLATILITYSURFACERULES_10367_NX_AUTOGEN","MID","CAPVOLATILITYSURFACERULES_10369_NX_AUTOGEN","CMDTYVOLATILITYSURFACERULES_10371_NX_AUTOGEN","BASECORRELATIONSURFACERULES_10373_NX_AUTOGEN","CRBONDCURVERULES_10375_NX_AUTOGEN","FXVOLATILITYSURFACERULES_10377_NX_AUTOGEN","CSADISCOUNTCURVERULES_10379_NX_AUTOGEN","INDEXMATCHEDCREDITCURVEFACTORYRULES_10381_NX_AUTOGEN","FXSPOTRULES_10383_NX_AUTOGEN","Standard","DISCOUNTCURVERULES_10385_NX_AUTOGEN","CREDITCURVEFACTORYRULES_10387_NX_AUTOGEN","CMDTYFORWARDCURVERULES_10389_NX_AUTOGEN","SWAPTIONVOLATILITYSURFACERULES_10391_NX_AUTOGEN","DIVIDENDCURVERULES_10393_NX_AUTOGEN","BONDCURVERULES_10395_NX_AUTOGEN",true,"ZCIISCURVERULES_10397_NX_AUTOGEN","IDRESOLUTIONRULES_10399_NX_AUTOGEN"]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^MARKETPOLICY.INSTANCE": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "MARKETPOLICY.INSTANCE",
      "DEFINITION" : "MARKETPOLICY.DEFAULT",
      "INSTANTIATION TYPE" : "MARKETPOLICY",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "INPUTS" : "_10401_NX_AUTOGEN"
    }
  },
  "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Leg 1 Dates","Leg 1 RA Index 1A","Leg 1 RA Index 1B","Leg 1 RA Index 2A","Leg 1 RA Index 2B","Leg 1 Index","Leg 1 Index 2","RA Holiday Convention","RA Cutoff Period","RA End Date Observation","RA observation fixing lag","RA In Range Coupon","RA Out Range Coupon","RA Upper Bound 1","RA Upper Bound 1 Inclusive","RA Lower Bound 1","RA Lower Bound 1 Inclusive","RA Upper Bound 2","RA Upper Bound 2 Inclusive","RA Lower Bound 2","RA Lower Bound 2 Inclusive","Leg 1 RA Multiplier 1A","Leg 1 RA Multiplier 1B","Leg 1 RA Multiplier 2A","Leg 1 RA Multiplier 2B","First Coupon Guaranteed","Coupon Guaranteed","Leg 1 Multiplier 2","isCMSFallback","Swap Direction","Leg 1 Coupon Type","Settlement Currency","Quote Type","Issuer","Issuer Credit ID","Issuer Recovery Rate","Reference Entity","Debt Type","Restructuring Clause","Lifecycle Event Table","FixingsIdMap","Currency","Cash Settlement","Upfront Fee","Termination Fee","Guaranteed Period Start Date","Guaranteed Period End Date"],
      "TYPE" : ["Def(DEFINITION.INTERESTDATES)","Def(DEFINITION.GENERICRATEINDEX)","Def(DEFINITION.GENERICRATEINDEX)","Def(DEFINITION.GENERICRATEINDEX)","Def(DEFINITION.GENERICRATEINDEX)","Def(DEFINITION.GENERICRATEINDEX)","Def(DEFINITION.GENERICRATEINDEX)","String","Tenor","Boolean","Tenor","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Boolean","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Boolean","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Boolean","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Boolean","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Boolean","Double","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Boolean","String","String","Currency","String","String","String","Double","String","String","String","Table(DEFINITION.TRADE_ESUN.LIFECYCLE_INPUT)","ID|String","Currency","Boolean","Table(DEFINITION.TRADE_ESUN.CASHFLOWTABLESPEC)","Table(DEFINITION.TRADE_ESUN.CASHFLOWTABLESPEC)","Date","Date"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,false],
      "DEFAULT" : [null,null,null,null,null,null,null,"CDP","0BD",false,null,0,0,999999,false,-999999,false,999999,false,-999999,false,0,0,0,0,false,0,1,false,"Receive Structured","Range Accrual",
        ">Currency",    "MID",null,null,0.400000000000000022,
        ">if IssuerCreditID ? IssuerCreditID.Split(\"_\")[1] : \"\"",    
        ">if IssuerCreditID ? IssuerCreditID.Split(\"_\")[2] : \"\"",    
        ">if IssuerCreditID ? IssuerCreditID.Split(\"_\")[3] : \"\"",    null,
        "> TLC::CreateFixing",    null,false,null,null,
        ">StartDate",    
        ">StartDate+10"],
      "GROUPING" : ["Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg",null,"Trade T&C","Fixed Leg","Trade T&C","Pricing Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","lifecycle","lifecycle","Business","Pricing Parameters","Premium","Premium","Guaranteed","Guaranteed"],
      "DESCRIPTION" : [null,null,null,null,null,null,null,"Denotes wheter holiday observations on business days or calendar days and also specify roll conventions in case of the latter. Choices are BD, CDP, CDF,CDMF","Tenor of cutoff period in which all observations are assumed to be the same as the observation prior to the cutoff.","Indicates whether the observation end date falls on or before the end date","A fixing lag for the observation calculation. The observation date is the calculation date for computing whether a particular index was in some range. Thus,the observation date contributes to the ?gaccrual?h. That index value may have fixed on an earlier date, e.g., 2BD. This heading refers to that lag.","Fixed coupon if range condition is satisfied.","Fixed coupon if range condition is not satisfied.","Coupon rate. May be entered as a single flat rate, or as a schedule.","Whether to count as in-range when the underlying exactly falls on upper bound level.","Coupon rate. May be entered as a single flat rate, or as a schedule.","Whether to count as in-range when the underlying exactly falls on lower bound level.","Coupon rate. May be entered as a single flat rate, or as a schedule.","Whether to count as in-range when the underlying exactly falls on upper bound level.","Coupon rate. May be entered as a single flat rate, or as a schedule.","Whether to count as in-range when the underlying exactly falls on lower bound level.","The multiplier of Range accrual index","The multiplier of Range accrual index","The multiplier of Range accrual index","The multiplier of Range accrual index","Indicate whether the first coupon payment is guaranteed","Guaranteed Coupon Rate","Multiplier on float rate","Indicate whether it's USD CMS Fallback Note. 

Default to False.

Once this flag is set as True, the CMS Index called in payoff script should be adjusted according to ISDA formula below. 
The past cashflow will be handled by ESun via inputting determined coupon rate manually and won't be take care in template. 
The fixing data will be maintained by user through CIS fixing series. 

RateFallback = 365.25/365*[2*(sqrt(1+RateSOFR)-1)+0.26161%/2*((1+RateSOFR)^(1/4)+1)]","Pay Structured / Receive Structured","Accept value
- Range Accrual
- Range Accrual Spread","The underlying currency of the trade.","Indicate the Quote types used. May be Mid, Bid or Ask.","Issuer of the note which is predefined in Legal Entity","An ID indicate the necessary information of credit for issuer which includes below terms with separator ?_?:
1) Reference Entity
2) Debt Type
3) Restructuring Clause

ReferenceEntity_DebtType_RestructuringClause
","Used to specify what the recovery is for the defaulted asset; this heading overrides the recovery rate that may have been specified earlier for the asset in the basket or instrument. This is the recovery rate applied at the time of default.","The reference entity","The debt type","The restructuring clause; one of XR, CR, MR or MM","Generic input for lifecycle event table",null,"The payment currency.","TRUE: All cashflow on the same date will be netted and output to the new cashflow; FALSE: no netting.","Upfront Amount

>PREMIUMDEFAULT","Termination Table

>PREMIUMDEFAULT","Initial period start date","Initial period end date"]
    }
  },
  "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name","Asset Class","Default Pricer","Product Code"],
      "TYPE" : ["String","String","String","String"],
      "VALUE" : ["IR Callable Dual Generic Index Spread Range Accrual Swap","HY","PRICER.HY.IRQUANTOCALLABLEGENERICSWAP","CALLABLEDUALGENERICINDEXSPREADRASWAP"]
    }
  },
  "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Reporting Notional","Pricing Currency","Underlying Assets","Reporting Notional Currency"],
      "TYPE" : ["Double|Table()","Currency","String","Currency"],
      "VALUE" : [
        ">NxStd::ReportingNotional(Leg1Notional)",    
        ">Currency",    
        "> ac_underlyingassets",    
        ">Currency"]
    }
  },
  "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.PAYOFFSCRIPTDATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "PAYOFFSCRIPT" : [
        "PRODUCTS",
        "    DISCOUNTING Leg1, Leg2, Swap, SwapPV, CallOption, PutOption, PV, Leg1LastCoupon, Leg1LastCouponNonCR, Leg2LastCoupon, NotesPV, FundingPV, Leg1NtlExch, Leg2NtlExch, CallNotesFlows[CallSize + 1], CallFundingFlows[CallSize + 1], PutNotesFlows[PutSize + 1], PutFundingFlows[PutSize + 1]",
        "    DISCOUNTING Leg1NonCR, Leg2NonCR, PVNonCRNote, Leg1Principal, StructuredLegPV, FundingLegPV",
        "    NONDISCOUNTING CallProbs[CallSize + 1], PutProbs[PutSize + 1], floater, floater2",
        "    TEMPORARY flow, Coupon, EventOcc, nonCRFlow, temp",
        "    INTEGER CallCounter, PutCounter",
        "    PAYMENTLOG Leg1Log, Leg2Log, ConsolLog",
        "END PRODUCTS",
        null,
        "PAYOFFSCRIPT",
        null,
        "> payoff_initial_exchange",
        null,
        "// Calculate the value of the guaranteed coupon",
        "> payoff_guaranteed_coupon",
        null,
        "    // Leg 1",
        "> payoff_leg1_coupon",
        null,
        "    // Leg 2",
        "    IF IsActive(Leg2Dates) THEN",
        "        coupon = Leg2CouponIndex",
        "        flow = Leg2Side * coupon * Leg2Notional * Leg2DatesDCF",
        "        Leg2LastCoupon = Cash(flow, Leg2Dates, ThisPay, Currency2)",
        "        Leg2 += Leg2LastCoupon",
        "        LOGACCRUED(flow, Leg2DatesDCF, Leg2)",
        "        > payoff_Leg2_logPaymentstream",
        "    ENDIF",
        null,
        "> payoff_intermediate_exchange",
        "//> payoff_final_exchange",
        "> payoff_callable",
        "> payoff_puttable",
        null,
        "    IF IsFirst(AllDates) THEN    ",
        "        leg1 += Leg1NtlExch",
        "        leg2 += Leg2NtlExch",
        "        Swap = Leg1 + Leg2        ",
        "        StructuredLegPV = Leg1 - Leg1Principal",
        "        FundingLegPV = Leg2",
        "        SwapPV = StructuredLegPV + FundingLegPV    // This is only for output, no notional for notes form",
        "        CallOption *= CallableSide",
        "        PutOption *= PuttableSide",
        "        PV = Swap + CallOption + PutOption",
        "        PVNonCRNote = Leg1NonCR + CallOption + PutOption",
        "        FundingPV = -(Leg2 - FundingPV)",
        "        NotesPV = -(Leg1 - NotesPV)",
        "    ENDIF",
        "END PAYOFFSCRIPT"]
    }
  },
  "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.COMPONENTDATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Name" : ["Leg1Side","Leg2Side"],
      "Value" : [
        "> Leg1SideSwap",    
        "> Leg2SideSwap"]
    }
  },
  "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Function",
        "//================================================================================",
        "// Event objects",
        "define Leg1RAIndex1A_name     = \"Leg1RAIndex1A\"",
        "define Leg1RAIndex1B_name     = \"Leg1RAIndex1B\"",
        "define Leg1RAIndex2A_name     = \"Leg1RAIndex2A\"",
        "define Leg1RAIndex2B_name     = \"Leg1RAIndex2B\"",
        "define Leg1RAIndex1_name      = \"Leg1RAIndex1\"",
        "define Leg1RAIndex2_name      = \"Leg1RAIndex2\"",
        "define Leg1RAMultiplier1A_name= \"Leg1RAMultiplier1A\"",
        "define Leg1RAMultiplier1B_name= \"Leg1RAMultiplier1B\"",
        "define Leg1RAMultiplier2A_name= \"Leg1RAMultiplier2A\"",
        "define Leg1RAMultiplier2B_name= \"Leg1RAMultiplier2B\"",
        "define Leg1Index_name         = \"Leg1Index\"",
        "define Leg1Index_name2        = \"Leg1Index2\"",
        "define Leg1Multiplier_name2   = \"Leg1Multiplier2\"",
        "define Leg1InRangeCoupon_name = \"Leg1InRangeCoupon\"",
        "define Leg1OutRangeCoupon_name= \"Leg1OutRangeCoupon\"",
        "define Leg1RAfactor_name      = \"RAfactor\"",
        "define Leg1CouponGuaranteed_name=\"Leg1CouponGuaranteed\"",
        "define Leg1Spread_name        = \"Leg1Spread\"",
        null,
        "define RAUpperBound1_name     = \"RAUpperBound1\"",
        "define RALowerBound1_name     = \"RALowerBound1\"",
        "define RAUpperBound2_name     = \"RAUpperBound2\"",
        "define RALowerBound2_name     = \"RALowerBound2\"",
        "define SmallNumber            = 0.00000001",
        null,
        "define leg1DatesFloater_name  = \"Leg1DatesFloater\"",
        "define Leg1DatesFloater_evt   = Leg1Dates.Interestdates(leg1DatesFloater_name)",
        "define Leg1Dates_name         = \"Leg1Dates_\"",
        "define leg1Dates_evt          = RangeAccrualDates(leg1Dates_name, Leg1DatesFloater_evt, false, Leg1Dates.AccrualCalendar, Leg1Dates.AccrualRollConvention, Leg1Dates.Basis)",
        "define ValuationDate          = StartDate",
        "define EffectiveDate          = StartDate",
        "define Maturity               = EndDate",
        "define GuaranteedDates_name   = \"GuaranteedPeriodDates\"",
        "define GuaranteedCoupon_evt   = if hasGuaranteedCoupon ? GuaranteedPeriodDates_func : SingleDate_func(\"GuaranteedPeriodDates\",Numerix::SubtractTenor(EffectiveDate, Numerix::Tenor(\"1d\", \"MF\", \"None\")))",
        "define CouponBasis            = Leg1Dates.Basis",
        null,
        "//================================================================================",
        "// Main Function",
        "//================================================================================",
        null,
        "constfunction main",
        "{        ",
        "    call = Numerix::Object({\"components\", \"KERNEL\", \"COMPONENTS\"}) & ",
        "    {",
        "        \"payoff\" 	: cs_script,",
        "        \"data\"      : COMPONENTDATA,",
        "        // Guaranteed coupon        ",
        "        \"index\"     : if hasGuaranteedCoupon ? GuaranteedCoupon_func : NxStd::DataIndexObj(\"GuaranteedCoupon\", 0), ",
        "        // events",
        "        \"events\"    : Leg1Dates_evt,        // structure leg coupon",
        "        \"events\"    : Leg1DatesFloater_evt,  ",
        "        \"events\"    : GuaranteedCoupon_evt, ",
        "        \"events\" 	: AllDates_func",
        "	}",
        "    call &= leg1Indices",
        null,
        "    // common components",
        "    call &= CallableBase_main",
        null,
        "    // Credit components",
        "    if not isSwap then",
        "        issuerSurvivalCouponDates = AllDates_func ",
        "        call &= ",
        "        {",
        "            \"index\"     : IssuerSurvivalProbPay_func(issuerSurvivalCouponDates),        ",
        "            \"index\"     : IssuerSurvivalProbFix_func(issuerSurvivalCouponDates),  ",
        "            \"index\"     : IssuerSurvivalProbCallPay_func(issuerSurvivalCouponDates),",
        "            \"index\"     : IssuerRecovery_func",
        "        }",
        "    endif",
        "    return call.Create",
        "}",
        null,
        "//=============================================================================",
        "// Functions",
        "//=============================================================================",
        "constfunction cs_script",
        "{",
        "    call = Numerix::Object({\"cs_script\", \"SCRIPT\", \"SCRIPT\"}) & ",
        "    {",
        "        \"script\" 	: PAYOFFSCRIPTDATA,",
        "        \"direction\" : \"Backward\" ",
        "	}",
        null,
        "    return call.Create",
        "}",
        null,
        "constfunction leg1Indices",
        "{",
        "    call = {}",
        "    idx1A = {}    ",
        "    idx1B = {}",
        "    idx2A = {}",
        "    idx2B = {}",
        "    RAtable={}",
        "    refEvent = Leg1Dates_evt",
        null,
        "    ifnot Leg1RAMultiplier1A == 0:",
        "        idx1A = Leg1RAIndex1A.generic_index(Leg1RAIndex1A_name, TLC::FixingsID(Leg1RAIndex1A.generic_index_fixings))",
        "    ifnot Leg1RAMultiplier1B == 0:",
        "        idx1B = Leg1RAIndex1B.generic_index(Leg1RAIndex1B_name, TLC::FixingsID(Leg1RAIndex1B.generic_index_fixings))",
        "    ifnot Leg1RAMultiplier2A == 0:",
        "        idx2A = Leg1RAIndex2A.generic_index(Leg1RAIndex2A_name, TLC::FixingsID(Leg1RAIndex2A.generic_index_fixings))",
        "    ifnot Leg1RAMultiplier2B == 0:",
        "        idx2B = Leg1RAIndex2B.generic_index(Leg1RAIndex2B_name, TLC::FixingsID(Leg1RAIndex2B.generic_index_fixings))",
        "    //----------",
        "    // 1st indices",
        "    //----------",
        "    ifnot Leg1RAMultiplier1A == 0",
        "    {",
        "        // COMMON",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::DataIndexObj(Leg1RAMultiplier1A_name,  Leg1RAMultiplier1A,   leg1Dates_name),",
        "            \"index\"     : if RAUpperBound1Inclusive ? NxStd::DataIndexObj(RAUpperBound1_name, bound_inclusive(RAUpperBound1, SmallNumber), leg1Dates_name): NxStd::DataIndexObj(RAUpperBound1_name, RAUpperBound1, leg1Dates_name),",
        "            \"index\"     : if RALowerBound1Inclusive ? NxStd::DataIndexObj(RALowerBound1_name, bound_inclusive(RALowerBound1, -SmallNumber), leg1Dates_name) : NxStd::DataIndexObj(RALowerBound1_name, RALowerBound1, leg1Dates_name)",
        "        }",
        null,
        "        // Spread index, e.g. CMS spread",
        "        ifnot Leg1RAMultiplier1B == 0",
        "        {",
        "            call &=",
        "            {",
        "                \"index\"     : NxStd::DataIndexObj(Leg1RAMultiplier1B_name,  Leg1RAMultiplier1B,     leg1Dates_name)",
        "            }",
        "            call &= append_spread_index(idx1A, idx1B, Leg1RAMultiplier1A_name, Leg1RAMultiplier1B_name, Leg1RAIndex1_name, refEvent, currency)",
        "        }",
        "        // single index, e.g. CMS, LIBOR index",
        "        else",
        "        {",
        "            call &= append_index(idx1A, Leg1RAMultiplier1A_name, Leg1RAIndex1_name, refEvent, Leg1RAIndex1A.currency)",
        "        }",
        "        // RA table",
        "        RAtable @= {Leg1RAIndex1_name, RAUpperBound1_name, RALowerBound1_name}",
        "    }",
        null,
        "    //----------",
        "    // 2nd indices",
        "    //----------",
        "    ifnot Leg1RAMultiplier2A == 0",
        "    {",
        "        // COMMON",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::DataIndexObj(Leg1RAMultiplier2A_name,  Leg1RAMultiplier2A,     leg1Dates_name),",
        "            \"index\"     : if RAUpperBound2Inclusive ? NxStd::DataIndexObj(RAUpperBound2_name, bound_inclusive(RAUpperBound2, SmallNumber), leg1Dates_name) : NxStd::DataIndexObj(RAUpperBound2_name, RAUpperBound2, leg1Dates_name),",
        "            \"index\"     : if RALowerBound2Inclusive ? NxStd::DataIndexObj(RALowerBound2_name, bound_inclusive(RALowerBound2, -SmallNumber), leg1Dates_name) : NxStd::DataIndexObj(RALowerBound2_name, RALowerBound2, leg1Dates_name)",
        "        }",
        null,
        "        // Spread index, e.g. CMS spread",
        "        ifnot Leg1RAMultiplier2B == 0",
        "        {",
        "            call &=",
        "            {",
        "                \"index\"     : NxStd::DataIndexObj(Leg1RAMultiplier2B_name,  Leg1RAMultiplier2B,     leg1Dates_name)",
        "            }",
        "            call &= append_spread_index(idx2A, idx2B, Leg1RAMultiplier2A_name, Leg1RAMultiplier2B_name, Leg1RAIndex2_name, refEvent, currency)",
        "        }",
        "        // single index, e.g. CMS, LIBOR index",
        "        else",
        "        {",
        "            call &= append_index(idx2A, Leg1RAMultiplier2A_name, Leg1RAIndex2_name, refEvent, Leg1RAIndex2A.currency)",
        "        }",
        "        // RA table",
        "        RAtable @= {Leg1RAIndex2_name, RAUpperBound2_name, RALowerBound2_name}",
        "    }",
        null,
        "    //----------",
        "    // COMMON",
        "    //----------",
        "    ifnot RAtable:",
        "        return {}",
        null,
        "    formula = Leg1RAfactor_name + \" * \" + Leg1InRangeCoupon_name + \" + \" + Leg1Spread_name",
        null,
        "    call &=",
        "    {",
        "        \"index\"     : NxStd::DataIndexObj(Leg1Spread_name,          Leg1Spread,           leg1Dates_name),",
        "        \"index\"     : NxStd::DataIndexObj(Leg1InRangeCoupon_name,   RAInRangeCoupon,      leg1Dates_name),",
        "        \"index\"     : RAFactor(Leg1RAfactor_name,   currency,   leg1Dates_name,   CreateRATable(RAtable))",
        "    }",
        null,
        "    if Leg1CouponType == #\"Range Accrual Floater\"",
        "    {",
        "        call &=",
        "        {",
        "            \"index\"     : leg1Index.generic_index(Leg1Index_name,   TLC::FixingsID(Leg1Index.generic_index_fixings)),",
        "            \"index\"     : NxStd::DataIndexObj(Leg1Multiplier_name,  Leg1Multiplier,     leg1Dates_name)",
        "        }",
        "        formula = Leg1RAfactor_name + \" * (\" + Leg1InRangeCoupon_name + \" + \" + Leg1Multiplier_name + \" * \" + Leg1Index_name + \") + \" + Leg1Spread_name",
        "    }",
        null,
        "    if Leg1CouponType == #\"Range Accrual Spread\"",
        "    {",
        "        if (Leg1Index.Name == \"CMS\" or Leg1Index.Name == \"CIS\") and isCMSFallback then",
        "            call &=",
        "            {            ",
        "                \"index\"     : leg1Index.generic_index(Leg1Index_name + \"CMS\",   TLC::FixingsID(Leg1Index.generic_index_fixings)),",
        "                \"index\"     : cms_fallback_index(Leg1Index_name, Leg1Index_name + \"CMS\")",
        "            }            ",
        "        else",
        "            call &=",
        "            {            ",
        "                \"index\"     : leg1Index.generic_index(Leg1Index_name,   TLC::FixingsID(Leg1Index.generic_index_fixings))                        ",
        "            }",
        "        endif",
        null,
        "        if (Leg1Index2.Name == \"CMS\" or Leg1Index2.Name == \"CIS\") and isCMSFallback then",
        "            call &=",
        "            {            ",
        "                \"index\"     : leg1Index2.generic_index(Leg1Index_name2 + \"CMS\",   TLC::FixingsID(Leg1Index2.generic_index_fixings)),",
        "                \"index\"     : cms_fallback_index(Leg1Index_name2, Leg1Index_name2 + \"CMS\")",
        "            }            ",
        "        else",
        "            call &=",
        "            {            ",
        "                \"index\"     : leg1Index2.generic_index(Leg1Index_name2,   TLC::FixingsID(Leg1Index2.generic_index_fixings))",
        "            }",
        "        endif",
        "        call &=",
        "        {                        ",
        "            \"index\"     : NxStd::DataIndexObj(Leg1Multiplier_name,  Leg1Multiplier,     leg1Dates_name),",
        "            \"index\"     : NxStd::DataIndexObj(Leg1Multiplier_name2,  Leg1Multiplier2,     leg1Dates_name)",
        "        }",
        "        formula = Leg1RAfactor_name + \" * (\" + Leg1InRangeCoupon_name + \" + \" + Leg1Multiplier_name + \" * \" + Leg1Index_name + \" + \" + Leg1Multiplier_name2 + \" * \" + Leg1Index_name2 + \") + \" + Leg1Spread_name",
        "    }",
        null,
        "    ifnot RAOutRangeCoupon == 0",
        "    {",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::DataIndexObj(Leg1OutRangeCoupon_name,  RAOutRangeCoupon,     leg1Dates_name)",
        "        }",
        "        formula += \" + ( 1 - \" + Leg1RAfactor_name + \") * \" + Leg1OutRangeCoupon_name",
        "    }",
        null,
        "    // Cap if applied",
        "    if Leg1Cap != 999999",
        "    {",
        "        call &= ",
        "        {",
        "            \"index\" : NxStd::DataIndexObj(Leg1Cap_name,  Leg1Cap,     Leg1Dates_name)",
        "        }",
        "        formula = \"MIN(\"+ formula + \",\" + Leg1Cap_name + \")\" ",
        "    }",
        "    // Floor if Applied",
        "    if Leg1Floor != -999999",
        "    {",
        "        call &= ",
        "        {",
        "            \"index\" : NxStd::DataIndexObj(Leg1Floor_name,  Leg1Floor,     Leg1Dates_name)",
        "        }",
        "        formula = \"MAX(\"+ formula + \",\" + Leg1Floor_name + \")\" ",
        "    }",
        null,
        "    call &=",
        "    {",
        "        \"index\"     : NxStd::FormulaIndexObj(Leg1CouponIndex_name, formula,         Leg1Dates_name)",
        "    }",
        null,
        "    if FirstCouponGuaranteed",
        "    {",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::DataIndexObj(Leg1CouponGuaranteed_name, CouponGuaranteed,  Leg1Dates_name)",
        "        }",
        "    }",
        null,
        "    return call",
        "}",
        null,
        "function add_list_of_indices(idx)",
        "{",
        "    call = {}",
        "    if idx is \"LIST\"",
        "    {",
        "        tempList = {}",
        "        foreach i in idx:",
        "            ifnot templist.find(i)",
        "            {",
        "                tempList @= i",
        "                call &= {\"index\": i}",
        "            }",
        "    }",
        "    else",
        "    {",
        "        call &= {\"index\": idx}",
        "    }",
        "    return call",
        "}",
        null,
        "function append_spread_index(idx1, idx2, multi1_name, multi2_name, RaIndex_name, refEvent, curr)",
        "{",
        "    call = {}",
        "    call &= add_list_of_indices(idx1)",
        "    call &= add_list_of_indices(idx2)",
        "    // index is termstructured -> use split formula index",
        "    if idx1 is \"LIST\" or idx2 is \"LIST\"",
        "    {",
        "        // generate split formula table",
        "        vals = {}",
        "        FixD = Numerix::Date(Numerix::query(refEvent.ID, \"FIXDATE=<Date>\", \"Date\").DATE)",
        "        ifnot FixD is \"LIST\":",
        "            FixD = {FixD}",
        "        iMax = if idx1 is \"LIST\" ? idx1.size : idx2.size",
        "        for i = 1 to iMax",
        "        {",
        "            a = if idx1 is \"LIST\" ? NxStd::GetInputValue(idx1[i], \"name\") : NxStd::GetInputValue(idx1, \"name\")",
        "            b = if idx2 is \"LIST\" ? NxStd::GetInputValue(idx2[i], \"name\") : NxStd::GetInputValue(idx2, \"name\")",
        "            isda_a = \"(365.25/365*(2*(POW(1+\"+ a +\",0.5)-1)+0.00130805*(POW(1+\"+ a +\",0.25)+1)))\"",
        "            isda_b = \"(365.25/365*(2*(POW(1+\"+ b +\",0.5)-1)+0.00130805*(POW(1+\"+ b +\",0.25)+1)))\"",
        null,
        "            j = if i > FixD.size ? FixD.size : i ",
        "            if (Leg1RAindex1A.Name == \"CMS\" or Leg1RAindex1A.Name == \"CIS\") and isCMSFallback then",
        "                vals @= {FixD[j], multi1_name + \" * \" + isda_a + \" + \" + multi2_name + \" * \" + isda_b}",
        "            else",
        "                vals @= {FixD[j], multi1_name + \" * \" + a + \" + \" + multi2_name + \" * \" + b}",
        "            endif",
        "        }",
        "        tbl = Numerix::Table(NxStd::MakeID(\"table\"), {\"Date\",\"Formula\"}, vals.transpose)",
        "        // append index",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::SplitFormulaIndexObj(RaIndex_name, tbl.create, curr,  \"\")",
        "        }",
        "    }",
        "    else     // generate formula index",
        "    {",
        "        a = NxStd::GetInputValue(idx1, \"name\")",
        "        b = NxStd::GetInputValue(idx2, \"name\")",
        null,
        "        isda_a = \"(365.25/365*(2*(POW(1+\"+ a +\",0.5)-1)+0.00130805*(POW(1+\"+ a +\",0.25)+1)))\"",
        "        isda_b = \"(365.25/365*(2*(POW(1+\"+ b +\",0.5)-1)+0.00130805*(POW(1+\"+ b +\",0.25)+1)))\"",
        null,
        "        if (Leg1RAindex1A.Name == \"CMS\" or Leg1RAindex1A.Name == \"CIS\") and isCMSFallback then",
        "            formula = multi1_name + \" * \" + isda_a + \" + \" + multi2_name + \" * \" + isda_b",
        "        else",
        "            formula = multi1_name + \" * \" + a + \" + \" + multi2_name + \" * \" + b",
        "        endif",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::FormulaIndexObj(RaIndex_name, formula, NxStd::GetInputValue(refEvent, \"name\"))  ",
        "        }",
        "    }",
        "    return call",
        "}",
        null,
        "function append_index(idx1, multi1_name, RaIndex_name, evt_name, curr)",
        "{",
        "    call = {}",
        "    call &= add_list_of_indices(idx1)",
        "    // index is termstructured -> use split formula index",
        "    if idx1 is \"LIST\"",
        "    {",
        "        // generate split formula table",
        "        vals = {}",
        "        FixD = Numerix::Date(Numerix::query(refEvent.ID, \"FIXDATE=<Date>\", \"Date\").DATE)",
        "        ifnot FixD is \"LIST\":",
        "            FixD = {FixD}",
        "        iMax = idx1.size",
        "        for i = 1 to iMax",
        "        {",
        "            a = NxStd::GetInputValue(idx1[i], \"name\")",
        "            isda_a = \"(365.25/365*(2*(POW(1+\"+ a +\",0.5)-1)+0.00130805*(POW(1+\"+ a +\",0.25)+1)))\"",
        "            j = if i > FixD.size ? FixD.size : i ",
        null,
        "            if (Leg1RAindex1A.Name == \"CMS\" or Leg1RAindex1A.Name == \"CIS\") and isCMSFallback then",
        "                vals @= {FixD[j], multi1_name + \" * \" + isda_a}",
        "            else",
        "                vals @= {FixD[j], multi1_name + \" * \" + a}",
        "            endif",
        "        }",
        "        tbl = Numerix::Table(NxStd::MakeID(\"table\"), {\"Date\", \"formula\"}, vals.transpose)",
        "        // append index",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::SplitFormulaIndexObj(RaIndex_name, tbl.create, curr,  \"\")",
        "        }",
        "    }",
        "    else     // generate formula index",
        "    {",
        "        a = NxStd::GetInputValue(idx1, \"name\")",
        "        isda_a = \"(365.25/365*(2*(POW(1+\"+ a +\",0.5)-1)+0.00130805*(POW(1+\"+ a +\",0.25)+1)))\"",
        null,
        "        if (Leg1RAindex1A.Name == \"CMS\" or Leg1RAindex1A.Name == \"CIS\") and isCMSFallback then",
        "            formula = multi1_name + \" * \" + isda_a",
        "        else",
        "            formula = multi1_name + \" * \" + a",
        "        endif",
        null,
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::FormulaIndexObj(RaIndex_name, formula, NxStd::GetInputValue(refEvent, \"name\"))  ",
        "        }",
        "    }",
        "    return call",
        "}",
        null,
        null,
        "// create RA factor",
        "function RAFactor(indexName, indexCurrency, eventName, raTable)",
        "{",
        "    call = Numerix::Object({indexName, \"INDEX\", \"RANGE ACCRUAL\"}) &",
        "    {",
        "        \"name\"                  : indexName,",
        "        \"currency\"              : indexCurrency,",
        "        \"range accrual dates\"   : eventName,",
        "        \"range accrual data\"    : raTable,",
        "        \"day counting\"          : if RAHolidayConvention.canonical == \"BD\"? \"BUSINESS\":\"CALENDAR\",",
        "        \"day counting calendar\" : if Leg1Dates.fixCalendar ? Leg1Dates.fixCalendar : \"NONE\"",
        "    }",
        null,
        "    return call.Create",
        "}",
        "constfunction CreateRATable(table)",
        "{",
        "    return Numerix::Table(NxStd::MakeID(\"table\"), {\"Trigger Index\", \"High Barrier\", \"Low Barrier\"}, table.Transpose).Create",
        "}",
        null,
        "function RangeAccrualDates(EventName, refEvent, isForward, AccrualCalendar, AccrualRollConvention, Basis)",
        "{",
        "    ifnot RefEvent:",
        "        return {}",
        null,
        "    FixD = Numerix::Date(Numerix::query(RefEvent.ID, \"FIXDATE=<Date>\", \"Date\").DATE)",
        "    StartD = Numerix::Date(Numerix::query(RefEvent.ID, \"ACCRUALSTART=<Date>\", \"Date\").DATE)",
        "    EndD = Numerix::Date(Numerix::query(RefEvent.ID, \"ACCRUALEND=<Date>\", \"Date\").DATE)",
        "    PayD = Numerix::Date(Numerix::query(RefEvent.ID, \"PAYDATE=<Date>\", \"Date\").DATE)",
        "    ifnot FixD is \"LIST\":",
        "        FixD = {FixD}",
        "    ifnot StartD is \"LIST\":",
        "        StartD = {StartD}",
        "    ifnot EndD is \"LIST\":",
        "        EndD = {EndD}",
        "    ifnot PayD is \"LIST\":",
        "        PayD = {PayD}",
        null,
        "    values = {}",
        "    foreach d in EndD",
        "    {",
        "        i = d.iteration",
        "        FixDate = if isForward ? EndD[i]: (if FixD[i] < StartD[i] ? FixD[i] : StartD[i])",
        "        values @= {FixDate, StartD[i], EndD[i], PayD[i]}",
        "    }",
        null,
        "    call = Numerix::Object({EventName+\"_ID\", \"EVENTS\", \"RANGE ACCRUAL DATES\"}) &",
        "    {",
        "        \"name\"                           : EventName,",
        "        \"basis\"                          : Basis, //Leg1Dates.Basis,",
        "        \"dates\"                          : Numerix::Table(NxStd::MakeID(\"table\"), {\"Fix Date\", \"Accrual Start\", \"Accrual End\", \"Pay Date\"}, values.Transpose).Create,",
        "        \"observation holiday convention\" : RAHolidayConvention,",
        "        \"obs cutoff period\"              : RACutoffPeriod,",
        "        \"end date observation\"           : RAEndDateObservation,",
        "        \"observation fixing lag\"         : RAObservationFixingLag,",
        "        \"accrual calendar\"               : AccrualCalendar,//Leg1Dates.AccrualCalendar,",
        "        \"accrual convention\"             : AccrualRollConvention //Leg1Dates.AccrualRollConvention",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        "//=============================================================================",
        "// UNDERLYING ASSET",
        "//=============================================================================",
        null,
        "constfunction payoff_guaranteed_coupon",
        "{",
        "    payoff_script = \"\"",
        "    if hasGuaranteedCoupon then",
        "        payoff_script += \"IF ISACTIVE(\" + GuaranteedDates_name + \") THEN \"",
        "        if isSwap then",
        "            payoff_script += \"flow = Leg1Side * GuaranteedCoupon * Leg1Notional * \" + GuaranteedDates_name + \"DCF \"",
        "            payoff_script += \"Leg1LastCoupon = Cash(flow, \" + GuaranteedDates_name + \", ThisPay, Currency1) \"        ",
        "            payoff_script += \"Leg1 += Leg1LastCoupon \"",
        "            payoff_script += \"Leg1NonCR += Leg1LastCoupon \"",
        "            payoff_script += \"LOGACCRUED(flow, \" + GuaranteedDates_name + \"DCF, Leg1) \"",
        "            payoff_script += \"LOGPAYMENTSTREAM(flow, \" + GuaranteedDates_name + \", Leg1Log, Currency1, \\\"INT\\\", Leg1Notional, GuaranteedCoupon, \\\"EffectiveRate\\\", GuaranteedCoupon) \"",
        "            payoff_script += \"LOGPAYMENTSTREAM(flow, \" + GuaranteedDates_name + \", ConsolLog, Currency1, \\\"LEG1 INT\\\", Leg1Notional, GuaranteedCoupon, \\\"EffectiveRate\\\", GuaranteedCoupon) \"",
        "        else        ",
        "            payoff_script += \"flow = Leg1Side * GuaranteedCoupon * Leg1Notional * \" + GuaranteedDates_name + \"DCF * IssuerSPPay \"",
        "            payoff_script += \"Leg1LastCoupon = Cash(flow, \" + GuaranteedDates_name + \", ThisPay, Currency1) \"        ",
        "            payoff_script += \"Leg1 += Leg1LastCoupon \"",
        "            payoff_script += \"nonCRFlow = Leg1Side * GuaranteedCoupon * Leg1Notional * \" + GuaranteedDates_name + \"DCF \"",
        "            payoff_script += \"Leg1LastCouponNonCR = Cash(nonCRFlow, \" + GuaranteedDates_name + \", ThisPay, Currency1) \"   ",
        "            payoff_script += \"Leg1NonCR += Leg1LastCouponNonCR \"",
        "            payoff_script += \"LOGACCRUED(flow, \" + GuaranteedDates_name + \"DCF, Leg1) \"",
        "            payoff_script += \"LOGPAYMENTSTREAM(flow, \" + GuaranteedDates_name + \", Leg1Log, Currency1, \\\"INT\\\", Leg1Notional, GuaranteedCoupon, \\\"EffectiveRate\\\", GuaranteedCoupon) \"",
        "            payoff_script += \"LOGPAYMENTSTREAM(flow, \" + GuaranteedDates_name + \", ConsolLog, Currency1, \\\"LEG1 INT\\\", Leg1Notional, GuaranteedCoupon, \\\"EffectiveRate\\\", GuaranteedCoupon) \"",
        "        endif",
        "        payoff_script += \"ENDIF \"",
        "    endif",
        null,
        "    return payoff_script",
        "}",
        null,
        "constfunction payoff_leg1_coupon",
        "{",
        "    formula = Leg1RAfactor_name + \" * \" + Leg1InRangeCoupon_name + \" + \" + Leg1Spread_name",
        null,
        "    if Leg1CouponType == #\"Range Accrual Floater\"",
        "    {",
        "        formula = Leg1RAfactor_name + \" * (\" + Leg1InRangeCoupon_name + \" + \" + Leg1Multiplier_name + \" * Floater) + \"  + Leg1Spread_name",
        "    }",
        null,
        "    if Leg1CouponType == #\"Range Accrual Spread\"",
        "    {",
        "        formula = Leg1RAfactor_name + \" * (\" + Leg1InRangeCoupon_name + \" + \" + Leg1Multiplier_name + \" * Floater + \" + Leg1Multiplier_name2 + \" * Floater2) + \" + Leg1Spread_name        ",
        "    }",
        null,
        "    ifnot RAOutRangeCoupon == 0:",
        "        formula += \" + ( 1 - \" + Leg1RAfactor_name + \") * \" + Leg1OutRangeCoupon_name",
        null,
        "    // Cap if applied",
        "    if Leg1Cap != 999999",
        "    {",
        "        formula = \"MIN(\"+ formula + \",\" + Leg1Cap_name + \")\" ",
        "    }",
        "    // Floor if Applied",
        "    if Leg1Floor != -999999",
        "    {",
        "        formula = \"MAX(\"+ formula + \",\" + Leg1Floor_name + \")\" ",
        "    }",
        null,
        null,
        "    payoff_script = \"\"",
        "    if Leg1CouponType == #\"Range Accrual Floater\":",
        "    {",
        "        payoff_script += \"IF ISACTIVE(\" + leg1DatesFloater_name + \") THEN \"",
        "        payoff_script += \"Floater = \" + Leg1Index_name + \" \"",
        "        payoff_script += \"ENDIF \"",
        "    }",
        null,
        "    if Leg1CouponType == #\"Range Accrual Spread\":",
        "    {",
        "        payoff_script += \"IF ISACTIVE(\" + leg1DatesFloater_name + \") THEN \"",
        "        payoff_script += \"Floater = \" + Leg1Index_name + \" \"",
        "        payoff_script += \"Floater2 = \" + Leg1Index_name2 + \" \"",
        "        payoff_script += \"ENDIF \"",
        "    }",
        null,
        "    payoff_script += \"IF ISACTIVE(\" + leg1Dates_name + \") THEN \"",
        "    if FirstCouponGuaranteed",
        "    {",
        "        payoff_script += \"IF ISFIRST(\" + leg1Dates_name + \") THEN \"",
        "        payoff_script += \"Coupon = \" + Leg1CouponGuaranteed_name + \" \"",
        "        payoff_script += \"ELSE \"",
        "        payoff_script += \"Coupon = \" + formula + \" \"",
        "        payoff_script += \"ENDIF \"",
        "    }",
        "    else:",
        "        payoff_script += \"Coupon = \" + formula + \" \"",
        null,
        "    // Coupon",
        "    if isSwap then",
        "        payoff_script += \"flow = Leg1Side * Coupon * Leg1Notional * \" + leg1Dates_name + \"DCF \"",
        "        payoff_script += \"Leg1LastCoupon = Cash(flow, \" + leg1Dates_name + \", ThisPay, Currency1) \"        ",
        "        payoff_script += \"Leg1 += Leg1LastCoupon \"",
        "        payoff_script += \"Leg1NonCR += Leg1LastCoupon \"",
        "        payoff_script += \"LOGACCRUED(flow, \" + leg1Dates_name + \"DCF, Leg1) \"",
        "        payoff_script += payoff_Leg1_logPaymentstream(\"INT\")",
        "        payoff_script += payoff_Consol_logPaymentstream(\"LEG1 INT\")",
        "    else        ",
        "        payoff_script += \"flow = Leg1Side * Coupon * Leg1Notional * \" + leg1Dates_name + \"DCF * IssuerSPPay \"",
        "        payoff_script += \"Leg1LastCoupon = Cash(flow, \" + leg1Dates_name + \", ThisPay, Currency1) \"        ",
        "        payoff_script += \"Leg1 += Leg1LastCoupon \"",
        "        payoff_script += \"nonCRFlow = Leg1Side * Coupon * Leg1Notional * \" + leg1Dates_name + \"DCF \"",
        "        payoff_script += \"Leg1LastCouponNonCR = Cash(nonCRFlow, \" + leg1Dates_name + \", ThisPay, Currency1) \"   ",
        "        payoff_script += \"Leg1NonCR += Leg1LastCouponNonCR \"",
        "        payoff_script += \"LOGACCRUED(flow, \" + leg1Dates_name + \"DCF, Leg1) \"",
        "        payoff_script += payoff_Leg1_logPaymentstream(\"INT\")",
        "        payoff_script += payoff_Consol_logPaymentstream(\"LEG1 INT\")",
        null,
        "        // Pay recovery if default",
        "        payoff_script += \"flow = Leg1Side * Leg1Notional * IssuerRecovery * (IssuerSPFix - IssuerSPPay) \"",
        "        payoff_script += \"Leg1 += Cash(flow, \" + leg1Dates_name + \", ThisPay, Currency1) \"",
        "        payoff_script += payoff_Leg1_logPaymentstream(\"Rebate\")",
        "        payoff_script += payoff_Consol_logPaymentstream(\"LEG1 Rebate\")",
        null,
        "    endif",
        null,
        "    payoff_script += \"ENDIF \"",
        null,
        "    if not isSwap then        ",
        "        // Principal payback    ",
        "        payoff_script += \"IF ISLAST(\" + leg1Dates_name + \") THEN \"",
        "        payoff_script += \"flow = Leg1Side * Leg1Notional * (IssuerSPPay + IssuerRecovery * (1 - IssuerSPPay)) \"",
        "        payoff_script += \"nonCRFlow = Leg1Side * Leg1Notional \"",
        "        payoff_script += \"Leg1Principal = Cash(flow, \" + leg1Dates_name + \", ThisPay, Currency1) \"",
        "        payoff_script += \"Leg1 += Leg1Principal \"",
        "        payoff_script += \"Leg1NonCR += Cash(nonCRFlow, \" + leg1Dates_name + \", ThisPay, Currency1) \"    ",
        "        payoff_script += payoff_Leg1_logPaymentstream(\"NTL\")",
        "        payoff_script += payoff_Consol_logPaymentstream(\"LEG1 NTL\")",
        "        payoff_script += \"ENDIF \"",
        "    endif",
        null,
        null,
        "    return payoff_script",
        "}",
        null,
        "// this overwrites the same function in CALLABLESWAPBASE",
        "constfunction payoff_Leg1_logPaymentstream(cashflowType)",
        "{",
        "    payoff_script = \"LOGPAYMENTSTREAM(flow, \" + leg1Dates_name + \", Leg1Log, Currency1, \\\"\" + cashflowType + \"\\\", Leg1Notional, \" + Leg1CouponIndex_name + \", \\\"EffectiveRate\\\", coupon\"",
        "    if Leg1CouponType == #\"Range Accrual Floater\":",
        "        payoff_script += \", \\\"Index1\\\", floater, \\\"Multiplier\\\", \" + Leg1Multiplier_name",
        null,
        "    payoff_script += \", \\\"Spread\\\", \" + Leg1Spread_name + \", \\\"RAFactor\\\", \" + Leg1RAfactor_name + \") \"",
        "    return payoff_script",
        "}",
        null,
        "// this overwrites the same function in CALLABLESWAPBASE",
        "constfunction payoff_Consol_logPaymentstream(cashflowType)",
        "{",
        "    payoff_script = \"LOGPAYMENTSTREAM(flow, \" + leg1Dates_name + \", ConsolLog, Currency1, \\\"\" + cashflowType + \"\\\", Leg1Notional, \" + Leg1CouponIndex_name + \", \\\"EffectiveRate\\\", coupon\"",
        "    if Leg1CouponType == #\"Range Accrual Floater\":",
        "        payoff_script += \", \\\"Index1\\\", floater, \\\"Multiplier\\\", \" + Leg1Multiplier_name",
        null,
        "    payoff_script += \", \\\"Spread\\\", \" + Leg1Spread_name + \", \\\"RAFactor\\\", \" + Leg1RAfactor_name + \") \"",
        "    return payoff_script",
        "}",
        null,
        "//=============================================================================",
        "// UNDERLYING ASSET",
        "//=============================================================================",
        null,
        "// this function overwrites the abstract function in the CALLABLEBASE.",
        "constfunction additional_Currency_List",
        "{",
        "    res = {}",
        "    ifnot Leg1RAMultiplier1A == 0: if Leg1RAIndex1A.Currency:",
        "        res &= convertToList(Leg1RAIndex1A.Currency)",
        "    ifnot Leg1RAMultiplier1B == 0: if Leg1RAIndex1B.Currency:",
        "        res &= convertToList(Leg1RAIndex1B.Currency)",
        "    ifnot Leg1RAMultiplier2A == 0: if Leg1RAIndex2A.Currency:",
        "        res &= convertToList(Leg1RAIndex2A.Currency)",
        "    ifnot Leg1RAMultiplier2B == 0: if Leg1RAIndex2B.Currency:",
        "        res &= convertToList(Leg1RAIndex2B.Currency)",
        "    if Leg1CouponType == #\"Range Accrual Floater\" : ifnot Leg1Multiplier == 0: if Leg1Index.Currency:",
        "        res @= Leg1Index.Currency",
        "    if Leg1CouponType == #\"Range Accrual Spread\" : ifnot Leg1Multiplier == 0 then",
        "        if Leg1Index.Currency: res @= Leg1Index.Currency",
        "        if Leg1Index2.Currency: res @= Leg1Index2.Currency",
        "    endif",
        "    return res",
        "}",
        "constfunction convertToList(arr)",
        "{",
        "    if arr.Exists:",
        "        return arr.load.value",
        "    return {arr}",
        "}",
        null,
        "constfunction cms_fallback_index(_CMSFBKIndexName = \"\", _CMSIndexName=\"\", Event=\"\")",
        "{",
        "    call = Numerix::Object({\"CMSFallback\"+Numerix::UniqueNumber, \"INDEX\", \"FORMULA\"}) &",
        "    {",
        "        \"name\"     : _CMSFBKIndexName,",
        "        \"comment\"  : \"ISDA formula\",",
        "        \"currency\" : Currency,",
        "        \"formula\"  : \"365.25/365*(2*(POW(1+\"+_CMSIndexName+\",0.5)-1)+0.00130805*(POW(1+\"+_CMSIndexName+\",0.25)+1))\",",
        "        \"events\"   : Event",
        "    }",
        null,
        "    return call.create",
        "}",
        null,
        "constfunction InstrumentCollection_func",
        "{",
        "    Strike = \"ATM\"",
        "    Flavor = \"Payers\"",
        "    Weight = 1",
        "    Value = {}",
        "    CMS = {}",
        null,
        "    // Diagonal Calibrate to Swaption",
        "	_dayCount = Numerix::GetCalendarDayCount(ValuationDate, Maturity)",
        "	_yearCount = (_dayCount/365).Type(\"Integer\") + 2",
        "	_maturity = _yearCount + \"Y\"",
        null,
        null,
        "    Value @= {\"DiagonalSwaptions(\\\"\"+Strike+\"\\\",\\\"\"+ _maturity+\"\\\",\\\"\"+Flavor.Canonical+\"\\\")\",\"\",\"\",\"\",\"\",Weight}",
        null,
        "    if Leg1Index.Name == \"CMS\":        ",
        "        Value @= {\"ColumnSwaptions(\\\"\"+ Strike.Canonical+\"\\\",\\\"\"+Duration+\"\\\",\\\"\"+Leg1Index.Tenor+\"\\\",\\\"\"+ Flavor.Canonical+\"\\\",\\\"\"+Weight+\"\\\")\",\"\",\"\",\"\",\"\",Weight}            ",
        null,
        "    if Leg1Index2.Name == \"CMS\":    ",
        "        Value @= {\"ColumnSwaptions(\\\"\"+ Strike.Canonical+\"\\\",\\\"\"+Duration+\"\\\",\\\"\"+Leg1Index.Tenor+\"\\\",\\\"\"+ Flavor.Canonical+\"\\\",\\\"\"+Weight+\"\\\")\",\"\",\"\",\"\",\"\",Weight}                    ",
        null,
        "    if Leg1RAIndex1A.Name == \"CMS\":    ",
        "        Value @= {\"ColumnSwaptions(\\\"\"+ Strike.Canonical+\"\\\",\\\"\"+Duration+\"\\\",\\\"\"+Leg1RAIndex1A.Tenor+\"\\\",\\\"\"+ Flavor.Canonical+\"\\\",\\\"\"+Weight+\"\\\")\",\"\",\"\",\"\",\"\",Weight}                            ",
        null,
        "    if Leg1RAIndex1B.Name == \"CMS\":    ",
        "        Value @= {\"ColumnSwaptions(\\\"\"+ Strike.Canonical+\"\\\",\\\"\"+Duration+\"\\\",\\\"\"+Leg1RAIndex1B.Tenor+\"\\\",\\\"\"+ Flavor.Canonical+\"\\\",\\\"\"+Weight+\"\\\")\",\"\",\"\",\"\",\"\",Weight}                            ",
        null,
        "    if Leg1RAIndex2A.Name == \"CMS\":    ",
        "        Value @= {\"ColumnSwaptions(\\\"\"+ Strike.Canonical+\"\\\",\\\"\"+Duration+\"\\\",\\\"\"+Leg1RAIndex2A.Tenor+\"\\\",\\\"\"+ Flavor.Canonical+\"\\\",\\\"\"+Weight+\"\\\")\",\"\",\"\",\"\",\"\",Weight}    ",
        null,
        "    if Leg1RAIndex2B.Name == \"CMS\":    ",
        "        Value @= {\"ColumnSwaptions(\\\"\"+ Strike.Canonical+\"\\\",\\\"\"+Duration+\"\\\",\\\"\"+Leg1RAIndex2B.Tenor+\"\\\",\\\"\"+ Flavor.Canonical+\"\\\",\\\"\"+Weight+\"\\\")\",\"\",\"\",\"\",\"\",Weight}    ",
        null,
        "    return Numerix::Table(\"SwaptionCalibrationInst_\" + Numerix::UniqueNumber, {\"Calibration Strategy\",\"Strike\",\"Option Maturity\",\"Swap Tenor\",\"Flavor\",\"Weight\"}, Value.Transpose).Create",
        "}",
        null,
        "//Instrument collection for Cap",
        "constfunction InstrumentCapfloor_func",
        "{",
        "    //Initial the Flag",
        "    Flag = 0",
        null,
        "    //check if short rate is used in coupon",
        "    if Leg1CouponType.Canonical.Find(\"FLOAT\"):",
        "    {",
        "        Flag = 1        ",
        "    }",
        null,
        "    //check if short rate is used in funding",
        "    if Leg2CouponType.Canonical.Find(\"FLOAT\"):",
        "    {",
        "        Flag = 1        ",
        "    }",
        null,
        "    //if short rate is used, create the set of Caps",
        "    if Flag:",
        "    {",
        "        CapConvention = NxStd::CapConventionID(Currency, Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndex\"), Numerix::GetSettings(\"Settings.Currency\",Currency,,\"IRIndexTenor\"))",
        "        RateTenor = NxStd::GetConventions(CapConvention, \"Rate Tenor\")",
        "        CapFreq = NxStd::GetConventions(CapConvention, \"Freq\")",
        "        FirstFixing = Numerix::AddTenor(ValuationDate, Numerix::Tenor(RateTenor, \"None\", \"None\"))",
        "        FirstExpiry = Numerix::AddTenor(FirstFixing, Numerix::Tenor(RateTenor, \"None\", \"None\"))",
        "        //Calculate the Start Tenor",
        "        StartTenor = Numerix::ReportTenorFromDates(ValuationDate, FirstExpiry, \"None\").Canonical",
        "        //Default End Tenor",
        "        EndTenor = {\"1Y\",\"18M\",\"2Y\",\"3Y\",\"4Y\",\"5Y\",\"6Y\",\"7Y\",\"8Y\",\"9Y\",\"10Y\"}",
        "        OptSize = EndTenor.Find(Duration) ",
        "        //OptSize = EndTenor.size",
        null,
        "        Data = {}",
        "        for d = 1 to OptSize",
        "        {",
        "            if d != \"\" then",
        "                Data @= {\"ATM\", StartTenor, EndTenor[d], \"Call\"}",
        "            endif",
        "        }",
        "        //Create the Cap Instrument",
        "        CapFloorInstrument= Numerix::Table(\"InstrumentCapFloor\", {\"STRIKE\", \"START TENOR\", \"END TENOR\", \"FLAVOR\"}, Data.Transpose)",
        "	    table = Numerix::Create(CapFloorInstrument)",
        "        //Return the set ID",
        "        return table.ID",
        "        }",
        "    else:",
        "            return \"\"",
        "}",
        null,
        "//Calculate the remaining maturity",
        "function Duration",
        "{",
        "    default_calendar = Numerix::GetSettings(\"Settings.Currency\", currency, \"CITY\")",
        null,
        "    ifnot default_calendar:",
        "        calendar = \"None\"",
        "    else:",
        "        calendar = default_calendar",
        null,
        "    try{",
        "        tenor = Numerix::ReportTenorFromDates(Numerix::Date(ValuationDate), Numerix::Date(Maturity), calendar).Canonical ",
        "    }",
        "    catch error {",
        "        tenor = Numerix::ReportTenorFromDates(Numerix::Date(ValuationDate), Numerix::Date(Maturity), \"\").Canonical    ",
        "    }",
        null,
        "    ifnot tenor.Find(\"Y\") : ",
        "        return \"2Y\"",
        "    else :",
        "        return tenor",
        "}",
        null,
        "//return the pricing currency",
        "constfunction PricingCurrency",
        "{",
        "    return currency",
        "}",
        null,
        "constfunction Leg1SideSwap",
        "{",
        "    return if BuySell == #\"BUY\" ? (if SwapDirection.Canonical == \"RECEIVESTRUCTURED\" ? 1 : -1) : (if SwapDirection.Canonical == \"RECEIVESTRUCTURED\" ? -1 : 1)",
        "}",
        null,
        "constfunction Leg2SideSwap",
        "{",
        "    return if BuySell != #\"BUY\" ? (if SwapDirection.Canonical == \"RECEIVESTRUCTURED\" ? 1 : -1) : (if SwapDirection.Canonical == \"RECEIVESTRUCTURED\" ? -1 : 1)",
        "}",
        null,
        "function bound_inclusive(Bound_name, SmallNumber)",
        "{",
        "    if Bound_name is \"DOUBLE\"",
        "    {        ",
        "        return Bound_name + SmallNumber",
        "    }",
        "    else",
        "    {",
        "        tempList = {}",
        "        bound_table = Numerix::load(Bound_name)",
        "        for i = 1 to bound_table.size",
        "        {",
        "            tempList @= bound_table.Value[i] + SmallNumber       ",
        "        }",
        "        outputTable = Numerix::Table(Bound_name+\"_inclusive\"+Numerix::uniquenumber, \"Value\", tempList).create",
        "        return outputTable",
        "    }    ",
        "}",
        null,
        "constfunction GuaranteedCoupon_func",
        "{",
        "    call = Numerix::Object({\"LEG1GUARANTEEDCOUPON\", \"index\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : \"GuaranteedCoupon\", ",
        "        \"data\" : GuaranteedCoupon",
        "    }",
        null,
        "    if GuaranteedCoupon isnot \"double\" :",
        "         call &= { \"events\" : \"GuaranteedPeriodDates\" }",
        null,
        "    return call.Create",
        "}",
        null,
        "constfunction GuaranteedPeriodDates_func",
        "{",
        "    call = Numerix::Object({\"GUARANTEEDPERIODDATES\", \"events\", \"INTEREST DATES\"}) & ",
        "    {",
        "        \"name\" : \"GuaranteedPeriodDates\", ",
        "        \"basis\" : if CouponBasis ? CouponBasis : \"30/360\"",
        "    }",
        null,
        "    if GuaranteedPeriodSchedule:",
        "        call &= {\"dates\" : GuaranteedPeriodSchedule}",
        "    else :",
        "        call &= ",
        "        {",
        "            \"startdate\" : EffectiveDate,",
        "            \"enddate\" : GuaranteedPeriodEndDate,",
        "            \"freq\" : GuaranteedPeriodFrequency,",
        "            \"fixcalendar\" : GuaranteedPeriodFixingLagCalendar, ",
        "            \"fixconvention\" : GuaranteedPeriodFixingLagConvention, ",
        "            \"paycalendar\" : GuaranteedPeriodPaymentLagCalendar, ",
        "            \"payconvention\" : GuaranteedPeriodPaymentLagConvention, ",
        "            \"accrualcalendar\" : GuaranteedPeriodAccrualCalendar, ",
        "            \"accrualconvention\" : GuaranteedPeriodAccrualConvention ",
        "        }",
        null,
        "    return call.Create",
        "}",
        null,
        "function SingleDate_func(indexname,TheSingleDate)",
        "{",
        "    call = Numerix::Object({indexname+Numerix::UniqueNumber, \"EVENTS\", \"SINGLEDATE\"}) & ",
        "    {",
        "        \"name\"  : indexname,",
        "        \"Dates\" : TheSingleDate",
        "	}",
        null,
        "    return call.Create",
        "}",
        null,
        "//Overwrites AllDates",
        "constfunction AllDates_func",
        "{",
        "    call = Numerix::Object({\"AllDates\", \"EVENTS\", \"COMPOSITE\"}) & ",
        "    {",
        "        \"name\"      : \"AllDates\",",
        "        \"events\"    : Leg2Dates_evt,        // funding leg coupon",
        "        \"events\"    : CallableDates_evt,    // Callable",
        "        \"events\"    : PuttableDates_evt,    // Puttable",
        "        \"events\"    : InitExchDates_evt,     // Initial exchange",
        "        \"events\"    : FinalExchDates_evt,    // final notional exchange",
        "        \"events\"    : Leg1Dates_evt,",
        "        \"events\"    : GuaranteedCoupon_evt,",
        "        \"ALLOW DUPLICATES\"  : true",
        "	}",
        null,
        "    return call.Create",
        "}"]
    }
  },
  "DEFINITION.CALLABLESWAPBASE.ALIASES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Leg 2 Notional Currency"],
      "VALUE" : ["LEG2INDEX.CURRENCY"]
    }
  },
  "DEFINITION.CALLABLESWAPBASE.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Start Date","End Date","isSwap","Initial Notional Exchange","Intermediate Notional Exchange","Final Notional Exchange","Leg 1 Initial Notional Exchange Multiplier","Leg 1 Intermediate Notional Exchange Multiplier","Leg 1 Final Notional Exchange Multiplier","Leg 2 Initial Notional Exchange Multiplier","Leg 2 Intermediate Notional Exchange Multiplier","Leg 2 Final Notional Exchange Multiplier","isCallable","Is Callable Notional Exchange","CallableDates","Callable Penalty fee","Callable Penalty fee currency","isPuttable","Is Puttable Notional Exchange","PuttableDates","Puttable Penalty fee","Puttable Penalty fee currency","Leg 1 Notional","Leg 1 Notional Currency","Leg 1 Coupon Type","Leg 1 Rounding Type","Leg 1 Rounding Decimal","Leg 1 Spread","Leg 1 Multiplier","Leg 1 Cap","Leg 1 Floor","Leg 2 Dates","Leg 2 Index","Leg 2 Notional","Leg 2 Notional Currency","Leg 2 Coupon Type","Leg 2 Rounding Type","Leg 2 Rounding Decimal","Leg 2 Spread","Leg 2 Multiplier","Leg 2 Cap","Leg 2 Floor","Leg 2 Notional Reset","Leg 2 FX Reset Index","Leg 2 FX Reset Dates","Quote Type","Issuer Credit ID","Lifecycle Event Table","FixingsIdMap","Cash Settlement","Upfront Fee","Termination Fee"],
      "TYPE" : ["Date","Date","Boolean","Boolean","Boolean","Boolean","Double","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double","Double","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double","Boolean","Boolean","Def(DEFINITION.OPTIONEVENT)","Double|Table(TERMS.IR.CALLABLESWAP.VALUESPEC)","Currency","Boolean","Boolean","Def(DEFINITION.OPTIONEVENT)","Double|Table(TERMS.IR.CALLABLESWAP.VALUESPEC)","Currency","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Currency","String","String","Integer","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Def(DEFINITION.INTERESTDATES)","Def(DEFINITION.RATEINDEX)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Currency","String","String","Integer","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Double|Table(DEFINITION.CALLABLESWAPBASE.VALUESPEC)","Boolean","Def(DEFINITION.FXINDEX)","Def(DEFINITION.INTERESTDATES)","String","String","Table(DEFINITION.TRADE_ESUN.LIFECYCLE_INPUT)","ID|String","Boolean","Table(DEFINITION.TRADE_ESUN.CASHFLOWTABLESPEC)","Table(DEFINITION.TRADE_ESUN.CASHFLOWTABLESPEC)"],
      "REQUIRED" : [true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,null,true,false,false,
        "> if isSwap ? False : True",    1,1,1,1,1,1,false,
        "> not isSwap",    null,0,
        "> Currency",    false,
        "> not isSwap",    null,0,
        "> Currency",    null,
        "> Currency",    "Fixed",null,null,0,1,999999,-999999,null,null,
        "> if isSwap ? Leg1Notional : 0",    
        "> Currency",    "Fixed",null,null,0,1,999999,-999999,false,null,null,"MID",
        "> ReferenceEntity + \"_\" + DebtType + \"_\" + RestructuringClause",    null,
        "> TLC::CreateFixing",    false,null,null],
      "GROUPING" : ["Trade T&C","Trade T&C","Float Leg","Trade T&C","Trade T&C","Trade T&C","Trade T&C","Trade T&C","Trade T&C","Trade T&C","Trade T&C","Trade T&C","Option","Option","Option","Option","Option","Option","Option","Option","Option","Option","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Fixed Leg","Float Leg","Float Leg","Float Leg","Float Leg","Float Leg","Float Leg","Float Leg","Float Leg","Float Leg","Float Leg","Float Leg","Float Leg FX reset","Float Leg FX reset","Float Leg FX reset","Pricing Parameters","Credit Parameters","lifecycle","lifecycle","Pricing Parameters","Premium","Premium"],
      "DESCRIPTION" : ["The start date of the trade.","The end date of the trade","Indicate whether it is a swap or note form.","Indicate whether there's initial exchange of notional.","Indicate whether there's intermediate exchange of notional.","Indicate whether there's final exchange of notional.","The multiplier of initial notional exchange.","The multiplier of intermediate notional exchange.","The multiplier of final notional exchange.","The multiplier of initial notional exchange.","The multiplier of intermediate notional exchange.","The multiplier of final notional exchange.","is soft call activated","Indicate whether to notional exchange upon exercise of a callable","The structure controlling the Bermudan option feature for the deal.",null,null,"is soft put activated","Indicate whether to notional exchange upon exercise of a puttable","The structure controlling the Bermudan option feature for the deal.",null,null,"Notional of the funding leg",null,"Accept value
- Fixed
- Float",null,null,"Fixed Rate or the Spread added to the floating rate index","Multiplier on float rate","cap rate of (FloatRate * Multiplier + spread)","Floor rate of (FloatRate * Multiplier + spread)",null,null,"Notional of the funding leg",null,"Accept value
- Fixed
- Float",null,null,"Fixed Rate or the Spread added to the floating rate index","Multiplier on float rate","cap rate of (FloatRate * Multiplier + spread)","Floor rate of (FloatRate * Multiplier + spread)","Parameter to set Notional reset. NotionalReset = true = reset, else no reset",null,null,"Indicate the Quote types used. May be Mid, Bid or Ask.","An ID indicate the necessary information of credit for issuer which includes below terms with separator ?_?:
1) Reference Entity
2) Debt Type
3) Restructuring Clause

ReferenceEntity_DebtType_RestructuringClause
","Generic input for lifecycle event table",null,"TRUE: All cashflow on the same date will be netted and output to the new cashflow; FALSE: no netting.","Upfront Amount

>PREMIUMDEFAULT","Termination Table

>PREMIUMDEFAULT"]
    }
  },
  "DEFINITION.CALLABLESWAPBASE.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.CALLABLESWAPBASE.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CALLABLESWAPBASE.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CALLABLESWAPBASE.VALUESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "VALUE" : [
        "Double"]
    }
  },
  "DEFINITION.CALLABLESWAPBASE.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Function",
        "//================================================================================",
        "// Event variables names",
        "define Leg1Type         = Leg1CouponType.canonical",
        "define Leg2Type         = Leg2CouponType.canonical",
        "define Leg1Dates_name   = \"Leg1Dates\"",
        "define Leg2Dates_name   = \"Leg2Dates\"",
        "define InitExchDates_name    = \"InitExchDates\"",
        "define CallableDates_name   = \"CallableDates\"",
        "define PuttableDates_name   = \"PuttableDates\"",
        "define FinalExchDates_name  = \"FinalExchDates\"",
        "// common",
        "define Leg1Side             = if BuySell == #\"BUY\" ? 1 : -1",
        "define Leg2Side             = if BuySell != #\"BUY\" ? 1 : -1",
        "// Leg 1",
        "define Leg1Index_name       = \"Leg1Index\"",
        "define Leg1CouponIndex_name = \"Leg1CouponIndex\"",
        "define Leg1Multiplier_name  = \"Leg1Multiplier\"",
        "define Leg1Spread_name      = \"Leg1Fixed\"",
        "define Leg1Cap_name         = \"Leg1Cap\"",
        "define Leg1Floor_name       = \"Leg1Floor\"",
        "define Leg1AdjLastCpnCall_name=\"Leg1AdjustLastCouponCall\"",
        "define Leg1AdjLastCpnPut_name= \"Leg1AdjustLastCouponPut\"",
        "// Leg 2",
        "define Leg2Index_name       = \"Leg2Index\"",
        "define Leg2CouponIndex_name = \"Leg2CouponIndex\"",
        "define Leg2Multiplier_name  = \"Leg2Multiplier\"",
        "define Leg2Spread_name      = \"Leg2Spread\"",
        "define Leg2Cap_name         = \"Leg2Cap\"",
        "define Leg2Floor_name       = \"Leg2Floor\"",
        "define Leg2AdjLastCpnCall_name=\"Leg2AdjustLastCouponCall\"",
        "define Leg2AdjLastCpnPut_name= \"Leg2AdjustLastCouponPut\"",
        "// Callable Puttable",
        "define CallablePenaltyFee_name      = \"CallPenaltyFee\"",
        "define PuttablePenaltyFee_name      = \"PutPenaltyFee\"",
        "define TLC_callEventInfo    = TLC::getEventByType(\"EXERCISE CANCELLABLE\")",
        "// Event objects",
        "define Leg1Dates_evt        = Leg1Dates.Interestdates(Leg1Dates_name)",
        "define Leg2Dates_evt        = Leg2Dates.Interestdates(Leg2Dates_name)",
        "define CallableDates_evt    = if isCallable ? CallableDates.optiondates(CallableDates_name, StartDate, EndDate) : \"\"",
        "define PuttableDates_evt    = if isPuttable ? PuttableDates.optiondates(PuttableDates_name, StartDate, EndDate) : \"\"",
        "define InitExchDates_evt    = if InitialNotionalExchange ? NxStd::SingleEventObj(InitExchDates_name, StartDate) : \"\"",
        "define FinalExchDates_evt   = if FinalNotionalExchange ? (if TLC_callEventInfo == {} ? NxStd::SingleEventObj(FinalExchDates_name, EndDate) : NxStd::SingleEventObj(FinalExchDates_name, TLC_callEventInfo.EventSettlementDate)) : \"\"",
        null,
        "//================================================================================",
        "// Main Function",
        "//================================================================================",
        "function CallableBase_main",
        "{",
        "    call = {}",
        "    call &= ",
        "    {",
        "        \"currency1\" : Leg1NotionalCurrency,",
        "        \"currency2\" : Leg2NotionalCurrency,",
        "        \"currency3\" : Currency,             // valuation/model currency",
        "        \"index\"     : NxStd::DataIndexObj(\"Leg1Notional\", Leg1Notional, Leg1Dates_name),",
        "        \"index\"     : NxStd::DataIndexObj(\"Leg2Notional\", Leg2Notional, Leg2Dates_name),",
        "        \"index\"     : NxStd::DataIndexObj(\"NtlExchIndex\", 0),   // Dummy index for notional exchange",
        "        \"index\"     : callsize_func,",
        "        \"index\"     : CallableDates.optiondirection(\"CallableSide\"),",
        "        \"index\"     : putsize_func,",
        "        \"index\"     : PuttableDates.optiondirection(\"PuttableSide\"),",
        "        // events",
        "        \"events\"    : Leg2Dates_evt,         // funding leg coupon",
        "        \"events\"    : CallableDates_evt,     // Callable",
        "        \"events\"    : PuttableDates_evt,     // Puttable",
        "        \"events\"    : InitExchDates_evt,     // Initial exchange",
        "        \"events\"    : FinalExchDates_evt,    // final notional exchange",
        "        \"pvname\" 	: \"PV\" ",
        "	}",
        "    call &= leg2Indices",
        "    call &= callabeIndices",
        "    call &= puttabeIndices",
        "    call &= amortizedNotional",
        null,
        "    return call",
        "}",
        null,
        "//----------------------------",
        "// Callable",
        "//----------------------------",
        "constfunction callabeIndices",
        "{",
        "    ifnot isCallable:",
        "        return {}",
        null,
        "    ifnot TLC_callEventInfo == {}:    // callable/puttable exercised",
        "        return {}",
        null,
        "    call = ",
        "    {",
        "        \"index\"     : NxStd::ArrearsResetFlagIndex(CallableDates_evt, Leg1Dates_evt, Leg1AdjLastCpnCall_name),",
        "        \"index\"     : NxStd::ArrearsResetFlagIndex(CallableDates_evt, Leg2Dates_evt, Leg2AdjLastCpnCall_name)",
        "    }",
        null,
        "    if CallablePenaltyfee:",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::DataIndexObj(CallablePenaltyFee_name, CallablePenaltyfee, CallableDates_name),",
        "            \"currency4\" : CallablePenaltyfeecurrency",
        "        }",
        "    return call",
        "}",
        null,
        "//----------------------------",
        "// Puttable",
        "//----------------------------",
        "constfunction puttabeIndices",
        "{",
        "    ifnot isPuttable:",
        "        return {}",
        null,
        "    ifnot TLC_callEventInfo == {}:    // callable/puttable exercised",
        "        return {}",
        null,
        "    call = ",
        "    {",
        "        \"index\"     : NxStd::ArrearsResetFlagIndex(PuttableDates_evt, Leg1Dates_evt, Leg1AdjLastCpnPut_name),",
        "        \"index\"     : NxStd::ArrearsResetFlagIndex(PuttableDates_evt, Leg2Dates_evt, Leg2AdjLastCpnPut_name)",
        "    }",
        null,
        "    if PuttablePenaltyfee:",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::DataIndexObj(PuttablePenaltyFee_name, PuttablePenaltyfee, PuttableDates_name),",
        "            \"currency5\" : PuttablePenaltyfeecurrency",
        "        }",
        "    return call",
        "}",
        null,
        "//----------------------------",
        "// Leg 1 ABSTRACT FUNCTION",
        "//----------------------------",
        "// this is an abstract function",
        "function leg1Indices",
        "{",
        "    return {}",
        "}",
        null,
        "//----------------------------",
        "// Leg 2",
        "//----------------------------",
        "constfunction leg2Indices",
        "{",
        "    call = {}",
        null,
        "    if Leg2Type == #\"Fixed\":    // Fixed",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::DataIndexObj(Leg2CouponIndex_name, Leg2Spread, Leg2Dates_name)",
        "        }",
        "    else    // Float",
        "    {",
        "        isArr = if Leg2Index.Name == Numerix::GetSettings(\"Settings.Currency\",Leg2Index.Currency,\"ARRIndex\") ? true : false",
        null,
        "        if isArr:",
        "            formula = Leg2Index_name",
        "        else:",
        "            formula = Leg2Multiplier_name + \"*\" + Leg2Index_name + \"+\" + Leg2Spread_name",
        null,
        "        // Cap if applied",
        "        if Leg2Cap != 999999",
        "        {",
        "            call &= ",
        "            {",
        "                \"index\" : NxStd::DataIndexObj(Leg2Cap_name,  Leg2Cap,     Leg2Dates_name)",
        "            }",
        "            formula = \"MIN(\"+ formula + \",\" + Leg2Cap_name + \")\" ",
        "        }",
        "        // Floor if Applied",
        "        if Leg2Floor != -999999",
        "        {",
        "            call &= ",
        "            {",
        "                \"index\" : NxStd::DataIndexObj(Leg2Floor_name,  Leg2Floor,     Leg2Dates_name)",
        "            }",
        "            formula = \"MAX(\"+ formula + \",\" + Leg2Floor_name + \")\" ",
        "        }",
        "        //",
        "        call &=",
        "        {",
        "            \"index\"     : NxStd::DataIndexObj(Leg2Multiplier_name,  Leg2Multiplier,     Leg2Dates_name),",
        "            \"index\"     : NxStd::DataIndexObj(Leg2Spread_name,      Leg2Spread,         Leg2Dates_name),",
        "            \"index\"     : NxStd::FormulaIndexObj(Leg2CouponIndex_name, formula,         Leg2Dates_name)",
        "        }",
        null,
        "        if isArr:",
        "            call &= {\"index\"     : leg2Index.ir_arrindex(   Leg2Index_name, Leg2Dates_evt,  \"\", Leg2Dates_name, Leg2Multiplier, Leg2Spread, TLC::FixingsID(leg2Index.Fixings), TLC::FixingsID(leg2Index.IndexFixings))}",
        "        else:",
        "            call &= {\"index\"     : leg2Index.ir_indexobject(Leg2Index_name,                 \"\", Leg2Dates_name,                             TLC::FixingsID(leg2Index.Fixings))}",
        "    }",
        "    return call",
        "}",
        null,
        "constfunction amortizedNotional",
        "{",
        "    ifnot IntermediateNotionalExchange:",
        "        return {}",
        null,
        "    call = {}",
        null,
        "    if Leg1Notional isnot \"DOUBLE\": if Leg1Notional.load.type == #\"TABLE\":",
        "        call &= ",
        "        {",
        "            \"index\" : NxStd::DataIndexObj(\"Leg1AmortizedNotional\",      get_amortized_notional(Leg1Notional),         Leg1Dates_name),",
        "            \"index\" : NxStd::DataIndexObj(\"Leg1IntermediateNotionalExchangeMultiplier\",      Leg1IntermediateNotionalExchangeMultiplier,         Leg1Dates_name)",
        "        }",
        "    if Leg2Notional isnot \"DOUBLE\": if Leg2Notional.load.type == #\"TABLE\":",
        "        call &= ",
        "        {",
        "            \"index\" : NxStd::DataIndexObj(\"Leg2AmortizedNotional\",      get_amortized_notional(Leg2Notional),         Leg2Dates_name),",
        "            \"index\" : NxStd::DataIndexObj(\"Leg2IntermediateNotionalExchangeMultiplier\",      Leg2IntermediateNotionalExchangeMultiplier,         Leg2Dates_name)",
        "        }",
        "    return call",
        "}",
        null,
        "constfunction get_amortized_notional(LegNotional)",
        "{",
        "    vals = LegNotional.load.value",
        "    if vals.size == 1:",
        "        return 0",
        null,
        "    res = {}",
        "    res @= 0",
        "    for i=2 to vals.size",
        "    {",
        "        res @= vals[i] - vals[i-1]",
        "    }",
        "    call = Numerix::Table(NxStd::MakeID(\"table\"), {\"Value\"}, res)",
        "    return call.create",
        "}",
        null,
        "//=============================================================================",
        "// Functions",
        "//=============================================================================",
        "//constfunction optionSide",
        "//{",
        "//    if CallableSide == #\"LONG\" or CallableSide == #\"SHORT\":",
        "//        return if CallableSide == #\"LONG\" ? 1 : -1",
        "//    return if CallableSide == #\"Leg1 Payer\" ? -Leg1Side : Leg1Side",
        "//}",
        null,
        "constfunction AllDates(AdditionalEvents = \"\")",
        "{",
        "    call = Numerix::Object({\"AllDates\", \"EVENTS\", \"COMPOSITE\"}) & ",
        "    {",
        "        \"name\"      : \"AllDates\",",
        "        \"events\"    : Leg2Dates_evt,        // funding leg coupon",
        "        \"events\"    : CallableDates_evt,    // Callable",
        "        \"events\"    : PuttableDates_evt,    // Puttable",
        "        \"events\"    : InitExchDates_evt,     // Initial exchange",
        "        \"events\"    : FinalExchDates_evt,    // final notional exchange",
        "        \"ALLOW DUPLICATES\"  : true",
        "	}",
        null,
        "    if AdditionalEvents",
        "    {",
        "        evts = if AdditionalEvents is \"LIST\" ? AdditionalEvents : {AdditionalEvents}",
        "        foreach e in evts:",
        "            call &= {\"events\" : e}",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        "constfunction callsize_func",
        "{",
        "    call = Numerix::Object({\"CALLSIZE\", \"INDEX\", \"INTEGER\"}) & {",
        "        \"name\" : \"CallSize\"",
        "    }",
        "    if CallableDates_evt:",
        "        call &=",
        "        {",
        "            \"events\" : CallableDates_evt",
        "        }",
        "    else:",
        "        call &=",
        "        {",
        "            \"data\" : 0",
        "        }",
        "    return call.create",
        "}",
        null,
        "constfunction putsize_func",
        "{",
        "    call = Numerix::Object({\"PUTSIZE\", \"INDEX\", \"INTEGER\"}) & {",
        "        \"name\" : \"PutSize\"",
        "    }",
        "    if PuttableDates_evt:",
        "        call &=",
        "        {",
        "            \"events\" : PuttableDates_evt",
        "        }",
        "    else:",
        "        call &=",
        "        {",
        "            \"data\" : 0",
        "        }",
        "    return call.create",
        "}",
        null,
        null,
        "//constfunction fx_indexobject(BaseCurrency, TermCurrency, indexname, fn_event=\"\", FixingSource=\"\")",
        "//{",
        "//    if BaseCurrency.canonical == TermCurrency.canonical:",
        "//        return NxStd::DataIndexObj(indexname, 1, fn_event)",
        null,
        "//    fixings = Numerix::FXFixingsID(BaseCurrency,TermCurrency,FixingSource)",
        "//    ForeignIndexCurve = Numerix::FXDiscountCurveID(BaseCurrency,TermCurrency,Numerix::GetSettings(\"Settings.Currency\",BaseCurrency,\"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",BaseCurrency,\"IRIndexTenor\"))",
        "//    DomesticIndexCurve = Numerix::FXDiscountCurveID(TermCurrency, BaseCurrency,Numerix::GetSettings(\"Settings.Currency\",TermCurrency,\"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",TermCurrency,\"IRIndexTenor\"))",
        "//    SpotStrategy = NxStd::FXSpotStrategyID(BaseCurrency,TermCurrency)",
        null,
        "//    call = Numerix::Object({\"FXRATE\", \"INDEX\", \"FX\"}) & ",
        "//    {",
        "//        \"name\"                  : indexname,",
        "//        \"currency\"              : TermCurrency,",
        "//        \"foreign1currency\"      : BaseCurrency,",
        "//        \"fixings\"               : TLC::FixingsID(fixings),",
        "//        \"foreignindexcurve\"     : ForeignIndexCurve,",
        "//		\"domesticindexcurve\"    : DomesticIndexCurve",
        "//    }",
        null,
        "//    if Numerix::TryResolve(SpotStrategy) :",
        "//        call &=",
        "//        {",
        "//            \"spot strategy\" : SpotStrategy,",
        "//            \"events\"        : fn_event",
        "//        }",
        "//    else :",
        "//    {",
        "//        Convention = Numerix::FXOptionConventionID(BaseCurrency,TermCurrency)",
        "//        call &=",
        "//        {",
        "//            \"convention\"            : Convention,",
        "//            \"fixcalendar\"           : Numerix::GetConventions(Convention,\"FixCalendar\"),",
        "//            \"fixconvention\"         : Numerix::GetConventions(Convention,\"FixConvention\"),",
        "//            \"noticeperiod\"          : Numerix::GetConventions(Convention,\"NoticePeriod\")",
        "//        }",
        "//    }",
        "//    return call.Create",
        "//}",
        null,
        "//================================================================================",
        "// Payoff Script",
        "//================================================================================",
        null,
        "constfunction payoff_initial_exchange",
        "{//InitExchDates_evt",
        "    ifnot InitialNotionalExchange:",
        "        return \"\"",
        null,
        "    L1Notional = if Leg1Notional is \"DOUBLE\" ? Leg1Notional : Numerix::TableValue(Leg1Notional,1,1)",
        "    L2Notional = if Leg2Notional is \"DOUBLE\" ? Leg2Notional : Numerix::TableValue(Leg2Notional,1,1)",
        "    L1Notional_factor = L1Notional * Leg1InitialNotionalExchangeMultiplier",
        "    L2Notional_factor = L2Notional * Leg2InitialNotionalExchangeMultiplier",
        null,
        "    payoff_script  = \"IF ISACTIVE(\" + InitExchDates_name + \") THEN \"",
        "    payoff_script += \"Leg1NtlExch+= CASH(-Leg1Side * \" + L1Notional_factor + \", \" + InitExchDates_name + \", THISPAY, CURRENCY1) \"",
        "    payoff_script += \"LOGPAYMENTSTREAM(-Leg1Side * \" + L1Notional_factor + \",\" + InitExchDates_name + \", Leg1Log, CURRENCY1, \\\"NTL\\\", \" + L1Notional + \", NtlExchIndex) \"",
        "    payoff_script += \"LOGPAYMENTSTREAM(-Leg1Side * \" + L1Notional_factor + \",\" + InitExchDates_name + \", ConsolLog, CURRENCY1, \\\"LEG1 NTL\\\", \" + L1Notional + \", NtlExchIndex) \"",
        "    payoff_script += \"Leg2NtlExch+= CASH(-Leg2Side * \" + L2Notional_factor + \", \" + InitExchDates_name + \", THISPAY, CURRENCY2) \"",
        "    if isSwap",
        "    {",
        "        payoff_script += \"LOGPAYMENTSTREAM(-Leg2Side * \" + L2Notional_factor + \",\" + InitExchDates_name + \", Leg2Log, CURRENCY2, \\\"NTL\\\", \" + L2Notional + \", NtlExchIndex) \"  ",
        "        payoff_script += \"LOGPAYMENTSTREAM(-Leg2Side * \" + L2Notional_factor + \",\" + InitExchDates_name + \", ConsolLog, CURRENCY2, \\\"LEG2 NTL\\\", \" + L2Notional + \", NtlExchIndex) \"  ",
        "    }",
        "    payoff_script += \"ENDIF \"",
        null,
        "    return payoff_script",
        "}",
        null,
        "constfunction payoff_final_exchange",
        "{//FinalExchDates_evt",
        "    ifnot FinalNotionalExchange:",
        "        return \"\"",
        null,
        "    L1Notional = if Leg1Notional is \"DOUBLE\" ? Leg1Notional : Numerix::TableValue(Leg1Notional,1,Numerix::TableRowCount(Leg1Notional))",
        "    L2Notional = if Leg2Notional is \"DOUBLE\" ? Leg2Notional : Numerix::TableValue(Leg2Notional,1,Numerix::TableRowCount(Leg2Notional))",
        "    L1Notional_factor = L1Notional * Leg1FinalNotionalExchangeMultiplier",
        "    L2Notional_factor = L2Notional * Leg2FinalNotionalExchangeMultiplier",
        null,
        "    payoff_script  = \"IF ISACTIVE(\" + FinalExchDates_name + \") THEN \"",
        "    payoff_script += \"Leg1NtlExch+= CASH(Leg1Side * \" + L1Notional_factor + \", \" + FinalExchDates_name + \", THISPAY, CURRENCY1) \"",
        "    payoff_script += \"LOGPAYMENTSTREAM(Leg1Side * \" + L1Notional_factor + \",\" + FinalExchDates_name + \", Leg1Log, CURRENCY1, \\\"NTL\\\", \" + L1Notional + \", NtlExchIndex) \"",
        "    payoff_script += \"LOGPAYMENTSTREAM(Leg1Side * \" + L1Notional_factor + \",\" + FinalExchDates_name + \", ConsolLog, CURRENCY1, \\\"LEG1 NTL\\\", \" + L1Notional + \", NtlExchIndex) \"",
        "    payoff_script += \"Leg2NtlExch+= CASH(Leg2Side * \" + L2Notional_factor + \", \" + FinalExchDates_name + \", THISPAY, CURRENCY2) \"",
        "    if isSwap",
        "    {",
        "        payoff_script += \"LOGPAYMENTSTREAM(Leg2Side * \" + L2Notional_factor + \",\" + FinalExchDates_name + \", Leg2Log, CURRENCY2, \\\"NTL\\\", \" + L2Notional + \", NtlExchIndex) \"  ",
        "        payoff_script += \"LOGPAYMENTSTREAM(Leg2Side * \" + L2Notional_factor + \",\" + FinalExchDates_name + \", ConsolLog, CURRENCY2, \\\"LEG2 NTL\\\", \" + L2Notional + \", NtlExchIndex) \"  ",
        "    }",
        "    payoff_script += \"ENDIF \"",
        null,
        "    return payoff_script",
        "}",
        null,
        "constfunction payoff_intermediate_exchange",
        "{",
        "    ifnot IntermediateNotionalExchange:",
        "        return \"\"",
        null,
        "    payoff_script = \"\"",
        "    if Leg1Notional isnot \"DOUBLE\": if Leg1Notional.load.type == #\"TABLE\":",
        "    {",
        "        payoff_script += \"IF ISACTIVE(\" + Leg1Dates_name + \") THEN \"",
        "        payoff_script += \"IF Leg1AmortizedNotional <> 0 THEN \"",
        "        payoff_script += \"Leg1NtlExch+= CASH(Leg1Side * Leg1AmortizedNotional * Leg1IntermediateNotionalExchangeMultiplier, \" + Leg1Dates_name + \", THISPAY, CURRENCY1) \"",
        "        payoff_script += \"LOGPAYMENTSTREAM(Leg1Side * Leg1AmortizedNotional * Leg1IntermediateNotionalExchangeMultiplier,\" + Leg1Dates_name + \", Leg1Log, CURRENCY1, \\\"NTL\\\", Leg1Notional, NtlExchIndex) \"",
        "        payoff_script += \"LOGPAYMENTSTREAM(Leg1Side * Leg1AmortizedNotional * Leg1IntermediateNotionalExchangeMultiplier,\" + Leg1Dates_name + \", ConsolLog, CURRENCY1, \\\"LEG1 NTL\\\", Leg1Notional, NtlExchIndex) \"",
        "        payoff_script += \"ENDIF \"",
        "        payoff_script += \"ENDIF \"",
        "    }",
        "    if Leg2Notional isnot \"DOUBLE\": if Leg2Notional.load.type == #\"TABLE\": if isSwap:",
        "    {",
        "        payoff_script += \"IF ISACTIVE(\" + Leg2Dates_name + \") THEN \"",
        "        payoff_script += \"IF Leg2AmortizedNotional <> 0 THEN \"",
        "        payoff_script += \"Leg2NtlExch+= CASH(Leg2Side * Leg2AmortizedNotional * Leg2IntermediateNotionalExchangeMultiplier, \" + Leg2Dates_name + \", THISPAY, CURRENCY2) \"",
        "        if isSwap",
        "        {",
        "            payoff_script += \"LOGPAYMENTSTREAM(Leg2Side * Leg2AmortizedNotional * Leg2IntermediateNotionalExchangeMultiplier,\" + Leg2Dates_name + \", Leg2Log, CURRENCY2, \\\"NTL\\\", Leg2Notional, NtlExchIndex) \"",
        "            payoff_script += \"LOGPAYMENTSTREAM(Leg2Side * Leg2AmortizedNotional * Leg2IntermediateNotionalExchangeMultiplier,\" + Leg2Dates_name + \", ConsolLog, CURRENCY2, \\\"LEG2 NTL\\\", Leg2Notional, NtlExchIndex) \"",
        "        }",
        "        payoff_script += \"ENDIF \"",
        "        payoff_script += \"ENDIF \"",
        "    }",
        null,
        "    return payoff_script",
        "}",
        null,
        "constfunction payoff_Leg1_logPaymentstream",
        "{",
        "    payoff_script = \"LOGPAYMENTSTREAM(flow, \" + Leg1Dates_name + \", Leg1Log, Currency1, \\\"INT\\\", Leg1Notional, \" + Leg1CouponIndex_name + \", \\\"EffectiveRate\\\", coupon,thispay\"",
        "    if Leg1CouponType == #\"FLOAT\"",
        "    {   ",
        "        isArr = if Leg1Index.Name == Numerix::GetSettings(\"Settings.Currency\",Leg1Index.Currency,\"ARRIndex\") ? true : false",
        "        if isArr:",
        "            payoff_script += \", \\\"Index1\\\", \" + Leg1Index_name + \", \\\"Multiplier\\\", \" + Leg1Multiplier_name + \", \\\"Spread\\\", \" + Leg1Spread_name+ \", \\\"hasStdcfDetail\\\",1) \"",
        "        else:",
        "            payoff_script += \", \\\"Index1\\\", \" + Leg1Index_name + \", \\\"Multiplier\\\", \" + Leg1Multiplier_name + \", \\\"Spread\\\", \" + Leg1Spread_name+ \") \"       ",
        "    }",
        "    else:",
        "        payoff_script += \", \\\"Spread\\\", \" + Leg1CouponIndex_name + \") \"",
        null,
        "    payoff_script += payoff_script.replace(\"Leg1Log\", \"ConsolLog\").replace(\"\\\"INT\\\"\", \"\\\"LEG1 INT\\\"\")",
        "    return payoff_script",
        "}",
        null,
        null,
        "constfunction payoff_Leg2_logPaymentstream",
        "{",
        "    if not isSwap:",
        "        return \"\"",
        null,
        "    payoff_script = \"LOGPAYMENTSTREAM(flow, \" + Leg2Dates_name + \", Leg2Log, Currency2, \\\"INT\\\", Leg2Notional, \" + Leg2CouponIndex_name + \", \\\"EffectiveRate\\\", coupon, thispay\"",
        "    if Leg2CouponType == #\"FLOAT\"",
        "    {",
        "        isArr = if Leg2Index.Name == Numerix::GetSettings(\"Settings.Currency\", Leg2Index.Currency, \"ARRIndex\") ? true : false",
        "        if isArr:",
        "            payoff_script += \", \\\"Index1\\\", \" + Leg2Index_name + \", \\\"Multiplier\\\", \" + Leg2Multiplier_name + \", \\\"Spread\\\", \" + Leg2Spread_name+ \", \\\"hasStdcfDetail\\\",1) \"",
        "        else:",
        "            payoff_script += \", \\\"Index1\\\", \" + Leg2Index_name + \", \\\"Multiplier\\\", \" + Leg2Multiplier_name + \", \\\"Spread\\\", \" + Leg2Spread_name + \") \"",
        "    }   ",
        "    else:",
        "        payoff_script += \", \\\"Spread\\\", \" + Leg2CouponIndex_name + \") \"",
        null,
        "    payoff_script += payoff_script.replace(\"Leg2Log\", \"ConsolLog\").replace(\"\\\"INT\\\"\", \"\\\"LEG2 INT\\\"\")",
        "    return payoff_script",
        "}",
        null,
        null,
        "constfunction payoff_callable",
        "{",
        "    ifnot isCallable:",
        "        return \"\"",
        "    return payoff_BermOption(true)",
        "}",
        null,
        "constfunction payoff_puttable",
        "{",
        "    ifnot isPuttable:",
        "        return \"\"",
        "    return payoff_BermOption(false)",
        "}",
        null,
        null,
        "constfunction payoff_BermOption(fn_isCallable = true)",
        "{",
        "    if fn_isCallable",
        "    {",
        "        fn_CallableDates_name = CallableDates_name",
        "        fn_callsize = \"CallSize\"",
        "        fn_counter = \"CallCounter\"",
        "        fn_CallProba = \"CallProbs\"",
        "        fn_isCallableNotionalExchange = isCallableNotionalExchange",
        "        fn_CallableSide = \"CallableSide\"",
        "        fn_PenaltyFee_name = CallablePenaltyFee_name",
        "        fn_PenaltyFeeCurr = \"CURRENCY4\"",
        "        fn_Operation = \"\"",
        "        fn_FundingFlows = \"CallFundingFlows\"",
        "        fn_NotesFlows = \"CallNotesFlows\"",
        "        fn_Option = \"CallOption\"",
        "        fn_PenaltyFee = CallablePenaltyfee",
        "        fn_Leg1AdjLastCpn_name = Leg1AdjLastCpnCall_name",
        "        fn_Leg2AdjLastCpn_name = Leg2AdjLastCpnCall_name",
        "    }",
        "    else",
        "    {",
        "        fn_CallableDates_name = PuttableDates_name",
        "        fn_callsize = \"PutSize\"",
        "        fn_counter = \"PutCounter\"",
        "        fn_CallProba = \"PutProbs\"",
        "        fn_isCallableNotionalExchange = isPuttableNotionalExchange",
        "        fn_CallableSide = \"PuttableSide\"",
        "        fn_PenaltyFee_name = PuttablePenaltyFee_name",
        "        fn_PenaltyFeeCurr = \"CURRENCY5\"",
        "        fn_Operation = \"-1*\"",
        "        fn_FundingFlows = \"PutFundingFlows\"",
        "        fn_NotesFlows = \"PutNotesFlows\"",
        "        fn_Option = \"PutOption\"",
        "        fn_PenaltyFee = PuttablePenaltyfee",
        "        fn_Leg1AdjLastCpn_name = Leg1AdjLastCpnPut_name",
        "        fn_Leg2AdjLastCpn_name = Leg2AdjLastCpnPut_name",
        "    }",
        null,
        "    ifnot TLC_callEventInfo == {}    // call event",
        "    {",
        "        payoff_script = \"\"",
        "        payoff_script +=    \"IF ISLAST(\" + fn_CallableDates_name + \") THEN \"",
        "        payoff_script +=        fn_CallProba +\"[\" + fn_callsize + \"]\" + \" = 1 \" // Exercise Date",
        "        payoff_script += \"ENDIF \"",
        null,
        "        return payoff_script",
        "    }",
        null,
        "    temp1 = \"Leg1 + Leg1NtlExch - Leg1LastCoupon * \" + fn_Leg1AdjLastCpn_name + \" \"",
        "    temp2 = \"Leg2 + Leg2NtlExch - Leg2LastCoupon * \" + fn_Leg2AdjLastCpn_name + \" \"",
        "    // if need to off-set notional exchange",
        "    temp3 = \"\"",
        "    temp4 = \"\"",
        "    if FinalNotionalExchange: if fn_isCallableNotionalExchange:",
        "    {",
        "        L1Notional = if Leg1Notional is \"DOUBLE\" ? Leg1Notional : Numerix::TableValue(Leg1Notional,1,Numerix::TableRowCount(Leg1Notional))",
        "        L2Notional = if Leg2Notional is \"DOUBLE\" ? Leg2Notional : Numerix::TableValue(Leg2Notional,1,Numerix::TableRowCount(Leg2Notional))",
        "        L1Notional_factor = L1Notional * Leg1FinalNotionalExchangeMultiplier",
        "        L2Notional_factor = L2Notional * Leg2FinalNotionalExchangeMultiplier",
        "        temp3 = \" - Cash(Leg1Side * \" + L1Notional_factor + \", \" + fn_CallableDates_name + \", THISPAY, CURRENCY1)\"",
        "        temp4 = \" - Cash(Leg2Side * \" + L2Notional_factor + \", \" + fn_CallableDates_name + \", THISPAY, CURRENCY2)\"",
        "        // include early redemption value in temp1 and temp2",
        "        temp1 += temp3",
        "        temp2 += temp4",
        "    }",
        null,
        "    // if need to off-set penalty fee",
        "    tempfee = \"\"",
        "    if fn_PenaltyFee: ifnot fn_PenaltyFee == 0:",
        "        tempfee = \"+ \" + fn_CallableSide + \" * CASH(\" + fn_PenaltyFee_name + \", \" + fn_CallableDates_name + \", THISPAY, \" + fn_PenaltyFeeCurr + \") \"",
        null,
        "    // in case of both callable + puttable",
        "    tempOption = \"\"",
        "    if fn_isCallable: if isPuttable:",
        "        tempOption = \"+ PuttableSide*putOption \"",
        "    ifnot fn_isCallable: if isCallable:",
        "        tempOption = \"+ CallableSide*callOption \"",
        null,
        "    // PAYOFF",
        "    payoff_script = \"\"",
        "    payoff_script += \"IF ISACTIVE(\" + fn_CallableDates_name + \") THEN \"",
        "    payoff_script +=    \"IF ISLAST(\" + fn_CallableDates_name + \") THEN \"",
        "    payoff_script +=        fn_counter + \" = \" + fn_callsize + \" + 1 \"",
        "    payoff_script +=        fn_CallProba + \"[\" + fn_counter + \"] = 1 \"",
        "    payoff_script +=        fn_FundingFlows + \"[\" + fn_counter + \"] = 0 \"",
        "    payoff_script +=        fn_NotesFlows   + \"[\" + fn_counter + \"] = 0 \"",
        "    payoff_script +=    \"ENDIF \"",
        "    payoff_script +=    fn_counter + \" -= 1 \"",
        "    payoff_script +=    \"IF ISPAST() THEN \"",
        "    payoff_script +=        fn_CallProba + \"[\" + fn_counter + \"] = 0 \"",
        "    payoff_script +=        fn_FundingFlows + \"[\" + fn_counter + \"] = 0 \"",
        "    payoff_script +=        fn_NotesFlows   + \"[\" + fn_counter + \"] = 0 \"",
        "    payoff_script +=    \"ELSE \"",
        "    payoff_script +=        \"Swap = \" + fn_Operation + \"(\" + temp1 + \" + \" + temp2 + \") \" + tempfee + tempOption",
        "    payoff_script +=        fn_Option + \" = MAX(\" + fn_Option + \", -Swap) \"",
        "    payoff_script +=        \"EventOcc = WHEN(\" + fn_Option + \" = -Swap, 1, 0) \"",
        "    payoff_script +=        fn_CallProba + \"[\" + fn_counter + \"]= EventOcc \"",
        "    payoff_script +=        fn_FundingFlows + \"[\" + fn_counter + \"] = \" + fn_Operation + \"EventOcc * (\" + temp2 + \") \"",
        "    payoff_script +=        fn_NotesFlows   + \"[\" + fn_counter + \"] = \" + fn_Operation + \"EventOcc * (\" + temp1 + tempfee +\") \"",
        "    payoff_script +=        \"FOR i = \" + fn_counter + \" + 1 TO \" + fn_callsize + \" + 1 \"",
        "    payoff_script +=            \"temp = WHEN(EventOcc, 0, 1) \"",
        "    payoff_script +=            fn_CallProba + \"[i] *= temp \"",
        "    payoff_script +=            fn_FundingFlows + \"[i] *= temp \"",
        "    payoff_script +=            fn_NotesFlows   + \"[i] *= temp \"",
        "    payoff_script +=        \"NEXT \"",
        "    payoff_script +=        \"FundingPV = \" + fn_FundingFlows + \"[\" + fn_counter + \"] + (1-EventOcc) * FundingPV \"",
        "    payoff_script +=        \"NotesPV = \"   + fn_NotesFlows   + \"[\" + fn_counter + \"] + (1-EventOcc) * NotesPV \"",
        "    payoff_script +=    \"ENDIF \"",
        "    payoff_script += \"ENDIF \"",
        null,
        "    return payoff_script",
        "}",
        null,
        "constfunction payoff_NoteFormPV",
        "{",
        "    if isSwap:",
        "        return \"\"",
        null,
        "    payoff_script = \"Option = -(Leg1 + NotesPV) \"",
        "    payoff_script+= \"PV = -NotesPV \"",
        "    payoff_script+= \"Leg2 = 0 \"",
        "    payoff_script+= \"Swap = Leg1 \"",
        "    payoff_script+= \"FundingPV = 0 \"",
        "    return payoff_script",
        "}",
        null,
        "//----------------------------------",
        "// Properties",
        "//----------------------------------",
        "// this is an abstract function, need to define it if additional currency exists.",
        "constfunction additional_Currency_List",
        "{",
        "    return {}",
        "}",
        "constfunction additional_underlying_list",
        "{",
        "    return {}",
        "}",
        null,
        null,
        "constfunction ac_underlyingassets",
        "{",
        "    // Define names of fields of foreign currencies, need to modify this array in new templates",
        "    Currlist = {Leg1NotionalCurrency.canonical, Leg2NotionalCurrency.canonical, Leg2Index.currency, CallablePenaltyFeeCurrency.canonical, PuttablePenaltyFeeCurrency.canonical}",
        null,
        "    if additional_Currency_List:",
        "        Currlist &= additional_Currency_List",
        null,
        "    tempCurrList = {Currency.canonical}",
        "    u = Numerix::IRUnderlyingAsset(Currency)",
        "    //",
        "    foreach curr in Currlist",
        "    {",
        "        ifnot tempCurrList.find(curr)",
        "        {",
        "            tempCurrList @= Curr",
        "            u += (if u == \"\" ? \"\" : \",\") + Numerix::IRUnderlyingAsset(curr) + \",\" + Numerix::FXUnderlyingAsset(curr,Currency)",
        "        }",
        "    }",
        "    if additional_underlying_list:",
        "        foreach a in additional_underlying_list:",
        "            u += (if u == \"\" ? \"\" : \",\") + a",
        null,
        "    return append_fee_properties(u)",
        "}"]
    }
  },
  "DEFINITION.CR.TRADE_ESUN.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Recovery Rate","Recovery Frequency","Credit Curve","Settlement Currency","Has Credit Linked","Credit Linked ID","Credit Recovery Rate","Credit Reference Entity","Credit Debt Type","Credit Restructuring Clause","Credit Initial Rating","Use CDS Proxy","Bond Second Best Rating","Issuer Second Best Rating","Guarantor Second Best Rating","Number of Guarantors","Guarantor1","Guarantor2","Guarantor3","Guarantor4","Guarantor5","Custom Credit Key","Issuer Credit ID","Lifecycle Event Table","FixingsIdMap","Cash Settlement","Upfront Fee","Termination Fee"],
      "TYPE" : ["Double","Tenor","ID","Currency","Boolean","String","Double","String","String","String","String","Boolean","String","String","String","Integer","Def(DEFINITION.CR.CDSPROXY)","Def(DEFINITION.CR.CDSPROXY)","Def(DEFINITION.CR.CDSPROXY)","Def(DEFINITION.CR.CDSPROXY)","Def(DEFINITION.CR.CDSPROXY)","String","String","Table(DEFINITION.TRADE_ESUN.LIFECYCLE_INPUT)","ID|String","Boolean","Table(DEFINITION.TRADE_ESUN.CASHFLOWTABLESPEC)","Table(DEFINITION.TRADE_ESUN.CASHFLOWTABLESPEC)"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [0.400000000000000022,null,
        ">#\"CR.P(Currency)-P(Issuer Credit ID).P(QuoteType)\"",    
        ">Currency",    false,null,0.400000000000000022,
        ">if CreditLinkedID ? CreditLinkedID.Split(\"_\")[1] : \"\"",    
        ">if CreditLinkedID ? CreditLinkedID.Split(\"_\")[2] : \"\"",    
        ">if CreditLinkedID ? CreditLinkedID.Split(\"_\")[3] : \"\"",    null,false,null,null,null,1,null,null,null,null,null,null,
        "> ReferenceEntity + \"_\" + DebtType + \"_\" + RestructuringClause",    null,
        "> TLC::CreateFixing",    false,null,null],
      "GROUPING" : ["Pricing Parameters","Pricing Parameters","Pricing Parameters","Trade T&C","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Trade T&C","Trade T&C","Trade T&C","Trade T&C","Trade T&C","Credit Parameters","Credit Parameters","lifecycle","lifecycle","Pricing Parameters","Premium","Premium"],
      "DESCRIPTION" : ["Recovery rate for risky note case.","Frequency of default used in computing risky bond price, e.g., 6m. ","Credit curve.

>#\"CR.P(Currency)-P(Issuer Credit ID).P(QuoteType)\"
>NxStd::CDSCurveID(Currency, ReferenceEntity, DebtType, RestructuringClause, \"CR\")","The underlying currency of the trade.","Indicate if notes is linked to another credit reference. Defaults to false.","An ID indicate the necessary information of credit for issuer which includes below terms with separator ?_?:
1) Reference Entity
2) Debt Type
3) Restructuring Clause

ReferenceEntity_DebtType_RestructuringClause
","Used to specify what the recovery is for the defaulted asset; this heading overrides the recovery rate that may have been specified earlier for the asset in the basket or instrument. This is the recovery rate applied at the time of default.","The reference entity","The debt type","The restructuring clause; one of XR, CR, MR or MM","The initial rating, which can be (1) an integer specifying the rating based on an internal mapping from 0 (highest) to N-1 (lowest) or (2) a string specifying the letter rating, such as \"AAA\".
If a single curve is supplied to the CREDIT CURVES heading, it is assumed to correspond to this rating.","Indicate whether to apply credit curve proxy rule defined in section 6.4. If False then the custom credit key will be utilized in the pricing process then the proxy logic in section 6.4 will be omitted.",null,null,null,"Number of Guarantors. 
Default =1
If [Guarantor 1] input is empty, will use explicit [Guarantor Reference Entity], [Guarantor Debt Type] & [Guarantor Restructuring Clause] inputs
Support maximum 5 guarantors within a security.",null,null,null,null,null,"This will be utilized only when Use CDS Proxy = False. 
The specified credit key will be used for CDS mid quote and Recovery Rate query in market data for curve construction. 
This input should follow the naming rule as below:
CR.Ccy-RefEntity_DebtType_ResClause","An ID indicate the necessary information of credit for issuer which includes below terms with separator ?_?:
1) Reference Entity
2) Debt Type
3) Restructuring Clause

ReferenceEntity_DebtType_RestructuringClause
","Generic input for lifecycle event table",null,"TRUE: All cashflow on the same date will be netted and output to the new cashflow; FALSE: no netting.","Upfront Amount

>PREMIUMDEFAULT","Termination Table

>PREMIUMDEFAULT"]
    }
  },
  "DEFINITION.CR.TRADE_ESUN.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.CR.TRADE_ESUN.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CR.TRADE_ESUN.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CR.TRADE_ESUN.INTERESTDATESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Fix Date" : ["Date"],
      "Accrual Start" : ["Date"],
      "Accrual End" : ["Date"],
      "Pay Date" : ["Date"]
    }
  },
  "DEFINITION.CR.TRADE_ESUN.SCHEDULESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "VALUE" : [
        "Double"]
    }
  },
  "DEFINITION.CR.TRADE_ESUN.GUARANTORSPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Guarantor Reference Entity" : ["String"],
      "Guarantor Debt Type" : ["String"],
      "Guarantor Restructuring Clause" : ["String"],
      "Guarantor Recovery Rate" : ["Double"]
    }
  },
  "DEFINITION.CR.TRADE_ESUN.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//=============================================================================",
        "// Includes",
        "//=============================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "define CurrencyProxy            = if UseCDSProxy ? CreditCurveProxyName_func.split(\"_\")[1] : Currency",
        "define ReferenceEntityProxy     = if UseCDSProxy ? CreditCurveProxyName_func.split(\"_\")[2] : (if ReferenceEntity?     ReferenceEntity    : \"\")",
        "define DebtTypeProxy            = if UseCDSProxy ? CreditCurveProxyName_func.split(\"_\")[3] : (if DebtType?            DebtType           : \"\")",
        "define RestructuringClauseProxy = if UseCDSProxy ? CreditCurveProxyName_func.split(\"_\")[4] : (if RestructuringClause? RestructuringClause: \"\")",
        "//*****************************************************************************",
        "//                             KERNEL COMPONENT",
        "//*****************************************************************************",
        "constfunction CRComponent(CouponDateEvents = \"\", CouponDateEvents2 = \"\")",
        "{",
        "    //Set empty set",
        "    call = {}",
        "    //Set default value of Events2",
        "    ifnot CouponDateEvents2 then ",
        "        CouponDateEvents2 = CouponDateEvents",
        "    endif",
        "    //Kernel Component for Credit ",
        "    if IssuerCreditID then",
        "        call = {",
        "            //Issuer Credit ",
        "            \"CREDIT1\" : CurrencyProxy+ReferenceEntityProxy+DebtTypeProxy+RestructuringClauseProxy,",
        "            \"index\"   : IssuerSurvivalProbCallPay_func(CouponDateEvents2),",
        "            \"index\"   : IssuerSurvivalProbPay_func(CouponDateEvents),",
        "            \"index\"   : IssuerSurvivalProbFix_func(CouponDateEvents),",
        "            \"index\"   : IssuerRecovery_func,",
        "            //Underlying Credit ",
        "            \"index\"   : CreditSurvivalProbCallPay_func(CouponDateEvents2),",
        "            \"index\"   : CreditSurvivalProbPay_func(CouponDateEvents),",
        "            \"index\"   : CreditSurvivalProbFix_func(CouponDateEvents),",
        "            \"index\"   : CreditRecovery_func",
        "        }",
        "    endif",
        null,
        "    //Kernel Component for Underlying Credit     ",
        "    if HasCreditLinked AND CreditLinkedID then ",
        "        call &= {",
        "            \"CREDIT2\" : Currency+CreditReferenceEntity+CreditDebtType+CreditRestructuringClause",
        "        }",
        null,
        "    endif",
        null,
        "    return call",
        "}",
        null,
        "//============================================================================= ",
        "//                              DEFAULT PROB",
        "//============================================================================= ",
        "//Issuer Survival Prob at Call Pay Date",
        "constfunction IssuerSurvivalProbCallPay_func(CouponDateEvents = \"\")",
        "{",
        "    //get the credit curve of the issuer",
        "    CRCurve1 = NxStd::CDSCurveID(CurrencyProxy,ReferenceEntityProxy,DebtTypeProxy,RestructuringClauseProxy)",
        "    //create a table for the survival prob using the coupon structure dates",
        "    Index1 = CouponDateEvents.view.find(\"PAY DATE\")",
        "    Date1 = CouponDateEvents.view.values[Index1]",
        "    SP1 = {}",
        "    for i = 1 to Date1.size ",
        "        if Date1[i] > ValuationDate then",
        "            //get the survival probability when the date > nowdate",
        "            SP1 @= Numerix::GetSurvivalProbability(CRCurve1, ValuationDate, Date1[i])   ",
        "    else",
        "            //survival probability = 1 when the date < nowdate",
        "            SP1 @= 1",
        "        endif ",
        "    next    ",
        "    //create the table",
        "    SPTable = Numerix::Table(\"IssuerSPPCallTable\" + Numerix::UniqueNumber, \"value\", SP1)    ",
        "    Numerix::Create(SPTable)",
        "    //create the data index",
        "    call = Numerix::Object({\"IssuerSPCallPay\", \"index\", \"DATA\"}) & ",
        "    {",
        "        \"name\"   : \"IssuerSPCallPay\", ",
        "        \"data\"   : SPTable.id, ",
        "        \"events\" : CouponDateEvents.view(\"CallValues\")[CouponDateEvents.view(\"CallHeaders\").find(\"name\")]",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Underlying Survival Prob at Call Pay Date",
        "constfunction CreditSurvivalProbCallPay_func(CouponDateEvents = \"\")",
        "{",
        "    //create a table for the survival prob using the coupon structure dates",
        "    Index1 = CouponDateEvents.view.find(\"PAY DATE\")",
        "    Date1 = CouponDateEvents.view.values[Index1]",
        "    if HasCreditLinked AND CreditLinkedID{",
        "        //get the credit curve of the credit linked asset",
        "        CRCurve1 = NxStd::CDSCurveID(Currency, CreditReferenceEntity, CreditDebtType, CreditRestructuringClause)",
        "        SP1 = {}",
        "        for i = 1 to Date1.size ",
        "            if Date1[i] > ValuationDate then",
        "                //get the survival probability when the date > nowdate",
        "                SP1 @= Numerix::GetSurvivalProbability(CRCurve1, ValuationDate, Date1[i])",
        "            else",
        "                //survival probability = 1 when the date < nowdate",
        "                SP1 @= 1",
        "            endif ",
        "        next    ",
        "    }",
        "    else{",
        "        SP1 = {}",
        "        for i = 1 to Date1.size ",
        "            //survival probability = 1 when no credit linked",
        "            SP1 @= 1 ",
        "        next ",
        "    }",
        "    //create the table",
        "    SPTable = Numerix::Table(\"CreditSPPCallTable\" + Numerix::UniqueNumber, \"value\", SP1)",
        "    Numerix::Create(SPTable)",
        "    //create the data index",
        "    call = Numerix::Object({\"CreditSPCallPay\", \"index\", \"DATA\"}) & ",
        "    {",
        "        \"name\"   : \"CreditSPCallPay\", ",
        "        \"data\"   : SPTable.id, ",
        "        \"events\" : CouponDateEvents.view(\"CallValues\")[CouponDateEvents.view(\"CallHeaders\").find(\"name\")]",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Issuer Survival Prob at Pay Date",
        "constfunction IssuerSurvivalProbPay_func(CouponDateEvents = \"\")",
        "{",
        "    //get the credit curve of the issuer",
        "    CRCurve1 = NxStd::CDSCurveID(CurrencyProxy,ReferenceEntityProxy,DebtTypeProxy,RestructuringClauseProxy)    ",
        "    //create a table for the survival prob using the coupon structure dates",
        "    Index1 = CouponDateEvents.view.find(\"PAY DATE\")",
        "    Date1 = CouponDateEvents.view.values[Index1]",
        "    SP1 = {}",
        "    for i = 1 to Date1.size ",
        "        if Date1[i] > ValuationDate then",
        "            //get the survival probability when the date > nowdate",
        "            SP1 @= Numerix::GetSurvivalProbability(CRCurve1, ValuationDate, Date1[i])   ",
        "    else",
        "            //survival probability = 1 when the date < nowdate",
        "            SP1 @= 1",
        "        endif ",
        "    next    ",
        "    //create the table",
        "    SPTable = Numerix::Table(\"IssuerSPPTable\" + Numerix::UniqueNumber, \"value\", SP1)",
        "    Numerix::Create(SPTable)",
        "    //create the data index",
        "    call = Numerix::Object({\"IssuerSPPay\", \"index\", \"DATA\"}) & ",
        "    {",
        "        \"name\"   : \"IssuerSPPay\", ",
        "        \"data\"   : SPTable.id, ",
        "        \"events\" : CouponDateEvents.view(\"CallValues\")[CouponDateEvents.view(\"CallHeaders\").find(\"name\")]",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Underlying Survival Prob at Pay Date",
        "constfunction CreditSurvivalProbPay_func(CouponDateEvents = \"\")",
        "{",
        "    //create a table for the survival prob using the coupon structure dates",
        "    Index1 = CouponDateEvents.view.find(\"PAY DATE\")",
        "    Date1 = CouponDateEvents.view.values[Index1]",
        "    if HasCreditLinked AND CreditLinkedID{",
        "        //get the credit curve of the credit linked asset",
        "        CRCurve1 = NxStd::CDSCurveID(Currency, CreditReferenceEntity, CreditDebtType, CreditRestructuringClause)",
        "        SP1 = {}",
        "        for i = 1 to Date1.size ",
        "            if Date1[i] > ValuationDate then",
        "                //get the survival probability when the date > nowdate",
        "                SP1 @= Numerix::GetSurvivalProbability(CRCurve1, ValuationDate, Date1[i])",
        "            else",
        "                //survival probability = 1 when the date < nowdate",
        "                SP1 @= 1",
        "            endif ",
        "        next    ",
        "    }",
        "    else{",
        "        SP1 = {}",
        "        for i = 1 to Date1.size ",
        "            //survival probability = 1 when no credit linked",
        "            SP1 @= 1 ",
        "        next ",
        "    }",
        "    //create the table",
        "    SPTable = Numerix::Table(\"CreditSPPTable\" + Numerix::UniqueNumber, \"value\", SP1)",
        "    Numerix::Create(SPTable)",
        "    //create the data index",
        "    call = Numerix::Object({\"CreditSPPay\", \"index\", \"DATA\"}) & ",
        "    {",
        "        \"name\"   : \"CreditSPPay\", ",
        "        \"data\"   : SPTable.id, ",
        "        \"events\" : CouponDateEvents.view(\"CallValues\")[CouponDateEvents.view(\"CallHeaders\").find(\"name\")]",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Issuer Survival Prob at Fix Date",
        "constfunction IssuerSurvivalProbFix_func(CouponDateEvents = \"\",IndexName = \"IssuerSPFix\")",
        "{",
        "    //get the credit curve of the issuer",
        "    CRCurve1 = NxStd::CDSCurveID(CurrencyProxy,ReferenceEntityProxy,DebtTypeProxy,RestructuringClauseProxy)",
        "    //create a table for the survival prob using the coupon structure dates",
        "    Index1 = CouponDateEvents.view.find(\"PAY DATE\")",
        "    Date1 = CouponDateEvents.view.values[Index1]",
        "    //Initial the Surv Prob",
        "    SP1 = {}",
        "    //The first Surv Prob",
        "    SP1 @= 1",
        "    //Other Surv Prob",
        "    for i = 1 to Date1.size-1 ",
        "        if Date1[i] > ValuationDate then",
        "            //get the survival probability when the date > nowdate",
        "            SP1 @= Numerix::GetSurvivalProbability(CRCurve1, ValuationDate, Date1[i])   ",
        "    else",
        "            //survival probability = 1 when the date < nowdate",
        "            SP1 @= 1",
        "        endif ",
        "    next",
        "    //create the table",
        "    SPTable = Numerix::Table(\"IssuerSPTable2\" + Numerix::UniqueNumber, \"value\", SP1)",
        "    Numerix::Create(SPTable)",
        "    //create the data index",
        "    call = Numerix::Object({IndexName, \"index\", \"DATA\"}) & ",
        "    {",
        "        \"name\"   : IndexName, ",
        "        \"data\"   : SPTable.id, ",
        "        \"events\" : CouponDateEvents.view(\"CallValues\")[CouponDateEvents.view(\"CallHeaders\").find(\"name\")]",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Underlying Survival Prob at Fix Date",
        "constfunction CreditSurvivalProbFix_func(CouponDateEvents = \"\")",
        "{",
        "    //create a table for the survival prob using the coupon structure dates",
        "    Index1 = CouponDateEvents.view.find(\"PAY DATE\")",
        "    Date1 = CouponDateEvents.view.values[Index1]",
        "    if HasCreditLinked AND CreditLinkedID{",
        "        //get the credit curve of the credit linked asset",
        "        CRCurve1 = NxStd::CDSCurveID(Currency, CreditReferenceEntity, CreditDebtType, CreditRestructuringClause)",
        "        //Initial the Surv Prob",
        "        SP1 = {}",
        "        //The first Surv Prob",
        "        SP1 @= 1",
        "        //Other Surv Prob",
        "        for i = 1 to Date1.size-1 ",
        "            if Date1[i] > ValuationDate then",
        "                //get the survival probability when the date > nowdate",
        "                SP1 @= Numerix::GetSurvivalProbability(CRCurve1, ValuationDate, Date1[i])",
        "            else",
        "                //survival probability = 1 when the date < nowdate",
        "                SP1 @= 1",
        "            endif ",
        "        next",
        "    }",
        "    else{",
        "        SP1 = {}",
        "        for i = 1 to Date1.size ",
        "            //survival probability = 1 when no credit linked",
        "            SP1 @= 1 ",
        "        next ",
        "    }",
        "    //create the table",
        "    SPTable = Numerix::Table(\"CreditSPTable2\" + Numerix::UniqueNumber, \"value\", SP1)",
        "    Numerix::Create(SPTable)",
        "    //create the data index",
        "    call = Numerix::Object({\"CreditSPFix\", \"index\", \"DATA\"}) & ",
        "    {",
        "        \"name\"   : \"CreditSPFix\", ",
        "        \"data\"   : SPTable.id, ",
        "        \"events\" : CouponDateEvents.view(\"CallValues\")[CouponDateEvents.view(\"CallHeaders\").find(\"name\")]",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        "//*****************************************************************************",
        "//                                 INDECIES",
        "//*****************************************************************************",
        "//Recovery for Issuer",
        "constfunction IssuerRecovery_func",
        "{",
        "    call = Numerix::Object({\"ISSUERRECOVERY\", \"INDEX\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : \"IssuerRecovery\", ",
        "        \"data\" : IssuerRecoveryRate",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Recovery for Underlying",
        "constfunction CreditRecovery_func",
        "{",
        "    call = Numerix::Object({\"CREDITRECOVERY\", \"INDEX\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : \"CreditRecovery\", ",
        "        \"data\" : if HasCreditLinked AND CreditLinkedID ? CreditRecoveryRate : 0",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Pricing Currency",
        "function PricingCurrency",
        "{",
        "    return currency",
        "}",
        null,
        "//*****************************************************************************",
        "//                               CREDIT PROXY",
        "//*****************************************************************************",
        "function CreditCurveProxyName_func",
        "{",
        "    if UseCDSProxy then",
        "        if BondSecondBestRating then",
        "            // (Refer to BRD Section 6.4 (4)-(a) part for further details)",
        "            query = #\"NAME=CR.P(Currency)-PROXY_P(BondSecondBestRating)_SNRFOR_CR.CDS-<MATURITY>.SPREAD.P(QuoteType)\"",
        "            results = NxStd::Query(query, \"NAME,MATURITY\")",
        "            if results: ",
        "                return Currency + \"_\" + \"PROXY\" + \"_\" + BondSecondBestRating + \"_\" + \"CR\"",
        "        endif",
        null,
        "        // Guarantor Credit Proxy -- will look up from Guarantor1 to 5 for avalible Credit Proxy Curves        ",
        "        for i = 1 to NumberOfGuarantors: ",
        "        {",
        "            CRRef = Numerix::Execute(#\"GuarantorP(i).CreditReferenceEntity\")",
        "            DebtT = Numerix::Execute(#\"GuarantorP(i).DebtType\")",
        "            ReStC = Numerix::Execute(#\"GuarantorP(i).RestructuringClause\")",
        "            CrRat = Numerix::Execute(#\"GuarantorP(i).CreditRating\")",
        null,
        "            // According to BRD Section 6.4",
        "            // Step 1            ",
        "            query = #\"NAME=CR.P(Currency)-P(CRRef)_P(DebtT)_P(ReStC).CDS-<MATURITY>.SPREAD.P(QuoteType)\"",
        "            results = NxStd::Query(query, \"NAME,MATURITY\")",
        "            if results: ",
        "               return Currency + \"_\" + CRRef + \"_\" + DebtT + \"_\" + ReStC",
        null,
        "            // Step 2",
        "            query = #\"NAME=CR.EUR-P(CRRef)_P(DebtT)_P(ReStC).CDS-<MATURITY>.SPREAD.P(QuoteType)\"",
        "            results = NxStd::Query(query, \"NAME,MATURITY\")",
        "            if results: ",
        "                return \"EUR\" + \"_\" + CRRef + \"_\" + DebtT + \"_\" + ReStC",
        null,
        "            // Step 3",
        "            query = #\"NAME=CR.USD-P(CRRef)_P(DebtT)_P(ReStC).CDS-<MATURITY>.SPREAD.P(QuoteType)\"",
        "            results = NxStd::Query(query, \"NAME,MATURITY\")",
        "            if results: ",
        "                return \"USD\" + \"_\" + CRRef + \"_\" + DebtT + \"_\" + ReStC",
        null,
        "            // Step 4 (Refer to BRD Section 6.4 (4)-(b)-(iv) part for further details)",
        "            // If none of above Guarantor key works, then eventually revert to use Credit Rating Proxy curve",
        "            query = #\"NAME=CR.P(Currency)-PROXY_P(CrRat)_SNRFOR_CR.CDS-<MATURITY>.SPREAD.P(QuoteType)\"",
        "            results = NxStd::Query(query, \"NAME,MATURITY\")",
        "            if results: ",
        "                return Currency + \"_\" + \"PROXY\" + \"_\" + CrRat + \"_\" + \"CR\"",
        "        }    ",
        null,
        "        if IssuerSecondBestRating then",
        "            // According to BRD Section 6.4",
        "            // Step 1            ",
        "            query = #\"NAME=CR.P(Currency)-P(ReferenceEntity)_P(DebtType)_P(RestructuringClause).CDS-<MATURITY>.SPREAD.P(QuoteType)\"",
        "            results = NxStd::Query(query, \"NAME,MATURITY\")",
        "            if results: ",
        "                return Currency + \"_\" + ReferenceEntity + \"_\" + DebtType + \"_\" + RestructuringClause",
        null,
        "            // Step 2",
        "            query = #\"NAME=CR.EUR-P(ReferenceEntity)_P(DebtType)_P(RestructuringClause).CDS-<MATURITY>.SPREAD.P(QuoteType)\"",
        "            results = NxStd::Query(query, \"NAME,MATURITY\")",
        "            if results: ",
        "                return \"EUR\" + \"_\" + ReferenceEntity + \"_\" + DebtType + \"_\" + RestructuringClause",
        null,
        "            // Step 3",
        "            query = #\"NAME=CR.USD-P(ReferenceEntity)_P(DebtType)_P(RestructuringClause).CDS-<MATURITY>.SPREAD.P(QuoteType)\"",
        "            results = NxStd::Query(query, \"NAME,MATURITY\")",
        "            if results: ",
        "                return \"USD\" + \"_\" + ReferenceEntity + \"_\" + DebtType + \"_\" + RestructuringClause",
        null,
        "            // Step 4 (Refer to BRD Section 6.4 (4)-(c)-(iv) part for further details)",
        "            // If none of above Issuer key works, then eventually revert to use Credit Rating Proxy curve      ",
        "            query = #\"NAME=CR.P(Currency)-PROXY_P(IssuerSecondBestRating)_SNRFOR_CR.CDS-<MATURITY>.SPREAD.P(QuoteType)\"",
        "            results = NxStd::Query(query, \"NAME,MATURITY\")",
        "            if results: ",
        "                return Currency + \"_\" + \"PROXY\" + \"_\" + IssuerSecondBestRating + \"_\" + \"CR\"",
        "        endif",
        null,
        "        return Currency + \"_\" + ReferenceEntity + \"_\" + DebtType + \"_\" + RestructuringClause",
        "    else",
        "        return Currency + \"_\" + ReferenceEntity + \"_\" + DebtType + \"_\" + RestructuringClause",
        "    endif",
        "}"]
    }
  },
  "DEFINITION.TRADE_ESUN.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Market Data Quotes","Quote Type","Valuation Date","Settlement Date","Include Value Date","Include Value Date Pricer","Termination Effective Date","Target Date","Call Date","KO Date","KI Date","Option Barrier Type","FX Quote Type","Fee Netting","PV Quote Type","Issuer","Issuer Credit ID","Issuer Recovery Rate","Reference Entity","Debt Type","Restructuring Clause","Initial Rating","Lifecycle Event Table","FixingsIdMap","Cash Settlement","Upfront Fee","Termination Fee"],
      "TYPE" : ["ID","String","Date","Date","Boolean","Boolean","Date","Date","Date","Date","Date","String","String","Boolean","String","String","String","Double","String","String","String","String","Table(DEFINITION.TRADE_ESUN.LIFECYCLE_INPUT)","ID|String","Boolean","Table(DEFINITION.TRADE_ESUN.CASHFLOWTABLESPEC)","Table(DEFINITION.TRADE_ESUN.CASHFLOWTABLESPEC)"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [
        ">Numerix::MarketData",    
        ">PVQuoteType",    
        ">Numerix::MarketDate",    null,true,false,
        ">Numerix::AddTenor(Numerix::MarketDate,Numerix::Tenor(\"299y\",\"none\",\"none\"))",    
        ">Numerix::AddTenor(Numerix::MarketDate,Numerix::Tenor(\"299y\",\"none\",\"none\"))",    
        ">Numerix::AddTenor(Numerix::MarketDate,Numerix::Tenor(\"299y\",\"none\",\"none\"))",    
        ">Numerix::AddTenor(Numerix::MarketDate,Numerix::Tenor(\"299y\",\"none\",\"none\"))",    
        ">Numerix::AddTenor(Numerix::MarketDate,Numerix::Tenor(\"299y\",\"none\",\"none\"))",    "NONE",
        ">PVQuoteType",    false,"MID",null,null,0.400000000000000022,
        ">if IssuerCreditID ? IssuerCreditID.Split(\"_\")[1] : \"\"",    
        ">if IssuerCreditID ? IssuerCreditID.Split(\"_\")[2] : \"\"",    
        ">if IssuerCreditID ? IssuerCreditID.Split(\"_\")[3] : \"\"",    null,null,
        "> TLC::CreateFixing",    false,null,null],
      "GROUPING" : ["Hidden","Pricing Parameters","Position","Trade T&C","Pricing Parameters","Pricing Parameters","Premium","Premium","Premium","Premium","Premium","Trade T&C","Pricing Parameters","Pricing Parameters","Pricing Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","lifecycle","lifecycle","Pricing Parameters","Premium","Premium"],
      "DESCRIPTION" : ["ID of the Market Data Quote.","Indicate the Quote types used May be Mid, Bid or Ask","Date on which the valuation is done","The settlement date of the deal.","Indicates whether the payment on the VALUE DATE is included in the REALIZED CASH FLOW. Here VALUE DATE means valuation day.","Indicates whether the payment on the VALUE DATE is included in the (kernel/analytic) pricer. Here VALUE DATE means valuation day.","For unwound ","Record the TargetDate of the trade, if any","Record the CallDate of the trade, if any","Record the KO Date of the trade, if any","Record the KI Date of the trade, if any","Barrier Type of the option: NONE, American, European",
        ">if buysell == #\"BUY\" ? \"BID\" : \"ASK\"
MID
",    "Netting for fee",null,"Issuer of the note which is predefined in Legal Entity","An ID indicate the necessary information of credit for issuer which includes below terms with separator ?_?:
1) Reference Entity
2) Debt Type
3) Restructuring Clause

ReferenceEntity_DebtType_RestructuringClause
","Used to specify what the recovery is for the defaulted asset; this heading overrides the recovery rate that may have been specified earlier for the asset in the basket or instrument. This is the recovery rate applied at the time of default.","The reference entity","The debt type","The restructuring clause; one of XR, CR, MR or MM","The initial rating, which can be (1) an integer specifying the rating based on an internal mapping from 0 (highest) to N-1 (lowest) or (2) a string specifying the letter rating, such as \"AAA\".
If a single curve is supplied to the CREDIT CURVES heading, it is assumed to correspond to this rating.","Generic input for lifecycle event table",null,"TRUE: All cashflow on the same date will be netted and output to the new cashflow; FALSE: no netting.","Upfront Amount

>PREMIUMDEFAULT","Termination Table

>PREMIUMDEFAULT"]
    }
  },
  "DEFINITION.TRADE_ESUN.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.TRADE_ESUN.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.TRADE_ESUN.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["IsIRDeltaAnalytic","IsIRGammaAnalytic","IsIRVegaAnalytic","IsIRVannaAnalytic","IsIRVolgaAnalytic","IsThetaAnalytic","IsPhiAnalytic","IsRhoAnalytic","IsFXDeltaAnalytic","IsFXGammaAnalytic","IsFXForwardDeltaAnalytic","IsFXVegaAnalytic","IsFXVannaAnalytic","IsFXVolgaAnalytic","IsFXPercentDeltaAnalytic"],
      "TYPE" : ["Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean"],
      "VALUE" : ["False","False","False","False","False","False","False","False","False","False","False","False","False","False","False"]
    }
  },
  "DEFINITION.TRADE_ESUN.LIFECYCLE_INPUT": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Event Type" : ["String",null],
      "Event Date" : ["Date",null],
      "Event Settlement Date" : ["Date",null],
      "Component Ref" : ["String","OPTIONAL"],
      "FixingSeries" : ["String","OPTIONAL"],
      "Rate" : ["Double","OPTIONAL"],
      "Additional Info" : ["String","OPTIONAL"]
    }
  },
  "DEFINITION.TRADE_ESUN.CASHFLOWTABLESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "CURRENCY" : ["Currency"],
      "PAYMENTDATE" : ["Date"],
      "PAYMENTAMOUNT" : ["Double"],
      "DESCRIPTION" : ["String"]
    }
  },
  "DEFINITION.TRADE_ESUN.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "import \"script.nxcustom\"",
        null,
        "constfunction premiumDefault",
        "{",
        "    premiumDefaultTable = Numerix::Table(\"premiumDefaultTable_\" + Numerix::UniqueNumber, ",
        "        {\"CURRENCY\", \"PAYMENTDATE\", \"PAYMENTAMOUNT\"}, {pricingCurrency, terminationEffectiveDate, 0})",
        "    id= Numerix::Create(premiumDefaultTable)",
        "    RETURN id",
        "}",
        null,
        "// Construct the parameter to use in resolve of the cash payment template",
        "constfunction unwindFeeParameters",
        "{",
        "    // startdebugger",
        "    if \"DiscountCurve\".Defined{",
        "        if DiscountCurve{",
        "        unwindFeeParametersTable = Numerix::Table(\"unwindFeeParametersTable\", ",
        "            {\"Name\", \"Value\"}, ",
        "            {{\"Cash flow Currency\", \"Cash flow Log\", \"Include Value Date\", \"Currency\", \"Discount Curve\"},",
        "             {GetTableWithKey(terminationFee,\"Currency\"), terminationFee, IncludeValueDate, pricingCurrency, DiscountCurve}}",
        "            )",
        "        }",
        "    }",
        "    else{",
        "    if \"BaseDiscountCurve\".Defined & \"TermDiscountCurve\".Defined {",
        "            if BaseDiscountCurve & TermDiscountCurve",
        "            {",
        "            unwindFeeParametersTable = Numerix::Table(\"unwindFeeParametersTable\", ",
        "                {\"Name\", \"Value\"}, ",
        "                {{\"Cash flow Currency\", \"Cash flow Log\", \"Include Value Date\", \"Currency\", \"Term Discount Curve\", \"Base Discount Curve\"},",
        "                 {GetTableWithKey(terminationFee,\"Currency\"), terminationFee, IncludeValueDate, pricingCurrency, TermDiscountCurve, BaseDiscountCurve}}",
        "                )",
        "            }",
        "        }",
        "    unwindFeeParametersTable = Numerix::Table(\"unwindFeeParametersTable\", ",
        "        {\"Name\", \"Value\"}, ",
        "        {{\"Cash flow Currency\", \"Cash flow Log\", \"Include Value Date\", \"Currency\"},",
        "         {GetTableWithKey(terminationFee,\"Currency\"), terminationFee, IncludeValueDate, pricingCurrency}}",
        "        )",
        "    }",
        null,
        "    id= Numerix::Create(unwindFeeParametersTable)",
        "    RETURN id",
        "}",
        null,
        "constfunction upfrontFeeParameters",
        "{",
        "    // startdebugger",
        "    u= upfrontFee",
        "    if \"DiscountCurve\".Defined{",
        "        if DiscountCurve{",
        "            NameList = {\"Cash flow Currency\", \"Cash flow Log\", \"Include Value Date\", \"Currency\", \"Discount Curve\"}",
        "            ValueList = {GetTableWithKey(u,\"Currency\"), u, IncludeValueDate, pricingCurrency, DiscountCurve}",
        "        }",
        "    }",
        "    else{",
        "        NameList = {\"Cash flow Currency\", \"Cash flow Log\", \"Include Value Date\", \"Currency\"}",
        "        ValueList = {GetTableWithKey(u,\"Currency\"), u, IncludeValueDate, pricingCurrency}",
        "    }",
        null,
        "    if \"TermDiscountCurve\".Defined : if TermDiscountCurve : ",
        "        {",
        "            NameList &= \"Term Discount Curve\"",
        "            ValueList &= TermDiscountCurve",
        "        }",
        "    if \"BaseDiscountCurve\".Defined : if BaseDiscountCurve : ",
        "        {",
        "            NameList &= \"Base Discount Curve\"",
        "            ValueList &= BaseDiscountCurve",
        "        }",
        "    upfrontFeeParametersTable = Numerix::Table(\"upfrontFeeParametersTable\", ",
        "        {\"Name\", \"Value\"}, ",
        "        {NameList, ValueList}",
        "        )",
        null,
        "    id= Numerix::Create(upfrontFeeParametersTable)",
        "    RETURN id",
        "}",
        null,
        null,
        null,
        "function SnT::isExpired",
        "{",
        "    expiryDate= SnT::lastPaymentDate",
        null,
        "    IF (valuationDate > expiryDate) or (IncludeValueDate and valuationDate >= expiryDate) THEN ",
        "        return SnT::createTerminationDatesLog(expiryDate, 3)",
        "    ENDIF",
        "    return false",
        "}",
        null,
        "function SnT::isUnWound",
        "{",
        "	Numerix::SetNormal(\">Snt::isUnWound(\"+ valuationDate +\", \" + terminationEffectiveDate +\")\")",
        "   // TerminationStatus = 5 (Unwound)?",
        "	IF not terminationEffectiveDate THEN",
        "        return false",
        "    ENDIF",
        "    IF (valuationDate > terminationEffectiveDate ) or (IncludeValueDate and valuationDate >= terminationEffectiveDate ) THEN ",
        "		return snt::createTerminationDatesLog(terminationEffectiveDate, 5)",
        "    ENDIF",
        "    return false",
        "}",
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        "function SnT::CreateTerminationDatesLog(date1, termStatus)",
        "{",
        "    table = Numerix::Table(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {date1, Numerix::Double(termStatus)}) ",
        "    Numerix::Create(table)",
        "    id= Numerix::Resolve(table.ID)",
        "    // id= table.ID",
        "	return id",
        "}",
        null,
        "function SnT::getTerminationDatesLog",
        "{",
        "    expiry= SnT::lastPaymentDate",
        "    //return SnT::getTermination(ValuationDate,IncludeValueDate, expiry, \"\", terminationEffectiveDate)",
        null,
        "    Numerix::SetNormal(\">GetTermination(\"+ ValuationDate +\")\")",
        "    date = Numerix::Date(ValuationDate)",
        "    IF expiry.type<>\"STRING\" THEN",
        "        ExpiryDate = Numerix::Date(expiry)",
        "    Else",
        "		try",
        "		{",
        "        	table = Numerix::Load(expiry)",
        "	        table = Numerix::Resolve (expiry)",
        "	        DateColumn = table.Value(\"DateOutput\") //??",
        "	        ExpiryDate = DateColumn[DateColumn.size]",
        "		} catch error",
        "		{",
        "            Numerix::SetFatal(\"\\\"\" + expiry + \"\\\"  NOT found. \" + error) ",
        "		}",
        "    ENDIF",
        null,
        "   // TerminationStatus = 3",
        "    expired= Snt::isExpired",
        "	if expired THEN ",
        "		return expired",
        "    ENDIF",
        null,
        "   // TerminationStatus = 5 (Unwound)",
        "	unwound= Snt::isUnWound",
        "	IF unwound THEN",
        "	    return unwound",
        "	ENDIF",
        null,
        "    // TerminationStatus = 8 (KI)??",
        "    termdate = KIDate",
        "    IF termdate.Type <> \"DATE\" THEN",
        "        termdate = Numerix::Date(termdate)",
        "    ENDIF",
        "    IF date >= termdate THEN ",
        "		return snt::createTerminationDatesLog(termdate, 8)",
        "    ENDIF",
        null,
        "    // TerminationStatus = 7 (Callable option exercised)??",
        "    termdate = CallDate",
        "    IF termdate.Type <> \"DATE\" THEN",
        "        termdate = Numerix::Date(termdate)",
        "    ENDIF",
        "    IF date >= termdate THEN ",
        "		return snt::createTerminationDatesLog(termdate, 7)",
        "    ENDIF",
        null,
        "    // TerminationStatus = 6 (AKO)??",
        "    termdate = KODate",
        "    IF termdate.Type <> \"DATE\" THEN",
        "        termdate = Numerix::Date(termdate)",
        "    ENDIF",
        "    IF (date >= termdate) AND (OptionBarrierType = \"American\")THEN ",
        "            return snt::createTerminationDatesLog(termdate, 6)",
        "    ENDIF",
        null,
        "    // TerminationStatus = 2 (meet Target) ??",
        "    termdate = TargetDate",
        "    IF termdate.Type <> \"DATE\" THEN",
        "        termdate = Numerix::Date(termdate)",
        "    ENDIF",
        "    IF date >= termdate THEN ",
        "		return snt::createTerminationDatesLog(termdate, 2)",
        "    ENDIF",
        null,
        "    //Terminationstatus = 1 (DKO) ??",
        "    termdate = KODate",
        "    IF date >= termdate THEN       ",
        "       return snt::createTerminationDatesLog(termdate, 1)",
        "    ELSE",
        "        termdate = ExpiryDate",
        "        return snt::createTerminationDatesLog(termdate, 0)",
        "    ENDIF",
        "}",
        null,
        "function SnT::getTerminationDatesLog2",
        "{",
        "    expiry= SnT::lastPaymentDate",
        "    return SnT::getTermination(ValuationDate,IncludeValueDate, expiry, \"\", terminationEffectiveDate)",
        "}",
        null,
        "function SnT::GetTermination(valueDate,IncludeValueDate,FixingtableID,FixingDateHeader,TerminationDate,TermStatus=0,Termlog=\"\",HasKO=FALSE,KODate=Numerix::Date(100000),CallDate=Numerix::Date(100000),IsTarget=FALSE,TargetDate=Numerix::Date(100000))",
        "{",
        "	Numerix::SetNormal(\">GetTermination(\"+ valueDate +\")\")",
        "     date = Numerix::Date(valuedate)",
        "    // TerminationStatus = 3 (Matured)?",
        "    IF FixingtableID.type<>\"STRING\" THEN",
        "        ExpiryDate = Numerix::Date(FixingtableID)",
        "    Else",
        "		try",
        "		{",
        "        	table = Numerix::Load(FixingtableID)",
        "	        table = Numerix::Resolve (FixingtableID)",
        "	        DateColumn = table.Value(FixingDateHeader+\"Output\")",
        "	        ExpiryDate = DateColumn[DateColumn.size]",
        "		} catch error",
        "		{",
        "            Numerix::SetFatal(\"\\\"\" + FixingtableID + \"\\\"  NOT found. \" + error) ",
        "		}",
        "    ENDIF",
        null,
        "   // TerminationStatus = 5 (Unwound)",
        "	unwound= Snt::isUnWound",
        "	IF unwound THEN",
        "	    return unwound",
        "	ENDIF",
        null,
        "   // TerminationStatus = 3",
        "    expired= Snt::isExpired",
        "	if expired THEN ",
        "		return expired",
        "    ENDIF",
        null,
        "    // TerminationStatus = 2 (meet Target) ??",
        "    termdate = TargetDate",
        "    IF IsTraget AND (date >= termdate) THEN ",
        "		return snt::createTerminationDatesLog(termdate, 2)",
        "    ENDIF",
        null,
        "    // TerminationStatus = 7 (Callable option exercised)??",
        "    termdate = CallDate",
        "    IF termdate.Type <> \"DATE\" THEN",
        "        termdate = Numerix::Date(termdate)",
        "    ENDIF",
        "    IF date >= termdate THEN ",
        "		return snt::createTerminationDatesLog(termdate, 7)",
        "    ENDIF",
        null,
        "    // TerminationStatus = 6 (AKO)??",
        "    termdate = KODate",
        "    IF termdate.Type <> \"DATE\" THEN",
        "        termdate = Numerix::Date(termdate)",
        "    ENDIF",
        "    IF HASKO AND (date >= termdate) THEN ",
        "            //table = Numerix::Table(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {termdate,Numerix::Double(6)}) ",
        "            //Numerix::Create(table)",
        "            //RETURN Numerix::Resolve(table.ID)",
        "            return snt::createTerminationDatesLog(termdate, 6)",
        "    ENDIF",
        null,
        "    //Terminationstatus = 1 (DKO) ??",
        "    IF TermStatus THEN       ",
        "       //table = Numerix::Resolve (Termlog)",
        "       //table = Numerix::Table(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {table.Value(\"DatesOutput\")[1], table.Value(\"ActualOutput\")[1]}) ",
        "       //Numerix::Create(table)",
        "	   //RETURN Numerix::Resolve(table.ID)",
        "       termdate = KODate",
        "       return snt::createTerminationDatesLog(termdate, 1)",
        "    ELSE",
        "        //table = Numerix::Table(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {ExpiryDate,Numerix::Double(0)}) ",
        "        //Numerix::Create(table)",
        "        //RETURN Numerix::Resolve(table.ID)",
        "        termdate = ExpiryDate",
        "        return snt::createTerminationDatesLog(termdate, 0)",
        "    ENDIF",
        "}",
        null,
        "//================================================================================",
        "// TLC Functions",
        "//================================================================================",
        "// returns a table of event information, filtered by event type.",
        "constfunction TLC::getEventByType(EvtType)",
        "{",
        "    ifnot LifecycleEventTable:",
        "        return {}",
        null,
        "    ifnot LifecycleEventTable.eventType.size:",
        "        return {}",
        null,
        "    tbl = Numerix::load(LifecycleEventTable)",
        "    list = {}",
        "    EvtTypeList = if EvtType is \"LIST\" ? EvtType.canonical : {EvtType.canonical}",
        "    foreach t in tbl:",
        "        if t.EventType.canonical in EvtTypeList:",
        "            list @= t",
        null,
        "    return list",
        "}",
        null,
        "// returns a table of event information, filtered by event type and fixing-series",
        "constfunction TLC::getEventByTypeByFixingSeries(EvtType, fixingSeries)",
        "{",
        "    list = TLC::getEventByType(EvtType)",
        null,
        "    ifnot list:",
        "        return {}",
        null,
        "    ifnot fixingSeries:",
        "        return list",
        null,
        "    res = {}",
        "    FixingSeriesList = if FixingSeries is \"LIST\" ? FixingSeries.canonical : {FixingSeries.canonical}",
        "    foreach t in list:",
        "        if t.FixingSeries.canonical in FixingSeriesList:",
        "            res @= t",
        null,
        "    return res",
        "}",
        null,
        "// returns a table of event information with extended additional info, filtered by event type and event date as optional.",
        "constfunction TLC::getEventDetailByType(EvtType, EvtDate=\"\")",
        "{",
        "    list = TLC::getEventByType(EvtType)",
        null,
        "    ifnot list:",
        "        return {}",
        null,
        "    // try to convert EvtDate to data format, otherwise returns \"\"",
        "    EvtDate_= EvtDate",
        "    ifnot EvtDate_ == \"\" : ifnot EvtDate_ is \"Date\"",
        "    {",
        "        try{",
        "            EvtDate_ = Numerix::Date(EvtDate)",
        "        }catch error{",
        "            EvtDate_ = \"\"",
        "        }",
        "    }",
        null,
        "    // get list of lifecycle infos and returns in table.",
        "    keys = LifecycleEventTable.ColumnHeaders.canonical",
        "    vals = {}",
        "    foreach l in list",
        "    {",
        "        if EvtDate == \"\" or l.eventDate == EvtDate_ :",
        "        {",
        "            val = {l.EventType, l.EventDate, l.EventSettlementDate, l.ComponentRef, l.FixingSeries, l.Rate, l.AdditionalInfo}",
        "            if l.additionalInfo:",
        "            {",
        "                arr = TLC::ExtractDetail(l.additionalInfo).transpose",
        "                if keys.find(arr[1]) == 0:",
        "                    keys &= arr[1]",
        "                val &= arr[2]",
        "            }",
        "            vals @= val",
        "        }",
        "    }",
        "    // try to validate the format of table by create table and load.",
        "    return Numerix::Table(EvtType + Numerix::UniqueNumber,keys,vals.transpose).create.load",
        "}",
        "function TLC::ExtractDetail(additional_info)",
        "{",
        "    vals = {}",
        "    list = additional_info.split(\";\")",
        "    foreach l in list:",
        "        vals @= l.split(\"=\")",
        "    return vals",
        "}",
        null,
        "// this function creates the fixing object at trade level.",
        "constfunction TLC::CreateFixing",
        "{",
        "    list = TLC::getEventByType({\"FIXING\",\"REFIXING\"})",
        null,
        "    ifnot list:",
        "        return {}",
        null,
        "    // group rate by fixingseries",
        "    indexList = {}",
        "    rateList = {}",
        null,
        "    foreach l in list",
        "    {",
        "        if l.FixingSeries.canonical in indexList",
        "        {",
        "            i = indexList.find(l.FixingSeries.canonical)",
        "            rateList[i] @= {l.eventDate, l.rate}",
        "        }else",
        "        {",
        "            indexList @= l.FixingSeries.canonical",
        "            rateList @= {{l.eventDate, l.rate}}",
        "        }",
        "    }",
        "    // create new fixingseries",
        "    vals = {}",
        null,
        "    foreach l in indexList",
        "    {",
        "        FixingSeriesID = if l.find(\"FIXINGS.\") ? l.canonical : \"FIXINGS.\" + l.canonical",
        "        temp = Numerix::Table(FixingSeriesID + \".DATA\", {\"DATE\",\"VALUE\"}, rateList[l.iteration].transpose).create",
        "        localDataId = Numerix::sort(temp,\"DATE\").create",
        "        // same localFixingID comparing to globalFixingID, since the container is trade level, it will be a different Fixing object to global one.",
        "        call = Numerix::Object({FixingSeriesID, \"MARKET DATA\", \"FIXINGS\"}) & ",
        "        {",
        "            \"FIXINGS\"       : localDataId,",
        "            \"INTERP\"        : false",
        "        }",
        "        vals @= {FixingSeriesID, call.create}",
        "    }",
        null,
        "    return Numerix::Table(\"FixingsIdMap\",{\"FIXING_ID\",\"TRADE_ELEVEL_FIXING_ID\"}, vals.transpose).create",
        "}",
        "// this overwrites the abstrct function in TradeTermBase",
        "constfunction TLC::FixingsID(fixingid)",
        "{",
        "    ifnot fixingid:",
        "        return \"\"",
        null,
        "    table = FixingsIdMap.load",
        "    ifnot table",
        "    {",
        "        Numerix::SetMajor(\" No fixing event data for \" + fixingid + \" , referring to global fixing data. \")",
        "        return NxStd::formatFixingsID(fixingid)",
        "    }",
        null,
        "    res = {}",
        "    fixingid_ = if fixingid is \"LIST\" ? fixingid : {fixingid}",
        "    foreach f in fixingid_",
        "    {",
        "        f_ = NxStd::formatFixingsID(f)",
        "        i = table.FIXING_ID.canonical.find(f_)",
        "        if i",
        "        {",
        "            res @= table[i].TRADE_ELEVEL_FIXING_ID",
        "        }   ",
        "        else",
        "        {",
        "            res @= f_",
        "            Numerix::SetMajor(\" No fixing event data for \" + f + \" , referring to global fixing data. \")",
        "        }",
        "    }",
        "    return if fixingid_.size == 1 ? res[1] : res",
        "}",
        null,
        "// Create a single index equity.",
        null,
        "constfunction TLC::MakeSingleEquity(fn_currency,fn_Ticker,fn_exchange,fn_source = {},fn_fixngSeries = {})",
        "{",
        "    obj  = ",
        "        {",
        "            \"ID\"       : fn_Currency + fn_Exchange + fn_Ticker,",
        "            \"NAME\"     : fn_Currency + fn_Exchange + fn_Ticker,",
        "            \"OBJECT\"   : \"INDEX\",",
        "            \"TYPE\"     : \"EQUITY\",",
        "            \"CURRENCY\" : fn_Currency,",
        "            \"FIXINGS\"  : TLC::FixingsID(if fn_fixngSeries ? fn_fixngSeries : Numerix::EQFixingsID(fn_currency,fn_exchange,fn_Ticker,fn_source))",
        "        }",
        "    return obj.create",
        "}",
        null,
        "// Create a single index equity Adjust factor.",
        null,
        "constfunction TLC::MakeSingleEquityAdjustFactor(currency,ticker,exchange, event_name = \"\")",
        "{",
        "    SecId = Numerix::EquitySpotPriceID(Currency,Exchange,Ticker)",
        "    list = TLC::getEventByTypeByFixingSeries({\"ADJUST FACTOR\"}, SecId.replace(\".\" + quoteType, \"\").canonical)",
        null,
        "    name = if event_name? event_name : Currency+Exchange+Ticker+\"_AdjustFactor\"",
        null,
        "    // default adjust factor",
        "    ifnot list:",
        "        return NxStd::DataIndexObj(name, 1)",
        null,
        "    dates = {Numerix::Date(\"1-Jan-2000\")} & list.eventDate",
        "    vals  = {1} & list.rate",
        "    tbl = Numerix::Table(NxStd::MakeID(\"table\"), {\"DATE\", \"VALUE\"}, {dates, vals})",
        "    return NxStd::DataIndexObj(name, tbl.create)",
        "}"]
    }
  },
  "SCRIPT.NXCUSTOM": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DEFINITIONS" : [
        "//*****************************************************************************",
        "// Copyright (c) 1996-2016 Numerix LLC.  All rights reserved.",
        "// This software comprises valuable trade secrets and may be used,",
        "// copied, transmitted, stored, and distributed only in accordance",
        "// with the terms of a written license or trial agreement and with the",
        "// inclusion of this copyright notice.",
        "//*****************************************************************************",
        null,
        "//=============================================================================",
        "// PROJECT SPECIFIC CUSTOM FUNCTIONS AND MACROS - RSF",
        "//=============================================================================",
        null,
        "function NxCust::GetFXSpotProperties(FXSpotQuotes)",
        "{",
        "//    FXName = FXSpotQuotes.CCYPair",
        "    ",
        "//    Currency = {}",
        "//	ForeignCurrency = {}",
        "//	foreach Quote in FXSpotQuotes",
        "//	{",
        "//		Currency @= Quote.CCYPAIR[1..3] ",
        "//		ForeignCurrency @= Quote.CCYPAIR[4..6]",
        "//	}",
        "    ccypair = {}",
        "    ccy1 = {}",
        "    ccy2 = {}",
        "    foreach Quote in FXSpotQuotes",
        "    {",
        "//        ccypair @= Quote.currencies[1].split(\"_\")",
        "        ccypair @= Quote.currencies[1].split(\"_\")[2] & Quote.currencies[1].split(\"_\")[1]",
        "//        ccy1 @= Quote.currencies[1].split(\"_\")[1]",
        "//        ccy2 @= Quote.currencies[1].split(\"_\")[2]",
        "    }",
        "    ",
        "//    temptable = Numerix::Table(\"\", {\"Key\", \"Name\", \"Currency\", \"ForeignCurrecny\"}, {FXSpotQuotes.Key, ccypair, ccy2, ccy1})",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"Name\", \"Currency\", \"ForeignCurrecny\"}, {FXSpotQuotes.Key, ccypair, FXSpotQuotes.Currency, FXSpotQuotes.TermCurrency})",
        "	//temptable = Numerix::Table(\"\", {\"Key\", \"Name\", \"Currency\", \"ForeignCurrecny\"}, {FXSpotQuotes.Key, FXName, Currency, ForeignCurrency})",
        "	PropertyTable = Numerix::MetaData(temptable)",
        "	return PropertyTable",
        "}",
        null,
        "function NxCust::GetFXSpotVolSurfaceProperties(Surfaces)",
        "{",
        "    //Surfaces = Numerix::CreateMetaData(Surfaces) = \"FX.VOL.<BaseCurrency>/<TermCurrency>.<QuoteType>\"",
        "    temptable = Numerix::Table(\"\", {\"Key\",\"RiskFactor\", \"BaseCurrency\", \"TermCurrency\", \"CurrencyPair\"}, {Surfaces.key ,\"VOL.\" & Surfaces.BaseCurrency & Surfaces.TermCurrency ,Surfaces.TermCurrency, Surfaces.BaseCurrency, Surfaces.BaseCurrency + Surfaces.TermCurrency} )",
        "    Surfaces = Numerix::MetaData(temptable)",
        "    return Surfaces",
        "}",
        null,
        "function NxCust::FXVolMarketData()",
        "{",
        "    MarketData = (Numerix::Registry.Key(\"TYPE\") == \"FXVOL\") ",
        "    return MarketData",
        "}",
        null,
        "function NxCust::GetFXCurveProperties(FXCurves)",
        "{",
        "    DisplayCurve = FXCurves.LocalID",
        "    CurveName = FXCurves.DisplayName",
        "    RF = CurveName.Split(\".\")",
        "    RiskFactor = {}",
        "    for a = 2 to RF.size-1",
        "    {",
        "        RiskFactor @= RF[a]",
        "        if a != RF.size -1 : RiskFactor@=\".\"",
        "    }",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"Display\", \"RiskFactor\", \"Currency\"}, {DisplayCurve.Key, CurveName, RiskFactor, DisplayCurve.Currency})",
        "    PropertyTable = Numerix::MetaData(temptable)",
        "    return PropertyTable",
        "}",
        null,
        "function NxCust::FXMarketData()",
        "{",
        "    //check if the curve is FX related",
        "    Curves = {}",
        "    curve1 = (Numerix::Registry.Key(\"TYPE\") == \"YIELD\")",
        "    foreach curve in curve1",
        "    {",
        "    	IsFX = curve.LocalID.Find(\"FWD\") OR curve.ImplementedObject.objecttype.Find(\"BASISCURVE\") OR curve.ImplementedObject.objecttype.Find(\"CCSWAP\")",
        "        if IsFX",
        "        {",
        "            Curves &= curve",
        "        }",
        "    }",
        "    ",
        "    Curves &= (Numerix::Registry.Key(\"TYPE\") == \"BASISCURVE\")",
        "	Curves &= (Numerix::Registry.Key(\"TYPE\") == \"CCSWAP\")",
        "    ",
        "    return Curves",
        "}",
        null,
        "scenario NxCust::IRCapVolShock(Filter, IRVolInst, ShockAmt, ShockType = \"\", Recal = 2, CloneModel=false)",
        "{",
        "    if not IRVolInst then Inst = filter.CapVolatilityInstruments else Inst = IRVolInst endif",
        "    ",
        "    Insts = Filter.CapVolatilityInstruments",
        "    ",
        "    switch on ShockType",
        "    case \"Relative\" ",
        "        NxRSF::RelativeShock(Insts.VolatilityQuote,  0) ",
        "        NxRSF::RelativeShock(Inst.VolatilityQuote,  Inst.ScalingFactor*ShockAmt) ",
        "    case \"Replace\"",
        "        NxRSF::ReplaceShock(Insts.VolatilityQuote,  0) ",
        "        NxRSF::ReplaceShock(Inst.VolatilityQuote,  Inst.ScalingFactor*ShockAmt) ",
        "    case \"Absolute\"",
        "        NxRSF::AbsoluteShock(Insts.VolatilityQuote,  0) ",
        "        NxRSF::AbsoluteShock(Inst.VolatilityQuote,  Inst.ScalingFactor*ShockAmt) ",
        "    Default",
        "        NxRSF::AbsoluteShock(Insts.VolatilityQuote,  0) ",
        "        NxRSF::AbsoluteShock(Inst.VolatilityQuote,  Inst.ScalingFactor*ShockAmt) ",
        "    end switch",
        "    ",
        "    switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "        if Recal",
        "        {",
        "            Numerix::RecalibrateModel()",
        "        }",
        "     endswitch",
        "}",
        null,
        "//scenario function for cap vol with tenor and delta ",
        "scenario NxCust::IRCapVolShockByTenorAndDelta(VolSurfaceID, OptionTenor, OptionDelta, ShockAmt,Recal,ShockType,CloneModel=false)",
        "{",
        "    IF NOT OptionTenor And NOT OptionDelta THEN",
        "        VOLQTFilter = VolSurfaceID.CapVolatilityInstruments.Quotes",
        "        Numerix::AbsoluteShock(VOLQTFilter, ShockAmt) ",
        "    ELSE",
        "        FOREACH S IN VolSurfaceID DO",
        "            VOLINSTFilter = S.CapVolatilityInstruments",
        "            VOLQTFilter = VOLINSTFilter.Quotes",
        "            NxRSF::AbsoluteShock(VOLQTFilter, 0)",
        "            VOLQTFilterMD = Numerix::CreateMetaData(VOLQTFilter) == \"<QuotePrefix>::<Tenor>::<Delta>\"",
        "            IF NOT OptionTenor THEN",
        "                MT = VOLQTFilter",
        "            ELSE",
        "                MT = (Numerix::Metadata(VOLQTFilterMD).Key(\"Tenor\").Canonical == OptionTenor.Canonical)",
        "            END IF",
        "            IF NOT OptionDelta THEN",
        "                MD = VOLQTFilter",
        "            ELSE",
        "                MD =  (Numerix::Metadata(VOLQTFilterMD).Key(\"Delta\").Canonical == OptionDelta.Canonical)",
        "            END IF",
        "            VOLQTFilter1 = MT.key And MD.key",
        "            switch on ShockType.Canonical",
        "            Case \"Absolute\" ",
        "                NxRSF::AbsoluteShock(VOLQTFilter1.Key, ShockAmt) ",
        "            Case \"Relative\"",
        "                NxRSF::RelativeShock(VOLQTFilter1.Key, ShockAmt)",
        "            Case \"Replace\"",
        "                NxRSF::ReplaceShock(VOLQTFilter1.Key, ShockAmt)",
        "            Default",
        "                NxRSF::AbsoluteShock(VOLQTFilter1.Key, ShockAmt) ",
        "            endswitch",
        "        NEXT",
        "    END IF",
        "            ",
        "    switch on Recal",
        "         case 2 ",
        "            Numerix::RecalibrateFullModel()",
        "         case 1",
        "            Numerix::RecalibrateModel()",
        "         default",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "        if Recal",
        "        {",
        "            Numerix::RecalibrateModel()",
        "        }",
        "    endswitch",
        "}",
        null,
        null,
        "function NxCust::GetCapVolProperties(CapVols)",
        "{ ",
        "    // Example: IR.VOL.CAP.CAD-CDOR-3M.MID.",
        "	",
        "    if CapVols",
        "    {",
        "        Surfaces = CapVols.localid",
        "        //Surfaces = Numerix::CreateMetaData(CapVols) = \"<AssetClass>.VOL.CAP.<Currency>-<UIndex>-<IndexTenor>.<QuoteType>\"",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"Currency\", \"Risk Factor\", \"QuoteType\"}, {Surfaces.key, Surfaces.Currency, \"VOL.CAP.\" + Surfaces.Currency + \"-\" + Surfaces.IRIndex+\"-\"+Surfaces.IRIndexTenor, Surfaces.QuoteType})",
        "        CapVols = Numerix::MetaData(temptable)",
        "    }",
        "    return CapVols",
        "}",
        null,
        "function NxCust::GetCapVols()",
        "{",
        "	return (Numerix::Registry.Key(\"TYPE\") == \"CAP VOLATILITY\")",
        "}",
        null,
        "function NxCust::GetSwaptionVolProperties(SwpnVols)",
        "{",
        "    Surfaces = SwpnVols.LocalID",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"Currency\", \"Risk Factor\",\"QuoteType\"}, {Surfaces.key,Surfaces.Currency,  \"VOL.SWPT.\" + Surfaces.Currency + \"-\" + Surfaces.IRIndex+\"-\"+Surfaces.IRIndexTenor,  Surfaces.QuoteType})",
        "    SwpnVols1 = Numerix::MetaData(temptable)",
        "    ",
        "    return SwpnVols1",
        "}",
        null,
        "function NxCust::GetATMSwaptionVols()",
        "{",
        "	return (Numerix::Registry.Key(\"TYPE\") == \"SWAPTION VOLATILITY\")",
        "}",
        null,
        "function NxCust::AddIRShock(Instruments, Scen, ScenarioMarket, ReportType,ScenName=\"\",ExtCurves=\"\", ReCal)",
        "{",
        "    if ReportType = \"ByBucket\"",
        "    {",
        "        if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::IRFlatQTShock(Instruments, Scen.ShockAmt, ReCal, ,Scen.ShockType.Canonical, ,ScenName,ExtCurves)",
        "        else : ScenarioMarket = NxRSF::IRFlatQTShock(Instruments, Scen.ShockAmt, ReCal, ,Scen.ShockType.Canonical, ,ScenName,ExtCurves)",
        "    }",
        "    else",
        "    {",
        "        if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::IRFlatQTShock(Instruments, Scen.ShockAmt, ReCal,MarketDataSet,Scen.ShockType.Canonical, ,ScenName,ExtCurves)",
        "        else : ScenarioMarket = NxRSF::IRFlatQTShock(Instruments, Scen.ShockAmt, ReCal,MarketDataSet,Scen.ShockType.Canonical, ,ScenName,ExtCurves)",
        "    }",
        "    ",
        "    return ScenarioMarket",
        "}",
        null,
        "function NxCust::RemoveRiskFactors(RiskFactorSet, RemoveRiskFactors)",
        "{",
        "    foreach RiskFactor in RemoveRiskFactors",
        "    {",
        "        if RiskFactor != \"\" ",
        "        {",
        "            //remove risk factor that have been shocked from set",
        "            RiskFactorSet = RiskFactorSet.Remove(RiskFactor)",
        "        }",
        "    }",
        "    return RiskFactorSet",
        "}",
        null,
        "function NxCust::SingleBucket(Curves, StartDate, EndDate)",
        "{		",
        "    //startdebugger",
        "	//Get the curves instruments",
        "    CurveInstruments = Curves.INSTRUMENTS",
        "    //Get the maturities of the curve instruments",
        "	TodayDate = NxRSF::GetMarketDate() ",
        "	InstrumentMaturities = NxRSF::RoundList(Numerix::GetDCF(TodayDate, Curves.DateOutput, \"ACT / ACT\"),\"DOWN\")",
        "    ",
        "    //Add logic convert to Date type",
        "    if StartDate isnot \"Date\" then ",
        "     Start_Date = Numerix::AddTenor(TodayDate, Numerix::Tenor(StartDate, \"F\", \"None\"))",
        "    else",
        "      Start_Date = StartDate",
        "    endif",
        "     start_dcf = NxRSF::RoundList(Numerix::GetDCF(TodayDate, Start_Date, \"ACT / ACT\"),\"DOWN\")",
        "    ",
        "    if EndDate isnot \"Date\" then ",
        "      End_Date = Numerix::AddTenor(TodayDate, Numerix::Tenor(EndDate, \"F\", \"None\"))",
        "    else",
        "      End_Date = EndDate",
        "    endif",
        "      end_dcf = NxRSF::RoundList(Numerix::GetDCF(TodayDate, End_Date, \"ACT / ACT\"),\"DOWN\")",
        "    ",
        "    insts = {}",
        "    //Bucket instruments from the curve",
        "    for i = 1 to CurveInstruments.size",
        "    {",
        "        //Add the statement for single point bump",
        "        fwdtenor = CurveInstruments[i].split(\".\")[4]",
        "        ",
        "        if (fwdtenor = StartDate) OR (fwdtenor = EndDate) OR",
        "            (InstrumentMaturities[i] >= numerix::double(start_dcf) and InstrumentMaturities[i] <= numerix::double(end_dcf))",
        "        {",
        "            Insts @= CurveInstruments[i]",
        "        }",
        "    }",
        "    ",
        "    return Insts",
        "}",
        null,
        "function NxCust::ReduceSet(PropertySet, LookupKey, LookupColumn, SecondLookupColumn=\"\")",
        "{",
        null,
        "    SectorAdjustedSet = PropertySet.Key(LookupColumn) == LookupKey",
        "    if SecondLookupColumn",
        "    {",
        "        SectorAdjustedSet2 = PropertySet.Key(SecondLookupColumn) == LookupKey",
        "        SectorAdjustedSet = SectorAdjustedSet & SectorAdjustedSet2",
        "    }",
        "    ",
        "    MarketData = MarketDataSet && SectorAdjustedSet",
        "    ",
        "    return MarketData",
        "}",
        null,
        "function NxCust::GetIRCurveProperties(IRCurves)",
        "{",
        "    //DisplayCurve = IRCurves.LocalID",
        "    DisplayCurve = IRCurves.DisplayName",
        "    CurveName = {}",
        "    foreach Curve in DisplayCurve",
        "    {",
        "        TempName = Curve.Split(\".\")",
        "        TempCheck = Curve.Find(\".\")",
        "        if TempCheck > 0",
        "        {",
        "            CurveSize = TempName.Size",
        "            if CurveSize == 3 : CurveName @= TempName[2]",
        "            if CurveSize == 4 : CurveName @= TempName[2] + \".\" + TempName[3]",
        "        }",
        "        else",
        "        {",
        "            CurveName @= Curve",
        "        }",
        "    }",
        "    ",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"Display\", \"RiskFactor\", \"Currency\"}, {IRCurves.Key, DisplayCurve, CurveName, IRCurves.Currency})",
        "    PropertyTable = Numerix::MetaData(temptable)",
        "    return PropertyTable",
        "}",
        null,
        "function NxCust::IRMarketData_NoFXFWD()",
        "{",
        "    IRCurves = (Numerix::Registry.Key(\"TYPE\") == \"YIELD\") ",
        "    ",
        "    Curves = {}",
        "    foreach ircurve in IRCurves",
        "    {",
        "        yc_type = ircurve.split(\".\")[3]",
        "        yc_type = yc_type[1..3]",
        "        if yc_type <> \"FXF\" then",
        "            Curves &= ircurve",
        "        endif",
        "    }",
        "    ",
        "    Curves &= (Numerix::Registry.Key(\"TYPE\") == \"BASIS CURVE\")",
        "    Curves &= (Numerix::Registry.Key(\"TYPE\") == \"LIBOR BASIS CURVE\")",
        "   ",
        "    Solvers = (Numerix::Registry.Key(\"TYPE\") == \"MULTI-CURVE SOLVER\")    ",
        "    foreach Solver in Solvers",
        "    {",
        "        foreach Curve in Solver.CURVESOUTPUT.ID",
        "        {",
        "            Curves &= Curve",
        "        }",
        "    }",
        "    ",
        "    ",
        "    return Curves",
        "    ",
        "}",
        null,
        "function NxCust::DisplayTable(Trade, ScenName, ScenDescription, PricingResult, Type, Measure, Underlying1, Underlying2, R, R_rpt, ccy_origin, ccy_rpt, fxspot)",
        "{",
        "    //startdebugger",
        "    //Trade Asset Class",
        "	TradeType = Trade.PropertyValuesOutput[Trade.PropertyNamesOutput.Find(\"Asset Class\")] ",
        "	//Trade Currency/Base Currency/Term Currency",
        "	if (TradeType.Canonical = \"FX\" or TradeType.Canonical = \"CC\") then",
        "		Currency1 = \"\"",
        "		BaseCurrency1 = Trade.TradeTerms.BaseCurrency",
        "		TermCurrency1 = Trade.TradeTerms.TermCurrency",
        "	else",
        "		Currency1 = Trade.TradeTerms.Currency",
        "		BaseCurrency1 = \"\"",
        "		TermCurrency1 = \"\"	",
        "	endif    ",
        "    ",
        "	//Display the results",
        "	DisplayTrade Trade.LocalID",
        "    {					",
        "		display ScenName as \"Scenario Name\"",
        "		display ScenDescription as \"Scenario Description\"",
        "		display TradeType as \"Trade Type\"",
        "		display Trade.TradeTerms.Portfolio as \"Portfolio\"",
        "		display Trade.TradeTerms.Entity as \"Entity\"",
        "		display Trade.TradeTerms.SubEntity as \"Sub Entity\"",
        "		display Trade.TradeTerms.AccountingBook as \"Accounting Book\"",
        "		display Trade.TradeTerms.Counterparty as \"Counterparty\"",
        "		display Currency1 as \"Currency\"",
        "		display BaseCurrency1 as \"Base Currency\"",
        "		display TermCurrency1 as \"Term Currency\"",
        "		display PricingResult as \"Category\"",
        "		display Type as \"Type\"",
        "		display Measure as \"Results Name\"",
        "		display Underlying1 as \"Underlying 1\"",
        "		display Underlying2 as \"Underlying 2\"",
        "        display R as \"Value_Origin\"",
        "        display R_rpt as \"Value_Reporting\"",
        "        //display fxspot as \"FX Spot\"   //for debug",
        "        display ccy_origin as \"Currency_Origin\"",
        "        display ccy_rpt as \"Currency_Reporting\"",
        "	}",
        "}",
        null,
        "function NxCust::GenMarketReport(objID, scenariosTableID, measures, trace = \"\", traceDir = \"\")",
        "{",
        "	if scenariosTableID",
        "	{	",
        "		call = ",
        "		{",
        "			\"ID\"                : objID,",
        "			\"OBJECT\"            : \"MARKET\",",
        "			\"TYPE\"              : \"REPORT\",",
        "			\"PRICEABLETRADES\"   : Trades,",
        "			\"MARKETS\"           : Market,",
        "			\"PIVOTTABLEOUTPUT\"  : true,",
        "			\"USEEVALUATOR\"		: true,",
        "			\"TRACE\"				: trace,",
        "			\"TRACEDIRECTORY\"	: traceDir,",
        "			\"CLEANUP\"           : true,",
        "			\"CONSTANTS\"         : ConstantsTable,",
        "			\"PRICING DIMENSIONS\": scenariosTableID,",
        "			\"PRICINGREQUESTS\"   : measures,	",
        "			\"SCRIPTDEFINITIONS\" : \"script.nxrsf\" ",
        "		}",
        "		id = Numerix::Create(Numerix::Object(call))",
        "	}",
        "	else",
        "	{",
        "		call = ",
        "		{",
        "			\"ID\"                : objID,",
        "			\"OBJECT\"            : \"MARKET\",",
        "			\"TYPE\"              : \"REPORT\",",
        "			\"PRICEABLETRADES\"   : Trades,",
        "			\"MARKETS\"           : Market,",
        "			\"PIVOTTABLEOUTPUT\"  : true,",
        "			\"CLEANUP\"           : true,",
        "			\"USEEVALUATOR\"		: true,			",
        "			\"TRACE\"				: trace,",
        "			\"TRACEDIRECTORY\"	: traceDir,",
        "			\"USENULLTRADE\"		: true,",
        "			\"CONSTANTS\"         : ConstantsTable,",
        "			\"PRICINGREQUESTS\"   : measures,	",
        "			\"SCRIPTDEFINITIONS\" : \"script.nxrsf\" ",
        "		}",
        "		id = Numerix::Create(Numerix::Object(call))",
        "	}",
        "    return id",
        "}",
        null,
        "scenario NxCust::FXSpotMatrixShock(CCY, ShockAmt, Recal, ShockType)",
        "{",
        "    // Find the spot matrix object.",
        "    FXSPOTMATRIXIDS = (Numerix::Registry.Key(\"TYPE\") == \"FXSPOTMATRIX\")",
        "	// If found...",
        "    if FXSPOTMATRIXIDS",
        "	{",
        "        foreach CCY1 in CCY",
        "        {",
        "            Foreach FXSPOTMATRIXID in FXSPOTMATRIXIDS",
        "            {",
        "            // Get the base currency.",
        "            BaseCCY = FXSPOTMATRIXID.Currency",
        "            // Get the ID of the Quotes Table.",
        "            QTTBLID = FXSPOTMATRIXID.DATAInput",
        "    		// Load the Table.",
        "    		TBL = Numerix::Load (QTTBLID)",
        "    		// Get the list of Currencies.",
        "    		CCYS = TBL.CURRENCY",
        "    		// Check if currency being shocked is the base currency. ",
        "    		if (CCY1 == BaseCCY)",
        "    		{",
        "                // Get the list of Spot Prices and perturb all of them.",
        "                Values = TBL.SPOTPRICE",
        "                //Bump size selection",
        "                switch on ShockType",
        "                case \"Absolute\"",
        "                Values = Values + ShockAmt",
        "                case \"Replace\"",
        "                Values = ShockAmt",
        "                case \"Relative\"",
        "                Values = Values * (1 + ShockAmt)",
        "                endswitch",
        "    		}",
        "            else",
        "    		{",
        "                // Find the position of the currency to be shocked.",
        "                Try{",
        "                    R = CCYS.Find(CCY1)",
        "                    // Get the list of Spot Prices.",
        "                    Values = TBL.SPOTPRICE",
        "                    // Apply the shock to the currency value.                    ",
        "                    switch on ShockType",
        "                    case \"Absolute\"",
        "                    Values[R] = Values[R] + ShockAmt",
        "                    case \"Replace\"",
        "                    Values[R] = ShockAmt",
        "                    case \"Relative\"",
        "                    Values[R] = Values[R] * (1 + ShockAmt)",
        "                    endswitch",
        "                }",
        "                catch error",
        "                {",
        "                    Values = TBL.SPOTPRICE",
        "                }",
        "            }",
        "            switch on Recal",
        "            case 2 ",
        "                Numerix::RecalibrateFullModel()",
        "            case 1 ",
        "                Numerix::RecalibrateModel()",
        "            case \"true\"",
        "                 Numerix::RecalibrateModel()",
        "            default",
        "                if CloneModel",
        "                {",
        "                    //pull the ID of the hybrid model to be cloned in the scenario",
        "            	    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "            	    Cloned = Numerix::Clone(ModelID)",
        "                }",
        "                if Recal",
        "                {",
        "                    Numerix::RecalibrateModel()",
        "                }",
        "             endswitch ",
        "            //Re-create the FX Spot Matrix",
        "            Headers = {\"CURRENCY\" , \"SPOTPRICE\"}",
        "            TBL = Numerix::Table(FXSPOTMATRIXID.ID.LocalID & \"_FX_QUOTES_TABLE\", Headers , {CCYS, VALUES} )",
        "            Numerix::Create(TBL)",
        "            FXSPOTOBJECT = Numerix::Load(FXSPOTMATRIXID)",
        "            FXSPOTOBJECT.Data = FXSPOTMATRIXID.ID.LocalID & \"_FX_QUOTES_TABLE\"",
        "            FXSPOTOBJECT.ID = FXSPOTMATRIXID.ID.LocalID",
        "            Numerix::Create (FXSPOTOBJECT)",
        "            }",
        "        }",
        "    } ",
        "}",
        null,
        "scenario NxCust::FXVolShockByTenorAndDelta(VolSurfaceID, OptionTenor, OptionDelta, ShockAmt, ShockType = \"\",Recal , CloneModel = false)",
        "{",
        "    if !OptionTenor && !OptionDelta",
        "	{       ",
        "        insts = VolSurfaceID.Instruments.VolatilityQuote",
        "        ",
        "        switch on ShockType",
        "        case \"Absolue\"",
        "            NxRSF::AbsoluteShock(insts, ShockAmt)",
        "        case\"Relative\"",
        "            NxRSF::RelativeShock(insts, ShockAmt)",
        "        case \"Replace\"",
        "            NxRSF::ReplaceShock(insts, ShockAmt)",
        "        Default",
        "            NxRSF::AbsoluteShock(insts, ShockAmt)",
        "        endSwitch ",
        "	}",
        "    else",
        "	{",
        "        foreach S in VolSurfaceID",
        "		{",
        "            VOLINSTFilter = S.Instruments",
        "            VOLQTFilter = VOLINSTFilter.VolatilityQuote",
        null,
        "            QuotePrefix = VOLINSTFilter[1].VolatilityQuotePrefix",
        "            VOLQTFilterMD = Numerix::CreateMetaData(VOLQTFilter) == \"<QuotePrefix>::<Tenor>::<Delta>\"",
        "            if !OptionTenor :",
        "                MT = VOLQTFilter",
        "            else :",
        "                MT = (Numerix::Metadata(VOLQTFilterMD).Key(\"Tenor\").Canonical == OptionTenor.Canonical)",
        "            ",
        "            if !OptionDelta :",
        "                MD = VOLQTFilter",
        "            else :",
        "                MD =  (Numerix::Metadata(VOLQTFilterMD).Key(\"Delta\").Canonical == OptionDelta.Canonical)",
        "            ",
        "            VOLQTFilter1 = MT.key && MD.key",
        "            ",
        "            switch on ShockType",
        "            case \"Absolue\"",
        "                NxRSF::AbsoluteShock(VOLQTFilter1.Key, ShockAmt) ",
        "            case \"Relative\"",
        "                NxRSF::RelativeShock(VOLQTFilter1.Key, ShockAmt) ",
        "            case \"Replace\"",
        "                NxRSF::ReplaceShock(VOLQTFilter1.Key, ShockAmt) ",
        "            Default",
        "                NxRSF::AbsoluteShock(VOLQTFilter1.Key, ShockAmt) ",
        "            endSwitch",
        "        }",
        "    }",
        "    switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "        if Recal",
        "        {",
        "            Numerix::RecalibrateFullModel()",
        "        }",
        "     endswitch",
        "}",
        null,
        "scenario NxCust::IRCAPLETVolShock(VOLFilter, VolShock)",
        "{",
        "    foreach VolObj in VOLFilter ",
        "	{",
        "        Imp = VolObj.Implements",
        "        StkList = Numerix::CreateMetadata(Imp) = \"0<Value>Output\"",
        "        RowHS = VolObj.DatesOutput",
        "        ColHS = VolObj.StrikesOutput",
        "        table = {}",
        "        VolsList = {}",
        "        for y  = 1 to ColHS.Size ",
        "		{",
        "            header = StkList.key[y]",
        "            Vols = VolObj.Value(header)",
        "            Vols +=VolShock",
        "            VolsList @=  Vols",
        "        }",
        "        InterpMeth = VolObj.INTERPMETHODINPUT",
        "        InterpVar = VolObj.INTERPVARIABLEINPUT",
        "        ExtrapolationMeth = VolObj.EXTRAPOLATIONINPUT",
        "        VolatilityB = VolObj.VOLATILITYBASISINPUT",
        "        Conv = VolObj.CONVENTIONINPUT",
        "        VolsTableID = VolObj.LocalID & \"_Shocked_Matrix\"",
        "        ShockedMatrix = Numerix::Matrix(VolsTableID, ColHS.Transpose, RowHS, VolsList)",
        "        ShockedVolObj = {\"ID\": VolObj.LocalID,\"OBJECT\": \"MARKET DATA\",\"TYPE\": \"CAP VOLATILITY\",\"NOWDATE\": \"TODAY\",\"CURRENCY\": \"USD\",\"INTERP METHOD\": InterpMeth ,\"INTERP VARIABLE\": InterpVar,\"EXTRAPOLATION\": ExtrapolationMeth,\"VOLATILITY BASIS\": VolatilityB,\"DATA\": VolsTableID, \"CONVENTION\": Conv}",
        "        Numerix::Create(ShockedMatrix, NumerixObject(ShockedVolObj))",
        "    }",
        "    Numerix::RecalibrateModel() ",
        "}",
        null,
        "function NxCust::GetScenarioTable(Dimension=\"\")",
        "{",
        "    //load and scenario tables",
        "    IRScenariosTable = Numerix::Load(IRScenariosTable)",
        "    IRVolatilityScenariosTable = Numerix::Load(IRVolatilityScenariosTable)",
        "    FXScenariosTable = Numerix::Load(FXScenariosTable)",
        "    FXVolatilityScenariosTable = Numerix::Load(FXVolatilityScenariosTable)",
        "    ",
        "    if IRScenariosTable : IRTable = standardtable(IRScenariosTable)",
        "    if IRVolatilityScenariosTable : IRVolTable = standardtable(IRVolatilityScenariosTable)",
        "    if FXScenariosTable  : FXTable = standardtable(FXScenariosTable)",
        "    if FXVolatilityScenariosTable : FXVolTable = standardtable(FXVolatilityScenariosTable)",
        "    //CRSpreadScenariosTable = Numerix::Load(CRSpreadScenariosTable)",
        "    //EQSpotVolScenariosTable = Numerix::Load(EQSpotVolScenariosTable)",
        "    //EQSpotScenariosTable = Numerix::Load(EQSpotScenariosTable)",
        "    //FXSpotScenariosTable = Numerix::Load(FXSpotScenariosTable)",
        "    ",
        "    //combine scenario tables",
        "    ScenarioTable = {}",
        "    if IRScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, IRTable, \"IR\")",
        "    if IRVolatilityScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, IRVolTable, \"IRVol\")",
        "    if FXScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, FXTable, \"FX\")",
        "    if FXVolatilityScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, FXVolTable, \"FXVol\")",
        "    //if CRSpreadScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, CRSpreadScenariosTable, \"CR\")",
        "    //if EQSpotVolScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, EQSpotVolScenariosTable, \"EQVol\")",
        "    //if EQSpotScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, EQSpotScenariosTable, \"EQ\")",
        "    //if FXSpotScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, FXSpotScenariosTable, \"FX\")",
        null,
        "    if ScenarioTable",
        "    {   ",
        "	    //add a uniquie key identifier to ear row",
        "        Size = {1..ScenarioTable.Size} + 100000 //add a large number to ensure proper ordering of KeyValues",
        "	    KeyValue = \"KeyValue\".Copy(ScenarioTable.Size) + Size",
        "	    KeyScenarioTable = Numerix::Table(\"\", \"Key\", KeyValue) + ScenarioTable",
        "        KeyScenarioTable = Numerix::MetaData(KeyScenarioTable)",
        "		",
        "		if Dimension",
        "        {",
        "            ScenarioKeys = KeyScenarioTable.Key(\"Dimension\") == Dimension.type(\"String\")",
        "            //DimensionTable = KeyScenarioTable and ScenarioKeys",
        "            ",
        "            DimensionTable = {}",
        "            foreach Key in ScenarioKeys",
        "            {",
        "                RowNumber = KeyScenarioTable.Key.Find(Key)",
        "                if DimensionTable: DimensionTable = DimensionTable + KeyScenarioTable[RowNumber]",
        "        		else: DimensionTable = KeyScenarioTable[RowNumber]",
        "            }",
        "            DimensionTable = Numerix::MetaData(DimensionTable)",
        "            return DimensionTable",
        "        }",
        "		",
        "        return KeyScenarioTable",
        "    }",
        "    return \"\"",
        "}",
        null,
        "scenario NxCust::FXVolShockByTenorAndDelta(VolSurfaceID, OptionTenor, OptionDelta, ShockAmt, ShockType = \"\",Recal , CloneModel = false)",
        "{",
        "    if !OptionTenor && !OptionDelta",
        "	{       ",
        "        insts = VolSurfaceID.Instruments.VolatilityQuote",
        "        ",
        "        switch on ShockType",
        "        case \"Absolue\"",
        "            NxRSF::AbsoluteShock(insts, ShockAmt)",
        "        case\"Relative\"",
        "            NxRSF::RelativeShock(insts, ShockAmt)",
        "        case \"Replace\"",
        "            NxRSF::ReplaceShock(insts, ShockAmt)",
        "        Default",
        "            NxRSF::AbsoluteShock(insts, ShockAmt)",
        "        endSwitch ",
        "	}",
        "    else",
        "	{",
        "        foreach S in VolSurfaceID",
        "		{",
        "            VOLINSTFilter = S.Instruments",
        "            VOLQTFilter = VOLINSTFilter.VolatilityQuote",
        null,
        "            QuotePrefix = VOLINSTFilter[1].VolatilityQuotePrefix",
        "            VOLQTFilterMD = Numerix::CreateMetaData(VOLQTFilter) == \"<QuotePrefix>::<Tenor>::<Delta>\"",
        "            if !OptionTenor :",
        "                MT = VOLQTFilter",
        "            else :",
        "                MT = (Numerix::Metadata(VOLQTFilterMD).Key(\"Tenor\").Canonical == OptionTenor.Canonical)",
        "            ",
        "            if !OptionDelta :",
        "                MD = VOLQTFilter",
        "            else :",
        "                MD =  (Numerix::Metadata(VOLQTFilterMD).Key(\"Delta\").Canonical == OptionDelta.Canonical)",
        "            ",
        "            VOLQTFilter1 = MT.key && MD.key",
        "            ",
        "            switch on ShockType",
        "            case \"Absolue\"",
        "                NxRSF::AbsoluteShock(VOLQTFilter1.Key, ShockAmt) ",
        "            case \"Relative\"",
        "                NxRSF::RelativeShock(VOLQTFilter1.Key, ShockAmt) ",
        "            case \"Replace\"",
        "                NxRSF::ReplaceShock(VOLQTFilter1.Key, ShockAmt) ",
        "            Default",
        "                NxRSF::AbsoluteShock(VOLQTFilter1.Key, ShockAmt) ",
        "            endSwitch",
        "        }",
        "    }",
        "    switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "        if Recal",
        "        {",
        "            Numerix::RecalibrateFullModel()",
        "        }",
        "     endswitch",
        "}",
        null,
        "scenario NxCust::IRSwaptionVolShock(Filter, IRVolInst, ShockAmt, ShockType = \"\", Recal = 2, CloneModel=false)",
        "{",
        "    if not IRVolInst then Inst = filter.Instruments else Inst = IRVolInst endif",
        "    ",
        "    Insts = Filter.Instruments",
        "    ",
        "    switch on ShockType",
        "    case \"Relative\" ",
        "        NxRSF::RelativeShock(Insts.VolatilityQuote,  0) ",
        "        NxRSF::RelativeShock(Inst.VolatilityQuote,  Inst.ScalingFactor*ShockAmt) ",
        "    case \"Replace\"",
        "        NxRSF::ReplaceShock(Insts.VolatilityQuote,  0) ",
        "        NxRSF::ReplaceShock(Inst.VolatilityQuote,  Inst.ScalingFactor*ShockAmt) ",
        "    case \"Absolute\"",
        "        NxRSF::AbsoluteShock(Insts.VolatilityQuote,  0) ",
        "        NxRSF::AbsoluteShock(Inst.VolatilityQuote,  Inst.ScalingFactor*ShockAmt) ",
        "    Default",
        "        NxRSF::AbsoluteShock(Insts.VolatilityQuote,  0) ",
        "        NxRSF::AbsoluteShock(Inst.VolatilityQuote,  Inst.ScalingFactor*ShockAmt) ",
        "    end switch",
        "    ",
        "    switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "        if Recal",
        "        {",
        "            Numerix::RecalibrateModel()",
        "        }",
        "     endswitch",
        "}",
        null,
        "scenario NxCust::FXSpotMatrixShock(CCY, ShockAmt, Recal, ShockType)",
        "{",
        "    // Find the spot matrix object.",
        "    FXSPOTMATRIXIDS = (Numerix::Registry.Key(\"TYPE\") == \"FXSPOTMATRIX\")",
        "	// If found...",
        "    if FXSPOTMATRIXIDS",
        "	{",
        "        foreach CCY1 in CCY",
        "        {",
        "            Foreach FXSPOTMATRIXID in FXSPOTMATRIXIDS",
        "            {",
        "            // Get the base currency.",
        "            BaseCCY = FXSPOTMATRIXID.Currency",
        "            // Get the ID of the Quotes Table.",
        "            QTTBLID = FXSPOTMATRIXID.DATAInput",
        "    		// Load the Table.",
        "    		TBL = Numerix::Load (QTTBLID)",
        "    		// Get the list of Currencies.",
        "    		CCYS = TBL.CURRENCY",
        "    		// Check if currency being shocked is the base currency. ",
        "    		if (CCY1 == BaseCCY)",
        "    		{",
        "                // Get the list of Spot Prices and perturb all of them.",
        "                Values = TBL.SPOTPRICE",
        "                //Bump size selection",
        "                switch on ShockType",
        "                case \"Absolute\"",
        "                Values = Values + ShockAmt",
        "                case \"Replace\"",
        "                Values = ShockAmt",
        "                case \"Relative\"",
        "                Values = Values * (1 + ShockAmt)",
        "                endswitch",
        "    		}",
        "            else",
        "    		{",
        "                // Find the position of the currency to be shocked.",
        "                Try{",
        "                    R = CCYS.Find(CCY1)",
        "                    // Get the list of Spot Prices.",
        "                    Values = TBL.SPOTPRICE",
        "                    // Apply the shock to the currency value.                    ",
        "                    switch on ShockType",
        "                    case \"Absolute\"",
        "                    Values[R] = Values[R] + ShockAmt",
        "                    case \"Replace\"",
        "                    Values[R] = ShockAmt",
        "                    case \"Relative\"",
        "                    Values[R] = Values[R] * (1 + ShockAmt)",
        "                    endswitch",
        "                }",
        "                catch error",
        "                {",
        "                    Values = TBL.SPOTPRICE",
        "                }",
        "            }",
        "            //Re-create the FX Spot Matrix",
        "            Headers = {\"CURRENCY\" , \"SPOTPRICE\"}",
        "            TBL = Numerix::Table(FXSPOTMATRIXID.ID.LocalID & \"_FX_QUOTES_TABLE\", Headers , {CCYS, VALUES} )",
        "            Numerix::Create(TBL)",
        "            FXSPOTOBJECT = Numerix::Load(FXSPOTMATRIXID)",
        "            FXSPOTOBJECT.Data = FXSPOTMATRIXID.ID.LocalID & \"_FX_QUOTES_TABLE\"",
        "            FXSPOTOBJECT.ID = FXSPOTMATRIXID.ID.LocalID",
        "            Numerix::Create (FXSPOTOBJECT)",
        "            }",
        "        }",
        "    } ",
        "}",
        null,
        "scenario NxCust::FXVolShockByTenorAndDelta(VolSurfaceID, OptionTenor, OptionDelta, ShockAmt, ShockType = \"\",Recal , CloneModel = false)",
        "{",
        "    if !OptionTenor && !OptionDelta",
        "	{       ",
        "        insts = VolSurfaceID.Instruments.VolatilityQuote",
        "        ",
        "        switch on ShockType",
        "        case \"Absolue\"",
        "            NxRSF::AbsoluteShock(insts, ShockAmt)",
        "        case\"Relative\"",
        "            NxRSF::RelativeShock(insts, ShockAmt)",
        "        case \"Replace\"",
        "            NxRSF::ReplaceShock(insts, ShockAmt)",
        "        Default",
        "            NxRSF::AbsoluteShock(insts, ShockAmt)",
        "        endSwitch ",
        "	}",
        "    else",
        "	{",
        "        foreach S in VolSurfaceID",
        "		{",
        "            VOLINSTFilter = S.Instruments",
        "            VOLQTFilter = VOLINSTFilter.VolatilityQuote",
        null,
        "            QuotePrefix = VOLINSTFilter[1].VolatilityQuotePrefix",
        "            VOLQTFilterMD = Numerix::CreateMetaData(VOLQTFilter) == \"<QuotePrefix>::<Tenor>::<Delta>\"",
        "            if !OptionTenor :",
        "                MT = VOLQTFilter",
        "            else :",
        "                MT = (Numerix::Metadata(VOLQTFilterMD).Key(\"Tenor\").Canonical == OptionTenor.Canonical)",
        "            ",
        "            if !OptionDelta :",
        "                MD = VOLQTFilter",
        "            else :",
        "                MD =  (Numerix::Metadata(VOLQTFilterMD).Key(\"Delta\").Canonical == OptionDelta.Canonical)",
        "            ",
        "            VOLQTFilter1 = MT.key && MD.key",
        "            ",
        "            switch on ShockType",
        "            case \"Absolue\"",
        "                NxRSF::AbsoluteShock(VOLQTFilter1.Key, ShockAmt) ",
        "            case \"Relative\"",
        "                NxRSF::RelativeShock(VOLQTFilter1.Key, ShockAmt) ",
        "            case \"Replace\"",
        "                NxRSF::ReplaceShock(VOLQTFilter1.Key, ShockAmt) ",
        "            Default",
        "                NxRSF::AbsoluteShock(VOLQTFilter1.Key, ShockAmt) ",
        "            endSwitch",
        "        }",
        "    }",
        "    switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "        if Recal",
        "        {",
        "            Numerix::RecalibrateFullModel()",
        "        }",
        "     endswitch",
        "}",
        null,
        "function NxCust::ReduceSet2(PropertySet, LookupKey, LookupColumn, SecondLookupColumn=\"\")",
        "{",
        null,
        "    SectorAdjustedSet = PropertySet.Key(LookupColumn) == LookupKey",
        "    if SecondLookupColumn",
        "    {",
        "        SectorAdjustedSet2 = PropertySet.Key(SecondLookupColumn) == LookupKey",
        "        SectorAdjustedSet = SectorAdjustedSet & SectorAdjustedSet2",
        "    }",
        "    ",
        "    MarketData = MarketDataSet2 && SectorAdjustedSet",
        "    ",
        "    return MarketData",
        "}",
        null,
        "function NxCust::ReduceSet1(PropertySet, LookupKey, LookupColumn, SecondLookupColumn=\"\")",
        "{",
        null,
        "    SectorAdjustedSet = PropertySet.Key(LookupColumn) == LookupKey",
        "    if SecondLookupColumn",
        "    {",
        "        SectorAdjustedSet2 = PropertySet.Key(SecondLookupColumn) == LookupKey",
        "        SectorAdjustedSet = SectorAdjustedSet & SectorAdjustedSet2",
        "    }",
        "    ",
        "    MarketData = MarketDataSet1 && SectorAdjustedSet",
        "    ",
        "    return MarketData",
        "}",
        null,
        null,
        "function standardtable(table)",
        "{",
        "    table_column = {}",
        "    standard_header = {\"ScenarioName\",\"Scenario Description\",",
        "        \"Report Type\",\"Bucket Start\",\"Bucket End\",\"Shock Amt\",",
        "        \"Shock Type\",\"Currency\",\"Base Currency\",\"Term Currency\",",
        "        \"Risk Factor\",\"Recalibrate Models\",\"Instrument Type\",",
        "        \"Currency Pair\",\"Swap Bucket\",\"Option Bucket\",\"Strike\",\"Tenor\",\"Vol\",\"Vol Select\"}",
        "    table_header = Numerix::TableColumnHeaders(table.id)",
        null,
        "    //standardtable_header = Numerix::TableHeaders(standard_header)",
        "    standardtable_colnum = standard_header.Size //Numerix::TableColumnCount(standard_header)",
        "    table_rownum = Numerix::TableRowCount(table.id)",
        "    ",
        "    standtable = {}",
        "    //target_value = {}",
        "    newtable = {}",
        "    value = {}",
        null,
        "    for i = 1 to standardtable_colnum",
        "        target_header = standard_header[i]",
        "        col = table_header.find(target_header)",
        "    ",
        "        if table_header.find(target_header) then",
        "            target_value = {}",
        "            for j = 1 to table_rownum",
        "                //add default value for \"Vol Select\" = \"Both\"",
        "                if target_header = \"Vol Select\" and Numerix::TableValue(table.id,col,j) = \"\" then   ",
        "                    target_value &= \"Both\"",
        "                else",
        "                    target_value &= Numerix::TableValue(table.id,col,j)",
        "                endif    ",
        "            next",
        "        endif   ",
        "            value @= target_value.transpose",
        "    next ",
        "            ",
        "    newtable = Numerix::Table(\"newtable\",standard_header, value)",
        "    return newtable",
        "}",
        null,
        "function valueinrptccy(d, ccy_gks, ccy_rpt, fxspot)",
        "{",
        "    if ccy_rpt.Canonical = \"Null\" then",
        "        fxspot = \"\"",
        "        d_rpt = \"\"",
        "    elseif ccy_gks = ccy_rpt then",
        "        d_rpt = d",
        "    else ",
        "        d_rpt = d / fxspot",
        "    endif",
        "    ",
        "    return d_rpt",
        "}",
        null,
        "function getrptccyfxspot(ccy_gks,ccy_rpt,quotetype)",
        "{",
        "    if ReportingCurrency.Canonical != \"Null\" then ",
        "    ",
        "        if NxCust::KeyExists(\"Settings.CurrencyPair\", ccy_rpt + ccy_gks) then",
        "            fxspot = NxStd::GetFXSpot(ccy_rpt, ccy_gks,quotetype)",
        "        else",
        "            fxspot = NxStd::GetFXSpot(ccy_rpt, ccy_gks,quotetype)        ",
        "        endif ",
        "    else",
        "        fxspot = \"\"",
        "    endif",
        "            ",
        "    return fxspot",
        "}",
        null,
        "function getfwd_scen_ccypair(scen_ccypair)",
        "{",
        "    // This function determine the foreign currency of fxforward curve which is dominated by USD.",
        "    if scen_ccypair[1..3] = \"USD\" then",
        "        ccy = scen_ccypair[4..6]",
        "    else",
        "        ccy = scen_ccypair[1..3]   ",
        "    endif",
        "    ",
        "    return ccy",
        "}",
        null,
        "//=============================================================================",
        "// PROJECT SPECIFIC CUSTOM FUNCTIONS AND MACROS",
        "//=============================================================================",
        null,
        "// Return true if the specified key exists in the table.",
        null,
        "function NxCust::KeyExists(tableId, rowInput)",
        "{",
        "    call = Numerix::Load(TableId)",
        "    i = call.Key.Find(rowInput.Canonical)",
        "	",
        "    if i :",
        "        return true",
        null,
        "    return false",
        "}",
        null,
        "// Picks value based on whether canonical 'a' equals canonical 'b'.",
        "FUNCTION NxStd::IsEqual(a, b, y, z = \"\")",
        "{",
        "    IF a.Canonical == b.Canonical THEN",
        "        RETURN y",
        "    ENDIF",
        "    RETURN z",
        "}",
        null,
        "function NxStd::GetFXSpot(BaseCcy, TermCcy,Quotetype)",
        "{",
        "    if TermCcy == BaseCcy then",
        "        FXSpotRate1 = 1",
        "    else",
        "        FXSpotRate2 = NxCust::FXSpotID(TermCcy, BaseCcy).implementedobject",
        "        FXSpotRate1 = FXSpotRate2.view(BaseCcy)[FXSpotRate2.view(\"SpotFX\").find(TermCcy)]",
        "    endif",
        "        ",
        "    return FXSpotRate1",
        null,
        "}",
        null,
        "// Returns the ID of FX Spot object. Stable for a given currency pair.",
        null,
        "function NxCust::FXSpotID(fx_base_currency, fx_term_currency, fx_variant = \"\")",
        "{",
        "	return \"NXGLOBAL\"._FXSpotID(Numerix::BaseMarket, QuoteType, fx_base_currency, fx_term_currency, fx_variant)",
        "}",
        null,
        "// In general, if there's a logic, a high preference is to put it in the script instead of a single line logic in CAIL input/output",
        "// This has the benefit of easier sharing similar logic and easy to locate the exception when it happens.",
        "// Below is the utility functions that will be shared across all FX deals.",
        null,
        "// Create a single payment log",
        "constfunction SnT::createSinglePaymentLog(settlementDate, payment)",
        "{",
        "    BaseCurrencyLogTable = Numerix::Table(\"BaseCurrencyLogTable_\" + Numerix::UniqueNumber, ",
        "        {\"PAYMENTDATE\", \"PAYMENTAMOUNT\"}, {settlementDate, payment})",
        null,
        "    id= Numerix::Create(BaseCurrencyLogTable)",
        "    return id",
        "}",
        null,
        "// Create a single Greeks log",
        "constfunction SnT::createSingleGreeksLog(Ccy, Value)",
        "{",
        "    GreeksTable = Numerix::Table(\"GreeksTable_\" + Numerix::UniqueNumber, ",
        "        {\"CURVE CURRENCY\", \"VALUE\"}, {Ccy, Value})",
        null,
        "    id= Numerix::Create(GreeksTable)",
        "    return id",
        "}",
        null,
        "// Create a single Greeks log for IR",
        "constfunction SnT::createSingleIRGreeksLog(Curve,Ccy, Value)",
        "{",
        "    GreeksTable = Numerix::Table(\"GreeksTable_\" + Numerix::UniqueNumber, ",
        "        {\"CURVEID\",\"GREEKCCY\", \"GREEKVALUE\"}, {Curve, Ccy, Value})",
        null,
        "    id= Numerix::Create(GreeksTable)",
        "    return id",
        "}",
        null,
        "// Create a single Greeks log for cr",
        "constfunction SnT::createSingleCRGreeksLog(AssetName, Value)",
        "{",
        "    GreeksTable = Numerix::Table(\"GreeksTable_\" + Numerix::UniqueNumber, ",
        "        {\"ASSET TNAME\", \"GREEK VALUE\"}, {AssetName, Value})",
        null,
        "    id= Numerix::Create(GreeksTable)",
        "    return id",
        "}",
        null,
        "constfunction NxCust::Sum(value)",
        "{",
        "    values = 0",
        "    for i = 1 to value.Size",
        "        values += value[i]",
        "    next ",
        "    return values",
        "}",
        null,
        null,
        "// Create the parameter ",
        "// to compute the fees for the resolve function to the CAIL template",
        "// CONSOLIDATEDPAYMENT or CASHPAYMENT",
        "function SnT::createCashPaymentParameters(consolidatedPayment, netting, includeValueDate, settlementCurrency, DiscountCurve=\"\", BaseDiscountCurve=\"\",TermDiscountCurve=\"\")",
        "{",
        "    consolidatedPaymentTable1 = Numerix::Table(\"ConsolidatedPaymentParameters\", ",
        "        {\"NAME\", \"VALUE\"}, ",
        "        {{\"Cash flow Table\", \"Netting\", \"Include Value Date\", \"Currency\", \"Discount Curve\", \"Base Discount Curve\", \"Term Discount Curve\"}, ",
        "         {consolidatedPayment, netting, includeValueDate, settlementCurrency, DiscountCurve, BaseDiscountCurve, TermDiscountCurve}})",
        "    id= Numerix::Create(consolidatedPaymentTable1)",
        "    return id",
        "}",
        null,
        "// Return 0 if the option has expired",
        "function GetOutputAccountForTermination(nonTerminateValue, includeValueDate = true)",
        "{",
        "	if (ValuationDate > terminationEffectiveDate) or (includeValueDate and ValuationDate = terminationEffectiveDate) then",
        "		return 0",
        "	endif",
        "	// if the nonTerminatedValue is not a numeric type, it will be the ID of the output of the implementation output ",
        "	if nonTerminateValue.type=\"INTEGER\" or nonTerminateValue.type=\"DOUBLE\" then",
        "		r= nonTerminateValue",
        "	else",
        "		r= implementedObject.View(nonTerminateValue)",
        "	endif",
        "	",
        "	return r",
        "}",
        null,
        "// Below is a shorthand to resemble the old nxel if condition.  This is considered to be deprecated as most if statement should ",
        "// NOT be put in the CAIL template but in script",
        "function IF1(condition, truereturn, falsereturn)  ",
        "BEGIN",
        "	IF condition THEN",
        "		return truereturn",
        "	ENDIF",
        "	return falsereturn",
        "END",
        null,
        "function getCMSSpreadCalibrationInstruments(ccy, CMSTenor1, CMSTenor2, Maturity)  ",
        "BEGIN",
        "	instruments= {}",
        "	instruments @= {\"1Y\", CMSTenor1, \"ATM\"}",
        "	instruments @= {\"1Y\", CMSTenor2, \"ATM\"}",
        "	table = Numerix::Table(\"table_\" + Numerix::UniqueNumber, {\"Option Tenor\", \"Swap Tenor\", \"Strike\"}, instruments.Transpose) ",
        "	Numerix::Create(table)",
        "	return table.ID",
        "END",
        null,
        "function getIRIndexElement(irindex, i)  ",
        "BEGIN",
        "	temp= irindex.Split(\"-\")",
        "	return temp[i]",
        "END",
        null,
        "function CreateOptionSchedule(id, tenor, startDate, endDate,  ",
        "	noticePeriod, fixCalendar, fixConvention, ",
        "	paymentLag, payCalendar, payConvention, accrualCalendar, accrualConvention)",
        "BEGIN",
        "	IF Numerix::Exists(tenor) THEN",
        "		Return CreateOptionScheduleObj(id, tenor)",
        "	ENDIF",
        "    obj  = ",
        "        {",
        "            {\"ID\"     : id},",
        "            {\"NAME\"   : id},",
        "            {\"OBJECT\" : \"EVENTS\"},",
        "            {\"TYPE\"   : \"OPTION SCHEDULE\"},",
        "            {\"StartDate\" : startDate},",
        "            {\"EndDate\" : endDate},",
        "		    {\"freq\" : tenor},",
        "            {\"noticePeriod\" : noticePeriod},",
        "            {\"fixCalendar\" : fixCalendar},",
        "            {\"fixConvention\" : fixConvention},",
        "            {\"payCalendar\" : payCalendar},",
        "            {\"payConvention\" : payConvention},",
        "            {\"paymentLag\" : paymentLag},",
        "            {\"accrualCalendar\" : accrualCalendar},",
        "            {\"accrualConvention\" : accrualConvention}",
        "        }",
        null,
        "    // Put in registry and return ID.",
        " ",
        "    Numerix::Create(Numerix::Object(obj))",
        "    RETURN obj.ID	",
        "END",
        null,
        "function CreateOptionScheduleObj(id, dates)",
        "BEGIN",
        null,
        "    obj  = ",
        "        {",
        "            {\"ID\"     : id},",
        "            {\"NAME\"   : id},",
        "            {\"OBJECT\" : \"EVENTS\"},",
        "            {\"TYPE\"   : \"Option SCHEDULE\"},",
        "            {\"DATES\" : dates}",
        "        }",
        null,
        "    // Put in registry and return ID.",
        "    Numerix::Create(Numerix::Object(obj))",
        "    RETURN obj.ID",
        "END",
        null,
        "function CreateInterestSchedule(id, tenor, startDate, endDate, basis, ",
        "	noticePeriod, fixCalendar, fixConvention, ",
        "	paymentLag, payCalendar, payConvention, accrualCalendar, accrualConvention)",
        "BEGIN",
        "	IF Numerix::Exists(tenor) THEN",
        "		Return CreateInterestScheduleObj(id, tenor)",
        "	ENDIF",
        "    obj  = ",
        "        {",
        "            {\"ID\"     : id},",
        "            {\"NAME\"   : id},",
        "            {\"OBJECT\" : \"EVENTS\"},",
        "            {\"TYPE\"   : \"INTEREST DATES\"},",
        "            {\"StartDate\" : startDate},",
        "            {\"EndDate\" : endDate},",
        "            {\"Basis\" : basis},",
        "            {\"freq\" : tenor},",
        "            {\"noticePeriod\" : noticePeriod},",
        "            {\"fixCalendar\" : fixCalendar},",
        "            {\"fixConvention\" : fixConvention},",
        "            {\"payCalendar\" : payCalendar},",
        "            {\"payConvention\" : payConvention},",
        "            {\"paymentLag\" : paymentLag},",
        "            {\"accrualCalendar\" : accrualCalendar},",
        "            {\"accrualConvention\" : accrualConvention}",
        "        }",
        null,
        "    // Put in registry and return ID.",
        " ",
        "    Numerix::Create(Numerix::Object(obj))",
        "    RETURN obj.ID	",
        "END",
        null,
        "function CreateInterestScheduleObj(id, dates)",
        "BEGIN",
        "    obj  = ",
        "        {",
        "            {\"ID\"     : id},",
        "            {\"NAME\"   : id},",
        "            {\"OBJECT\" : \"EVENTS\"},",
        "            {\"TYPE\"   : \"INTEREST DATES\"},",
        "            {\"DATES\" : dates}",
        "        }",
        null,
        "    // Put in registry and return ID.",
        " ",
        "    Numerix::Create(Numerix::Object(obj))",
        "    RETURN obj.ID",
        "END",
        null,
        "function CreateInterestScheduleObj2(id, dates)",
        "BEGIN",
        "    try {",
        "        basis = id.BasisInput",
        "    } catch {",
        "        basis = \"\"",
        "    }",
        "    obj  = ",
        "        {",
        "            {\"ID\"     : id},",
        "            {\"NAME\"   : id},",
        "            {\"OBJECT\" : \"EVENTS\"},",
        "            {\"TYPE\"   : \"INTEREST DATES\"},",
        "            {\"DATES\" : dates},",
        "            {\"Basis\" : basis}",
        "        }",
        null,
        "    // Put in registry and return ID.",
        " ",
        "    RETURN Numerix::Create(Numerix::Object(obj))",
        "END",
        null,
        "function CreateRangeAccrualScheduleObj(id, dates)",
        "BEGIN",
        "    obj  = ",
        "        {",
        "            {\"ID\"     : id},",
        "            {\"NAME\"   : id},",
        "            {\"OBJECT\" : \"EVENTS\"},",
        "            {\"TYPE\"   : \"RANGE ACCRUAL DATES\"},",
        "            {\"DATES\" : dates},",
        "            {\"ObservationHolidayConvention\" : id.ObservationHolidayConventionInput},",
        "            {\"AccrualCalendar\" : id.AccrualCalendarInput},",
        "            {\"AccrualConvention\" : id.AccrualConventionInput},",
        "            {\"ObsCutoffPeriod\" : id.ObsCutoffPeriodInput},",
        "            {\"ObsFixingLag\" : id.ObsFixingLagInput},",
        "            {\"EndDateObservation\" : id.EndDateObservationInput}",
        "        }",
        null,
        "    // Put in registry and return ID.",
        " ",
        "    Numerix::Create(Numerix::Object(obj))",
        "    RETURN obj.ID",
        "END",
        null,
        "function CreateRangeAccrualScheduleObj2(id, dates)",
        "BEGIN",
        "    try {",
        "        basis = id.BasisInput",
        "    } catch {",
        "        basis = \"\"",
        "    }",
        "    obj  = ",
        "        {",
        "            {\"ID\"     : id},",
        "            {\"NAME\"   : id},",
        "            {\"OBJECT\" : \"EVENTS\"},",
        "            {\"TYPE\"   : \"RANGE ACCRUAL DATES\"},",
        "            {\"DATES\" : dates},",
        "            {\"ObservationHolidayConvention\" : id.ObservationHolidayConventionInput},",
        "            {\"AccrualCalendar\" : id.AccrualCalendarInput},",
        "            {\"AccrualConvention\" : id.AccrualConventionInput},",
        "            {\"ObsCutoffPeriod\" : id.ObsCutoffPeriodInput},",
        "            {\"ObsFixingLag\" : id.ObsFixingLagInput},",
        "            {\"EndDateObservation\" : id.EndDateObservationInput},",
        "            {\"Basis\" : basis}",
        "        }",
        null,
        "    // Put in registry and return ID.",
        " ",
        "    RETURN Numerix::Create(Numerix::Object(obj))",
        "END",
        null,
        "function GetArray2Number(tableID) ",
        "BEGIN ",
        "IF tableID.type == \"STRING\" THEN ",
        "    table = NumerixLoad(tableID) ",
        "    columns = table.ColumnHeaders.Canonical ",
        "    tablevalues = table.VALUES.Canonical ",
        "    Return tablevalues[1] ",
        "ELSE ",
        "    Return tableID ",
        "ENDIF ",
        "END ",
        null,
        "function GetSolverBound(tableID, RowInput, Direction) ",
        "BEGIN ",
        "flag = FALSE ",
        "call_obj = Numerix::Load(tableID) ",
        "FOREACH row IN call_obj DO ",
        "IF row.Key.Canonical = RowInput.Canonical THEN ",
        "    flag = True ",
        "    IF Direction = 1 THEN ",
        "        Bound = row.UpperBound.Canonical ",
        "        Reference = row.UpperBoundReference.Canonical ",
        "    ELSE ",
        "        Bound = row.LowerBound.Canonical ",
        "        Reference = row.LowerBoundReference.Canonical ",
        "    ENDIF     ",
        "    IF Reference.type == \"STRING\" THEN ",
        "        Reference = GetArray2Number(Reference) ",
        "    ENDIF ",
        "ENDIF ",
        "NEXT ",
        "IF Flag Then",
        "    RETURN Bound*Reference",
        "ELSE ",
        "    RETURN IF Direction=1 ? Numerix::Double(9999) : Numerix::Double(0.01)",
        "ENDIF ",
        "END",
        null,
        "function GetArrayMultiplier(tableID, table2ID) ",
        "BEGIN ",
        "IF tableID.type == \"STRING\" THEN ",
        "    table = NumerixLoad(tableID) ",
        "    columns = table.ColumnHeaders.Canonical ",
        "    tablevalues = table.VALUES.Canonical ",
        "    tableflag = TRUE",
        "ELSE ",
        "    tablevalues = tableID",
        "    tableflag = FALSE",
        "ENDIF ",
        null,
        "IF table2ID.type == \"STRING\" THEN ",
        "    table2 = NumerixLoad(table2ID) ",
        "    columns = table2.ColumnHeaders.Canonical ",
        "    table2values = table2.VALUES.Canonical ",
        "    table2flag = TRUE",
        "ELSE ",
        "    table2values = table2ID",
        "    table2flag = FALSE",
        "ENDIF ",
        null,
        "IF tableflag THEN    ",
        "    FOR i=1 to tablevalues.size",
        "        IF table2flag THEN ",
        "            tablevalues[i] *= table2values[i]",
        "        ELSE ",
        "            tablevalues[i] *= table2values",
        "        ENDIF ",
        "    NEXT",
        "    table = NumerixTable(\"table_\"+ NumerixUniqueNumber, {\"VALUE\"}, {tablevalues})",
        "ELSE ",
        "    IF table2flag THEN",
        "        FOR i=1 to table2values.size",
        "                table2values[i] *= tablevalues",
        "        NEXT ",
        "    table = NumerixTable(\"table_\"+ NumerixUniqueNumber, {\"VALUE\"}, {table2values})",
        "    ELSE",
        "        RETURN Numerix::Double(tablevalues*table2values)",
        "    ENDIF ",
        "ENDIF ",
        null,
        "    NumerixCreate(table)",
        "    RETURN table.ID",
        "END ",
        null,
        "//Generate Foreign Ccy from basket table and currency table",
        "// tableID = Basket table or currencytable",
        "//table2ID = currencytable",
        "function GenerateForeignCurrencyFromTable(DomesticCurrency, tableID, table2ID) ",
        "BEGIN",
        "// Verify input ",
        "    table = Numerix::Load(tableID) ",
        "    table2 = Numerix::Load(table2ID)",
        "    IF NOT table AND NOT table2 THEN",
        "        Numerix::Fatal(\"No table NOT found\") ",
        "        RETURN \"\"",
        "    ENDIF",
        "    ",
        "    Currencies = {}",
        "    IF table THEN",
        "        columns = table.ColumnHeaders.Canonical",
        "        IF NOT columns.Find(\"CURRENCY\") THEN",
        "            Numerix::Fatal(\"Currency NOT found in \\\"\" + tableID + \"\\\" table\") ",
        "            RETURN \"\"",
        "        ENDIF",
        null,
        "        IF columns.Find(\"FOREIGNCURRENCY\") THEN",
        "            DoubleCurrencies = TRUE",
        "        ELSE",
        "            DoubleCurrencies = FALSE",
        "        ENDIF",
        null,
        "// Build currency table. ",
        null,
        "        FOREACH row in table DO",
        "            IF row.Currency <> DomesticCurrency AND NOT row.Currency in Currencies  THEN",
        "                Currencies &= {row.Currency}",
        "            ENDIF",
        "            IF DoubleCurrencies THEN",
        "                IF row.ForeignCurrency <> DomesticCurrency AND NOT Currencies.FIND(row.ForeignCurrency) THEN",
        "                    Currencies &= {row.ForeignCurrency}",
        "                ENDIF",
        "            ENDIF",
        "        NEXT",
        "    ENDIF",
        null,
        "    IF table2 THEN",
        "        columns = table2.ColumnHeaders.Canonical",
        "        IF NOT columns.Find(\"CURRENCY\") THEN",
        "            Numerix::Fatal(\"Currency NOT found in \\\"\" + table2ID + \"\\\" table\") ",
        "            RETURN \"\"",
        "        ENDIF",
        "        FOREACH row in table2 DO",
        "            IF row.Currency <> DomesticCurrency AND NOT row.Currency in Currencies  THEN",
        "                Currencies &= {row.Currency}",
        "            ENDIF",
        "        NEXT",
        "    ENDIF",
        null,
        "    IF Currencies == {} THEN",
        "     //   NumerixFatal(\"Currencies in \\\"\" + tableID + \"\\\" table are the same as domestic currency.\") ",
        "        RETURN \"\"",
        "    ENDIF",
        "    table = Numerix::Table(\"table\"+ NumerixUniqueNumber, {\"Currency\"}, {Currencies}) ",
        "    Numerix::Create(table) ",
        "    RETURN table.id",
        "END",
        null,
        null,
        "function CreateIRFXCorrelations(fxcorrelation, defaultValue)",
        "BEGIN",
        "    headers = { \"DOMESTIC MODEL\",\"FOREIGN 1 MODEL\",\"FOREIGN 2 MODEL\", \"FX 1 MODEL\",\"FX 2 MODEL\"}",
        "    ncols = headers.Size",
        "    nrows = ncols",
        "    mat = {}",
        null,
        "//Initialize the matrix",
        "    FOR c = 1 TO ncols",
        "        col = {1..nrows}",
        "        mat @= col",
        "        mat[c][c] = 1.0",
        "        FOR r = 1 TO c - 1",
        "            mat[c][r] = Numerix::Double(defaultValue)",
        "            mat[r][c] = Numerix::Double(defaultValue)",
        "        NEXT",
        "     NEXT",
        "     mat[4][5] = Numerix::Double(fxcorrelation)",
        "     mat[5][4] = Numerix::Double(fxcorrelation)",
        "    // Create correlation matrix object.",
        "                ",
        "    corr = Numerix::Matrix(\"Correlations_\" + NumerixUniqueNumber, headers, headers, mat)",
        "    Numerix::Create(corr)",
        "    return corr.ID",
        "END",
        null,
        "function GetCorrelation(tableID, fixings1ID, fixings2ID)",
        "BEGIN",
        "      table = NumerixRegistry(tableID) ",
        null,
        "        IF NOT table THEN",
        "            NumerixFatal(\"No table NOT found\") ",
        "            RETURN \"\"",
        "        ENDIF",
        null,
        "        columns =  table.IndicesOutput.Canonical ",
        "        name = Numerix::Resolve(fixings1ID) + \":\" +  Numerix::Resolve(fixings2ID)",
        "		IF columns = name.Canonical THEN",
        "			value = table.CorrelationOutput[1]",
        "		ELSE",
        "			value = table.CorrelationOutput[columns.Find(name)]",
        "		ENDIF",
        "		RETURN  Numerix::Double(value)",
        "END",
        null,
        "function HasFixingsOnValueDate(objectID, dateValue)",
        "BEGIN",
        "     date = dateValue // Create local version that can be queried",
        null,
        "     // Verify object.",
        "	 ",
        "    fixings = NumerixRegistry(objectID)",
        "    IF NOT fixings THEN",
        "        NumerixFatal(\"\\\"\" + objectID + \"\\\" fixings object not found\")",
        "        RETURN \"\"",
        "    ENDIF",
        "    IF date.Type <> \"DATE\" THEN",
        "        date = NumerixDate(date)",
        "        IF date.Type <> \"DATE\" THEN",
        "            NumerixDate(\"\\\"\" + date + \"\\\" not date\")",
        "            RETURN \"\"",
        "        ENDIF",
        "    ENDIF",
        "	 ",
        "    // Find specific date and return value.",
        "	 ",
        "    dates = fixings.Dates",
        "    IF dates.Type = \"LIST\" THEN",
        "        RETURN Numerix::Double(dates.Find(date))",
        "    ELSE",
        "        RETURN NumerixDate(dates)==date",
        "    ENDIF",
        "END",
        null,
        "function ConsolidatePayment(tableID)",
        "BEGIN",
        "   // Verify table.",
        "	",
        "    table = NumerixLoad(tableID)",
        "    IF NOT table THEN",
        "        NumerixFatal(\"\\\"\" + tableID + \"\\\" table not found\")",
        "        RETURN \"\"",
        "    ENDIF",
        null,
        "    columns = table.ColumnHeaders.Canonical",
        null,
        "    IF NOT columns.Find(\"NAME\") THEN",
        "        NumerixFatal(\"Cashflow name not found in \\\"\" + tableID + \"\\\" table\")",
        "        RETURN \"\"",
        "    ENDIF",
        null,
        "    IF NOT columns.Find(\"CURRENCY\") THEN",
        "        NumerixFatal(\"Currency not found in \\\"\" + tableID + \"\\\" table\")",
        "        RETURN \"\"",
        "    ENDIF",
        null,
        "    IF NOT columns.Find(\"CASHFLOWLOG\") THEN",
        "        NumerixFatal(\"Cashflow log not found in \\\"\" + tableID + \"\\\" table\")",
        "        RETURN \"\"",
        "    ENDIF",
        "	",
        "	CF = {}",
        "	FOREACH row IN table DO",
        "		try {",
        "		IF row.Cashflowlog THEN",
        "			CFtable = Numerix::Load(row.Cashflowlog)",
        "		ELSE",
        "			CONTINUE",
        "		ENDIF",
        "		",
        "		IF NOT CFtable THEN",
        "			NumerixFatal(\"\\\"\" + row.Cashflowlog + \"\\\" table not found in \" + row.Name )",
        "			RETURN \"\"",
        "		ENDIF",
        "		",
        "		CFcolumns = CFtable.ColumnHeaders.Canonical",
        "		// startdebugger",
        "		FOREACH cfrow IN CFtable DO",
        "				IF CFcolumns.Find(\"PAYMENTDATE\") THEN date = Numerix::Date(cfrow.PaymentDate) ",
        "				ELSEIF CFcolumns.Find(\"DATES\") THEN date = Numerix::Date(cfrow.Dates) ",
        "                ELSEIF CFcolumns.Find(\"PAYDATE\") then date = Numerix::Date(cfrow.paydate) ",
        "				ENDIF",
        "				",
        "				IF CFcolumns.Find(\"PAYMENTAMOUNT\") THEN amount = Numerix::Double(cfrow.PaymentAmount) ",
        "				ELSEIF CFcolumns.Find(\"PAYMENTACTUAL\") THEN amount = Numerix::Double(cfrow.PaymentActual) ",
        "				ELSEIF CFcolumns.Find(\"ACTUAL\") THEN amount = Numerix::Double(cfrow.Actual) ",
        "                ELSEIF CFcolumns.Find(\"CASHFLOW\") then amount = Numerix::Double(cfrow.cashflow) ",
        "				ENDIF",
        "				CF @= {row.Name, row.Currency, date, amount}",
        "			NEXT   ",
        "			} catch error",
        "			{",
        "				Numerix::SetFatal(\"Error in ConsolidatePayment(\" +tableID +\"). \" + row.name + \",\" + error)",
        "			}			",
        "	NEXT",
        "	",
        "	IF CF.size>0 THEN",
        "		table = NumerixTable(\"table\" + NumerixUniqueNumber, {\"DESCRIPTION\",\"CURRENCY\", \"PAYMENTDATE\",\"PAYMENTAMOUNT\"}, CF.Transpose) ",
        "		NumerixCreate(table)",
        "        RETURN table.ID",
        "	ELSE",
        "		NumerixFatal(\"Payment not found in \" + tableID + \"\\\" table\")",
        "		RETURN \"\"",
        "	ENDIF",
        "END",
        null,
        "function NetPayment(tableID,Netting,Ccy)",
        "BEGIN",
        "    table = NumerixLoad(tableID)",
        "    IF NOT table THEN",
        "        NumerixFatal(\"\\\"\" + tableID + \"\\\" table not found\")",
        "        RETURN \"\"",
        "    ENDIF",
        "	",
        "    //rowsize = NumerixTableRowCount(TableID) * 1.0",
        "    CF = {}",
        "    PreviousDate = Numerix::Date(10000)",
        "    i = 1",
        "    FOREACH row IN table DO",
        "        DF = row.DF",
        "        date = row.PaymentDate",
        "        event = row.Description		",
        "        pv = row.PaymentPV",
        "        IF Netting THEN",
        "            amount = row.PaymentActualDomCcy",
        "            IF PreviousDate<date THEN",
        "                IF i != 1 THEN",
        "                    CF @={PreviousEvent,ccy,PreviousDate,PreviousAmount,PreviousPV,DF,Numerix::Double(1)}	",
        "                ENDIF",
        "                PreviousDate = date	",
        "                PreviousEvent = event",
        "                PreviousAmount = amount			",
        "                PreviousPV = pv						",
        "            ELSE",
        "                PreviousEvent = PreviousEvent + \" + \" + event",
        "                PreviousAmount += amount",
        "                PreviousPV += pv	",
        "             ENDIF",
        "             i = i+1",
        "        ELSE",
        "             CF @={event,row.Currency,date,row.PaymentActual,pv,DF,row.Fxforward}			",
        "        ENDIF",
        "    NEXT",
        "    IF Netting THEN ",
        "        CF @={PreviousEvent,ccy,PreviousDate,PreviousAmount,PreviousPV,DF,Numerix::Double(1)}	",
        "    ENDIF	",
        "    IF CF.size>0 THEN",
        "        table = NumerixTable(\"table\" + NumerixUniqueNumber, {\"Event\",\"Payment Currency\", \"Payment Date\",\"Amount\",\"PV\",\"DF\",\"FX Forward\"}, CF.Transpose) ",
        "        NumerixCreate(table)",
        "        RETURN table.ID",
        "    ELSE",
        "        NumerixFatal(\"Payment not found in \" + tableID + \"\\\" table\")",
        "        RETURN \"\"",
        "    ENDIF",
        "END",
        null,
        "function GetTableWithKey(tableID,Key) ",
        "BEGIN ",
        "    table = Numerix::Load(tableID)     ",
        "    columns = table.ColumnHeaders.Canonical ",
        "    i = columns.Find(Key.Canonical)",
        "	t= table.Values[i,1]",
        "    //t= table.Values[i]",
        "	return t",
        "END ",
        "    ",
        "function GetTableWithKey11(tableID,Key) ",
        "BEGIN ",
        "    table = Numerix::Load(tableID)     ",
        "    columns = table.ColumnHeaders.Canonical ",
        "    i = columns.Find(Key.Canonical)",
        "	//t= table.Values[i,1]",
        "    t= table.Values[i]",
        "	return t",
        "END ",
        null,
        "function GetTerminationMulti(TerminationDate,tableID,DateHeader)",
        "BEGIN ",
        "    table = NumerixLoad(tableID)",
        "    IF NOT table THEN",
        "        NumerixFatal(\"\\\"\" + tableID + \"\\\"  NOT found\") ",
        "        RETURN \"\"",
        "    ENDIF",
        null,
        "    table = Numerix::Resolve (NumerixRegistry(tableID).LocalID)",
        "    DateColumn = table.Value(DateHeader+\"Output\")",
        null,
        "    date = TerminationDate",
        "    IF date.Type <> \"DATE\" THEN",
        "        date = NumerixDate(date)",
        "        IF date.Type <> \"DATE\" THEN",
        "            NumerixDate(\"\\\"\" + date + \"\\\" not date\")",
        "            RETURN \"\"",
        "        ENDIF",
        "    ENDIF",
        null,
        "    multi = {}",
        "    ",
        "    FOR i = 1 to DateColumn.size",
        "        IF DateColumn[i] >= date THEN",
        "            multi @= {Numerix::Double(0)}",
        "        ELSE",
        "            multi @= {Numerix::Double(1)}    ",
        "        ENDIF",
        "    NEXT",
        "    table = NumerixTable(\"table\" + NumerixUniqueNumber, {\"Value\"}, multi.Transpose) ",
        "    NumerixCreate(table)",
        "    RETURN table.ID",
        "END",
        null,
        null,
        "// Gerneral Function, could be used in other analytic instruments",
        "function GetRealizedCashFlow(tableID, StartDate, EndDate, DateHeader, CashFlowHeader, IncludeStart = TRUE, IncludeEnd = FALSE ) ",
        "BEGIN",
        "// Verify input ",
        "    table = NumerixLoad(tableID) ",
        "    IF NOT table THEN",
        "        NumerixFatal(\"\\\"\" + tableID + \"\\\"  NOT found\") ",
        "        RETURN \"\"",
        "    ENDIF",
        null,
        "    table = Numerix::Resolve (NumerixRegistry(tableID).LocalID)",
        "    DateColumn = table.Value(DateHeader+\"Output\")",
        "    ActualColumn = table.Value(CashFlowHeader+\"ActualOutput\")",
        "    PVColumn = table.Value(CashFlowHeader+\"PVOutput\")",
        "    IF DateColumn.size <> ActualColumn.size THEN",
        "        NumerixFatal(\"Date column and Cashflow column does not match.\") ",
        "        RETURN \"\"",
        "    ENDIF",
        "    RealizedCashFlow = 0",
        "    StartD = Numerix::Date(StartDate)",
        "    EndD = Numerix::Date(EndDate)",
        "    FOR i = 1 to ActualColumn.size",
        "       StartFlag = IF IncludeStart ? DateColumn[i] >= StartD : DateColumn[i] > StartD",
        "       EndFlag = IF IncludeEnd ? DateColumn[i] <= EndD : DateColumn[i] < EndD",
        "       IF StartFlag AND EndFlag AND PVColumn[i]==0 THEN",
        "          RealizedCashFlow = RealizedCashFlow + ActualColumn[i]",
        "       ENDIF",
        "    NEXT",
        null,
        "    RETURN RealizedCashFlow",
        "END",
        null,
        "function GetRealizedCashFlow2(tableID, StartDate, EndDate, DateHeader, ActualCashFlowHeader, PVCashFlowHeader, IncludeStart = TRUE, IncludeEnd = FALSE ) ",
        "BEGIN",
        "// Verify input ",
        "    table = NumerixLoad(tableID) ",
        "    IF NOT table THEN",
        "        NumerixFatal(\"\\\"\" + tableID + \"\\\"  NOT found\") ",
        "        RETURN \"\"",
        "    ENDIF",
        "    table = Numerix::Resolve (NumerixRegistry(tableID).LocalID)",
        "    DateColumn = table.Value(DateHeader+\"Output\")",
        "    ActualColumn = table.Value(ActualCashFlowHeader+\"Output\")",
        "    PVColumn = table.Value(PVCashFlowHeader+\"Output\")",
        "    IF DateColumn.size <> ActualColumn.size THEN",
        "        NumerixFatal(\"Date column and Cashflow column does not match.\") ",
        "        RETURN \"\"",
        "    ENDIF",
        "    RealizedCashFlow = 0",
        "    StartD = Numerix::Date(StartDate)",
        "    EndD = Numerix::Date(EndDate)",
        "    FOR i = 1 to ActualColumn.size",
        "       StartFlag = IF IncludeStart ? DateColumn[i] >= StartD : DateColumn[i] > StartD",
        "       EndFlag = IF IncludeEnd ? DateColumn[i] <= EndD : DateColumn[i] < EndD",
        "       IF StartFlag AND EndFlag AND PVColumn[i]==0 THEN",
        "          RealizedCashFlow = RealizedCashFlow + ActualColumn[i]",
        "       ENDIF",
        "    NEXT",
        null,
        "    RETURN RealizedCashFlow",
        "END",
        null,
        "function Add2RealizedCashFlow(tableID, StartDate, EndDate,IncludeValueDate, CF1DateHeader,CF1Header, CF2DateHeader,CF2Header ) ",
        "BEGIN",
        "    IF IncludeValueDate ==\"\" THEN",
        "        CF1RealizedCF = GetRealizedCashFlow(tableID, StartDate, EndDate, CF1DateHeader,CF1Header )",
        "        CF2RealizedCF = GetRealizedCashFlow(tableID, StartDate, EndDate, CF2DateHeader,CF2Header )",
        "    else",
        "        IF IncludeValueDate.Type <> \"BOOL\" THEN",
        "            NumerixFatal(\"IncludeValueDate is NOT Bool.\") ",
        "            RETURN \"\"",
        "        ENDIF",
        "        CF1RealizedCF = GetRealizedCashFlow(tableID, StartDate, EndDate, CF1DateHeader,CF1Header,IncludeValueDate,NOT IncludeValueDate )",
        "        CF2RealizedCF = GetRealizedCashFlow(tableID, StartDate, EndDate, CF2DateHeader,CF2Header,IncludeValueDate,NOT IncludeValueDate )",
        "    ENDIF",
        null,
        "        RealizedCF = CF1RealizedCF + CF2RealizedCF",
        "        Return RealizedCF",
        "END",
        null,
        "// Return the payment stream log of the cash payment according to the parameter table",
        "function GetCashPayment(ParameterTable, OutputHeader, havePayment= true)",
        "BEGIN",
        "	if not havePayment then",
        "		return \"\"",
        "	endif",
        "	// a= ParameterTable",
        "	// startdebugger",
        "	// ID = Numerix::MarketResolve(\"Report.CashPayment.\"+ParameterTable.LocalID,ParameterTable)",
        "    ID = Numerix::MarketResolve(\"Report.CashPayment.\"+ParameterTable.LocalID,ParameterTable) + \"^PRICER\"",
        "	RETURN ID.View(\"CASHPAYMENT.PV\") //ID.Value(OutputHeader+\"Output\")",
        "END",
        null,
        "function GetConsolidatedCashFlow(ParameterTable= consolidatedPaymentParameters)",
        "BEGIN",
        "	Numerix::SetNormal(\">GetConsolidatedCashFlow(\" + ParameterTable.size + \")\")",
        "	// ID = Numerix::Resolve (\"REPORT.CONSOLIDATEDPAYMENT.\"+ParameterTable + Numerix::UniqueNumber,ParameterTable)",
        "    ID = Numerix::Resolve (\"REPORT.CONSOLIDATEDPAYMENT.\"+ParameterTable + Numerix::UniqueNumber,ParameterTable)	+ \"^PRICER\"",
        "	RETURN ID.View(\"CASHPAYMENT.PAYMENTLOG.EX\") //ID.Value(\"CASHFLOWTABLEOUTPUT\")",
        "END",
        null,
        "function GetTableRealizedCashFlow(CashFlowTable, IncludeValueDate, DomCurrency, NowDate, QuoteType)",
        "BEGIN",
        "	// Verify input ",
        "    CashTable = Numerix::Load(CashFlowTable) ",
        "  	RealizedCashFlow = 0",
        "	LastCcy = \"\"",
        "	LastSpot = 0",
        "//	startdebugger",
        "	FOREACH row IN CashTable DO",
        "		IF row.CASHFLOWLOG THEN",
        "		    table = Numerix::Resolve (row.CASHFLOWLOG)",
        "			CFcolumns = table.ColumnHeaders.Canonical ",
        "			",
        "			FOREACH CFrow IN table DO",
        "				// startdebugger",
        "				IF CFcolumns.Find(\"PAYMENTDATE\") THEN DateColumn = table.Value(\"PAYMENTDATEOutput\") ",
        "				ELSEIF CFcolumns.Find(\"DATES\") THEN  DateColumn = table.Value(\"DATESOutput\") ",
        "                ELSEIF CFcolumns.Find(\"PAYDATE\") then DateColumn = table.Value(\"PAYDATEOutput\") ",
        "				ENDIF",
        "				",
        "				IF CFcolumns.Find(\"PAYMENTAMOUNT\") THEN ActualColumn = table.Value(\"PaymentAmountOUTPUT\") ",
        "				ELSEIF CFcolumns.Find(\"PAYMENTACTUAL\") THEN ActualColumn = table.Value(\"PaymentActualOUTPUT\") ",
        "				ELSEIF CFcolumns.Find(\"ACTUAL\") THEN ActualColumn = table.Value(\"ActualOUTPUT\") ",
        "                ELSEIF CFcolumns.Find(\"CASHFLOW\") THEN ActualColumn = table.Value(\"CashFlowOUTPUT\") ",
        "				ENDIF",
        "			   	EndD = Numerix::Date(NowDate)",
        "		    	temp = 0",
        "				FOR i = 1 to ActualColumn.size",
        "		       		IF DateColumn[i] < EndD OR (IncludeValueDate AND DateColumn[i] <= EndD) THEN",
        "		        	  	temp += Numerix::Double(ActualColumn[i])",
        "		       		ENDIF",
        "		    	NEXT	",
        "			NEXT",
        "			IF LastCcy == row.Currency THEN",
        "				FXSpot = LastSpot",
        "			ELSE",
        "				FXSpot = NXStd::GetFXSpot(row.Currency, DomCurrency, QuoteType)",
        "				LastSpot = FXSpot",
        "			ENDIF",
        "		  	RealizedCashFlow += temp * FXSpot",
        "		ENDIF",
        "	NEXT",
        "    RETURN RealizedCashFlow",
        "END",
        null,
        "// Following function shall be migrated to base class",
        "function GetTermination(valuedate,IncludeValueDate,FixingtableID,FixingDateHeader,TerminationDate,TermStatus=0,Termlog=\"\",HasKO=FALSE,KODate=NumerixDate(100000),CallDate=NumerixDate(100000))",
        "BEGIN ",
        "     date = NumerixDate(valuedate)",
        "    // TerminationStatus = 3 (Matured)?",
        "    IF FixingtableID.type<>\"STRING\" THEN",
        "        ExpiryDate = Numerix::Date(FixingtableID)",
        "    Else",
        "        table = NumerixLoad(FixingtableID)",
        "        IF NOT table THEN",
        "            NumerixFatal(\"\\\"\" + FixingtableID + \"\\\"  NOT found\") ",
        "            RETURN \"\"",
        "        ENDIF",
        null,
        "        table = Numerix::Resolve (FixingtableID)",
        "        DateColumn = table.Value(FixingDateHeader+\"Output\")",
        null,
        "        ExpiryDate = DateColumn[DateColumn.size]",
        "    ENDIF",
        "        ",
        "    IF IncludeValueDate THEN",
        "        IF date > ExpiryDate THEN ",
        "            table = NumerixTable(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {ExpiryDate,Numerix::Double(3)}) ",
        "            NumerixCreate(table)",
        "            RETURN Numerix::Resolve(table.ID)",
        "        ENDIF",
        "    ELSE",
        "        IF date >= ExpiryDate THEN ",
        "            table = NumerixTable(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {ExpiryDate,Numerix::Double(3)}) ",
        "            NumerixCreate(table)",
        "            RETURN Numerix::Resolve(table.ID)",
        "        ENDIF",
        "    ENDIF",
        "   // TerminationStatus = 5 (Unwound)?",
        "    termdate = TerminationDate",
        "	IF termdate<>\"\" THEN",
        "    IF termdate.Type <> \"DATE\" THEN",
        "        termdate = NumerixDate(termdate)",
        "    ENDIF",
        "    IF date >= termdate THEN ",
        "            table = NumerixTable(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {termdate,Numerix::Double(5)}) ",
        "            NumerixCreate(table)",
        "            RETURN Numerix::Resolve(table.ID)",
        "    ENDIF",
        "	ENDIF",
        "    ",
        "    // TerminationStatus = 7 (Callable option exercised)?",
        "    termdate = CallDate",
        "    IF termdate.Type <> \"DATE\" THEN",
        "        termdate = NumerixDate(termdate)",
        "    ENDIF",
        "    IF date >= termdate THEN ",
        "            table = NumerixTable(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {termdate,Numerix::Double(7)}) ",
        "            NumerixCreate(table)",
        "            RETURN Numerix::Resolve(table.ID)",
        "    ENDIF",
        "    ",
        "    // TerminationStatus = 6 (AKO)?",
        "    termdate = KODate",
        "    IF termdate.Type <> \"DATE\" THEN",
        "        termdate = NumerixDate(termdate)",
        "    ENDIF",
        "    IF HASKO AND (date >= termdate) THEN ",
        "            table = NumerixTable(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {termdate,Numerix::Double(6)}) ",
        "            NumerixCreate(table)",
        "            RETURN Numerix::Resolve(table.ID)",
        "    ENDIF",
        "    ",
        "    IF TermStatus THEN       ",
        "       table = Numerix::Resolve (Termlog)",
        "       table = NumerixTable(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {table.Value(\"DatesOutput\")[1], table.Value(\"ActualOutput\")[1]}) ",
        "       NumerixCreate(table)",
        "	   RETURN Numerix::Resolve(table.ID)",
        "    ELSE",
        "        table = NumerixTable(\"TerminationDatesLog\" + NumerixUniqueNumber, {\"Date\",\"Actual\"}, {ExpiryDate,Numerix::Double(0)}) ",
        "        NumerixCreate(table)",
        "        RETURN Numerix::Resolve(table.ID)",
        "    ENDIF",
        "END",
        null,
        "// Following function to be removed after European option changed to script",
        "function FXEuropeanOptionGetTermCF(Expriy)",
        "BEGIN",
        "	Numerix::SetNormal(\"FXEuropeanOptionGetTermCF(\" + Expiry + \")\")",
        "	IF (BuySell=\"Buy\") THEN ",
        "		buyIndicator= 1 ",
        "	ELSE",
        "		buyIndicator= -1",
        "	ENDIF",
        "	IF Numerix::Date(ValuationDate)<Numerix::Date(Expiry) THEN ",
        "		RETURN -NxStd::SetIfDefined(PRICE,Pricer_PRICE,Pricer_VOLATILITY).ForwardDeltaOutput * NxStd::SetIfDefined(PRICE,Pricer_PRICE,Pricer_VOLATILITY).StrikeOutput  * buyIndicator",
        "	ELSE",
        "		try {",
        "			IF ((Flavor.Canonical =\"PUT\" AND NxStd::GetFixings(Fixings,Expiry)<Strike) OR ",
        "				(Flavor.Canonical =\"CALL\" AND NxStd::GetFixings(Fixings,Expiry)>Strike)) THEN ",
        "					RETURN -BaseNotional*Strike * buyIndicator",
        "			ELSE ",
        "				RETURN 0",
        "			ENDIF",
        "		} catch error ",
        "		{",
        "			Numerix::SetFatal(Fixings + \" not supplied on \" + Expiry  + \". \" + error)",
        "		}",
        "	ENDIF",
        "END",
        null,
        "function FXEuropeanOptionGetBaseCF()",
        "BEGIN",
        "	Numerix::SetNormal(\"FXEuropeanOptionGetBaseCF:\" + Numerix::UniqueNumber)",
        "	IF (BuySell=\"Buy\") THEN ",
        "		buyIndicator= 1 ",
        "	ELSE",
        "		buyIndicator= -1",
        "	ENDIF",
        "	IF Numerix::Date(ValuationDate)<Numerix::Date(Expiry) THEN ",
        "		RETURN NxStd::SetIfDefined(PRICE,Pricer_PRICE,Pricer_VOLATILITY).ForwardDeltaOutput * buyIndicator",
        "	ELSE",
        "		try {",
        "			IF ((Flavor.Canonical =\"PUT\" AND NxStd::GetFixings(Fixings,Expiry)<Strike) OR ",
        "				(Flavor.Canonical =\"CALL\" AND NxStd::GetFixings(Fixings,Expiry)>Strike)) THEN ",
        "					RETURN BaseNotional  * buyIndicator",
        "			ELSE ",
        "				RETURN 0",
        "			ENDIF",
        "		} catch error ",
        "		{",
        "			Numerix::SetFatal(Fixings + \" not supplied on \" +Expiry + \". \" + error)",
        "		}",
        "	ENDIF",
        "END",
        null,
        "function Numerix::ADelta(pricer, instrument,VolId,Strike, QuoteType)",
        "BEGIN",
        "//assume sticky moneyness, ie sig=sig(K/S)",
        "	",
        "	If Strike = 0 THEN",
        "		RETURN 0",
        "	ENDIF",
        "	",
        "    // pricer = Numerix::Resolve (pricer.LocalID)",
        "    // instrument = Numerix::Resolve (instrument.LocalID)",
        "	foreignccy = instrument.Foreign1CurrencyOutput",
        "	domesticccy = instrument.CurrencyOutput",
        "	Spot = NXStd::GetFXSpot(foreignccy, domesticccy, QuoteType)",
        "	Expiry = pricer.EndDateOutput",
        "	//Expiry=instrument.EndDateOutput",
        null,
        "	SigU = NXStd::GetImpliedVol(VolId, Expiry,Strike*1.001)",
        "	SigD = NXStd::GetImpliedVol(VolId, Expiry,Strike*0.999)",
        "	",
        "	pSigpS = (SigU-SigD)/(0.002*Strike)*(-Strike/Spot)",
        "	delta = pricer.DeltaOutput",
        "	vega = pricer.VegaOutput",
        "	adelta=delta + vega * pSigpS",
        "    ",
        "	RETURN adelta",
        "END",
        null,
        "function NxStd::DisplayFXSpotStrategy(StrategyID, EndTenor = \"1Y\", NowDate = \"\")",
        "{",
        "    if NowDate : NowDate = Numerix::MarketDate",
        "    ",
        "    call = Numerix::Object({\"DisplaySpotStrategy\", \"NUMERIX INTERNAL\", \"SPOT STRATEGY DISPLAY\"}) & ",
        "    {",
        "        \"nowdate\" : NowDate,",
        "        \"tenor\" : EndTenor,",
        "        \"spotstrategy\" : StrategyID ",
        "    }",
        null,
        "    return call.create",
        "}",
        null,
        "function NxStd::GetFXSpotStrategy(BaseCcy,TermCcy)",
        "{",
        "    if NxCust::KeyExists(\"Settings.CurrencyPair\", BaseCcy+TermCcy) :",
        "        return \"CONV.FX.\" + BaseCcy+TermCcy + \".SPOTSTRAT\"",
        "    else :",
        "        return \"CONV.FX.\" + TermCcy+BaseCcy + \".SPOTSTRAT\"",
        "}",
        null,
        null,
        "function NxSnT::GetFXSwapPointUnit(baseCcy, termCcy)",
        "{",
        "    return NxSnT::GetFXFwdPointScaleFactor(baseCcy,termCcy)",
        "}",
        null,
        "function NxSnT::GetFXFwdPointScaleFactor(baseCcy, termCcy)",
        "{",
        "    if NxCust::KeyExists(\"Settings.CurrencyPair\", baseCcy+termCcy) :",
        "        return Numerix::GetSettings(\"Settings.CurrencyPair\", baseCcy+termCcy, \"FORWARDSCALINGFACTOR\")",
        "    elseif NxCust::KeyExists(\"Settings.CurrencyPair\", termCcy+baseCcy) :",
        "        return Numerix::GetSettings(\"Settings.CurrencyPair\", termCcy+baseCcy, \"FORWARDSCALINGFACTOR\")",
        "    else ",
        "        return 0.0001",
        "}",
        null,
        "function NxSnT::getBaseDiscountCurve(BaseCurrency, TermCurrency)",
        "{",
        "	BaseIRIndex= Numerix::GetSettings(\"Settings.Currency\",BaseCurrency,\"IRIndex\")",
        "	BaseIRIndexTenor= Numerix::GetSettings(\"Settings.Currency\",BaseCurrency,\"IRIndexTenor\")",
        null,
        "	id =",
        "	(",
        "		if Numerix::GetSettings(\"Settings.Currency\",TermCurrency,\"Rank\") > Numerix::GetSettings(\"Settings.Currency\",BaseCurrency,\"Rank\") ? ",
        "		    \"IR.\" + BaseCurrency + \"-\" + BaseIRIndex + \"-\" + BaseIRIndexTenor + \".\" + QuoteType : ",
        "			\"FX.\" + BaseCurrency + \"/\" + TermCurrency + \".FWD.\" + QuoteType",
        "	)",
        "	return id",
        "}",
        null,
        "function NxSnT::getTermDiscountCurve(BaseCurrency, TermCurrency)",
        "{",
        "	TermIRIndex= Numerix::GetSettings(\"Settings.Currency\",TermCurrency,\"IRIndex\")",
        "	TermIRIndexTenor= Numerix::GetSettings(\"Settings.Currency\",TermCurrency,\"IRIndexTenor\")",
        "	id= (",
        "		if Numerix::GetSettings(\"Settings.Currency\",TermCurrency,\"Rank\") > Numerix::GetSettings(\"Settings.Currency\",BaseCurrency,\"Rank\") ? ",
        "		\"FX.\" + TermCurrency + \"/\" + BaseCurrency + \".FWD.\" + QuoteType : ",
        "		\"IR.\" + TermCurrency + \"-\" + TermIRIndex + \"-\" + TermIRIndexTenor + \".\" + QuoteType",
        "	)",
        "	return id",
        "}",
        null,
        "function NxSnT::getImpliedVol(BaseCurrency, TermCurrency, QuoteType, Expiry, ValuationDate)",
        "{",
        "	if ValuationDate>Expiry {",
        "		return 0",
        "	}",
        "	return NxStd::GetImpliedVol(\"FX.VOL.\"+BaseCurrency+\"/\"+TermCurrency+\".\"+QuoteType, Expiry, NxStd::GetFXSpot(BaseCurrency, TermCurrency,Quotetype))",
        "}",
        null,
        "// Return 0 if the option has expired",
        "function NxSnT::getValueBeforeExpiry(v)",
        "{",
        "	if ValuationDate > Expiry then",
        "		return 0",
        "	endif",
        "	if modelType==\"Black\" then",
        "		r= implementedObject.View(v)",
        "	else",
        "		// Translate heading for different pricer output",
        "		switch on v",
        "			case \"Price\" ",
        "				v1= \"PV\"",
        "			default",
        "				v1= v",
        "		endswitch	",
        "		r= implementedObject.View(v1)",
        "	endif",
        "	return r",
        "}",
        null,
        "//=============================================================================",
        "// PROJECT SPECIFIC CUSTOM FUNCTIONS AND MACROS - NXBASKET",
        "//=============================================================================",
        null,
        "    FUNCTION NxBasket::GetDomesticModel(settings_id, parameters_id, dom_currency, quote_type)",
        "    BEGIN",
        "        ",
        "        // Handle required inputs.",
        null,
        "        settings = Numerix::Load(settings_id)",
        "        IF NOT settings THEN",
        "            Numerix::SetFatal(\"GetDomesticModel: \\\"\" + settings_id + \"\\\" table not found.\")",
        "            RETURN \"\"",
        "        ENDIF",
        null,
        "        // Search through the settings for either the IR or Domestic IR component.",
        "        ",
        "        FOREACH setting IN settings DO            ",
        "            IF setting.Component.Canonical == \"IR\" OR setting.Component.Canonical == \"IRDOMESTIC\" THEN",
        "                model_id = NxBasket::CreateIRModel(setting, parameters_id, (dom_currency), quote_type)",
        "                RETURN model_id               ",
        "            ENDIF",
        "        NEXT",
        "        ",
        "        // Shouldn't get here.",
        "        ",
        "        RETURN \"\"",
        "        ",
        "    END",
        null,
        "    // Gets the foreign IR models from model settings.",
        "    ",
        "    FUNCTION NxBasket::GetForeignModels(settings_id, parameters_id, for_currencies_id, quote_type)",
        "    BEGIN",
        "        ",
        "        // Handle required inputs.",
        null,
        "        settings = Numerix::Load(settings_id)",
        "        IF NOT settings THEN",
        "            Numerix::SetFatal(\"GetForeignModels: \\\"\" + settings_id + \"\\\" table not found.\")",
        "            RETURN \"\"",
        "        ENDIF",
        "        ",
        "        // We may not have any foreign currencies, in which case we have nothing to do.",
        null,
        "        for_currencies = Numerix::Load(for_currencies_id)",
        "        IF NOT for_currencies THEN",
        "            RETURN \"\"",
        "        ENDIF",
        "       ",
        "        // Return the resolved IDs in a table.",
        "        ",
        "        model_ids = {}",
        null,
        "        // There will be one model per currency.",
        "        ",
        "        FOREACH for_currency IN for_currencies DO",
        "        ",
        "            // Search through the settings for either the IR or Foreign IR component.",
        "        ",
        "            FOREACH setting IN settings DO",
        "                IF setting.Component.Canonical == \"IR\" OR setting.Component.Canonical == \"IRFOREIGN\" THEN",
        "                    currency = for_currency.Currency",
        "                    model_ids @= NxBasket::CreateIRModel(setting, parameters_id, currency, quote_type)",
        "                    BREAK",
        "                ENDIF",
        "            NEXT",
        "            ",
        "        NEXT",
        "        ",
        "        IF model_ids.Size > 0 THEN",
        "        ",
        "            // Create output table.",
        "            ",
        "            outputTable = Numerix::Table(\"ForeignModels_\" + Numerix::UniqueNumber, {\"ID\"}, {model_ids})",
        "            Numerix::Create(outputTable)",
        "            RETURN outputTable.ID",
        "            ",
        "        ENDIF",
        "        ",
        "        RETURN \"\"",
        null,
        "    END",
        null,
        "    // Gets the FX models from model settings.",
        "    ",
        "    FUNCTION NxBasket::GetFXModels(settings_id, parameters_id, dom_currency, for_currencies_id, quote_type)",
        "    BEGIN",
        "        ",
        "        // Handle required inputs.",
        null,
        "        settings = Numerix::Load(settings_id)",
        "        IF NOT settings THEN",
        "            Numerix::SetFatal(\"GetFXModels: \\\"\" + settings_id + \"\\\" table not found.\")",
        "            RETURN \"\"",
        "        ENDIF",
        "        ",
        "        // We may not have any foreign currencies, in which case we have nothing to do.",
        null,
        "        for_currencies = Numerix::Load(for_currencies_id)",
        "        IF NOT for_currencies THEN",
        "            RETURN \"\"",
        "        ENDIF",
        "       ",
        "        // Return the resolved IDs in a table.",
        "        ",
        "        model_ids = {}",
        null,
        "        // There will be one model per foreign currency.",
        "        ",
        "        FOREACH for_currency IN for_currencies DO",
        "        ",
        "            // Search through the settings for the FX component.",
        "        ",
        "            FOREACH setting IN settings DO",
        "                IF setting.Component.Canonical == \"FX\" THEN",
        "                    model_ids @= NxBasket::CreateFXModel(setting, parameters_id, (for_currency.Currency), dom_currency, quote_type)",
        "                    BREAK  ",
        "                ENDIF",
        "            NEXT",
        "            ",
        "        NEXT",
        "        ",
        "        IF model_ids.Size > 0 THEN",
        "        ",
        "            // Create output table.",
        "            ",
        "            outputTable = Numerix::Table(\"FXModels_\" + NumerixUniqueNumber, {\"ID\"}, {model_ids})",
        "            Numerix::Create(outputTable)",
        "            RETURN outputTable.ID",
        "            ",
        "        ENDIF",
        "        ",
        "        RETURN \"\"",
        null,
        "    END",
        null,
        "    // Gets the equity models from model settings.",
        "    ",
        "    FUNCTION NxBasket::GetEquityModels(settings_id, parameters_id, CalibrationQuality_id, equities_id, quote_type)",
        "    BEGIN",
        "        ",
        "        // Handle required inputs.",
        null,
        "        settings = Numerix::Load(settings_id)",
        "        IF NOT settings THEN",
        "            Numerix::SetFatal(\"GetEquityModels: \\\"\" + settings_id + \"\\\" table not found.\")",
        "            RETURN \"\"",
        "        ENDIF",
        "        ",
        "        // We may not have any equities, in which case we have nothing to do.",
        "        ",
        "        equities = Numerix::Load(equities_id)",
        "        IF NOT equities THEN",
        "            RETURN \"\"",
        "        ENDIF",
        "       ",
        "        // Return the resolved IDs in a table.",
        "        parameters_new_id =NxBasket::ReplaceCalibrationQuality(equities_id, parameters_id, CalibrationQuality_id) ",
        "        model_ids = {}",
        null,
        "        // There will be one model per entry in the equities table.",
        "        ",
        "        FOREACH equity IN equities DO",
        "        ",
        "            // Search through the settings for the EQ component.",
        "        ",
        "            FOREACH setting IN settings DO",
        "            ",
        "                IF setting.Component.Canonical == \"EQ\" THEN",
        "                    model_ids @= NxBasket::CreateEQModel(setting, parameters_new_id, (equity.Currency), (equity.Exchange), (equity.Ticker), quote_type)",
        "                    BREAK  ",
        "                ENDIF",
        "        ",
        "            NEXT",
        "            ",
        "        NEXT",
        "        ",
        "        IF model_ids.Size > 0 THEN",
        "        ",
        "            // Create output table.",
        "            ",
        "            outputTable = Numerix::Table(\"EquityModels_\" + Numerix::UniqueNumber, {\"MODEL\", \"NAME\"}, model_ids.Transpose)",
        "            Numerix::Create(outputTable)",
        "            RETURN outputTable.ID",
        "            ",
        "        ENDIF",
        "        ",
        "        RETURN \"\"",
        null,
        "    END",
        null,
        "    // Gets the commodity models from model settings.",
        "    ",
        "    FUNCTION NxBasket::GetCommodityModels(settings_id, parameters_id, commodities_id, quote_type)",
        "    BEGIN",
        "        ",
        "        // Handle required inputs.",
        null,
        "        settings = Numerix::Load(settings_id)",
        "        IF NOT settings THEN",
        "            Numerix::SetFatal(\"GetCommodityModels: \\\"\" + settings_id + \"\\\" table not found.\")",
        "            RETURN \"\"",
        "        ENDIF",
        "        ",
        "        // We may not have any commodities, in which case we have nothing to do.",
        "        ",
        "        commodities = Numerix::Load(commodities_id)",
        "        IF NOT commodities THEN",
        "            RETURN \"\"",
        "        ENDIF",
        "       ",
        "        // Return the resolved IDs in a table.",
        "        ",
        "        model_ids = {}",
        null,
        "        // There will be one model per entry in the commodities table.",
        "        ",
        "        FOREACH commodity IN commodities DO",
        "        ",
        "            // Search through the settings for the CMDTY component.",
        "        ",
        "            FOREACH setting IN settings DO",
        "            ",
        "                IF setting.Component.Canonical == \"CMDTY\" THEN",
        "                    model_ids @= NxBasket::CreateCMDTYModel(setting, parameters_id, (commodity.Currency), (commodity.Exchange), (commodity.Symbol), quote_type)",
        "                    BREAK  ",
        "                ENDIF",
        "        ",
        "            NEXT",
        "            ",
        "        NEXT",
        "        ",
        "        IF model_ids.Size > 0 THEN",
        "        ",
        "            // Create output table.",
        "            ",
        "            outputTable = Numerix::Table(\"CommodityModels_\" + Numerix::UniqueNumber, {\"MODEL\", \"NAME\"}, model_ids.Transpose)",
        "            Numerix::Create(outputTable)",
        "            RETURN outputTable.ID",
        "            ",
        "        ENDIF",
        "        ",
        "        RETURN \"\"",
        null,
        "    END",
        "    ",
        "    // Gets the credit models from model settings.",
        "    ",
        "    FUNCTION NxBasket::GetCreditModels(settings_id, parameters_id, creditnames_id, quote_type)",
        "    BEGIN",
        "        ",
        "        // Handle required inputs.",
        null,
        "        settings = Numerix::Load(settings_id)",
        "        IF NOT settings THEN",
        "            Numerix::SetFatal(\"GetCreditModels: \\\"\" + settings_id + \"\\\" table not found.\")",
        "            RETURN \"\"",
        "        ENDIF",
        "        ",
        "        // We may not have any credit names, in which case we have nothing to do.",
        "        ",
        "        creditnames = Numerix::Load(creditnames_id)",
        "        IF NOT creditnames THEN",
        "            RETURN \"\"",
        "        ENDIF",
        "       ",
        "        // Return the resolved IDs in a table.",
        "        ",
        "        model_ids = {}",
        null,
        "        // There will be one model per entry in the credit names table.",
        "        ",
        "        FOREACH creditname IN creditnames DO",
        "        ",
        "            // Search through the settings for the CR component.",
        "        ",
        "            FOREACH setting IN settings DO",
        "            ",
        "                IF setting.Component.Canonical == \"CR\" THEN",
        "                    model_ids @= NxBasket::CreateCRModel(setting, parameters_id, (creditname.Currency), (creditname.ReferenceEntity), (creditname.DebtType), (creditname.RestructuringClause), quote_type)",
        "                    BREAK  ",
        "                ENDIF",
        "        ",
        "            NEXT",
        "            ",
        "        NEXT",
        "        ",
        "        IF model_ids.Size > 0 THEN",
        "        ",
        "            // Create output table.",
        "            ",
        "            outputTable = Numerix::Table(\"CreditModels_\" + Numerix::UniqueNumber, {\"ID\", \"CMCDS\"}, model_ids.Transpose)",
        "            Numerix::Create(outputTable)",
        "            RETURN outputTable.ID",
        "            ",
        "        ENDIF",
        "        ",
        "        RETURN \"\"",
        null,
        "    END",
        "    ",
        "    // Uses the specified factors to harvest correlations from the market.",
        "    ",
        "    FUNCTION NxBasket::GetMarketCorrelations(dom_currency, for_currencies_id, equities_id, commodities_id, creditnames_id, defaultValue)",
        "    BEGIN",
        null,
        "        // Process domestic IR model first. ",
        "        ",
        "        headers = { \"DOMESTIC MODEL\" }",
        "        factors = { \"IR.\" + dom_currency + \".1\" }",
        "        ",
        "        // If we don't have any foreign currencies, we have no foreign IR or FX models.",
        null,
        "        for_currencies = Numerix::Load(for_currencies_id)",
        "        ",
        "        IF for_currencies THEN",
        "        ",
        "            // Process Foreign IR models.",
        "            ",
        "            i = 1",
        "            FOREACH for_currency IN for_currencies DO   ",
        "                headers &= \"FOREIGN \" + i.Format(\"1\") + \" MODEL\"",
        "                factors &= \"IR.\" + for_currency.Currency + \".1\"",
        "                i += 1",
        "            NEXT",
        "        ",
        "            // Process FX models.",
        "        ",
        "            i = 1",
        "            FOREACH for_currency IN for_currencies DO",
        "                headers &= \"FX \" + i.Format(\"1\") + \" MODEL\"",
        "                factors &= \"FX.\" + for_currency.Currency + \"/\" + dom_currency + \".1\"",
        "                i += 1",
        "            NEXT",
        "        ELSE",
        "                i = 1",
        "        ENDIF",
        "         ",
        "        // If we have no equities, we have no EQ models",
        "        ",
        "        equities = Numerix::Load(equities_id)",
        null,
        "        IF equities THEN",
        "        ",
        "            // Process EQ models.",
        "                   ",
        "            FOREACH equity IN equities DO",
        "                headers &= equity.Ticker",
        "                factors &= \"EQ.\" + equity.Currency + \"-\" + equity.Exchange + \"-\" + equity.Ticker + \".1\"",
        "                i += 1",
        "            NEXT",
        "            ",
        "        ENDIF",
        "         ",
        "        // If we have no commodities, we have no CMDTY models",
        "        ",
        "        commodities = Numerix::Load(commodities_id)",
        null,
        "        IF commodities THEN",
        "        ",
        "            // Process CMDTY models.",
        "        ",
        "            FOREACH commodity IN commodities DO",
        "                headers &= commodity.Symbol",
        "                factors &= \"CMDTY.\" + commodity.Currency + \"-\" + commodity.Exchange + \"-\" + commodity.Symbol + \".1\"",
        "                i += 1",
        "            NEXT",
        "            ",
        "        ENDIF",
        "        ",
        "        // If we have no credit names, we have no CR models",
        "        ",
        "        creditnames = Numerix::Load(creditnames_id)",
        null,
        "        IF creditnames THEN",
        "        ",
        "            // Process CR models.",
        "        ",
        "            i = 1",
        "            FOREACH creditname IN creditnames DO",
        "                IF creditnames.Size() == 1 THEN",
        "                    headers &= \"CR\"",
        "                ELSE",
        "                    headers &= \"CR\" + i.Format(\"1\")",
        "                ENDIF",
        "                factors &= \"CR.\" + creditname.Currency + \"-\" + creditname.ReferenceEntity + \"-\" + creditname.DebtType + \"-\" + creditname.RestructuringClause + \".1\"",
        "                i += 1",
        "            NEXT",
        "            ",
        "        ENDIF",
        "        ",
        "        ncols = headers.Size",
        "        nrows = ncols",
        "        ",
        "        // Construct base matrix values.",
        "        ",
        "        mat = {}",
        "        FOR c = 1 TO ncols",
        "            col = {1..nrows}",
        "            mat @= col",
        "            mat[c][c] = 1.0",
        "            FOR r = 1 TO c - 1",
        "                key = \"CORR.\" + factors[c] + \"_\" + factors[r]",
        "                correlations = Numerix::Quote.Key == key",
        "                IF correlations.Size == 0 THEN",
        "                    key = \"CORR.\" + factors[r] + \"_\" + factors[c]",
        "                    correlations = Numerix::Quote.Key == key",
        "                    IF correlations.Size == 0 THEN",
        "                        Numerix::SetMajor(\"No correlation supplied for (\" + factors[c] + \", \" + factors[r] + \").\")",
        "                        mat[c][r] = Numerix::Double(defaultValue)",
        "                        mat[r][c] = Numerix::Double(defaultValue)",
        "                    ELSE",
        "                        q = Numerix::Quote(key)",
        "                        mat[c][r] = q.Value",
        "                        mat[r][c] = q.Value",
        "                    ENDIF",
        "                ELSE",
        "                    q = Numerix::Quote(key)",
        "                    mat[c][r] = q.Value",
        "                    mat[r][c] = q.Value",
        "                ENDIF",
        "            NEXT",
        "        NEXT",
        null,
        "        // Create correlation matrix object.",
        "                ",
        "        corr = Numerix::Matrix(\"Correlations_\" + NumerixUniqueNumber, headers, headers, mat)",
        "        Numerix::Create(corr)",
        "        return corr.ID",
        "        ",
        "    END",
        null,
        "    //================================================================================",
        "    // IR Model creation and calibration functions.",
        "    //================================================================================",
        "    ",
        "    // Creates and calibrates an IR Model.",
        null,
        "    FUNCTION NxBasket::CreateIRModel(setting, parameters_id, currency, quote_type)",
        "    BEGIN",
        null,
        "        // Start gathering calibration parameters. ",
        null,
        "        calibration_parameters = {}",
        "        ",
        "        // Set default values. Parameters can override.",
        "        ",
        "        ir_index = \"\"",
        "        ir_index_tenor = \"\"",
        "        qt = quote_type",
        "        ",
        "        // Process optional parameters.",
        "                 ",
        "        parameters = Numerix::Load(parameters_id)",
        "        IF parameters THEN",
        "            FOREACH parameter IN parameters DO",
        "                IF parameter.Currency == currency THEN",
        "                ",
        "                    FOREACH col_header IN Numerix::TableHeaders(parameters_id).Canonical DO",
        "                    ",
        "                        IF col_header == \"QUOTETYPE\" THEN",
        "                            IF parameter.QuoteType THEN",
        "                                qt = parameter.QuoteType",
        "                                calibration_parameters @= { \"QUOTE TYPE\", parameter.QuoteType }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"IRINDEX\" THEN",
        "                            IF parameter.IRIndex THEN",
        "                                ir_index = parameter.IRIndex",
        "                                calibration_parameters @= { \"IR INDEX\", parameter.IRIndex }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"IRINDEXTENOR\" THEN",
        "                            IF parameter.IRIndexTenor THEN",
        "                                ir_index_tenor = parameter.IRIndexTenor",
        "                                calibration_parameters @= { \"IR INDEX TENOR\", parameter.IRIndexTenor }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"DISCOUNTCURVE\" THEN",
        "                            IF parameter.DiscountCurve THEN",
        "                                calibration_parameters @= { \"DISCOUNT CURVE\", parameter.DiscountCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"SWAPTIONSTRIKE\" THEN",
        "                            IF parameter.SwaptionStrike THEN",
        "                                calibration_parameters @= { \"SWAPTION STRIKE\", parameter.SwaptionStrike }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"PROJECTIONCURVE\" THEN",
        "                            IF parameter.ProjectionCurve THEN",
        "                                calibration_parameters @= { \"PROJECTION CURVE\", parameter.ProjectionCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"MEANREVERSION\" THEN",
        "                            IF parameter.MeanReversion THEN",
        "                                calibration_parameters @= { \"MEAN REVERSION\", Numerix::Double(parameter.MeanReversion) }",
        "                            ENDIF",
        "                        ELSE ",
        "                            IF col_header != \"CURRENCY\" THEN",
        "                                Numerix::SetFatal(\"CreateIRModel: unknown parameter \\\"\" + col_header + \"\\\".\")",
        "                            ENDIF",
        "                        ENDIF",
        "                    ",
        "                    NEXT",
        "                ",
        "                    BREAK",
        "                     ",
        "                ENDIF",
        "            NEXT",
        "        ENDIF",
        null,
        "        // Apply the calibration strategy.",
        "        ",
        "        strategy = NxBasket::ApplyIRCalibrationStrategy((setting.CalibrationStrategy), currency, ir_index, ir_index_tenor, qt)",
        "        IF strategy.Size() > 0 THEN",
        "            calibration_parameters @= strategy",
        "        ENDIF",
        "        ",
        "        // Construct the ID of the model we are resolving.",
        null,
        "        model_id = \"IR.MODEL.\" + setting.ModelType + \".\" + currency + \".\" + qt",
        null,
        "        // Resolve the model and return its ID.",
        null,
        "        RETURN Numerix::Resolve(model_id, NxBasket::CreateResolveParameterTable(calibration_parameters))",
        "        ",
        "    END",
        null,
        "    // Applies an IR calibration strategy to generate calibration parameters.",
        "    ",
        "    FUNCTION NxBasket::ApplyIRCalibrationStrategy(strategy, currency, ir_index, ir_index_tenor, quote_type)",
        "    BEGIN",
        " ",
        "        // If we don't have a strategy, we're done.",
        "        ",
        "        IF NOT strategy THEN",
        "            RETURN {}",
        "        ENDIF",
        "        ",
        "        IF strategy.Canonical == \"ATMSWAPTION\" THEN",
        "            RETURN NxBasket::ApplyATMSwaptionIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"ATMCAP\" THEN",
        "            RETURN NxBasket::ApplyATMCapIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"CAPSTRIKE\" THEN",
        "            RETURN NxBasket::ApplyCapStrikeIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"DIAGONAL\" THEN",
        "            RETURN NxBasket::ApplyDiagonalIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"SWAPTENOR\" THEN",
        "            RETURN NxBasket::ApplySwapTenorIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "        ENDIF",
        "        ",
        "        Numerix::SetFatal(\"ApplyIRCalibrationStrategy: unknown IR calibration strategy \\\"\" + strategy + \"\\\".\")",
        "        RETURN {}",
        "        ",
        "    END",
        " ",
        "    // Applies the \"ATM Swaption\" IR calibration strategy, which returns a set of all ATM swaptions.",
        "    ",
        "    FUNCTION NxBasket::ApplyATMSwaptionIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "    BEGIN",
        "        ",
        "        RETURN {}",
        "    ",
        "    END",
        null,
        "    // Applies the \"ATM Cap\" IR calibration strategy, which returns a set of all ATM caps.",
        "    ",
        "    FUNCTION NxBasket::ApplyATMCapIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        null,
        "    // Applies the \"Cap Strike\" IR calibration strategy, which returns a set of caps",
        "    // with the same strike and different tenor up to the deal maturity.",
        "    ",
        "    FUNCTION NxBasket::ApplyCapStrikeIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        null,
        "    // Applies the \"Diagonal\" IR calibration strategy, which returns a set of ATM",
        "    // swaptions that are diagonal with respect to the deal maturity.",
        "    ",
        "    FUNCTION NxBasket::ApplyDiagonalIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "    BEGIN",
        "    ",
        "        IF NOT EndTenor THEN",
        "            Numerix::SetFatal(\"ApplyDiagonalIRCalibrationStrategy: \\\"EndTenor\\\" must be set.\")",
        "        ENDIF",
        "        ",
        "        maturity = Numerix::Tenor(EndTenor)",
        "        values = {}",
        null,
        "        // Create list of swap tenors, option tenors, and strikes (all ATM).",
        "    ",
        "        span = maturity.Multiplier - 1",
        "        FOR i = 1 TO span",
        "            smi = span - i + 1",
        "            values @= {i.Format(\"1\") + \"Y\", smi.Format(\"1\") + \"Y\", \"ATM\"}",
        "        NEXT",
        null,
        "        // Create table and load into registry.",
        "    ",
        "        calibTable = Numerix::Table(\"DiagonalSwaptions_\" + NumerixUniqueNumber, {\"Swap Tenor\", \"Option Tenor\", \"Strike\"}, values.Transpose)",
        "        Numerix::Create(calibTable)",
        "    ",
        "        RETURN {\"INSTRUMENTDATA\", calibTable.ID}",
        null,
        "    END",
        null,
        "    // Applies the \"Swap Tenor\" IR calibration strategy, which returns a set of ATM",
        "    // swaptions with same swap tenor and different option tenors up to the deal maturity.",
        "    ",
        "    FUNCTION NxBasket::ApplySwapTenorIRCalibrationStrategy(currency, ir_index, ir_index_tenor, quote_type)",
        "    BEGIN",
        "    ",
        "        IF NOT EndTenor THEN",
        "            Numerix::SetFatal(\"ApplySwapTenorIRCalibrationStrategy: \\\"EndTenor\\\" must be set.\")",
        "        ENDIF",
        "        IF NOT IRSwapTenor THEN",
        "            Numerix::SetFatal(\"ApplySwapTenorIRCalibrationStrategy: \\\"IRSwapTenor\\\" must be set.\")",
        "        ENDIF",
        "        ",
        "        maturity = Numerix::Tenor(EndTenor)",
        "        swap_tenor = Numerix::Tenor(IRSwapTenor)",
        "        values = {}",
        null,
        "        // Create list of swap tenors, option tenors, and strikes (all ATM).",
        "    ",
        "        span = maturity.Multiplier - 1",
        "        FOR i = 1 TO span",
        "            values @= {swap_tenor, smi.Format(\"1\") + \"Y\", \"ATM\"}",
        "        NEXT",
        null,
        "        // Create table and load into registry.",
        "    ",
        "        calibTable = Numerix::Table(\"SwapTenorSwaptions_\" + NumerixUniqueNumber, {\"Swap Tenor\", \"Option Tenor\", \"Strike\"}, values.Transpose)",
        "        Numerix::Create(calibTable)",
        "    ",
        "        RETURN {\"INSTRUMENTDATA\", calibTable.ID}",
        "    ",
        "    END",
        null,
        "    //================================================================================",
        "    // FX Model creation and calibration functions.",
        "    //================================================================================",
        "   ",
        "    // Creates and calibrates an FX Model.",
        null,
        "    FUNCTION NxBasket::CreateFXModel(setting, parameters_id, base_currency, term_currency, quote_type)",
        "    BEGIN",
        "    ",
        "        // Start gathering calibration parameters. ",
        null,
        "        calibration_parameters = {}",
        null,
        "        // Set default values. Parameters can override.",
        null,
        "        qt = quote_type",
        "                    ",
        "        // Process optional parameters.",
        "                 ",
        "        parameters = Numerix::Load(parameters_id)",
        "        IF parameters THEN",
        "            FOREACH parameter IN parameters DO",
        "                IF parameter.BaseCurrency == base_currency AND parameter.TermCurrency == term_currency THEN",
        "  ",
        "                    FOREACH col_header IN Numerix::TableHeaders(parameters_id).Canonical DO",
        "                    ",
        "                        IF col_header == \"QUOTETYPE\" THEN",
        "                            IF parameter.QuoteType THEN",
        "                                qt = parameter.QuoteType",
        "                                calibration_parameters @= { \"QUOTE TYPE\", parameter.QuoteType }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"BASEDISCOUNTCURVE\" THEN",
        "                            IF parameter.BaseDiscountCurve THEN",
        "                                calibration_parameters @= { \"BASE DISCOUNT CURVE\", parameter.BaseDiscountCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"TERMDISCOUNTCURVE\" THEN",
        "                            IF parameter.TermDiscountCurve THEN",
        "                                calibration_parameters @= { \"TERM DISCOUNT CURVE\", parameter.TermDiscountCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"BASEIRINDEX\" THEN",
        "                            IF parameter.BaseIRIndex THEN",
        "                                calibration_parameters @= { \"BASE IR INDEX\", parameter.BaseIRIndex }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"BASEIRINDEXTENOR\" THEN",
        "                            IF parameter.BaseIRIndexTenor THEN",
        "                                calibration_parameters @= { \"BASE IR INDEX TENOR\", parameter.BaseIRIndexTenor }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"TERMIRINDEX\" THEN",
        "                            IF parameter.TermIRIndex THEN",
        "                                calibration_parameters @= { \"TERM IR INDEX\", parameter.TermIRIndex }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"TERMIRINDEXTENOR\" THEN",
        "                            IF parameter.TermIRIndexTenor THEN",
        "                                calibration_parameters @= { \"TERM IR INDEX TENOR\", parameter.TermIRIndexTenor }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"NOTICEPERIOD\" THEN",
        "                            IF parameter.NoticePeriod THEN",
        "                                calibration_parameters @= { \"NOTICE PERIOD\", parameter.NoticePeriod }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"FIXCALENDAR\" THEN",
        "                            IF parameter.FixCalendar THEN",
        "                                calibration_parameters @= { \"FIX CALENDAR\", parameter.FixCalendar }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"FIXCONVENTION\" THEN",
        "                            IF parameter.FixConvention THEN",
        "                                calibration_parameters @= { \"FIX CONVENTION\", parameter.FixConvention }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"VOLATILITYSURFACE\" THEN",
        "                            IF parameter.VolatilitySurface THEN",
        "                                calibration_parameters @= { \"VOLATILITYSURFACE\", parameter.VolatilitySurface }",
        "                            ENDIF",
        "                        ELSE",
        "                            IF col_header != \"BASECURRENCY\" AND col_header != \"TERMCURRENCY\" THEN",
        "                                Numerix::SetFatal(\"CreateFXModel: unknown parameter \\\"\" + col_header + \"\\\".\")",
        "                            ENDIF",
        "                        ENDIF",
        "                    ",
        "                    NEXT",
        "                ",
        "                    BREAK",
        "                    ",
        "                ENDIF",
        "            NEXT",
        "        ENDIF",
        null,
        "        // Apply the calibration strategy. ",
        null,
        "        strategy = NxBasket::ApplyFXCalibrationStrategy((setting.CalibrationStrategy), base_currency, term_currency, qt)",
        "        IF strategy.Size() > 0 THEN",
        "            calibration_parameters @= strategy",
        "        ENDIF",
        null,
        "        // Construct the ID of the model we are resolving.",
        null,
        "        model_id = \"FX.MODEL.\" + setting.ModelType + \".\" + base_currency + \"/\" + term_currency + \".\" + qt",
        null,
        "        // Resolve the model and return its ID.",
        null,
        "        RETURN Numerix::Resolve(model_id, NxBasket::CreateResolveParameterTable(calibration_parameters))",
        "        ",
        "    END",
        null,
        "    // Applies an FX calibration strategy to generate calibration parameters.",
        "    ",
        "    FUNCTION NxBasket::ApplyFXCalibrationStrategy(strategy, base_currency, term_currency, quote_type)",
        "    BEGIN",
        "    ",
        "        IF NOT strategy THEN",
        "            RETURN {}",
        "        ENDIF",
        "        ",
        "        IF strategy.Canonical == \"ALL\" THEN",
        "            RETURN NxBasket::ApplyAllFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"ATM\" THEN",
        "            RETURN NxBasket::ApplyATMFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"DATE\" THEN",
        "            RETURN NxBasket::ApplyDateFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"DELTA\" THEN",
        "            RETURN NxBasket::ApplyDeltaFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"STRIKE\" THEN",
        "            RETURN NxBasket::ApplyStrikeFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"TENOR\" THEN",
        "            RETURN NxBasket::ApplyTenorFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "        ENDIF",
        "        ",
        "        Numerix::SetFatal(\"ApplyFXCalibrationStrategy: unknown FX calibration strategy \\\"\" + strategy + \"\\\".\")",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"All\" FX calibration strategy, which returns a set of all the European options",
        "    // representing the whole implied volatility surface.",
        "    ",
        "    FUNCTION NxBasket::ApplyAllFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "    BEGIN",
        null,
        "        // Make sure we have loaded the volatility surface. ",
        null,
        "        surface_name = NxBasket::GetFXVolSurfaceID(base_currency, term_currency, quote_type)",
        "        surface = Numerix::Resolve(surface_name)",
        "        strikemat = Numerix::Load(surface.StrikeMatOutput)",
        "        ",
        "        // Get spot rate.",
        null,
        "        spot_rate = NxBasket::GetFXSpotRate(base_currency, term_currency, quote_type)",
        "        ",
        "        // Create the instrument data.",
        "        ",
        "        values = {}",
        "        inverse_surface_name = \"FX.VOL.\" + term_currency + \"/\" + base_currency + \".\" + quote_type",
        "        FOR r = 1 TO strikemat.Rows - 1 STEP 2",
        "            FOR c = 1 to strikemat.Columns",
        "                tenor = strikemat.RowHeaders[r]",
        "                strike = strikemat.Values[c][r + 1]",
        "                IF surface_name == inverse_surface_name THEN",
        "                    strike_value = 1 / strike",
        "                ELSE",
        "                    strike_value = strike",
        "                ENDIF",
        "                IF strike_value <= spot_rate THEN",
        "                    values @= { tenor, strike_value, \"CALL\" }",
        "                ELSE",
        "                    values @= { tenor, strike_value, \"PUT\" }",
        "                ENDIF",
        "            NEXT",
        "        NEXT",
        null,
        "        // Create table and load into registry.",
        "    ",
        "        calibTable = Numerix::Table(\"FXAllOptions_\" + NumerixUniqueNumber, {\"Tenor\", \"Strike\", \"Flavor\"}, values.Transpose)",
        "        Numerix::Create(calibTable)",
        "    ",
        "        RETURN {\"INSTRUMENTDATA\", calibTable.ID}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"ATM\" FX calibration strategy, which returns a set of all ATM European calls.",
        "    ",
        "    FUNCTION NxBasket::ApplyATMFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "    BEGIN",
        "    ",
        "        // Make sure we have loaded the volatility surface. ",
        "        ",
        "        surface = Numerix::Resolve(NxBasket::GetFXVolSurfaceID(base_currency, term_currency, quote_type))",
        "        ",
        "        // Get the dates.",
        "        ",
        "        dates = surface.DatesOutput",
        "        ",
        "        // Create the instrument data.",
        "        ",
        "        values = {}",
        "        i = 1",
        "        FOREACH date IN dates DO",
        "            values @= { date, \"ATM\", \"CALL\" }",
        "            i += 1",
        "        NEXT",
        null,
        "        // Create table and load into registry.",
        "    ",
        "        calibTable = Numerix::Table(\"FXATMOptions_\" + NumerixUniqueNumber, {\"Date\", \"Strike\", \"Flavor\"}, values.Transpose)",
        "        Numerix::Create(calibTable)",
        "    ",
        "        RETURN {\"DATESTRIKEINSTRUMENTDATA\", calibTable.ID}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"Date\" FX calibration strategy, which returns all ITM European options",
        "    // with different strike and same expiry.",
        "    ",
        "    FUNCTION NxBasket::ApplyDateFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"Delta\" FX calibration strategy, which returns all European options",
        "    // with the same delta.",
        "    ",
        "    FUNCTION NxBasket::ApplyDeltaFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"Strike\" FX calibration strategy, which returns all ITM European options",
        "    // with the same absolute strike value.",
        "    ",
        "    FUNCTION NxBasket::ApplyStrikeFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"Tenor\" FX calibration strategy, which returns all ITM European options",
        "    // with different strike and the same tenor.",
        "    ",
        "    FUNCTION NxBasket::ApplyTenorFXCalibrationStrategy(base_currency, term_currency, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        null,
        "    //================================================================================",
        "    // EQ Model creation and calibration functions.",
        "    //================================================================================",
        "    ",
        "    // Creates and calibrates an EQ Model.",
        null,
        "    FUNCTION NxBasket::CreateEQModel(setting, parameters_id, currency, exchange, ticker, quote_type)",
        "    BEGIN",
        null,
        "        // Start gathering calibration parameters. ",
        null,
        "        calibration_parameters = {}",
        "        ",
        "        // Set default values. Parameters can override.",
        "        ",
        "        qt = quote_type",
        "        asset_name = ticker",
        "                    ",
        "        // Process optional parameters.",
        "                 ",
        "        parameters = Numerix::Load(parameters_id)",
        "        IF parameters THEN",
        "            FOREACH parameter IN parameters DO",
        "                IF parameter.Currency == currency AND parameter.Exchange == exchange AND parameter.Ticker == ticker THEN",
        null,
        "                    FOREACH col_header IN Numerix::TableHeaders(parameters_id).Canonical DO",
        "                    ",
        "                        IF col_header == \"ASSETNAME\" THEN",
        "                            IF parameter.AssetName THEN",
        "                                asset_name = parameter.AssetName",
        "                                calibration_parameters @= { \"ASSET NAME\", parameter.AssetName }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"QUOTETYPE\" THEN",
        "                            IF parameter.QuoteType THEN",
        "                                qt = parameter.QuoteType",
        "                                calibration_parameters @= { \"QUOTE TYPE\", parameter.QuoteType }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"IRINDEX\" THEN",
        "                            IF parameter.IRIndex THEN",
        "                                calibration_parameters @= { \"IR INDEX\", parameter.IRIndex }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"IRINDEXTENOR\" THEN",
        "                            IF parameter.IRIndexTenor THEN",
        "                                calibration_parameters @= { \"IR INDEX TENOR\", parameter.IRIndexTenor }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"DISCOUNTCURVE\" THEN",
        "                            IF parameter.DiscountCurve THEN",
        "                                calibration_parameters @= { \"DISCOUNT CURVE\", parameter.DiscountCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"DIVIDENDCURVE\" THEN",
        "                            IF parameter.DividendCurve THEN",
        "                                calibration_parameters @= { \"DIVIDEND CURVE\", parameter.DividendCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"SPOTPRICE\" THEN",
        "                            IF parameter.SpotPrice THEN",
        "                                        calibration_parameters @= { \"SPOT PRICE\", parameter.SpotPrice }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"SPOTLAG\" THEN",
        "                            IF parameter.SpotLag THEN",
        "                                calibration_parameters @= { \"SPOT LAG\", parameter.SpotLag }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"SPOTLAGCALENDAR\" THEN",
        "                            IF parameter.SpotLagCalendar THEN",
        "                                calibration_parameters @= { \"SPOT LAG CALENDAR\", parameter.SpotLagCalendar }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"SPOTLAGCONVENTION\" THEN",
        "                            IF parameter.SpotLagConvention THEN",
        "                                calibration_parameters @= { \"SPOT LAG CONVENTION\", parameter.SpotLagConvention }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"DISCRETEDIVIDENDCONVENTION\" THEN",
        "                            IF parameter.DiscreteDividendConvention THEN",
        "                                calibration_parameters @= { \"DISCRETE DIVIDEND CONVENTION\", parameter.DiscreteDividendConvention }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"LASTDIVIDENDDATE\" THEN",
        "                            IF parameter.LastDividendDate THEN",
        "                                calibration_parameters @= { \"LAST DIVIDEND DATE\", parameter.LastDividendDate }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"CALIBRATIONMETHOD\" THEN",
        "                            IF parameter.CalibrationMethod THEN",
        "                                calibration_parameters @= { \"CALIBRATION METHOD\", parameter.CalibrationMethod }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"CALIBRATIONQUALITY\" THEN",
        "                            IF parameter.CalibrationQuality THEN",
        "                                calibration_parameters @= { \"CALIBRATION QUALITY\", parameter.CalibrationQuality }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"LIBRARYNAME\" THEN",
        "                            IF parameter.LibraryName THEN",
        "                                calibration_parameters @= { \"LIBRARY NAME\", parameter.LibraryName }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"EXTRAPOLATION\" THEN",
        "                            IF parameter.Extrapolation THEN",
        "                                calibration_parameters @= { \"EXTRAPOLATION\", parameter.Extrapolation }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"DIVIDENDTYPE\" THEN",
        "                            IF parameter.DividendType THEN",
        "                                calibration_parameters @= { \"DIVIDEND TYPE\", parameter.DividendType }",
        "                            ENDIF",
        "                        ELSE",
        "                            IF col_header != \"CURRENCY\" AND col_header != \"EXCHANGE\" AND col_header != \"TICKER\" THEN",
        "                                //Numerix::SetFatal(\"CreateEQModel: unknown parameter \\\"\" + col_header + \"\\\".\")",
        "                            ENDIF",
        "                        ENDIF",
        null,
        "                    NEXT",
        "                    ",
        "                    BREAK",
        "                    ",
        "                ENDIF",
        "            NEXT",
        "        ENDIF",
        null,
        "        // Apply the calibration strategy. ",
        null,
        "        strategy = NxBasket::ApplyEQCalibrationStrategy((setting.CalibrationStrategy), currency, exchange, ticker, qt, parameters_id)",
        "        IF strategy.Size() > 0 THEN",
        "            calibration_parameters @= strategy",
        "        ENDIF",
        null,
        "        // Construct the ID of the model we are resolving.",
        null,
        "        model_id = \"EQ.MODEL.\" + setting.ModelType + \".\" + currency + \"-\" + exchange + \"-\" + ticker + \".\" + qt",
        null,
        "        // Resolve the model and return its ID. Associate with the asset name.",
        null,
        "        RETURN { Numerix::Resolve(model_id, NxBasket::CreateResolveParameterTable(calibration_parameters)), asset_name }",
        "        ",
        "    END",
        null,
        "    // Applies an EQ calibration strategy to generate calibration parameters.",
        "    ",
        "    FUNCTION NxBasket::ApplyEQCalibrationStrategy(strategy, currency, exchange, ticker, quote_type, parameters_id)",
        "    BEGIN",
        null,
        "        IF NOT strategy THEN",
        "            RETURN {}",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"ABSOLUTESTRIKE\" THEN",
        "            RETURN NxBasket::ApplyAbsoluteStrikeEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "        ENDIF",
        "        ",
        "        IF strategy.Canonical == \"ALL\" THEN",
        "            RETURN NxBasket::ApplyAllEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"ATM\" THEN",
        "            RETURN NxBasket::ApplyATMEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"DATE\" THEN",
        "            RETURN NxBasket::ApplyDateEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"RELATIVESTRIKE\" THEN",
        "            RETURN NxBasket::ApplyRelativeStrikeEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"TENOR\" THEN",
        "            RETURN NxBasket::ApplyTenorEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "        ENDIF",
        "        ",
        "        Numerix::SetFatal(\"ApplyEQCalibrationStrategy: unknown EQ calibration strategy \\\"\" + strategy + \"\\\".\")",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"All\" EQ calibration strategy, which returns a set of all the European options",
        "    // representing the whole implied volatility surface.",
        "    ",
        "    FUNCTION NxBasket::ApplyAllEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "    BEGIN",
        "    ",
        "        // Make sure we have loaded the volatility surface. ",
        "        ",
        "        surface = NxBasket::ResolveVolatilityWithParameter(currency, exchange, ticker, quote_type, parameters_id)",
        "        ",
        "        // Get the dates and strikes.",
        "        ",
        "        dates = surface.DatesOutput",
        "        strikes = surface.StrikesOutput",
        "        spot_price = NxBasket::GetEQSpotPrice(currency, exchange, ticker, quote_type)",
        "        ",
        "        // Create the instrument data.",
        "        ",
        "        values = {}",
        "        i = 1",
        "        FOREACH date IN dates DO",
        "            FOREACH strike in strikes DO",
        "                IF strike <= spot_price THEN",
        "                  values @= { date, strike, \"CALL\" }",
        "                ELSE",
        "                  values @= { date, strike, \"PUT\" }",
        "                ENDIF",
        "                i += 1",
        "            NEXT",
        "        NEXT",
        null,
        "        // Create table and load into registry.",
        "    ",
        "        calibTable = Numerix::Table(\"EQAllOptions_\" + NumerixUniqueNumber, {\"EndDate\", \"Strike\", \"Flavor\"}, values.Transpose)",
        "        Numerix::Create(calibTable)",
        "    ",
        "        RETURN {\"DATESTRIKEINSTRUMENTDATA\", calibTable.ID}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"ATM\" EQ calibration strategy, which returns a set of all ATM European calls.",
        "    ",
        "    FUNCTION NxBasket::ApplyATMEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "    BEGIN",
        "    ",
        "        // Make sure we have loaded the volatility surface. ",
        "        ",
        "        surface = NxBasket::ResolveVolatilityWithParameter(currency, exchange, ticker, quote_type, parameters_id)",
        "        ",
        "        // Get the dates.",
        "        ",
        "        dates = surface.DatesOutput",
        "        ",
        "        // Create the instrument data.",
        "        ",
        "        values = {}",
        "        i = 1",
        "        FOREACH date IN dates DO",
        "            values @= { date, \"ATM\", \"CALL\" }",
        "            i += 1",
        "        NEXT",
        null,
        "        // Create table and load into registry.",
        "    ",
        "        calibTable = Numerix::Table(\"EQATMOptions_\" + NumerixUniqueNumber, {\"EndDate\", \"Strike\", \"Flavor\"}, values.Transpose)",
        "        Numerix::Create(calibTable)",
        "    ",
        "        RETURN {\"DATESTRIKEINSTRUMENTDATA\", calibTable.ID}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"Date\" EQ calibration strategy, which returns all ITM European options",
        "    // with different strike and same expiry.",
        "    ",
        "    FUNCTION NxBasket::ApplyDateEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"Absolute Strike\" EQ calibration strategy, which returns all European options",
        "    // with the same absolute strike value.",
        "    ",
        "    FUNCTION NxBasket::ApplyAbsoluteStrikeEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"Relative Strike\" EQ calibration strategy, which returns all ITM European options",
        "    // with the same relative strike value (as a percentage of spot price).",
        "    ",
        "    FUNCTION NxBasket::ApplyRelativeStrikeEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"Tenor\" EQ calibration strategy, which returns all ITM European options",
        "    // with different strike and the same tenor.",
        "    ",
        "    FUNCTION NxBasket::ApplyTenorEQCalibrationStrategy(currency, exchange, ticker, quote_type, parameters_id)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        null,
        "    //================================================================================",
        "    // CMDTY Model creation and calibration functions.",
        "    //================================================================================",
        "    ",
        "    // Creates and calibrates an CMDTY Model.",
        null,
        "    FUNCTION NxBasket::CreateCMDTYModel(setting, parameters_id, currency, exchange, symbol, quote_type)",
        "    BEGIN",
        null,
        "        // Start gathering calibration parameters. ",
        null,
        "        calibration_parameters = {}",
        "        ",
        "        // Set default values. Parameters can override.",
        "        ",
        "        qt = quote_type",
        "        asset_name = symbol",
        "                    ",
        "        // Process optional parameters.",
        "                 ",
        "        parameters = Numerix::Load(parameters_id)",
        "        IF parameters THEN",
        "            FOREACH parameter IN parameters DO",
        "                IF parameter.Currency == currency AND parameter.Exchange == exchange AND parameter.Symbol == symbol THEN",
        null,
        "                    FOREACH col_header IN Numerix::TableHeaders(parameters_id).Canonical DO",
        null,
        "                        IF col_header == \"ASSETNAME\" THEN",
        "                            IF parameter.AssetName THEN",
        "                                asset_name = parameter.AssetName",
        "                                calibration_parameters @= { \"ASSET NAME\", parameter.AssetName }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"QUOTETYPE\" THEN",
        "                            IF parameter.QuoteType THEN",
        "                                qt = parameter.QuoteType",
        "                                calibration_parameters @= { \"QUOTE TYPE\", parameter.QuoteType }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"IRQUOTETYPE\" THEN",
        "                            IF parameter.IRQuoteType THEN",
        "                                qt = parameter.IRQuoteType",
        "                                calibration_parameters @= { \"IR QUOTE TYPE\", parameter.IRQuoteType }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"VOLATILITYSURFACE\" THEN",
        "                            IF parameter.VolatilitySurface THEN",
        "                                calibration_parameters @= { \"VOLATILITY SURFACE\", parameter.VolatilitySurface }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"IRINDEX\" THEN",
        "                            IF parameter.IRIndex THEN",
        "                                calibration_parameters @= { \"IR INDEX\", parameter.IRIndex }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"IRINDEXTENOR\" THEN",
        "                            IF parameter.IRIndexTenor THEN",
        "                                calibration_parameters @= { \"IR INDEX TENOR\", parameter.IRIndexTenor }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"DISCOUNTCURVE\" THEN",
        "                            IF parameter.DiscountCurve THEN",
        "                                calibration_parameters @= { \"DISCOUNT CURVE\", parameter.DiscountCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"COMMODITYFORWARDCURVE\" THEN",
        "                            IF parameter.CommodityForwardCurve THEN",
        "                                calibration_parameters @= { \"COMMODITY FORWARD CURVE\", parameter.CommodityForwardCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"SPOTPRICE\" THEN",
        "                            IF parameter.SpotPrice THEN",
        "                                calibration_parameters @= { \"SPOT PRICE\", parameter.SpotPrice }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"BASIS\" THEN",
        "                            IF parameter.Basis THEN",
        "                                calibration_parameters @= { \"BASIS\", parameter.Basis }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"FIXINGSLAGCALENDAR\" THEN",
        "                            IF parameter.FixingsLagCalendar THEN",
        "                                calibration_parameters @= { \"FIXINGS LAG CALENDAR\", parameter.FixingsLagCalendar }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"CALIBRATIONQUALITY\" THEN",
        "                            IF parameter.CalibrationQuality THEN",
        "                                calibration_parameters @= { \"CALIBRATION QUALITY\", parameter.CalibrationQuality }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"CALIBRATIONINITIALIZATIONMETHOD\" THEN",
        "                            IF parameter.CalibrationInitializationMethod THEN",
        "                                calibration_parameters @= { \"CALIBRATION INITIALIZATION METHOD\", parameter.CalibrationInitializationMethod }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"CALIBRATIONTYPE\" THEN",
        "                            IF parameter.CalibrationType THEN",
        "                                calibration_parameters @= { \"CALIBRATION TYPE\", parameter.CalibrationType }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"CALIBRATE\" THEN",
        "                            IF parameter.Calibrate THEN",
        "                                calibration_parameters @= { \"CALIBRATE\", parameter.Calibrate }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"IMPLIEDVOLATILITYALGORITHMSELECTION\" THEN",
        "                            IF parameter.ImpliedVolatilityAlgorithmSelection THEN",
        "                                calibration_parameters @= { \"IMPLIED VOLATILITY ALGORITHM SELECTION\", parameter.ImpliedVolatilityAlgorithmSelection }",
        "                            ENDIF",
        "                        //ELSE",
        "                          //  IF col_header != \"CURRENCY\" AND col_header != \"EXCHANGE\" AND col_header != \"SYMBOL\" THEN",
        "                            //    Numerix::SetFatal(\"CreateCMDTYModel: unknown parameter \\\"\" + col_header + \"\\\".\")",
        "                       //     ENDIF",
        "                        ENDIF",
        "                        ",
        "                    NEXT",
        "                        ",
        "                    BREAK",
        "                    ",
        "                ENDIF",
        "            NEXT",
        "        ENDIF",
        null,
        "        // Apply the calibration strategy. ",
        null,
        "        strategy = NxBasket::ApplyCMDTYCalibrationStrategy((setting.CalibrationStrategy), currency, exchange, symbol, qt)",
        "        IF strategy.Size() > 0 THEN",
        "            calibration_parameters @= strategy",
        "        ENDIF",
        null,
        "        // Construct the ID of the model we are resolving.",
        null,
        "        model_id = \"CMDTY.MODEL.\" + setting.ModelType + \".\" + currency + \"-\" + exchange + \"-\" + symbol + \".\" + qt",
        null,
        "        // Resolve the model and return its ID. Associate with the asset name.",
        null,
        "        RETURN { Numerix::Resolve(model_id, NxBasket::CreateResolveParameterTable(calibration_parameters)), asset_name }",
        "        ",
        "    END",
        null,
        "    // Applies a CMDTY calibration strategy to generate calibration parameters.",
        "    ",
        "    FUNCTION NxBasket::ApplyCMDTYCalibrationStrategy(strategy, currency, exchange, symbol, quote_type)",
        "    BEGIN",
        null,
        "        IF NOT strategy THEN",
        "            RETURN {}",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"ABSOLUTESTRIKE\" THEN",
        "            RETURN NxBasket::ApplyAbsoluteStrikeCMDTYalibrationStrategy(currency, exchange, symbol, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"ATM\" THEN",
        "            RETURN NxBasket::ApplyATMCMDTYCalibrationStrategy(currency, exchange, symbol, quote_type)",
        "        ENDIF",
        " ",
        "        IF strategy.Canonical == \"RELATIVESTRIKE\" THEN",
        "            RETURN NxBasket::ApplyRelativeStrikeCMDTYCalibrationStrategy(currency, exchange, symbol, quote_type)",
        "        ENDIF",
        "        ",
        "        Numerix::SetFatal(\"ApplyCMDTYCalibrationStrategy: unknown CMDTY calibration strategy \\\"\" + strategy + \"\\\".\")",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"ATM\" CMDTY calibration strategy, which returns a set of all ATM European future options.",
        "    ",
        "    FUNCTION NxBasket::ApplyATMCMDTYCalibrationStrategy(currency, exchange, symbol, quote_type)",
        "    BEGIN",
        "    ",
        "        // Get the future data",
        "        FutureQuote = Numerix::Quote.Key = (\"CMDTY.\" + currency + \"-\" + exchange + \"-\" + symbol + \".FWD-<SettlementDate:Date>.\"+ quote_type)",
        null,
        "        // Get the dates.",
        "        dates = {}",
        "        dates &= FutureQuote.SettlementDate",
        null,
        "        // Get the future price",
        "        Keys = {} ",
        "        Keys &= FutureQuote.Key ",
        null,
        "        // Create the instrument data.",
        "        ",
        "        values = {}",
        "        i = 1",
        "        For i = 1 To FutureQuote.Rows",
        "            values @= { dates[i], \"ATM\", \"CALL\", Numerix::Quote(keys[i]).Value }",
        "        NEXT",
        null,
        "        // Create table and load into registry.",
        "    ",
        "        calibTable = Numerix::Table(\"CMDTYATMOptions_\" + NumerixUniqueNumber, {\"SettlementDate\", \"Strike\", \"Flavor\", \"FuturePrice\"}, values.Transpose)",
        "        Numerix::Create(calibTable)",
        "    ",
        "        RETURN {\"DATESTRIKEINSTRUMENTDATA\", calibTable.ID}",
        "    END",
        " ",
        "    // Applies the \"Absolute Strike\" CMDTY calibration strategy, which returns all ITM European options",
        "    // with the same absolute strike value.",
        "    ",
        "    FUNCTION NxBasket::ApplyAbsoluteStrikeCMDTYCalibrationStrategy(currency, exchange, symbol, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    // Applies the \"Relative Strike\" CMDTY calibration strategy, which returns all ITM European options",
        "    // with the same relative strike value (as a percentage of spot price).",
        "    ",
        "    FUNCTION NxBasket::ApplyRelativeStrikeCMDTYCalibrationStrategy(currency, exchange, symbol, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN {}",
        "    ",
        "    END",
        " ",
        "    //================================================================================",
        "    // CR Model creation and calibration functions.",
        "    //================================================================================",
        "    ",
        "    // Creates and calibrates a CR Model.",
        null,
        "    FUNCTION NxBasket::CreateCRModel(setting, parameters_id, currency, reference_entity, debt_type, restructuring_clause, quote_type)",
        "    BEGIN",
        null,
        "        // Start gathering calibration parameters. ",
        null,
        "        calibration_parameters = {}",
        "        ",
        "        // Set default values. Parameters can override.",
        "        ",
        "        qt = quote_type",
        "        ",
        "        // Process optional parameters.",
        "                 ",
        "        parameters = Numerix::Load(parameters_id)",
        "        IF parameters THEN",
        "            FOREACH parameter IN parameters DO",
        "                IF parameter.Currency == currency AND parameter.ReferenceEntity == reference_entity AND parameter.DebtType == debt_type AND parameter.RestructuringClause == restructuring_clause THEN",
        "                ",
        "                    FOREACH col_header IN Numerix::TableHeaders(parameters_id).Canonical DO",
        "                    ",
        "                        IF col_header == \"QUOTETYPE\" THEN",
        "                            IF parameter.QuoteType THEN",
        "                                qt = parameter.QuoteType",
        "                                calibration_parameters @= { \"QUOTE TYPE\", parameter.QuoteType }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"IRCURRENCY\" THEN",
        "                            IF parameter.IRCurrency THEN",
        "                                calibration_parameters @= { \"IR CURRENCY\", parameter.IRCurrency }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"DISCOUNTCURVE\" THEN",
        "                            IF parameter.DiscountCurve THEN",
        "                                calibration_parameters @= { \"DISCOUNT CURVE\", parameter.DiscountCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"CREDITCURVE\" THEN",
        "                            IF parameter.CreditCurve THEN",
        "                                calibration_parameters @= { \"CREDIT CURVE\", parameter.CreditCurve }",
        "                            ENDIF",
        "                        ELSE ",
        "                            IF col_header != \"CURRENCY\" AND col_header != \"REFERENCEENTITY\" AND col_header != \"DEBTTYPE\" AND col_header != \"RESTRUCTURINGCLAUSE\" THEN",
        "                                Numerix::SetFatal(\"CreateCRModel: unknown parameter \\\"\" + col_header + \"\\\".\")",
        "                            ENDIF",
        "                        ENDIF",
        "                    ",
        "                    NEXT",
        "                ",
        "                    BREAK",
        "                     ",
        "                ENDIF",
        "            NEXT",
        "        ENDIF",
        null,
        "        // Currently, there are no calibration strategies defined for credit models.",
        "        ",
        "        // Construct the ID of the model we are resolving.",
        null,
        "        model_id = \"CR.MODEL.\" + setting.ModelType + \".\" + currency + \"-\" + reference_entity + \"-\" + debt_type + \"-\" + restructuring_clause + \".\" + qt",
        null,
        "        // Resolve the model and return its ID.",
        null,
        "        RETURN { Numerix::Resolve(model_id, NxBasket::CreateResolveParameterTable(calibration_parameters)), \"\" }",
        "        ",
        "    END",
        null,
        "    //================================================================================",
        "    // Utility functions.",
        "    //================================================================================",
        "   ",
        "    // Takes a set of NAME/VALUE pairs and creates a table suitable for the two argument Resolve().",
        "    ",
        "    FUNCTION NxBasket::CreateResolveParameterTable(pairs)",
        "    BEGIN",
        "    ",
        "        IF pairs.Size > 0 THEN",
        "            paramsTable = Numerix::Table(\"Resolve_Parameters_\" + Numerix::UniqueNumber, {\"Name\", \"Value\"}, pairs.Transpose)",
        "            Numerix::Create(paramsTable)",
        "            RETURN paramsTable.ID",
        "        ELSE",
        "            paramsTable = Numerix::Table(\"Resolve_Parameters_\" + Numerix::UniqueNumber, {\"Name\", \"Value\"}, {{\"DUMMY_HEADER\"}, {\"DUMMY_VALUE\"}})",
        "            Numerix::Create(paramsTable)",
        "            RETURN paramsTable.ID",
        "        ENDIF",
        "        ",
        "    END",
        null,
        "    // Gets the ID of an IR volatility surface.",
        "    ",
        "    FUNCTION NxBasket::GetIRVolSurfaceID(type, currency, ir_index, ir_index_tenor, quote_type)",
        "    BEGIN",
        null,
        "        // Make sure we can resolve the IR index and tenor.",
        "        ",
        "        resolved_ir_index = ir_index        ",
        "        IF NOT resolved_ir_index THEN",
        "          settings = Numerix::Load(\"SETTINGS.CURRENCY\")         ",
        "          resolved_ir_index = settings[currency].IRIndex",
        "        ENDIF",
        "        ",
        "        resolved_ir_index_tenor = ir_index_tenor       ",
        "        IF NOT resolved_ir_index_tenor THEN",
        "          settings = Numerix::Load(\"SETTINGS.CURRENCY\")         ",
        "          resolved_ir_index_tenor = settings[currency].IRIndexTenor",
        "        ENDIF",
        null,
        "        IF type.Canonical == \"SWAPTION\" THEN",
        "            RETURN \"IR.VOL.SWPT.\" + currency + \"-\" + resolved_ir_index + \"-\" + resolved_ir_index_tenor + \".ATM.\" + quote_type",
        "        ENDIF",
        "        ",
        "        IF type.Canonical == \"CAP\" THEN",
        "            RETURN \"IR.VOL.CAP.\" + currency + \"-\" + resolved_ir_index + \"-\" + resolved_ir_index_tenor + \".\" + quote_type",
        "        ENDIF",
        null,
        "        RETURN \"\"",
        "        ",
        "    END",
        null,
        "    // Gets the ID of an FX volatility surface.",
        "    ",
        "    FUNCTION NxBasket::GetFXVolSurfaceID(base_currency, term_currency, quote_type)",
        "    BEGIN",
        null,
        "        table = Numerix::Load(\"Settings.CurrencyPair\")",
        "        IF NOT table THEN",
        "            Numerix::SetFatal(\"Settings.CurrencyPair table not found\")",
        "            RETURN \"\"",
        "        ENDIF",
        null,
        "        columns = table.ColumnHeaders.Canonical",
        null,
        "        IF NOT columns.Find(\"KEY\") THEN",
        "            Numerix::SetFatal(\"KEY not found in Settings.CurrencyPair table\")",
        "            RETURN \"\"",
        "        ENDIF       ",
        null,
        "        FOREACH row in table DO",
        "            IF row.Key.Canonical  == base_currency&term_currency THEN",
        "                FX_Vol = \"FX.VOL.\" + base_currency + \"/\" + term_currency + \".\" + quote_type",
        "                BREAK",
        "            ELSEIF row.Key.Canonical  == term_currency&base_currency THEN",
        "                FX_Vol = \"FX.VOL.\" + term_currency + \"/\" + base_currency + \".\" + quote_type",
        "                BREAK",
        "            ELSE",
        "                FX_Vol = \"\"",
        "                BREAK",
        "            ENDIF",
        "        NEXT",
        null,
        "        RETURN FX_Vol",
        "        ",
        "    END",
        null,
        "    // Gets the ID of an EQ volatility surface.",
        "    ",
        "    FUNCTION NxBasket::GetEQVolSurfaceID(currency, exchange, ticker, quote_type)",
        "    BEGIN",
        null,
        "        RETURN \"EQ.VOL.\" + currency + \"-\" + exchange + \"-\" + ticker + \".\" + quote_type",
        "        ",
        "    END",
        " ",
        "    FUNCTION NxBasket::ResolveVolatilityWithParameter(currency, exchange, ticker, quote_type, parameters_id)",
        "    BEGIN",
        "        // Start gathering volatility parameters. ",
        null,
        "        volatility_parameters = {}",
        "        ",
        "        // Process optional parameters.",
        "                 ",
        "        parameters = Numerix::Load(parameters_id)",
        "        IF parameters THEN",
        "            FOREACH parameter IN parameters DO",
        "                IF parameter.Currency == currency AND parameter.Exchange == exchange AND parameter.Ticker == ticker THEN",
        null,
        "                    FOREACH col_header IN Numerix::TableHeaders(parameters_id).Canonical DO",
        "                    ",
        "                        IF col_header == \"DIVIDENDCURVE\" THEN",
        "                            IF parameter.DividendCurve THEN",
        "                                volatility_parameters @= { \"DIVIDEND CURVE\", parameter.DividendCurve }",
        "                            ENDIF",
        "                        ELSEIF col_header == \"DIVIDENDTYPE\" THEN",
        "                            IF parameter.DividendType THEN",
        "                                volatility_parameters @= { \"DIVIDEND TYPE\", parameter.DividendType }",
        "                            ENDIF",
        "                        ELSE",
        "                            IF col_header != \"CURRENCY\" AND col_header != \"EXCHANGE\" AND col_header != \"TICKER\" THEN",
        "                                //Numerix::SetFatal(\"EQ Calibration Strategy: unknown parameter \\\"\" + col_header + \"\\\".\")",
        "                            ENDIF",
        "                        ENDIF",
        null,
        "                    NEXT",
        "                    ",
        "                    BREAK",
        "                    ",
        "                ENDIF",
        "            NEXT",
        "        ENDIF",
        null,
        "        RETURN Numerix::Resolve(NxBasket::GetEQVolSurfaceID(currency, exchange, ticker, quote_type), NxBasket::CreateResolveParameterTable(volatility_parameters))",
        "        ",
        "    END",
        null,
        "    // Gets the ID of a CMDTY volatility surface.",
        "    ",
        "    FUNCTION NxBasket::GetCMDTYVolSurfaceID(currency, exchange, ticker, quote_type)",
        "    BEGIN",
        null,
        "        RETURN \"CMDTY.VOL.\" + currency + \"-\" + exchange + \"-\" + symbol + \".ABSLT.\" + quote_type",
        "        ",
        "    END",
        "   ",
        "    //support on and after 11.5",
        "    // Get the FX Spot Rate from the current market for the specified currency pair. support 11.5 and after",
        "    ",
        "    FUNCTION NxBasket::GetFXSpotRate(base_currency, term_currency, quote_type)",
        "	BEGIN ",
        "		key = \"FX.\" + base_currency + term_currency + \"-SPOT.\" + quote_type",
        "		keyInverse = \"FX.\" + term_currency + base_currency + \"-SPOT.\" + quote_type",
        "        IF Numerix::Quote.Key = key THEN",
        "            RETURN Numerix::Quote(key).Value",
        "        ELSEIF Numerix::Quote.Key = keyInverse THEN",
        "            RETURN 1/Numerix::Quote(keyInverse).Value",
        "        ELSE",
        "        //Resolve the spot matrix and view it.        ",
        "        spot = Numerix::Resolve(\"FX.SPOT.\" + quote_type) + \"^MDE.FXSPOT.MATRIX\"",
        "        mat = spot.View",
        "        //Index to find result.",
        "        base_rates = mat.Value(base_currency)",
        "        s = base_rates[mat.Value(\"SPOTFX\").Find(term_currency)]        ",
        "        RETURN s",
        "        ENDIF",
        "    END",
        null,
        null,
        "// support in 11.0.7",
        "//FUNCTION NxBasket::GetFXSpotRate(base_currency, term_currency, quote_type)",
        "//BEGIN",
        "//    ",
        "//    spot= Numerix::Resolve(\"FX.SPOT.\" + quote_type)",
        "//    FXSPOTMATRIXID =Numerix::Load(spot)",
        "//    FXData = FXSPOTMATRIXID.DATA",
        "//    BaseCCY = FXSPOTMATRIXID.Currency",
        "//    FXDataID = Numerix::Load (FXData)",
        "//    CCYS = FXDataID.CURRENCY",
        "//    Values = FXDataID.SPOTPRICE",
        "//",
        "//     IF (base_currency == BaseCCY) THEN",
        "//        R = CCYS.Find(term_currency)",
        "//        RETURN Numerix::Double(1/Values[R])",
        "//     ELSEIF  (term_currency == BaseCCY)  THEN",
        "//        R = CCYS.Find(base_currency)",
        "//        RETURN Numerix::Double(Values[R])",
        "//     ELSE",
        "//        R1 = CCYS.Find(term_currency)",
        "//        R2 = CCYS.Find(base_currency)",
        "//        RETURN Numerix::Double(Values[R2]) / Numerix::Double(Values[R1])",
        "//    END IF",
        "//END",
        null,
        null,
        "   ",
        "    // Get the EQ Spot Price from the current market for the specified equity.",
        "    ",
        "    FUNCTION NxBasket::GetEQSpotPrice(currency, exchange, ticker, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN Numerix::Quote(\"EQ.\" + currency + \"-\" + exchange + \"-\"  + ticker + \".SPOT.\" + quote_type).Value",
        null,
        "    END",
        "   ",
        "    // Get the CMDTY Spot Price from the current market for the specified commodity.",
        "    ",
        "    FUNCTION NxBasket::GetCMDTYSpotPrice(currency, exchange, symbol, quote_type)",
        "    BEGIN",
        "    ",
        "        RETURN Numerix::Quote(\"CMDTY.\" + currency + \"-\" + exchange + \"-\"  + symbol + \".SPOT.\" + quote_type).Value",
        null,
        "    END",
        null,
        "FUNCTION NxBasket::GetDefaultIRModelParameter(dom_currency,for_currencies_id,QuoteType,dom_curve_id=\"\",for_curve_id=\"\")",
        "    BEGIN",
        "        IRModelParameter = {}       ",
        "        currency = dom_currency          ",
        "		// startdebugger",
        "        IF dom_curve_id THEN",
        "            DiscountCurve = dom_curve_id",
        "        ELSE",
        "            DiscountCurve = \"FX.\" + currency + \"/USD.FWD.\" + QuoteType",
        "        ENDIF",
        "        IRModelParameter @= {currency, DiscountCurve}   ",
        null,
        "        for_currencies = Numerix::Load(for_currencies_id)",
        null,
        "        IF for_currencies THEN",
        "	        FOREACH for_currency IN for_currencies DO    ",
        "	            currency = for_currency.Currency                  ",
        "	            IF for_curve_id THEN",
        "                    DiscountCurve = for_curve_id",
        "                ELSE",
        "                    DiscountCurve = \"FX.\" + currency + \"/USD.FWD.\" + QuoteType",
        "                ENDIF",
        "	            IRModelParameter @= {currency, DiscountCurve}   ",
        "	        NEXT",
        "        ENDIF",
        "		if IRModelParameter.size>0 then",
        "			// Transpose only if parameter is not empty",
        "			IRModelParameter= IRModelParameter.Transpose",
        "		endif",
        "        table = Numerix::Table(\"IRModelParameter\" + NumerixUniqueNumber, {\"CURRENCY\", \"DISCOUNTCURVE\"}, IRModelParameter) ",
        "        Numerix::Create(table)",
        "        RETURN table.ID		",
        "    END",
        null,
        "FUNCTION NxBasket::GetDefaultFXModelParameter(dom_currency,for_currencies_id, QuoteType,dom_curve_id=\"\",for_curve_id=\"\")",
        "    BEGIN		",
        "        for_currencies = Numerix::Load(for_currencies_id)",
        "        IF NOT for_currencies THEN",
        "            RETURN \"\"",
        "        ENDIF",
        "		",
        "        FXModelParameter = {}    ",
        "        IF dom_curve_id THEN",
        "            DOMDiscountCurve = dom_curve_id",
        "        ELSE",
        "    		IF dom_currency =\"USD\" THEN ",
        "    			DOMDiscountCurve = \"IR.USD-LIBOR-3M.\" + QuoteType",
        "    		ELSE",
        "    			DOMDiscountCurve = \"FX.\"+ dom_currency + \"/USD.FWD.\" + QuoteType",
        "    		ENDIF",
        "        ENDIF",
        "        FOREACH for_currency IN for_currencies DO    ",
        "            currency = for_currency.Currency                  ",
        "            surface_name = NxBasket::GetFXVolSurfaceID(currency, dom_currency, QuoteType)",
        "			IF for_curve_id THEN",
        "                ForDiscountCurve = for_curve_id",
        "            ELSE",
        "                IF currency =\"USD\" THEN ",
        "    				ForDiscountCurve = \"IR.USD-LIBOR-3M.\" + QuoteType",
        "    			ELSE",
        "    				ForDiscountCurve = \"FX.\"+ currency + \"/USD.FWD.\" + QuoteType",
        "    			ENDIF",
        "            ENDIF",
        "            FXModelParameter @= {currency,dom_currency, surface_name,DOMDiscountCurve,ForDiscountCurve}   ",
        "        NEXT",
        "        table = Numerix::Table(\"FXModelParameter\" + NumerixUniqueNumber, {\"BASECURRENCY\", \"TERMCURRENCY\",\"VOLATILITYSURFACE\",\"TERMDISCOUNTCURVE\",\"BASEDISCOUNTCURVE\"}, FXModelParameter.Transpose) ",
        "        Numerix::Create(table)",
        "        RETURN table.ID		",
        "    END",
        null,
        "FUNCTION NxBasket::ReplaceCalibrationQuality(equities_id, parameters_id, CalibrationQuality_id) ",
        "BEGIN",
        null,
        "   table2 = NumerixLoad(CalibrationQuality_id) ",
        "   IF NOT table2 THEN",
        "       RETURN parameters_id",
        "   ENDIF",
        null,
        "   table1 = NumerixLoad(parameters_id) ",
        "   IF NOT table1 THEN        ",
        "       RETURN AddColumnForTable(equities_id, \"CalibrationQuality\", CalibrationQuality_id) ",
        "   ENDIF   ",
        null,
        "   EQtable = NumerixLoad(equities_id) ",
        "   size = NumerixTableRowCount(parameters_id) * 1.0",
        "   columns = table1.ColumnHeaders.Canonical",
        "   IF columns.Find(\"CALIBRATIONQUALITY\") THEN      ",
        "      table1.CalibrationQuality  =  {}         ",
        "      FOR i=1 to size     ",
        "            table1.CalibrationQuality  &=  {CalibrationQuality_id}       ",
        "      NEXT",
        "   ELSE",
        "      table1 = NumerixLoad(AddColumnForTable(parameters_id, \"CalibrationQuality\", CalibrationQuality_id) )",
        "   ENDIF",
        null,
        "      FOREACH equity in EQtable DO        ",
        "          Flag = TRUE",
        "          FOREACH parameter in table1 DO      ",
        "             IF parameter.Currency == equity.Currency AND parameter.Exchange == equity.Exchange AND parameter.Ticker == equity.Ticker THEN",
        "                Flag = FALSE",
        "             ENDIF   ",
        "          NEXT",
        null,
        "          IF Flag THEN",
        "              table1.Currency &= {equity.Currency}",
        "              table1.Exchange &= {equity.Exchange}",
        "              table1.Ticker &= {equity.Ticker}",
        "              table1.CalibrationQuality &= {CalibrationQuality_id}",
        "          ENDIF   ",
        "      NEXT",
        "      table = NumerixTable(\"ModelParameter\" + NumerixUniqueNumber, columns, table1.Values) ",
        "      NumerixCreate(table) ",
        "      RETURN table.ID",
        "END",
        "      ",
        "// Creates a State Index object.",
        "function NxCust::StateIndexObj(fn_indexName, fn_indexCurrency, fn_eventName)",
        "{",
        "    call = Numerix::Object({\"StateIndex\" + Numerix::UniqueNumber, \"INDEX\", \"STATE\"}) & ",
        "    {",
        "		\"name\" : fn_indexName,",
        "        \"events\" : fn_eventName,",
        "        \"currency\" : fn_indexCurrency",
        "    }",
        "        ",
        "    return call.Create		",
        "}",
        null,
        "//Create the truncated data index object",
        "function NxCust::TruncateDataIndex(DataName, Data, Schedule)",
        "{   ",
        "    if Data is \"double\" {",
        "        Data1 = Data",
        "    }",
        "    else{",
        "        //truncate the data table",
        "        fixing_date = Numerix::query(Schedule.ID, \"FIXDATE=<Date>\", \"Date\")",
        "        fix_date = fixing_date.Date",
        "        data_table = Numerix::Load(Data).Value",
        "        new_table = {}",
        "        for i = (data_table.size - fix_date.size + 1) to data_table.size :",
        "            new_table @= {data_table[i]}    ",
        "        Data1 = Numerix::Table(\"DATA.TABLE\"+Numerix::UniqueNumber(), {\"VALUE\"}, new_table.Transpose).Create",
        "    }",
        null,
        "    //create the new data index object",
        "    call = Numerix::Object({\"DataIndex\" + Numerix::UniqueNumber, \"INDEX\", \"DATA\"}) & ",
        "    {",
        "		\"name\"      : DataName,",
        "        \"events\"    : Schedule.view(\"CallValues\")[Schedule.view(\"CallHeaders\").find(\"name\")],",
        "        \"data\"      : Data1",
        "    }",
        null,
        "    return call.create",
        "}",
        null,
        null,
        "constfunction NxCust::GetArrearsResetDefault(Schedule)",
        "{",
        "    ifnot Schedule :",
        "        return false",
        "    ",
        "    ScheduleDates = Numerix::Load(Schedule)",
        "    fixing_date = ScheduleDates.FIXDATE",
        "    accrual_start_date = ScheduleDates.ACCRUALSTART",
        "    ",
        "    if fixing_date isnot \"LIST\" :",
        "    {",
        "        if Numerix::Date(fixing_date) <= Numerix::Date(accrual_start_date) :",
        "            return false",
        "        else :",
        "            return true",
        "    }",
        "    else :",
        "    {",
        "        if Numerix::Date(fixing_date[1]) <= Numerix::Date(accrual_start_date[1]) :",
        "            return false",
        "        else :",
        "            return true   ",
        "    }",
        "}"]
    }
  },
  "DEFINITION.TRADETERMSBASE_TLC.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Lifecycle Event Table","FixingsIdMap"],
      "TYPE" : ["Table(DEFINITION.TRADETERMSBASE_TLC.LIFECYCLE_INPUT)","ID|String"],
      "REQUIRED" : [false,false],
      "DEFAULT" : [null,
        "> TLC::CreateFixing"],
      "GROUPING" : ["lifecycle","lifecycle"],
      "DESCRIPTION" : ["Generic input for lifecycle event table",null]
    }
  },
  "DEFINITION.TRADETERMSBASE_TLC.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.TRADETERMSBASE_TLC.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.TRADETERMSBASE_TLC.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.TRADETERMSBASE_TLC.LIFECYCLE_INPUT": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Event Type" : ["String",null],
      "Event Date" : ["Date",null],
      "Event Settlement Date" : ["Date",null],
      "Component Ref" : ["String","OPTIONAL"],
      "FixingSeries" : ["String","OPTIONAL"],
      "Rate" : ["Double","OPTIONAL"],
      "Additional Info" : ["String","OPTIONAL"]
    }
  },
  "DEFINITION.TRADETERMSBASE_TLC.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        "// returns a table of event information, filtered by event type.",
        "constfunction TLC::getEventByType(EvtType)",
        "{",
        "    ifnot LifecycleEventTable:",
        "        return {}",
        null,
        "    ifnot LifecycleEventTable.eventType.size:",
        "        return {}",
        null,
        "    tbl = Numerix::load(LifecycleEventTable)",
        "    list = {}",
        "    EvtTypeList = if EvtType is \"LIST\" ? EvtType.canonical : {EvtType.canonical}",
        "    foreach t in tbl:",
        "        if t.EventType.canonical in EvtTypeList:",
        "            list @= t",
        null,
        "    return list",
        "}",
        null,
        "// returns a table of event information, filtered by event type and fixing-series",
        "constfunction TLC::getEventByTypeByFixingSeries(EvtType, fixingSeries)",
        "{",
        "    list = TLC::getEventByType(EvtType)",
        null,
        "    ifnot list:",
        "        return {}",
        null,
        "    ifnot fixingSeries:",
        "        return list",
        null,
        "    res = {}",
        "    FixingSeriesList = if FixingSeries is \"LIST\" ? FixingSeries.canonical : {FixingSeries.canonical}",
        "    foreach t in list:",
        "        if t.FixingSeries.canonical in FixingSeriesList:",
        "            res @= t",
        null,
        "    return res",
        "}",
        null,
        "// returns a table of event information with extended additional info, filtered by event type and event date as optional.",
        "constfunction TLC::getEventDetailByType(EvtType, EvtDate=\"\")",
        "{",
        "    list = TLC::getEventByType(EvtType)",
        null,
        "    ifnot list:",
        "        return {}",
        null,
        "    // try to convert EvtDate to data format, otherwise returns \"\"",
        "    EvtDate_= EvtDate",
        "    ifnot EvtDate_ == \"\" : ifnot EvtDate_ is \"Date\"",
        "    {",
        "        try{",
        "            EvtDate_ = Numerix::Date(EvtDate)",
        "        }catch error{",
        "            EvtDate_ = \"\"",
        "        }",
        "    }",
        null,
        "    // get list of lifecycle infos and returns in table.",
        "    keys = LifecycleEventTable.ColumnHeaders.canonical",
        "    vals = {}",
        "    foreach l in list",
        "    {",
        "        if EvtDate == \"\" or l.eventDate == EvtDate_ :",
        "        {",
        "            val = {l.EventType, l.EventDate, l.EventSettlementDate, l.ComponentRef, l.FixingSeries, l.Rate, l.AdditionalInfo}",
        "            if l.additionalInfo:",
        "            {",
        "                arr = TLC::ExtractDetail(l.additionalInfo).transpose",
        "                if keys.find(arr[1]) == 0:",
        "                    keys &= arr[1]",
        "                val &= arr[2]",
        "            }",
        "            vals @= val",
        "        }",
        "    }",
        "    // try to validate the format of table by create table and load.",
        "    return Numerix::Table(EvtType + Numerix::UniqueNumber,keys,vals.transpose).create.load",
        "}",
        "function TLC::ExtractDetail(additional_info)",
        "{",
        "    vals = {}",
        "    list = additional_info.split(\";\")",
        "    foreach l in list:",
        "        vals @= l.split(\"=\")",
        "    return vals",
        "}",
        null,
        "// this function creates the fixing object at trade level.",
        "constfunction TLC::CreateFixing",
        "{",
        "    list = TLC::getEventByType({\"FIXING\",\"REFIXING\"})",
        null,
        "    ifnot list:",
        "        return {}",
        null,
        "    // group rate by fixingseries",
        "    indexList = {}",
        "    rateList = {}",
        null,
        "    foreach l in list",
        "    {",
        "        if l.FixingSeries.canonical in indexList",
        "        {",
        "            i = indexList.find(l.FixingSeries.canonical)",
        "            rateList[i] @= {l.eventDate, l.rate}",
        "        }else",
        "        {",
        "            indexList @= l.FixingSeries.canonical",
        "            rateList @= {{l.eventDate, l.rate}}",
        "        }",
        "    }",
        "    // create new fixingseries",
        "    vals = {}",
        null,
        "    foreach l in indexList",
        "    {",
        "        FixingSeriesID = if l.find(\"FIXINGS.\") ? l.canonical : \"FIXINGS.\" + l.canonical",
        "        temp = Numerix::Table(FixingSeriesID + \".DATA\", {\"DATE\",\"VALUE\"}, rateList[l.iteration].transpose).create",
        "        localDataId = Numerix::sort(temp,\"DATE\").create",
        "        // same localFixingID comparing to globalFixingID, since the container is trade level, it will be a different Fixing object to global one.",
        "        call = Numerix::Object({FixingSeriesID, \"MARKET DATA\", \"FIXINGS\"}) & ",
        "        {",
        "            \"FIXINGS\"       : localDataId,",
        "            \"INTERP\"        : false",
        "        }",
        "        vals @= {FixingSeriesID, call.create}",
        "    }",
        null,
        "    return Numerix::Table(\"FixingsIdMap\",{\"FIXING_ID\",\"TRADE_ELEVEL_FIXING_ID\"}, vals.transpose).create",
        "}",
        "// this overwrites the abstrct function in TradeTermBase",
        "constfunction TLC::FixingsID(fixingid)",
        "{",
        "    ifnot fixingid:",
        "        return \"\"",
        null,
        "    table = FixingsIdMap.load",
        "    ifnot table",
        "    {",
        "        Numerix::SetMajor(\" No fixing event data for \" + fixingid + \" , referring to global fixing data. \")",
        "        return NxStd::formatFixingsID(fixingid)",
        "    }",
        null,
        "    res = {}",
        "    fixingid_ = if fixingid is \"LIST\" ? fixingid : {fixingid}",
        "    foreach f in fixingid_",
        "    {",
        "        f_ = NxStd::formatFixingsID(f)",
        "        i = table.FIXING_ID.canonical.find(f_)",
        "        if i",
        "        {",
        "            res @= table[i].TRADE_ELEVEL_FIXING_ID",
        "        }   ",
        "        else",
        "        {",
        "            res @= f_",
        "            Numerix::SetMajor(\" No fixing event data for \" + f + \" , referring to global fixing data. \")",
        "        }",
        "    }",
        "    return if fixingid_.size == 1 ? res[1] : res",
        "}",
        null,
        "// Create a single index equity.",
        null,
        "constfunction TLC::MakeSingleEquity(fn_currency,fn_Ticker,fn_exchange,fn_source = {},fn_fixngSeries = {})",
        "{",
        "    obj  = ",
        "        {",
        "            \"ID\"       : fn_Currency + fn_Exchange + fn_Ticker,",
        "            \"NAME\"     : fn_Currency + fn_Exchange + fn_Ticker,",
        "            \"OBJECT\"   : \"INDEX\",",
        "            \"TYPE\"     : \"EQUITY\",",
        "            \"CURRENCY\" : fn_Currency,",
        "            \"FIXINGS\"  : TLC::FixingsID(if fn_fixngSeries ? fn_fixngSeries : Numerix::EQFixingsID(fn_currency,fn_exchange,fn_Ticker,fn_source))",
        "        }",
        "    return obj.create",
        "}",
        null,
        "// Create a single index equity Adjust factor.",
        null,
        "constfunction TLC::MakeSingleEquityAdjustFactor(currency,ticker,exchange, event_name = \"\")",
        "{",
        "    SecId = Numerix::EquitySpotPriceID(Currency,Exchange,Ticker)",
        "    list = TLC::getEventByTypeByFixingSeries({\"ADJUST FACTOR\"}, SecId.replace(\".\" + quoteType, \"\").canonical)",
        null,
        "    name = if event_name? event_name : Currency+Exchange+Ticker+\"_AdjustFactor\"",
        null,
        "    // default adjust factor",
        "    ifnot list:",
        "        return NxStd::DataIndexObj(name, 1)",
        null,
        "    dates = {Numerix::Date(\"1-Jan-2000\")} & list.eventDate",
        "    vals  = {1} & list.rate",
        "    tbl = Numerix::Table(NxStd::MakeID(\"table\"), {\"DATE\", \"VALUE\"}, {dates, vals})",
        "    return NxStd::DataIndexObj(name, tbl.create)",
        "}"]
    }
  },
  "DEFINITION.TRADETERMSBASE.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Trade ID","Trade Date","Counterparty Group","Counterparty","Legal Entity","Netting Set","Margin Set","Currency","BuySell","Linking ID","Trade Type","Booking Center","Cash Settlement","Upfront Fee","Termination Fee","Fees","Event Fees","Premium Date","Premium Currency","Premium Fee","Premium Type","Early Termination Date"],
      "TYPE" : ["String","Date","String","String","String","String","String","Currency","String","String","String","String","Boolean","Table(DEFINITION.TRADETERMSBASE.FEE_TABLE)","Table(DEFINITION.TRADETERMSBASE.CASHFLOWTABLESPEC)","Table(DEFINITION.TRADETERMSBASE.FEE_TABLE)","Table(DEFINITION.TRADETERMSBASE.FEE_TABLE)","Date","Currency","Double","String","Date"],
      "REQUIRED" : [true,false,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,
        ">numerix::marketdate",    null,null,
        ">Counterparty",    ">TradeID","Residual",null,"Buy",null,"Trade",null,false,null,null,null,null,null,0,0,"PREMIUM",73050],
      "GROUPING" : ["Business","Business","Business","Business","Business","Business","Business","Business","Business","Business","Business","Business","Pricing Parameters","Premium","Premium","Business","Business","Business","Business","Business","Bisiness","Business"],
      "DESCRIPTION" : ["A unique string that identifies the trade.","The date on which the trade is entered.",null,"Counterparty of the trade.","Legal entity.","Netting set.","Margin set.","The payment currency.","The position of the trade. ","The ID used to identify a group of trades that represent the same deal.","Defines if a trade is part of the portfolio or used to post collateral in a CSA agreement.",null,"TRUE: All cashflow on the same date will be netted and output to the new cashflow; FALSE: no netting.","Upfront Amount

>PREMIUMDEFAULT","Termination Table

>PREMIUMDEFAULT","Transaction Fees, such as Broker Fees, Taxes","Fees generated from life-cycle events.","Premium/Up-front fee Pay date","Premium Payment Currency/Up-front fee Currency","Premium Payment Amount/Up-front fee Amount","It define the flow type of Premium Fee, acceptable value: \"PREMIUM\", \"UPFRONT\"",null]
    }
  },
  "DEFINITION.TRADETERMSBASE.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.TRADETERMSBASE.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.TRADETERMSBASE.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.TRADETERMSBASE.DATEVALUESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DATE" : ["Date"],
      "VALUE" : ["Double"]
    }
  },
  "DEFINITION.TRADETERMSBASE.FEE_TABLE": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Fee Type" : ["String",null],
      "Fix Date" : ["String","OPTIONAL"],
      "Pay Date" : ["Date",null],
      "is Pay" : ["Boolean",null],
      "Fee" : ["Double",null],
      "Currency" : ["Currency","OPTIONAL"]
    }
  },
  "DEFINITION.TRADETERMSBASE.CASHFLOWTABLESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "CURRENCY" : ["Currency"],
      "PAYMENTDATE" : ["Date"],
      "PAYMENTAMOUNT" : ["Double"],
      "DESCRIPTION" : ["String"]
    }
  },
  "DEFINITION.TRADETERMSBASE.EVENT_FEE_CATEGORY": {
    "TYPE" : "DATA",
    "TABLE" : {
      "CATEGORY" : ["EVENT","EVENT","EVENT","EVENT","EVENT","EVENT","EVENT","EVENT","EVENT","EVENT","EVENT"],
      "FEE TYPE" : ["Adjustment","CashDividend","CashSettlement","ExerciseCancellableFee","Leg1AccIntAdj","Leg2AccIntAdj","Rebate","ReturnOfCapital","SpecialDividend","UnwindFee","Others"]
    }
  },
  "DEFINITION.TRADETERMSBASE.FEE_CATEGORY": {
    "TYPE" : "DATA",
    "TABLE" : {
      "CATEGORY" : ["Adjustment","Premium","Premium","Margin","FEE","FEE","FEE","FEE","FEE","FEE","FEE"],
      "FEE TYPE" : ["Adjustment","Premium","Upfront","Margin","BrokerFee","ClearingFee","ExchangeLevy","ExecutionFee","Commission","Others","Tax"]
    }
  },
  "DEFINITION.TRADETERMSBASE.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        "define append_fee_id = \"APPEND_FEE_ID\"",
        "define DUMMY_FLOW = \"DUMMY\"",
        "define ENDL = if Numerix::CompareVersion(\"18.3\")>0 ? \" \" : \"\\r\"",
        null,
        "// define the table headers for the fee table.",
        "define table_headers = {\"Fee Type\",\"Fix Date\",\"Pay Date\",\"isPay\",\"Fee\",\"Currency\"}",
        null,
        "constfunction fee_term(fn_fee_filter={})",
        "{",
        "    if not has_fee:",
        "        return {}",
        null,
        "    // set fee_filter - categories of fees to be excluded from the PV calculation",
        "    if fn_fee_filter:",
        "        fee_filter = if fn_fee_filter is \"LIST\" ? fn_fee_filter : {fn_fee_filter}",
        "    else:",
        "        fee_filter = {}",
        null,
        "    fee_tables = {}",
        "    fee_super_category = {}",
        null,
        "    // if PremiumFee is specified, put it into a Fee table format",
        "    if PremiumFee:",
        "    {",
        "        table_values = {PremiumType, if TradeDate > PremiumDate? PremiumDate:TradeDate, PremiumDate, false, PremiumFee, PremiumCurrency}",
        null,
        "        fee_tables @= Numerix::Table(\"Premium_Table\", table_headers, table_values).create",
        "        fee_super_category @= \"FEE\"",
        "    }",
        null,
        "    if Fees: if Numerix::TableRowCount(Fees):",
        "    {",
        "        fee_tables @= Numerix::load(Fees)",
        "        fee_super_category @= \"FEE\"",
        "    }",
        null,
        "    if EventFees: if Numerix::TableRowCount(EventFees):",
        "    {",
        "        fee_tables @= Numerix::load(EventFees)",
        "        fee_super_category @=\"EVENT\"",
        "    }",
        null,
        "    // if insertFee (see below) has been called by another template, the \"APPEND_FEE_ID\" table would have been created by",
        "    // the insertFee function; load the table by accessing its ID",
        "    if get_append_fee_id:if Numerix::TableRowCount(get_append_fee_id):",
        "    {",
        "        fee_tables @= Numerix::load(get_append_fee_id)",
        "        fee_super_category @=\"TEMP\"",
        "    }",
        null,
        "    // get Currency List",
        "    currList = get_Fee_Currency_List",
        "    legList = {}",
        null,
        "    foreach ft in fee_tables:",
        "    {",
        "        // load fee category definition",
        "        if fee_super_category[ft.iteration] = \"FEE\":",
        "            categoryDef = Numerix::Load(\"DEFINITION.TRADETERMSBASE.FEE_CATEGORY\")",
        "        elseif fee_super_category[ft.iteration] = \"EVENT\":",
        "            categoryDef = Numerix::Load(\"DEFINITION.TRADETERMSBASE.EVENT_FEE_CATEGORY\")",
        "        else:",
        "            categoryDef = {}",
        null,
        "        foreach f in ft:",
        "        {",
        "            fee_type = f.FeeType.canonical",
        "            if fee_type in fee_filter:",
        "                continue",
        null,
        "            fee_curr = if f.Currency? f.Currency.canonical : Currency.canonical",
        null,
        "            // Fee amount",
        "            fee_fee = if f.fee is \"DOUBLE\"? f.fee : Numerix::Double(f.fee)",
        "            fee_fee *= if f.isPay ? -1 : 1",
        null,
        "            // pay/fix date",
        "            fee_payDate = if f.payDate.type is \"DATE\" ? f.payDate : Numerix::Date(f.payDate)",
        "            ifnot f.FixDate:",
        "                fee_fixdate = fee_payDate",
        "            else:",
        "                fee_fixdate = if f.FixDate is \"DATE\" ? f.FixDate : Numerix::Date(f.FixDate)",
        null,
        "            fee_category = \"TEMP\"",
        "            if categoryDef: if categoryDef.feeType.canonical.find(fee_type.canonical) > 0:",
        "                fee_category = categoryDef[categoryDef.feeType.canonical.find(fee_type.canonical)].category.canonical",
        null,
        "            //generate the fee list",
        "            legList @= {\"REC\", fee_legs(fee_category, fee_type, fee_curr, fee_fee, fee_fixDate, fee_payDate)}",
        "        }",
        "    }",
        "    call={}",
        null,
        "    // create universal swap object",
        "    if legList:",
        "    {",
        "        leg_table = Numerix::Table(\"Fee_table\" + TradeID, {\"SIDE\",\"LEGID\"} , legList.transpose)",
        "        call = Numerix::Object({\"FEE\"+TradeID, \"INSTRUMENT\", \"UNIVERSALSWAP\"}) & ",
        "        {",
        "            \"currency\"      : main_currency,",
        "            \"legs\"          : leg_table.Create",
        "        }",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        "constfunction main_currency",
        "{",
        "    // currency in passed from oneview",
        "    if currency:",
        "        return currency.canonical",
        "    else:",
        "    // currency from property",
        "        return EvaluateProperty(this, \"Pricing Currency\").canonical",
        "}",
        null,
        "function EvaluateProperty(terms, propertyName)",
        "{",
        "    // Get list of trade terms properties.",
        "    props = terms.PropertyNamesOutput.Canonical",
        null,
        "	// Attempt to find the property. If not found, log error.",
        "	property = props.Find(propertyName.Canonical)",
        "    ifnot property :",
        "	    throw terms + \" could not evaluate '\" + propertyName + \"' property which is required for pricing policy resolution.\"",
        null,
        "	property = terms.PropertyValuesOutput[property]",
        "	return property",
        "}",
        null,
        "constfunction has_fee",
        "{",
        "    return has_fee_func",
        "}",
        "function has_fee_func",
        "{",
        "    if PremiumFee:",
        "        return true",
        "    if Fees: if Numerix::TableRowCount(Fees):",
        "        return true    ",
        "    if EventFees: if Numerix::TableRowCount(EventFees):",
        "        return true",
        "    if get_append_fee_id: if Numerix::TableRowCount(get_append_fee_id):",
        "        return true",
        "    return false",
        "}",
        "constfunction has_unpaid_fee",
        "{",
        "    ValueDate = Numerix::MarketDate",
        "    if PremiumFee: if PremiumDate >= ValueDate:",
        "        return true",
        "    if Fees: if Numerix::TableRowCount(Fees): if Numerix::Date(fees.payDate) >= ValueDate:",
        "        return true    ",
        "    if EventFees: if Numerix::TableRowCount(EventFees): if Numerix::Date(EventFees.payDate) >= ValueDate:",
        "        return true",
        "    if get_append_fee_id: if Numerix::TableRowCount(get_append_fee_id): if Numerix::Date(get_append_fee_id.load.PayDate) >= ValueDate:",
        "        return true",
        "    return false ",
        "}",
        null,
        "constfunction insertFee(feeType, fixDate, payDate, amt, curr)",
        "{",
        "    try{",
        "        tbl=get_append_fee_id",
        null,
        "        if tbl:",
        "        {",
        "            values={}",
        null,
        "            list=tbl.load.PayDate",
        null,
        "            foreach p in list:",
        "                values @= Numerix::TableRowValues(tbl,p.iteration)",
        null,
        "            values @= {feeType, fixDate, payDate, false, amt, curr}",
        null,
        "            Numerix::Table(append_fee_id, table_headers, values.transpose).create",
        "        }",
        null,
        "        else:",
        "            Numerix::Table(append_fee_id, table_headers, {FeeType,fixDate,PayDate,false,amt,curr}).create",
        null,
        "    }",
        "    catch error{}",
        "}",
        null,
        "function get_append_fee_id",
        "{",
        "    return Numerix::TryResolve(append_fee_id)",
        "}",
        null,
        "function fee_legs(category,feeType, feeCurrency, feeAmount, feeFixDate, feePayDate)",
        "{",
        "    leg_id = fee_leg_id(category, feeType, feeCurrency)",
        null,
        "    leg_dates_table = Numerix::Table(\"FeeLeg_EventTable_\"+leg_id, {\"FIXDATE\",\"ACCRUALSTART\",\"ACCRUALEND\",\"PAYDATE\"}, {feeFixDate,feePayDate,feePayDate,feePayDate}.transpose)",
        null,
        "    leg_events = Numerix::Object({\"FeeLeg_Event_\"+ leg_id, \"EVENTS\", \"INTERESTDATES\"}) & ",
        "    {",
        "        \"name\"  :\"fee_schedule\",",
        "        \"dates\" :leg_dates_table.create",
        "    }",
        null,
        "    call = Numerix::Object({leg_id, \"INSTRUMENT\", \"FIXEDLEG\"}) & ",
        "    {",
        "        \"currency\"          : feeCurrency,",
        "        \"basis\"             : \"ACT/365\",",
        "        \"fixed events\"      : leg_events.create,",
        "        \"fixed amount\"      : feeAmount",
        "    }",
        null,
        "    return call.Create",
        "}",
        "// returen currency list array of all fee currencies",
        "constfunction get_Fee_Currency_List",
        "{",
        "    CurrencyList = main_currency",
        "    if PremiumFee: ifnot CurrencyList.find(PremiumCurrency.canonical):",
        "        CurrencyList @= PremiumCurrency.canonical",
        "    if Fees: if Numerix::TableRowCount(Fees):",
        "        foreach c in Fees.Currency.canonical:",
        "            ifnot CurrencyList.find(c):",
        "                CurrencyList @= c  ",
        "    if EventFees: if Numerix::TableRowCount(EventFees):",
        "        foreach c in EventFees.Currency.canonical:",
        "            ifnot CurrencyList.find(c):",
        "                CurrencyList @= c  ",
        "    if get_append_fee_id: if Numerix::TableRowCount(get_append_fee_id):",
        "        foreach c in get_append_fee_id.Currency.canonical:",
        "            ifnot CurrencyList.find(c):",
        "                CurrencyList @= c",
        "    return CurrencyList",
        "}",
        null,
        "// Append fee currency/currency pair if Main.Properties is not defined.",
        "function append_fee_properties(underlyingproperties)",
        "{",
        "    ifnot has_fee_func:",
        "        return UnderlyingProperties",
        null,
        "    UnderlyingProperties_ = UnderlyingProperties.canonical",
        "    currencyList = get_Fee_Currency_List",
        null,
        "    FeeTable = Numerix::load(Fees)",
        "    foreach c in currencyList:",
        "    {",
        "        ifnot UnderlyingProperties_.canonical.find(c)",
        "        {",
        "            if c != main_currency:",
        "                UnderlyingProperties_ += (if UnderlyingProperties_.size > 1 ? \",\" : \"\") + Numerix::FXUnderlyingAsset(c,main_currency)",
        "            else:",
        "                UnderlyingProperties_ += (if UnderlyingProperties_.size> 1? \",\" : \"\") + Numerix::IRUnderlyingAsset(main_currency)",
        "        }",
        "    }",
        null,
        "    return UnderlyingProperties_",
        "}",
        null,
        "// create fee leg ID",
        "function fee_leg_id(category,feeType,curr)",
        "{",
        "    return category +\"_\"+feeType+\"_\"+curr+\"_\"+Numerix::UniqueNumber()",
        "}",
        null,
        "// Abstract function returning fixing ID",
        "constfunction TLC::FixingsID(fixingid)",
        "{",
        "    //abstract function",
        "    return NxStd::formatFixingsID(fixingid)",
        "}"]
    }
  },
  "DEFINITION.TRADETERMSBASE": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.TRADETERMSBASE",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.TRADETERMSBASE.PARAMETERS",
      "RESULTS" : "DEFINITION.TRADETERMSBASE.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.TRADETERMSBASE.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.TRADETERMSBASE.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.TRADETERMSBASE.DATEVALUESPEC",
      "MEMBER" : "DEFINITION.TRADETERMSBASE.FEE_TABLE",
      "MEMBER" : "DEFINITION.TRADETERMSBASE.CASHFLOWTABLESPEC",
      "MEMBER" : "DEFINITION.TRADETERMSBASE.EVENT_FEE_CATEGORY",
      "MEMBER" : "DEFINITION.TRADETERMSBASE.FEE_CATEGORY",
      "SCRIPT" : "DEFINITION.TRADETERMSBASE.SCRIPT.NXSL"
    }
  },
  "DEFINITION.TRADETERMSBASE_TLC": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.TRADETERMSBASE_TLC",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.TRADETERMSBASE_TLC.PARAMETERS",
      "RESULTS" : "DEFINITION.TRADETERMSBASE_TLC.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.TRADETERMSBASE_TLC.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.TRADETERMSBASE_TLC.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.TRADETERMSBASE_TLC.LIFECYCLE_INPUT",
      "SCRIPT" : "DEFINITION.TRADETERMSBASE_TLC.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.TRADETERMSBASE"
    }
  },
  "DEFINITION.TRADE_ESUN": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.TRADE_ESUN",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.TRADE_ESUN.PARAMETERS",
      "RESULTS" : "DEFINITION.TRADE_ESUN.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.TRADE_ESUN.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.TRADE_ESUN.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "SCRIPT" : "DEFINITION.TRADE_ESUN.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.TRADETERMSBASE_TLC"
    }
  },
  "DEFINITION.CR.TRADE_ESUN": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.CR.TRADE_ESUN",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.CR.TRADE_ESUN.PARAMETERS",
      "RESULTS" : "DEFINITION.CR.TRADE_ESUN.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.CR.TRADE_ESUN.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.CR.TRADE_ESUN.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.CR.TRADE_ESUN.INTERESTDATESPEC",
      "MEMBER" : "DEFINITION.CR.TRADE_ESUN.SCHEDULESPEC",
      "MEMBER" : "DEFINITION.CR.TRADE_ESUN.GUARANTORSPEC",
      "SCRIPT" : "DEFINITION.CR.TRADE_ESUN.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.TRADE_ESUN"
    }
  },
  "DEFINITION.CALLABLESWAPBASE": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.CALLABLESWAPBASE",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.CALLABLESWAPBASE.PARAMETERS",
      "RESULTS" : "DEFINITION.CALLABLESWAPBASE.RESULTS",
      "ALIASES" : "DEFINITION.CALLABLESWAPBASE.ALIASES",
      "CLASSPROPERTIES" : "DEFINITION.CALLABLESWAPBASE.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.CALLABLESWAPBASE.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.CALLABLESWAPBASE.VALUESPEC",
      "SCRIPT" : "DEFINITION.CALLABLESWAPBASE.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.CR.TRADE_ESUN"
    }
  },
  "DEFINITION.GUARANTEEDCOUPON_ESUN.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["has Guaranteed Coupon","Guaranteed Coupon Conditions","Guaranteed Period Start Date","Guaranteed Period End Date","Guaranteed Coupon","Guaranteed Upfront","Guaranteed Coupon Observation Index 1","Guaranteed Coupon Observation Index 1 Currency","Guaranteed Coupon Observation Index 1 Multiplier","Guaranteed Coupon Observation Index 1 Fixings","Guaranteed Coupon Observation Index 2","Guaranteed Coupon Observation Index 2 Currency","Guaranteed Coupon Observation Index 2 Multiplier","Guaranteed Coupon Observation Index 2 Fixings","Guaranteed Coupon Observation Index Higher Bound","Guaranteed Coupon Observation Index Lower Bound","Guaranteed Period Day Count Convention","Guaranteed Period Holiday Convention","Guaranteed Period Cutoff Period","Guaranteed Period RA Observation Fixing Lag","Guaranteed Period End Date Observation","Guaranteed Period Frequency","Guaranteed Period Schedule","Guaranteed Period Arrears Reset","Guaranteed Period Fixing Lag","Guaranteed Period Fixing Lag Calendar","Guaranteed Period Fixing Lag Convention","Guaranteed Period Payment Lag","Guaranteed Period Payment Lag Calendar","Guaranteed Period Payment Lag Convention","Guaranteed Period Accrual Calendar","Guaranteed Period Accrual Convention","Guaranteed Period Long Stub","Guaranteed Period Front Stub"],
      "TYPE" : ["Boolean","String","Date","Date","Double|Table(DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_SCHEDULESPEC)","Double|Table(DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_SCHEDULESPEC)","String","Currency","Double|Table(DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_SCHEDULESPEC)","ID","String","Currency","Double|Table(DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_SCHEDULESPEC)","ID","Double|Table(DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_SCHEDULESPEC)","Double|Table(DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_SCHEDULESPEC)","String","String","Tenor","Tenor","Boolean","Tenor","Table(DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_INTERESTDATESPEC)","Boolean","Tenor","Calendar","RollConvention","Tenor","Calendar","RollConvention","Calendar","RollConvention","Boolean","Boolean"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [false,"Null",
        ">EffectiveDate",    
        ">EffectiveDate+10",    0,0,null,
        ">if GuaranteedCouponObservationIndex1 then GuaranteedCouponObservationIndex1.split(\"-\")[1] else \"\"",    1,
        ">IF GuaranteedCouponObservationIndex1 then NxStd::RateFixingsID(GuaranteedCouponObservationIndex1.Split(\"-\")[1], GuaranteedCouponObservationIndex1.Split(\"-\")[2], GuaranteedCouponObservationIndex1.Split(\"-\")[3]) else \"\"",    null,
        ">if GuaranteedCouponObservationIndex2 then GuaranteedCouponObservationIndex2.split(\"-\")[1] else \"\"",    1,
        ">IF GuaranteedCouponObservationIndex2 then NxStd::RateFixingsID(GuaranteedCouponObservationIndex2.Split(\"-\")[1], GuaranteedCouponObservationIndex2.Split(\"-\")[2], GuaranteedCouponObservationIndex2.Split(\"-\")[3]) else \"\"",    9999999999,-9999999999,"Calendar","BD","0BD","0BD",false,null,null,
        ">NxCust::GetArrearsResetDefault(GuaranteedPeriodSchedule)",    null,null,null,null,null,null,null,null,false,false],
      "GROUPING" : ["Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed","Guaranteed"],
      "DESCRIPTION" : ["Does leg1 has guaranteed coupon at first few payment dates.","Indicate if some conditions should be satisfied for receiving guaranteed coupon. 
? Null (Defaults), leave this field empty means no conditions will be applied to the coupon or upfront.
? If it?s Regular the coupon will be paid if observation conditions has satisfied on specific observation date.
? If it?s RA the coupon will be paid if observation conditions has satisfied as range accrual condition in the whole observation period.

The observation condition is determined by 
Lower Bound <= Guaranteed Coupon Observation Index 1 Multiplier * Guaranteed Coupon Observation Index 1 + Guaranteed Coupon Observation Index 2 Multiplier * Guaranteed Coupon Observation Index 2 <= Higher Bound
","Initial period start date","Initial period end date","Initial period rate","This input is an alternative Guaranteed coupon which is treated as upfront payment. If input Guaranteed Coupon is given, the return investor should receive this coupon rate (p.a.) while if it is not supplied user should provide Guaranteed Upfront then the return will be determined by this number multiply by principal without any day count fraction adjustment.","The first observation index for the qualification of receiving guaranteed coupon. 
Specifically, Index should be provided following the patter Currency-CMS-IndexTenor if it is constant maturity swap.


","The first observation index for the qualification of receiving guaranteed coupon. 
Specifically, Index should be provided following the patter Currency-CMS-IndexTenor if it is constant maturity swap.


","Multiplier for the first observation index for the qualification of receiving guaranteed coupon.


","
","The second observation index for the qualification of receiving guaranteed coupon.
Specifically, Index should be provided following the patter Currency-CMS-IndexTenor if it is constant maturity swap.



","The second observation index for the qualification of receiving guaranteed coupon.
Specifically, Index should be provided following the patter Currency-CMS-IndexTenor if it is constant maturity swap.



","Multiplier for the second observation index for the qualification of receiving guaranteed coupon.


","
","The upper level of the range for guaranteed coupon observation index.
If no higher boundary a large number, e.q 999999 is required.



","The lower level of the range for guaranteed coupon observation index.
If no lower boundary a small number, e.q -999999 is required.




","Calendar or Business","Denotes wheter holiday observations on business days or calendar days and also specify roll conventions in case of the latter. Choices are BD, CDP, CDF,CDMF","Tenor of cutoff period in which all observations are assumed to be the same as the observation prior to the cutoff","Lag between fixing date and accrual start.","Indicates whether the observation end date falls on or before the end date","Initial period frequency","Frequency of the dates schedule of guaranteed coupon.","Control the fixing date to be fixed in advanced or fixed in arrears for guaranteed coupon period. 
Defaults to True.
","Lag between fixing date and accrual start.","Holiday calendar(s) for adjusting fixing dates.","Roll date convention for adjusting fixing dates when it falls on a non-business date.","Period between accrual end and payment dates","Period between accrual end and payment dates","Business day conventions used to adjust payment dates.","Holiday calendar(s) for adjusting accrual dates.","Roll date convention for adjusting accrual dates when it falls on a non-business date.","Indicates whether the stub is long or short stub length is relative to frequency.
Defaults to False.
","Indicates whether the stub is placed at the beginning or at the end of the schedule.
Defaults to False.
"]
    }
  },
  "DEFINITION.GUARANTEEDCOUPON_ESUN.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.GUARANTEEDCOUPON_ESUN.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.GUARANTEEDCOUPON_ESUN.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_SCHEDULESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "VALUE" : [
        "Double"]
    }
  },
  "DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_INTERESTDATESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "FIXDATE" : ["Date"],
      "ACCRUALSTART" : ["Date"],
      "ACCRUALEND" : ["Date"],
      "PAYDATE" : ["Date"]
    }
  },
  "DEFINITION.GUARANTEEDCOUPON_ESUN.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//*****************************************************************************",
        "//                             KERNEL COMPONENT",
        "//*****************************************************************************",
        "constfunction GuaranteedComponents(CouponBasis1 = \"ACT/365\")",
        "{",
        "    //Set empty set",
        "    call = {}",
        "    //Return empty set if no Guaranteed Coupon",
        "    ifnot hasGuaranteedCoupon :",
        "        return call",
        "    //Events and Indecies used in GuaranteedCouponConditions = Null/Regular/RA",
        "    Event2 = GuaranteedPeriodDates_func(CouponBasis1)",
        "    Event1 = GuaranteedPeriodFixDates_func(CouponBasis1)",
        "    call = {",
        "        \"events\"    : Event1,",
        "        \"events\"    : Event2,",
        "        \"index\"     : GauaranteedCouponSize_func(CouponBasis1),",
        "        \"index\"     : if IsTruncateDate ? GuaranteedCoupon_func : NxCust::TruncateDataIndex(\"GuaranteedCoupon\", GuaranteedCoupon, Event1),",
        "        \"index\"     : if IsTruncateDate ? GuaranteedUpFront_func : NxCust::TruncateDataIndex(\"GuaranteedUpFront\", GuaranteedUpfront, Event1)",
        "    }",
        "    //Events and Indecies used in GuaranteedCouponConditions = Regular/RA    ",
        "    if GuaranteedCouponConditions.Canonical = \"RA\" or GuaranteedCouponConditions.Canonical = \"REGULAR\" then",
        "        call &= {",
        "            \"index\"     : GuaranteedIRIndex1_func(CouponBasis1),",
        "            \"index\"     : GuaranteedIRIndex2_func(CouponBasis1),",
        "            \"index\"     : if IsTruncateDate ? GuaranteedMultiplier1_func : NxCust::TruncateDataIndex(\"GuaranteedMultiplier1\", GuaranteedCouponObservationIndex1Multiplier, Event1),",
        "            \"index\"     : if IsTruncateDate ? GuaranteedMultiplier2_func : NxCust::TruncateDataIndex(\"GuaranteedMultiplier2\", GuaranteedCouponObservationIndex2Multiplier, Event1),",
        "            \"index\"     : if IsTruncateDate ? GuaranteedCouponHigherBound_func : NxCust::TruncateDataIndex(\"GuaranteedCouponHigherBound\", GuaranteedCouponObservationIndexHigherBound, Event1),",
        "            \"index\"     : if IsTruncateDate ? GuaranteedCouponLowerBound_func : NxCust::TruncateDataIndex(\"GuaranteedCouponLowerBound\", GuaranteedCouponObservationIndexLowerBound, Event1)",
        "        }",
        "    endif",
        "    //Events and Indecies used in GuaranteedCouponConditions = RA    ",
        "    if GuaranteedCouponConditions.Canonical = \"RA\" then",
        "        call &= {",
        "            \"index\"     : GuaranteedCouponRACondition1_func,",
        "            \"index\"     : GuaranteedCouponRAFactor_func,",
        "            \"index\"     : GuaranteedCouponRAFactor2_func,",
        "            \"index\"     : IsFirstPeriodTruncated_func(\"GuaranteedPeriodDatesFirstPeriodIsTruncated\", Event2),",
        "		    \"index\"     : if IsTruncateDate ? NxStd::DataIndexObj(\"GuaranteedPeriodDates.FIRSTDAYCOUNT\",1) : Event2.NameInput + \".FIRSTDAYCOUNT\",",
        "		    \"index\"     : if IsTruncateDate ? NxStd::DataIndexObj(\"GuaranteedPeriodDates.FIRSTREMAININGDAYCOUNT\",1) : Event2.NameInput + \".FIRSTREMAININGDAYCOUNT\"",
        "        }",
        "    endif",
        null,
        "    return call",
        "}",
        null,
        "//*****************************************************************************",
        "//                                   EVENTS                                  // ",
        "//*****************************************************************************",
        "//Payment Schedule",
        "constfunction GuaranteedPeriodDates_func(CouponBasis1 = \"\")",
        "{",
        "    //Return empty set if no Guaranteed Coupon",
        "    ifnot hasGuaranteedCoupon :",
        "        return \"\"",
        "    //Adjust the Guaranteed Period end date due to TLC",
        "    if isCalled then",
        "        Maturity_adj = CallDate",
        "    elseif isTerminated then",
        "        Maturity_adj = terminationEffectiveDate",
        "    elseif isTargeted then",
        "        Maturity_adj = TargetDate",
        "    elseif isKOed then",
        "        Maturity_adj = KODate",
        "    else",
        "        Maturity_adj = GuaranteedPeriodEndDate",
        "    endif",
        "    //Determine the Event Type",
        "    if GuaranteedCouponConditions.Canonical = \"NULL\" or GuaranteedCouponConditions.Canonical = \"REGULAR\" then",
        "        EventType1 = \"INTEREST DATES\"",
        "    else",
        "        EventType1 = \"RANGE ACCRUAL DATES\"",
        "    endif",
        null,
        "    call = Numerix::Object({\"GUARANTEEDPERIODDATES\", \"events\", EventType1}) & ",
        "    {",
        "        \"name\" : \"GuaranteedPeriodDates\", ",
        "        \"basis\" : if CouponBasis1 ? CouponBasis1 : \"ACT/365\"",
        "    }",
        "    //Return the input Frequency",
        "    ifnot GuaranteedPeriodSchedule then",
        "        call &= {",
        "            \"enddate\" : Maturity_adj,",
        "            \"startdate\" : GuaranteedPeriodStartDate,",
        "            \"freq\" : GuaranteedPeriodFrequency,",
        "            //hard code ARREARSRESET = FALSE for Range Accrual Dates due to the limitation of Range Accrual Index",
        "            \"arrearsreset\": if GuaranteedCouponConditions.Canonical = \"RA\" ? false : GuaranteedPeriodArrearsReset,",
        "            \"noticeperiod\": GuaranteedPeriodFixingLag,",
        "            \"fixcalendar\" : GuaranteedPeriodFixingLagCalendar, ",
        "            \"fixconvention\" : GuaranteedPeriodFixingLagConvention, ",
        "            \"paycalendar\" : GuaranteedPeriodPaymentLagCalendar, ",
        "            \"payconvention\" : GuaranteedPeriodPaymentLagConvention, ",
        "            \"paymentlag\"    : GuaranteedPeriodPaymentLag,",
        "            \"accrualcalendar\" : GuaranteedPeriodAccrualCalendar, ",
        "            \"front stub\" : GuaranteedPeriodFrontStub,",
        "            \"long stub\" : GuaranteedPeriodLongStub,",
        "            \"accrualconvention\" : GuaranteedPeriodAccrualConvention ",
        "        }",
        "    endif",
        "    //Return the input schedule",
        "    if GuaranteedPeriodSchedule then",
        "        //reset the fixing dates of the input table due to the limitation of Range Accrual Index",
        "        if GuaranteedCouponConditions.Canonical = \"RA\" AND GuaranteedPeriodArrearsReset then",
        "            //Create the Dates Scehdule table",
        "            values = {}",
        "            FixD = GuaranteedPeriodSchedule.FixDate",
        "            StartD = GuaranteedPeriodSchedule.AccrualStart",
        "            EndD = GuaranteedPeriodSchedule.AccrualEnd",
        "            PayD = GuaranteedPeriodSchedule.PayDate",
        "            foreach d in EndD:",
        "            {",
        "                values @= {numerix::date(min(numerix::double(FixD[d.Iteration]), numerix::double(StartD[d.Iteration]))), StartD[d.Iteration], EndD[d.Iteration], PayD[d.Iteration]}",
        "            }",
        "            //Create the new schedule",
        "            GuaranteedPeriodSchedule1 = Numerix::Table(\"GuaranteedPeriodDates_Table\" + Numerix::UniqueNumber(), {\"FIX DATE\", \"ACCRUAL START\", \"ACCRUAL END\", \"PAY DATE\"}, values.Transpose).create",
        "        else",
        "            GuaranteedPeriodSchedule1 = GuaranteedPeriodSchedule",
        "        endif",
        "        //Event input",
        "        call &= {",
        "            \"dates\" : GuaranteedPeriodSchedule1",
        "        }",
        "    endif",
        "    //Return RA Dates inputs",
        "    if GuaranteedCouponConditions.Canonical = \"RA\" then",
        "        call &= {",
        "        \"observation holiday convention\" : GuaranteedPeriodHolidayConvention,",
        "        \"obs cutoff period\"              : GuaranteedPeriodCutoffPeriod,",
        "        \"observation fixing lag\"         : GuaranteedPeriodRAObservationFixingLag,",
        "        \"end date observation\"           : GuaranteedPeriodEndDateObservation",
        "        }",
        "    endif",
        null,
        "    OriginalSchedule = call.Create",
        "    //Load the last accrual end date",
        "    accrualend_date = Numerix::query(OriginalSchedule.ID, \"ACCRUALEND=<Date>\", \"Date\")",
        "    acce_date = accrualend_date.Date",
        "    //Truncate Date due to LIBOR transition",
        "    if IsTruncateDate {",
        "        return OriginalSchedule",
        "    }",
        "    else:{",
        "        //Re-create the schedule based on the Transition Date",
        "        NewScheduleTable = NxCust::TruncateDate(OriginalSchedule.ID, TransitionDate)",
        "        call1 = Numerix::Object({\"GUARANTEEDPERIODDATES\", \"events\", EventType1}) & ",
        "        {",
        "            \"name\"  : \"GuaranteedPeriodDates\", ",
        "            \"basis\" : if CouponBasis1 ? CouponBasis1 : \"ACT/365\",",
        "            \"dates\" : NewScheduleTable",
        "        } ",
        "        //Return RA Dates inputs",
        "        if GuaranteedCouponConditions.Canonical = \"RA\" then",
        "            call1 &= {",
        "            \"observation holiday convention\" : GuaranteedPeriodHolidayConvention,",
        "            \"obs cutoff period\"              : GuaranteedPeriodCutoffPeriod,",
        "            \"observation fixing lag\"         : GuaranteedPeriodRAObservationFixingLag,",
        "            \"end date observation\"           : GuaranteedPeriodEndDateObservation",
        "            }",
        "        endif",
        "        return call1.Create    ",
        "    }",
        "}",
        "//Fixing Schedule",
        "constfunction GuaranteedPeriodFixDates_func(CouponBasis1 = \"\")",
        "{",
        "    //Return empty set if no Guaranteed Coupon",
        "    ifnot hasGuaranteedCoupon :",
        "        return \"\"",
        "    //Adjust the Guaranteed Period end date due to TLC",
        "    if isCalled then",
        "        Maturity_adj = CallDate",
        "    elseif isTerminated then",
        "        Maturity_adj = terminationEffectiveDate",
        "    elseif isTargeted then",
        "        Maturity_adj = TargetDate",
        "    elseif isKOed then",
        "        Maturity_adj = KODate",
        "    else",
        "        Maturity_adj = GuaranteedPeriodEndDate",
        "    endif",
        "    //Determine the Event Type",
        "    EventType1 = \"INTEREST DATES\"",
        null,
        "    call = Numerix::Object({\"GUARANTEEDPERIODFIXDATES\", \"events\", EventType1}) & ",
        "    {",
        "        \"name\" : \"GuaranteedPeriodFixDates\", ",
        "        \"basis\" : if CouponBasis1 ? CouponBasis1 : \"ACT/365\"",
        "    }",
        "    //Return the input Frequency",
        "    ifnot GuaranteedPeriodSchedule then",
        "        call &= {",
        "            \"enddate\" : Maturity_adj,",
        "            \"startdate\" : GuaranteedPeriodStartDate,",
        "            \"freq\" : GuaranteedPeriodFrequency,",
        "            \"arrearsreset\": GuaranteedPeriodArrearsReset,",
        "            \"noticeperiod\": GuaranteedPeriodFixingLag,",
        "            \"fixcalendar\" : GuaranteedPeriodFixingLagCalendar, ",
        "            \"fixconvention\" : GuaranteedPeriodFixingLagConvention, ",
        "            \"paycalendar\" : GuaranteedPeriodPaymentLagCalendar, ",
        "            \"payconvention\" : GuaranteedPeriodPaymentLagConvention, ",
        "            \"paymentlag\"    : GuaranteedPeriodPaymentLag,",
        "            \"accrualcalendar\" : GuaranteedPeriodAccrualCalendar, ",
        "            \"front stub\" : GuaranteedPeriodFrontStub,",
        "            \"long stub\" : GuaranteedPeriodLongStub,",
        "            \"accrualconvention\" : GuaranteedPeriodAccrualConvention ",
        "        }",
        "    endif",
        "    //Return the input schedule",
        "    if GuaranteedPeriodSchedule then",
        "        call &= {",
        "            \"dates\" : GuaranteedPeriodSchedule ",
        "        }",
        "    endif",
        null,
        "    OriginalSchedule = call.Create",
        "    //Load the last accrual end date",
        "    accrualend_date = Numerix::query(OriginalSchedule.ID, \"ACCRUALEND=<Date>\", \"Date\")",
        "    acce_date = accrualend_date.Date",
        "    //Truncate Date due to LIBOR transition",
        "    if IsTruncateDate {",
        "        return OriginalSchedule",
        "    }",
        "    else:{",
        "        //Re-create the schedule based on the Transition Date",
        "        NewScheduleTable = NxCust::TruncateDate(OriginalSchedule.ID, TransitionDate)",
        "        call1 = Numerix::Object({\"GUARANTEEDPERIODFIXDATES\", \"events\", EventType1}) & ",
        "        {",
        "            \"name\"  : \"GuaranteedPeriodFixDates\", ",
        "            \"basis\" : if CouponBasis1 ? CouponBasis1 : \"ACT/365\",",
        "            \"dates\" : NewScheduleTable",
        "        } ",
        "        return call1.Create    ",
        "    }",
        "}",
        "//*****************************************************************************",
        "//                                 INDECIES",
        "//*****************************************************************************",
        "//Fixed Coupon //GuaranteedCouponConditions = Null/Regular/RA",
        "constfunction GuaranteedCoupon_func",
        "{",
        "    call = Numerix::Object({\"GUARANTEEDCOUPON\", \"INDEX\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : \"GuaranteedCoupon\", ",
        "        \"data\" : GuaranteedCoupon,",
        "        \"events\"  : \"GuaranteedPeriodFixDates\"",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Upfront //Rate of return //GuaranteedCouponConditions = Null/Regular/RA",
        "constfunction GuaranteedUpFront_func",
        "{",
        "    call = Numerix::Object({\"GUARANTEEDUPFRONT\", \"INDEX\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : \"GuaranteedUpFront\", ",
        "        \"data\" : GuaranteedUpfront,",
        "        \"events\"  : \"GuaranteedPeriodFixDates\"",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Observation Index 1 //GuaranteedCouponConditions = Regular/RA",
        "constfunction GuaranteedIRIndex1_func(CouponBasis1 = \"\")",
        "{",
        "    if GuaranteedCouponObservationIndex1.Split(\"-\")[2].Canonical = \"CMS\" or GuaranteedCouponObservationIndex1.Split(\"-\")[2].Canonical = \"CIS\"{",
        "        if IsARRIndex or GuaranteedCouponObservationIndex1.Split(\"-\")[2].Canonical = \"CIS\"{",
        "            //CMS",
        "            CMSUnderlyingIRIndex = GuaranteedCouponObservationIndex1.Split(\"-\")[1] + \"-\" + Numerix::GetSettings(\"Settings.Currency\",GuaranteedCouponObservationIndex1.Split(\"-\")[1],\"OvernightIndex\") + \"-\" + Numerix::GetSettings(\"Settings.Currency\",GuaranteedCouponObservationIndex1.Split(\"-\")[1],\"OvernightIndexTenor\")",
        "            ARRIndex = NxCust::GetARRIndex(GuaranteedCouponObservationIndex1.Split(\"-\")[1], CMSUnderlyingIRIndex)",
        "            ARRIndexTenor = NxCust::GetARRIndexTenor(GuaranteedCouponObservationIndex1.Split(\"-\")[1], CMSUnderlyingIRIndex)",
        "//CIS is not supported in HW1F and HW2F in CA 17.6 and hence CMS is used before ",
        "//            call = Numerix::Object({\"GUARANTEEDIRINDEX1\", \"INDEX\", \"CONSTANT MATURITY SWAP\"}) &",
        "//            {",
        "//                \"name\" : \"GuaranteedIRIndex1\",",
        "//                \"currency\" : GuaranteedCouponObservationIndex1.Split(\"-\")[1],",
        "//                \"end tenor\" : GuaranteedCouponObservationIndex1.Split(\"-\")[3],",
        "//                //\"events\" : \"GuaranteedPeriodFixDates\",",
        "//                \"indexcurve\" : NxStd::ProjectionCurveID(GuaranteedCouponObservationIndex1.Split(\"-\")[1],ARRIndex,ARRIndexTenor),",
        "//                \"convention\" : #\"CONV.IR.\" + GuaranteedCouponObservationIndex1.Split(\"-\")[1] + \"-\" + ARRIndex + \"-\" + ARRIndexTenor +\".Swap\",",
        "//                \"fixings\" : GuaranteedCouponObservationIndex1Fixings",
        "//            } ",
        "            //CIS",
        "            call = Numerix::Object({\"GUARANTEEDIRINDEX1\", \"INDEX\", \"COMPOUND INDEX SWAP\"}) &",
        "            {",
        "                \"name\"               : \"GuaranteedIRIndex1\",",
        "                \"currency\"           : GuaranteedCouponObservationIndex1.Split(\"-\")[1],",
        "                \"maturity\"           : GuaranteedCouponObservationIndex1.Split(\"-\")[3],",
        "                \"indexcurve\"         : NxStd::ProjectionCurveID(GuaranteedCouponObservationIndex1.Split(\"-\")[1],ARRIndex,ARRIndexTenor),",
        "                \"fixings\"            : TLC::FixingsID(NxStd::RateFixingsID(GuaranteedCouponObservationIndex1.Split(\"-\")[1],\"CIS\",GuaranteedCouponObservationIndex1.Split(\"-\")[3])), //USD-CIS-5Y",
        "                //\"events\"             : \"GuaranteedPeriodFixDates\",",
        "                \"convention\"         : #\"CONV.IR.\" + GuaranteedCouponObservationIndex1.Split(\"-\")[1] + \"-\" + ARRIndex + \"-\" + ARRIndexTenor +\".Swap\",",
        "                \"compounding method\" : \"Straight\"",
        "            }",
        "        }",
        "        else {",
        "            //CMS",
        "            call = Numerix::Object({\"GUARANTEEDIRINDEX1\", \"INDEX\", \"CONSTANT MATURITY SWAP\"}) &",
        "            {",
        "                \"name\" : \"GuaranteedIRIndex1\",",
        "                \"currency\" : GuaranteedCouponObservationIndex1.Split(\"-\")[1],",
        "                \"end tenor\" : GuaranteedCouponObservationIndex1.Split(\"-\")[3],",
        "                //\"events\" : \"GuaranteedPeriodFixDates\",",
        "                \"indexcurve\" : NxStd::ProjectionCurveID(GuaranteedCouponObservationIndex1.Split(\"-\")[1],Numerix::GetSettings(\"Settings.Currency\",GuaranteedCouponObservationIndex1.Split(\"-\")[1],\"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",GuaranteedCouponObservationIndex1.Split(\"-\")[1],\"IRIndexTenor\")),",
        "                \"convention\" : #\"CONV.IR.\" + GuaranteedCouponObservationIndex1.Split(\"-\")[1] + \"-\" + Numerix::GetSettings(\"Settings.Currency\",GuaranteedCouponObservationIndex1.Split(\"-\")[1],\"IRIndex\") + \"-\" + Numerix::GetSettings(\"Settings.Currency\",GuaranteedCouponObservationIndex1.Split(\"-\")[1],\"IRIndexTenor\") +\".Swap\",",
        "                \"fixings\" : TLC::FixingsID(GuaranteedCouponObservationIndex1Fixings)",
        "            }    ",
        "        }",
        "    }",
        "    else {",
        "        if IsARRIndex or GuaranteedCouponObservationIndex1.Split(\"-\")[3].Canonical = \"ON\"{",
        "            //ARR",
        "            ARRCurrency = GuaranteedCouponObservationIndex1.Split(\"-\")[1]",
        "            ARRIndex = NxCust::GetARRIndex(ARRCurrency, GuaranteedCouponObservationIndex1)",
        "            ARRIndexTenor = NxCust::GetARRIndexTenor(ARRCurrency, GuaranteedCouponObservationIndex1)",
        "            ARRSpread =  if GuaranteedCouponObservationIndex1.Split(\"-\")[3].Canonical = \"ON\"? 0 : NxCust::GetAdjustedSpread(GuaranteedCouponObservationIndex1)",
        null,
        "            call = Numerix::Object({\"GUARANTEEDIRINDEX1\", \"INDEX\", \"ARR\"}) &",
        "            {",
        "                \"name\"                                   : \"GuaranteedIRIndex1\",",
        "                \"basis\"                                  : CouponBasis1,",
        "                \"currency\"                               : ARRCurrency,",
        "                \"coupon dates\"                           : \"GuaranteedPeriodFixDates\",",
        "                \"accrual frequency\"                      : if ARRIndexTenor == \"ON\" ? \"1BD\" : ARRIndexTenor,",
        "                \"rate settings\"                          : NxCust::RateSettingsConvention(ARRCurrency,ARRIndex,ARRIndexTenor),",
        "                \"convention\"                             : NxStd::RateConventionID(ARRCurrency,ARRIndex,ARRIndexTenor),",
        "                \"index curve\"                            : NxStd::ProjectionCurveID(ARRCurrency,ARRIndex,ARRIndexTenor),",
        "                \"fixings\"                                : TLC::FixingsID(NxStd::RateFixingsID(ARRCurrency,ARRIndex,ARRIndexTenor)),",
        "                \"rate spread\"                            : ARRSpread,",
        "                \"cutoff lag\"                             : CutoffLag,",
        "                \"observation period shift\"               : ObservationPeriodShift,",
        "                \"index calculation method\"               : \"Straight\"",
        "            }",
        "        }",
        "        else{",
        "            //LIBOR //Default",
        "            call = Numerix::Object({\"GUARANTEEDIRINDEX1\", \"INDEX\", \"LIBOR\"}) & ",
        "            {",
        "                \"name\" : \"GuaranteedIRIndex1\", ",
        "                \"currency\" : GuaranteedCouponObservationIndex1.Split(\"-\")[1], ",
        "                //\"events\" : \"GuaranteedPeriodFixDates\",",
        "                \"tenor\" : GuaranteedCouponObservationIndex1.Split(\"-\")[3],",
        "                \"indexcurve\" : NxStd::ProjectionCurveID(GuaranteedCouponObservationIndex1.Split(\"-\")[1],GuaranteedCouponObservationIndex1.Split(\"-\")[2],GuaranteedCouponObservationIndex1.Split(\"-\")[3]), ",
        "                \"fixings\" : TLC::FixingsID(GuaranteedCouponObservationIndex1Fixings),",
        "                \"convention\" : #\"CONV.IR.\" + GuaranteedCouponObservationIndex1",
        "            } ",
        "        }",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Observation Index 2 //GuaranteedCouponConditions = Regular/RA",
        "constfunction GuaranteedIRIndex2_func(CouponBasis1 = \"\")",
        "{",
        "    //Return empty set if there is no input",
        "    ifnot GuaranteedCouponObservationIndex2 :",
        "        return \"\"",
        null,
        "    if GuaranteedCouponObservationIndex2.Split(\"-\")[2].Canonical = \"CMS\" or GuaranteedCouponObservationIndex2.Split(\"-\")[2].Canonical = \"CIS\"",
        "    {",
        "        //Read the commonly used variable",
        "        CMSCurrency = GuaranteedCouponObservationIndex2.Split(\"-\")[1]",
        "        CMSIRIndex = GuaranteedCouponObservationIndex2.Split(\"-\")[2]",
        "        CMSIRIndexTenor = GuaranteedCouponObservationIndex2.Split(\"-\")[3]",
        "        if IsARRIndex or GuaranteedCouponObservationIndex2.Split(\"-\")[2].Canonical = \"CIS\" {",
        "            CMSUnderlyingIRIndex = CMSCurrency+\"-\"+Numerix::GetSettings(\"Settings.Currency\",CMSCurrency,\"OvernightIndex\")+\"-\"+Numerix::GetSettings(\"Settings.Currency\",CMSCurrency,\"OvernightIndexTenor\")",
        "            ARRIndex = NxCust::GetARRIndex(CMSCurrency, CMSUnderlyingIRIndex)",
        "            ARRIndexTenor = NxCust::GetARRIndexTenor(CMSCurrency, CMSUnderlyingIRIndex)",
        "            //CMS",
        "            //CIS is not supported in HW1F and HW2F in CA 17.6 and hence CMS is used before ",
        "//            call = Numerix::Object({\"GUARANTEEDIRINDEX2\", \"INDEX\", \"CONSTANT MATURITY SWAP\"}) &",
        "//            {",
        "//                \"name\" : \"GuaranteedIRIndex2\",",
        "//                \"currency\" : CMSCurrency,",
        "//                \"end tenor\" : CMSIRIndexTenor,",
        "//                //\"events\" : \"GuaranteedPeriodFixDates\",",
        "//                \"indexcurve\" : NxStd::ProjectionCurveID(CMSCurrency,ARRIndex,ARRIndexTenor),",
        "//                \"convention\" : #\"CONV.IR.\" + CMSCurrency + \"-\" + ARRIndex + \"-\" + ARRIndexTenor +\".Swap\",",
        "//                \"fixings\" : GuaranteedCouponObservationIndex2Fixings",
        "//            }",
        "            //CIS",
        "            call = Numerix::Object({\"GUARANTEEDIRINDEX2\", \"INDEX\", \"COMPOUND INDEX SWAP\"}) &",
        "            {",
        "                \"name\"               : \"GuaranteedIRIndex2\",",
        "                \"currency\"           : CMSCurrency,",
        "                \"maturity\"           : CMSIRIndexTenor,",
        "                \"indexcurve\"         : NxStd::ProjectionCurveID(CMSCurrency,ARRIndex,ARRIndexTenor),",
        "                \"fixings\"            : TLC::FixingsID(NxStd::RateFixingsID(CMSCurrency,\"CIS\",CMSIRIndexTenor)), //USD-CIS-5Y",
        "                //\"events\"             : \"GuaranteedPeriodFixDates\",",
        "                \"convention\"         : #\"CONV.IR.\" + CMSCurrency + \"-\" + ARRIndex + \"-\" + ARRIndexTenor +\".Swap\",",
        "                \"compounding method\" : \"Straight\"",
        "            }",
        "        }",
        "        else{",
        "            //CMS",
        "            call = Numerix::Object({\"GUARANTEEDIRINDEX2\", \"INDEX\", \"CONSTANT MATURITY SWAP\"}) &",
        "            {",
        "                \"name\" : \"GuaranteedIRIndex2\",",
        "                \"currency\" : CMSCurrency,",
        "                \"end tenor\" : CMSIRIndexTenor,",
        "                //\"events\" : \"GuaranteedPeriodFixDates\",",
        "                \"indexcurve\" : NxStd::ProjectionCurveID(CMSCurrency, Numerix::GetSettings(\"Settings.Currency\",CMSCurrency,\"IRIndex\"), Numerix::GetSettings(\"Settings.Currency\",CMSCurrency,\"IRIndexTenor\")),",
        "                \"convention\" : #\"CONV.IR.\" + CMSCurrency + \"-\" + Numerix::GetSettings(\"Settings.Currency\",CMSCurrency,\"IRIndex\") + \"-\" + Numerix::GetSettings(\"Settings.Currency\",CMSCurrency,\"IRIndexTenor\") +\".Swap\",",
        "                \"fixings\" : TLC::FixingsID(GuaranteedCouponObservationIndex2Fixings)",
        "            }",
        "        }",
        "    }",
        "    else",
        "    {",
        "        if IsARRIndex or GuaranteedCouponObservationIndex2.Split(\"-\")[3].Canonical = \"ON\"{",
        "            //ARR",
        "            ARRCurrency = GuaranteedCouponObservationIndex2.Split(\"-\")[1]",
        "            ARRIndex = NxCust::GetARRIndex(ARRCurrency, GuaranteedCouponObservationIndex2)",
        "            ARRIndexTenor = NxCust::GetARRIndexTenor(ARRCurrencyency, GuaranteedCouponObservationIndex2)",
        "            ARRSpread =  if GuaranteedCouponObservationIndex2.Split(\"-\")[3].Canonical = \"ON\"? 0 : NxCust::GetAdjustedSpread(GuaranteedCouponObservationIndex2)",
        null,
        "            call = Numerix::Object({\"GUARANTEEDIRINDEX1\", \"INDEX\", \"ARR\"}) &",
        "            {",
        "                \"name\"                                   : \"GuaranteedIRIndex1\",",
        "                \"basis\"                                  : CouponBasis1,",
        "                \"currency\"                               : ARRCurrency,",
        "                \"coupon dates\"                           : \"GuaranteedPeriodFixDates\",",
        "                \"accrual frequency\"                      : if ARRIndexTenor == \"ON\" ? \"1BD\" : ARRIndexTenor,",
        "                \"rate settings\"                          : NxCust::RateSettingsConvention(ARRCurrency,ARRIndex,ARRIndexTenor),",
        "                \"convention\"                             : NxStd::RateConventionID(ARRCurrency,ARRIndex,ARRIndexTenor),",
        "                \"index curve\"                            : NxStd::ProjectionCurveID(ARRCurrency,ARRIndex,ARRIndexTenor),",
        "                \"fixings\"                                : TLC::FixingsID(NxStd::RateFixingsID(ARRCurrency,ARRIndex,ARRIndexTenor)),",
        "                \"rate spread\"                            : ARRSpread,",
        "                \"cutoff lag\"                             : CutoffLag,",
        "                \"observation period shift\"               : ObservationPeriodShift,",
        "                \"index calculation method\"               : \"Straight\"",
        "            }",
        "        }",
        "        else{",
        "            //LIBOR //Default",
        "            //Read the commonly used variable",
        "            IRCurrency = GuaranteedCouponObservationIndex2.Split(\"-\")[1]",
        "            IRIndex = GuaranteedCouponObservationIndex2.Split(\"-\")[2]",
        "            IRIndexTenor = GuaranteedCouponObservationIndex2.Split(\"-\")[3]",
        null,
        "            call = Numerix::Object({\"GUARANTEEDIRINDEX2\", \"INDEX\", \"LIBOR\"}) & ",
        "            {",
        "                \"name\" : \"GuaranteedIRIndex2\", ",
        "                \"currency\" : IRCurrency, ",
        "                //\"events\" : \"GuaranteedPeriodFixDates\",",
        "                \"tenor\" : IRIndexTenor,",
        "                \"indexcurve\" : NxStd::ProjectionCurveID(IRCurrency, IRIndex, IRIndexTenor), ",
        "                \"fixings\" : TLC::FixingsID(GuaranteedCouponObservationIndex2Fixings),",
        "                \"convention\" : #\"CONV.IR.\" + GuaranteedCouponObservationIndex2",
        "            }",
        "        }",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Multiplier for Observation Index 1 //GuaranteedCouponConditions = Regular/RA",
        "constfunction GuaranteedMultiplier1_func",
        "{",
        "    call = Numerix::Object({\"GUARANTEEDIRINDEXMULTIPLIER1\", \"INDEX\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : \"GuaranteedMultiplier1\", ",
        "        \"data\" : GuaranteedCouponObservationIndex1Multiplier,",
        "        \"events\"  : \"GuaranteedPeriodFixDates\"",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Multiplier for Observation Index 2 //GuaranteedCouponConditions = Regular/RA",
        "constfunction GuaranteedMultiplier2_func",
        "{",
        "    //Return empty set if there is no input",
        "    ifnot GuaranteedCouponObservationIndex2 :",
        "        return \"\"",
        null,
        "    call = Numerix::Object({\"GUARANTEEDIRINDEXMULTIPLIER2\", \"INDEX\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : \"GuaranteedMultiplier2\", ",
        "        \"data\" : GuaranteedCouponObservationIndex2Multiplier,",
        "        \"events\"  : \"GuaranteedPeriodFixDates\"",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//RA Higher Bound //GuaranteedCouponConditions = RA",
        "constfunction GuaranteedCouponHigherBound_func",
        "{",
        "    call = Numerix::Object({\"GUARANTEEDCOUPONHIGHERBOUND\", \"INDEX\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : \"GuaranteedCouponHigherBound\", ",
        "        \"data\" : GuaranteedCouponObservationIndexHigherBound,",
        "        \"events\"  : \"GuaranteedPeriodFixDates\"",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//RA Lower Bound //GuaranteedCouponConditions = RA",
        "constfunction GuaranteedCouponLowerBound_func",
        "{",
        "    call = Numerix::Object({\"GUARANTEEDCOUPONLOWERBOUND\", \"INDEX\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : \"GuaranteedCouponLowerBound\", ",
        "        \"data\" : GuaranteedCouponObservationIndexLowerBound,",
        "        \"events\"  : \"GuaranteedPeriodFixDates\"",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Formula Index used in obsrvation the RA Factor //GuaranteedCouponConditions = RA",
        "constfunction GuaranteedCouponRACondition1_func",
        "{",
        "    //Check the number of observation index used",
        "    if GuaranteedCouponObservationIndex2 then",
        "        if GuaranteedCouponObservationIndex1 then",
        "            Formula1 = \"GuaranteedMultiplier1 * GuaranteedIRIndex1 + GuaranteedMultiplier2 * GuaranteedIRIndex2\"",
        "        endif",
        "    else",
        "        Formula1 = \"GuaranteedMultiplier1 * GuaranteedIRIndex1\"",
        "    endif",
        null,
        "    call = Numerix::Object({\"GUARANTEEDRACONDITION\", \"INDEX\", \"FORMULA\"}) &",
        "    {",
        "        \"name\"     : \"GuaranteedRACondition\",",
        "        \"formula\"  : Formula1,",
        "        \"currency\" : Currency",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Formula index for RA Factor for Guaranteed Coupon //GuaranteedCouponConditions = RA",
        "constfunction GuaranteedCouponRAFactor_func",
        "{",
        "    call = Numerix::Object({\"GUARANTEEDCOUPONRAFACTOR\", \"INDEX\", \"FORMULA\"}) &",
        "    {",
        "        \"name\"     : \"GuaranteedCouponRAFactor\",",
        "        \"formula\"  : \"GuaranteedPeriodDatesFirstPeriodIsTruncated * (RA1AccruedDay + GuaranteedCouponRAFactor2 * GuaranteedPeriodDates.FIRSTREMAININGDAYCOUNT) / (GuaranteedPeriodDates.FIRSTDAYCOUNT + GuaranteedPeriodDates.FIRSTREMAININGDAYCOUNT) + (1 - GuaranteedPeriodDatesFirstPeriodIsTruncated) * GuaranteedCouponRAFactor2\",",
        "        \"currency\" : Currency",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//RA Factor for Guaranteed Coupon //GuaranteedCouponConditions = RA",
        "constfunction GuaranteedCouponRAFactor2_func",
        "{",
        "    //Create the RA Factor Table",
        "    GUARANTEED_RAFACTOR_DATA1 = Numerix::Table(NxStd::MakeID(\"RATable\"), {\"TRIGGERINDEX\", \"HIGHBARRIER\", \"LOWBARRIER\"}, {\"GuaranteedRACondition\", \"GuaranteedCouponHigherBound\", \"GuaranteedCouponLowerBound\" }).create",
        null,
        "    call = Numerix::Object({\"GUARANTEEDCOUPONRAFACTOR2\", \"INDEX\", \"RANGE ACCRUAL\"}) &",
        "    {",
        "        \"name\"                  : \"GuaranteedCouponRAFactor2\",",
        "        \"currency\"              : Currency,",
        "        \"range accrual dates\"   : \"GuaranteedPeriodDates\",",
        "        \"range accrual data\"    : GUARANTEED_RAFACTOR_DATA1,",
        "        \"day counting\"          : GuaranteedPeriodDayCountConvention",
        "    }",
        null,
        "    return call.Create",
        "}",
        "//Guaranteed Coupon Size",
        "constfunction GauaranteedCouponSize_func(CouponBasis1)",
        "{",
        "    call = Numerix::Object({\"GUARANTEEDCOUPONSIZE\", \"INDEX\", \"INTEGER\"}) &",
        "    {",
        "        \"name\"    : \"GuaranteedCouponSize\",",
        "        \"events\"  : GuaranteedPeriodFixDates_func(CouponBasis1)",
        "    }",
        null,
        "    return call.create",
        "}"]
    }
  },
  "DEFINITION.GUARANTEEDCOUPON_ESUN": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.GUARANTEEDCOUPON_ESUN",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.GUARANTEEDCOUPON_ESUN.PARAMETERS",
      "RESULTS" : "DEFINITION.GUARANTEEDCOUPON_ESUN.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.GUARANTEEDCOUPON_ESUN.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.GUARANTEEDCOUPON_ESUN.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_SCHEDULESPEC",
      "MEMBER" : "DEFINITION.GUARANTEEDCOUPON_ESUN.GUARANTEED_INTERESTDATESPEC",
      "SCRIPT" : "DEFINITION.GUARANTEEDCOUPON_ESUN.SCRIPT.NXSL"
    }
  },
  "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.PARAMETERS",
      "RESULTS" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.RESULTS",
      "CLASSPROPERTIES" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "MEMBER" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.PAYOFFSCRIPTDATA",
      "MEMBER" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.COMPONENTDATA",
      "SCRIPT" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.CALLABLESWAPBASE",
      "DEFINITION" : "DEFINITION.GUARANTEEDCOUPON_ESUN"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^LEG2DATES.CUSTOMSCHEDULE_10540_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "AccrualStart" : [44526,44620,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46811,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48638,48725,48817,48911,49002,49090,49184],
      "FixDate" : [44526,44620,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46811,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48638,48725,48817,48911,49002,49090,49184],
      "AccrualEnd" : [44620,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46811,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48638,48725,48817,48911,49002,49090,49184,49275],
      "PayDate" : [44620,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46811,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48638,48725,48817,48911,49002,49090,49184,49275]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^LEG1DATES.CUSTOMSCHEDULE_10542_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "AccrualStart" : [44526,44620,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46811,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48638,48725,48817,48911,49002,49090,49184],
      "FixDate" : [44526,44617,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46808,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48635,48725,48817,48911,49002,49090,49184],
      "AccrualEnd" : [44620,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46811,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48638,48725,48817,48911,49002,49090,49184,49275],
      "PayDate" : [44620,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46811,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48638,48725,48817,48911,49002,49090,49184,49275]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^LEG1MULTIPLIER2_10544_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Value" : [
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.20000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -4.70000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018,
        -5.20000000000000018]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^CALLABLEDATES.CUSTOMSCHEDULE_10546_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "FixDate" : [44617,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46812,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48635,48725,48817,48911,49002,49090,49184],
      "PayDate" : [44617,44707,44799,44893,44984,45072,45166,45257,45348,45439,45530,45622,45714,45803,45895,45987,46079,46168,46260,46352,46444,46533,46625,46717,46812,46899,46993,47084,47175,47266,47357,47448,47540,47630,47721,47813,47905,47994,48086,48178,48270,48360,48452,48544,48635,48725,48817,48911,49002,49090,49184]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^LEG1MULTIPLIER_10548_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "Value" : [
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.20000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        4.70000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018,
        5.20000000000000018]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_10550_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["LEG2COUPONTYPE","MARGINSET","LEG2NOTIONALCURRENCY","LEG1DATES.ARREARSRESET","BOOKINGCENTER","LEG2DATES.CUSTOMSCHEDULE","LEG1DATES.FRONTPAY","ISCALLABLE","RACUTOFFPERIOD","LEG2DATES.FRONTPAY","LEG1DATES.MATURITY","LEG2SPREAD","LEG2DATES.START","SWAPDIRECTION","LEG1DATES.BASIS","LEG1INDEX2.FIXINGS","CURRENCY","LEG2DATES.ACCRUALFREQUENCY","LEG1INDEX2.CURRENCY","RAUPPERBOUND1","RAENDDATEOBSERVATION","RAHOLIDAYCONVENTION","ISSWAP","RALOWERBOUND1INCLUSIVE","LEG1RAINDEX1A.TENOR","LEG2DATES.MATURITY","LEG1DATES.FIXCALENDAR","LEG2DATES.STARTUNADJUSTED","LEG2DATES.LONGSTUB","LEG1DATES.STARTUNADJUSTED","LEG1RAINDEX1A.CURRENCY","LEG1RAINDEX1A.NAME","LEG1NOTIONAL","NETTINGSET","RALOWERBOUND1","CALLABLEDATES.EXERCISEFREQUENCY","LEG1RAINDEX1A.FIXINGS","LEG1INDEX.FIXINGS","LEG1DATES.CUSTOMSCHEDULE","LEG1INDEX2.TENOR","LEG1DATES.LONGSTUB","LEG1MULTIPLIER2","LEG1DATES.MATURITYUNADJUSTED","ISCMSFALLBACK","STARTDATE","RAOBSERVATIONFIXINGLAG","LEG2DATES.ENDOFMONTH","COUNTERPARTY","ENDDATE","LEG2NOTIONAL","LEG1COUPONTYPE","ISSUERRECOVERYRATE","LEG2INDEX.CURRENCY","CALLABLEDATES.CUSTOMSCHEDULE","LEG2DATES.ACCRUALBACKSTUBTYPE","LEG1DATES.FREQUENCY","LEG1DATES.ACCRUALFREQUENCY","LEG2DATES.FREQUENCY","TRADEID","LEG1DATES.ENDOFMONTH","LEG2DATES.ACCRUALENDOFMONTH","LEG2MULTIPLIER","PREMIUMTYPE","LEG1FLOOR","CALLABLEDATES.ENDDATE","COUNTERPARTYGROUP","LEG1SPREAD","LEG1CAP","LEGALENTITY","LEG2DATES.MATURITYUNADJUSTED","LEG1DATES.FRONTSTUB","LEG2INDEX.TENOR","LEG2CAP","LEG1INDEX.NAME","LEG1DATES.START","LEG2FLOOR","LEG1RAMULTIPLIER1A","CALLABLEDATES.OPTIONPOSITION","LEG2DATES.FRONTSTUB","LEG1MULTIPLIER","RAUPPERBOUND1INCLUSIVE","LEG1INDEX.CURRENCY","LEG1INDEX.TENOR","CALLABLEPENALTYFEECURRENCY","LEG1DATES.ACCRUALBACKSTUBTYPE","LEG1DATES.ACCRUALENDOFMONTH","LEG2DATES.BASIS","LEG2DATES.ARREARSRESET","LEG1INDEX2.NAME","LEG2INDEX.NAME","CALLABLEDATES.STARTDATE","LEG1NOTIONALCURRENCY"],
      "VALUE" : ["Float","Residual","USD",false,"TW DBU","LEG2DATES.CUSTOMSCHEDULE_10540_NX_AUTOGEN",false,true,"0BD",false,49274,0.00100000000000000002,44526,"Pay Structured","30/360","USD-CIS-5Y","USD","1BD","USD",0.0400000000000000008,false,"BD",true,true,"10Y",49274,"TPB",false,false,false,"USD","CIS",400000,"TRADE-1701250621129591280090",0,"3M","USD-CIS-10Y","USD-CIS-30Y","LEG1DATES.CUSTOMSCHEDULE_10542_NX_AUTOGEN","5Y",false,"LEG1MULTIPLIER2_10544_NX_AUTOGEN",false,true,44526,"0BD",false,"BNPAFRPP",49274,400000,"Range Accrual Spread",0.400000000000000022,"USD","CALLABLEDATES.CUSTOMSCHEDULE_10546_NX_AUTOGEN","Short","3M","3M","3M","TRADE-1701250621129591280090",false,false,1,"UPFRONT",0,49274,"ESUN",0,0.0700000000000000067,"BNPAFRPP",false,false,"ON",99.9899999999999949,"CIS",44526,-99.9899999999999949,1,"true",false,"LEG1MULTIPLIER_10548_NX_AUTOGEN",true,"USD","30Y","USD","Short",false,"ACT/360",false,"CIS","SOFR",44618,"USD"]
    }
  },
  "DEFINITION.INTERESTDATES.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Start","Maturity","Reference Date","Convention","Basis","Frequency","Payment Lag","Pay Roll Convention","Pay Calendar","Notice Period","Fix Roll Convention","Fix Calendar","Accrual Frequency","Accrual Roll Convention","Accrual Calendar","Arrears Reset","End of Month","First Roll Date","Front Stub","Front Pay","Long Stub","Penultimate Roll Date","Maturity Unadjusted","Start Unadjusted","Custom Schedule","Maturity Calendar","Maturity Convention","Custom Outer Schedule","Accrual Front Stub Type","Accrual Back Stub Type","Accrual End of Month"],
      "TYPE" : ["Date|Tenor","Date|Tenor","Date","ID","Basis","Tenor","Tenor","RollConvention","Calendar","Tenor","RollConvention","Calendar","Tenor","RollConvention","Calendar","Boolean","Boolean","Date","Boolean","Boolean","Boolean","Date","Boolean","Boolean","Table(DEFINITION.INTERESTDATES.CUSTOMSCHEDULESPEC)","Calendar","RollConvention","Table(DEFINITION.INTERESTDATES.CUSTOMSCHEDULESPEC)","String","String","Boolean"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,null,
        ">Numerix::MarketDate",    null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "GROUPING" : ["T&C","T&C","T&C","Convention","T&C","T&C","Convention","Convention","Convention","Convention","T&C","Convention","T&C","Convention","Convention","T&C","Convention","T&C","Convention","Convention","Convention","T&C","Convention","Convention","T&C","Convention","Convention","T&C","Convention","Convention","Convention"],
      "DESCRIPTION" : ["Start of the schedule.","The maturity of the trade, which can be entered as a date or tenor.","If the start or maturity are inputted as tenors, this serves as a reference date.","The ID representing the convention set for default parameters.
","Day-count basis convention. 

","Payment frequency of events; accepts any tenor expressed in months, to accommodate longer frequencies in IMM schedules. Tenor in months or years.","Period between accrual end and payment dates.","Business day conventions used to adjust payment dates.","Holiday calendar used to adjust payment dates.","Period between the fixing and accrual start date",null,"Holiday calendar used to adjust rate fixing
dates.","Accrual frequency for the leg; if it's less than (Payment) Frequency then averaging or compounding schedule","Roll date convention for adjusting accrual dates when it falls on a non-business date.","Holiday calendar used to adjust accrual dates.","Indicates if fixing is in arrears or in advance","Indicates whether the date should be adjusted to the end of the month.","Used to define roll dates and front stub","A stub is an irregular time period at the beginning or end of the contract. Select TRUE for front stub or FALSE for back stub.","Indicates if payment is in advance or at the end of the period","Indicates whether the stub is long or short; stub length is relative to frequency. TRUE for long sub, FALSE for short stub","Used to define roll dates and back stub","Indicates whether to adjust the final maturity date by ACCRUAL CALENDAR and ACCRUAL CONVENTION;
if set to TRUE, the normal adjustment for the last accrual end date of the schedule is not performed; all other dates are adjusted as normal.","Indicates whether to adjust the first accrual
start date of the schedule","Custom Events schedule for Interest Dates","Holiday calendar used to adjust maturity.","Business day conventions used to adjust maturity.","Custom Events schedule for Outer schedule of payment to support averaging/compounding inner schedule","Front stub type for the inner (accrual) schedule. 
None, short (default), Long, Roll Date","Back stub type for the inner (accrual) schedule. 
None, short (default), Long, Roll Date","Indicates whether the date should be adjusted to the end of the month."]
    }
  },
  "DEFINITION.INTERESTDATES.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.INTERESTDATES.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.INTERESTDATES.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.INTERESTDATES.CUSTOMSCHEDULESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "FIXDATE" : ["Date"],
      "ACCRUALSTART" : ["Date"],
      "ACCRUALEND" : ["Date"],
      "PAYDATE" : ["Date"]
    }
  },
  "DEFINITION.INTERESTDATES.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//=============================================================================",
        "// Includes",
        "//=============================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        null,
        "//=============================================================================",
        "// Main Function",
        "//=============================================================================",
        "//===================================================================",
        "// ob_events",
        "//    creates an events object to be used in Kernel component",
        "//===================================================================",
        null,
        "constfunction InterestDates(EventName=\"\",EventArrearsReset=\"\",EventBasis=\"\",EventFrequency=\"\")",
        "{",
        "    call = Numerix::Object({EventName+\"Event\", \"EVENTS\", \"INTEREST DATES\"}) & ",
        "    {",
        "        \"name\"          : EventName,",
        "        \"basis\"         : if Basis? Basis : EventBasis",
        "    }",
        "    if CustomSchedule:",
        "        call &= {\"dates\" : CustomSchedule}",
        "    else :",
        "        call &= ",
        "        {",
        "            \"start date\" 	        : if Start Is \"String\" ? Numerix::AddTenor(ReferenceDate, Numerix::Tenor(Start,(if AccrualRollConvention ? AccrualRollConvention : \"none\"),(if AccrualCalendar ? AccrualCalendar : \"none\"))) : Start,",
        "            \"end date\" 			    : if Maturity Is \"String\" ? Numerix::AddTenor(ReferenceDate, Numerix::Tenor(Maturity,(if AccrualRollConvention ? AccrualRollConvention : \"none\"),(if AccrualCalendar ? AccrualCalendar : \"none\"))) : Maturity,",
        "            //\"accrual frequency\"     : AccrualFrequency,",
        "            \"accrual calendar\"      : AccrualCalendar,",
        "            \"accrual Convention\"    : AccrualRollConvention,",
        "            \"arrears reset\"         : if ArrearsReset ? ArrearsReset : EventArrearsReset,",
        "            \"convention\"            : Convention,",
        "            \"end of month\"          : EndOfMonth,",
        "            \"first roll date\"       : FirstRollDate,",
        "            \"fix calendar\"          : FixCalendar,",
        "            \"fix convention\"        : FixRollConvention,		",
        "            \"freq\"                  : if Frequency ? Frequency: EventFrequency,",
        "            \"front pay\"             : FrontPay,",
        "            \"front stub\"            : FrontStub,",
        "            \"long stub\"             : Longstub,",
        "            \"maturity unadjusted\"   : MaturityUnadjusted,	",
        "            \"notice period\"         : NoticePeriod,			",
        "            \"pay calendar\"          : PayCalendar,",
        "            \"pay convention\"        : PayRollConvention,",
        "            \"payment lag\"           : PaymentLag,",
        "            \"penultimate roll date\" : PenultimateRollDate,",
        "            \"maturity calendar\"     : MaturityCalendar,	",
        "            \"maturity convention\"   : MaturityConvention,",
        "            \"start unadjusted\"      : StartUnadjusted ",
        "        }",
        null,
        "    return call.Create",
        "}",
        null,
        "constfunction OuterInterestDates(EventName=\"OuterEvent\")",
        "{",
        "    if not CustomOuterSchedule:",
        "        return \"\"",
        null,
        "    call = Numerix::Object({EventName+\"Event\", \"EVENTS\", \"INTEREST DATES\"}) & ",
        "    {",
        "        \"name\"          : EventName,",
        "        \"basis\"         : Basis,",
        "        \"dates\"         : CustomOuterSchedule",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        "//=============================================================================",
        "// Year Fraction Index",
        "//=============================================================================",
        null,
        "constfunction yearfraction(IndexName, IndexEvent)",
        "{",
        "    call = Numerix::Object({\"YearFraction\"+Numerix::UniqueNumber, \"INDEX\", \"YEAR FRACTION\"}) &",
        "    {",
        "        \"name\"            : IndexName,",
        "        \"basis\"           : Basis,",
        "        \"events\"          : IndexEvent",
        "    }",
        "    return call.create",
        "}"]
    }
  },
  "DEFINITION.INTERESTDATES": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.INTERESTDATES",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.INTERESTDATES.PARAMETERS",
      "RESULTS" : "DEFINITION.INTERESTDATES.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.INTERESTDATES.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.INTERESTDATES.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.INTERESTDATES.CUSTOMSCHEDULESPEC",
      "SCRIPT" : "DEFINITION.INTERESTDATES.SCRIPT.NXSL"
    }
  },
  "DEFINITION.GENERICRATEINDEX.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Currency","Name","Tenor","Quote Type","Fixing Source","Fixings","Basis","Frequency","End of Month","Fixing Calendar","Fixing Roll Convention","Fixing Lag","Accrual Calendar","Accrual Roll Convention","Projection Curve","Convention","Payment Calendar","Payment Roll Convention","Settlement Calendar","Settlement Lag","Rounding","Multiplier","Cutoff Lag","Observation Period Shift","Compounding Type","Round Future Values","Rate Calculation Rule","ARR Reference Date"],
      "TYPE" : ["Currency|Table(DEFINITION.GENERICRATEINDEX.VALUESPEC)","String|Table(DEFINITION.GENERICRATEINDEX.VALUESPEC)","Tenor|Table(DEFINITION.GENERICRATEINDEX.VALUESPEC)","String","String|Table(DEFINITION.GENERICRATEINDEX.VALUESPEC)","ID|Table(DEFINITION.GENERICRATEINDEX.VALUESPEC)","Basis","Tenor","String","Calendar","RollConvention","Tenor","Calendar","RollConvention","ID","ID","Calendar","RollConvention","Calendar","Tenor","String","Double|Table(DEFINITION.GENERICRATEINDEX.VALUESPEC)","Tenor","Tenor","String","Boolean","String","Date"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,null,null,"MID",null,null,null,null,null,null,null,null,null,null,null,
        ">NxStd::RateConventionID(Currency,Name,Tenor)",    null,null,null,null,null,1,"0BD","0BD","Spread Exclusive",false,"USE UNADJUSTED DATES",null],
      "GROUPING" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "DESCRIPTION" : ["Currency of the index.",null,"End Tenor of the swap maturity.","Indicate the Quote types used. May be Mid, Bid or Ask.","Source of Fixings","Historical Fixings.","Day-count convention for the fixed leg; supports ACT/ACT (Bond) basis.","Frequency of the swap rate.","Indicates whether the underlying rate follows end-of-month rules
TRUE for basis leg to follow end-of-month rules; otherwise, FALSE","Holiday calendar used to adjust rate fixing dates.","Roll date convention for adjusting rate fixing dates when they fall on a non-business date.","Period between the fixing and accrual start date.","Holiday calendar used to adjust accrual dates.","Roll date convention for adjusting accrual dates when they fall on a non-business date","The interest rate index for the floating leg of the swap.","This represents the convention set for default parameters.",null,null,null,null,null,null,null,null,"Type of compounding:
- Straight
- Flat
- Spread Exclusive (Default)
- (Empty) (No Compounding)
","Indicates whether to round future rate projections/index values. Values are rounded according to the ROUNDING specification. If ROUNDING is not specified, no rounding is applied to the rate fixings.

TRUE to round future rate projections and historical fixings; FALSE (default) to round only historical fixings","Rule used for computing the dates in the basis rate calculation
Use Accrual Dates is an approximation but one that has some analytic properties, such as the leg prices exactly to par as there are no date mismatches. This approach is commonly used in some systems.

USE UNADJUSTED DATES (default) - Uses accrual dates, unadjusted by any calendars or conventions, to generate inner compounding periods
USE ACCRUAL DATES - Uses adjusted accrual dates to generate inner compounding periods
USE PAY DATES - Uses pay dates to generate inner compounding periods"," A date referring to the start date of cumulative ARR Index calculation, e.g. for cumulative SOFR INDEX, it is 4/2/2018. (i.e. First publishing date)"]
    }
  },
  "DEFINITION.GENERICRATEINDEX.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.GENERICRATEINDEX.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.GENERICRATEINDEX.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.GENERICRATEINDEX.VALUESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "VALUE" : [
        "STRING"]
    }
  },
  "DEFINITION.GENERICRATEINDEX.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//=============================================================================",
        "// Includes",
        "//=============================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "define generic_index_currency = if is_term_structured_index? Currency.load.value : {Currency}",
        "define generic_index_name = if is_term_structured_index? Name.load.value : {Name}",
        "define generic_index_tenor = if is_term_structured_index? Tenor.load.value : {Tenor}",
        "define generic_index_size = if Currency.Exists? Numerix::TableRowCount(Currency) : 1",
        null,
        null,
        "constfunction generic_index(indexname, fixingid = \"\")",
        "{",
        "    fixingid_ = if fixingid ? fixingid : (if Fixings ? Fixings.load.value : generic_index_fixings)",
        null,
        "    res = {}",
        null,
        "    foreach n in generic_index_name",
        "    {",
        "        i = n.iteration",
        "        idxName = if is_term_structured_index? \"\" : indexname",
        "        if n == #\"CIS\":",
        "            res @= create_cis_index( idxName, i, fixingid_[i])",
        "        elseif n == #\"CMS\":",
        "            res @= create_cms_index( idxName, i, fixingid_[i])",
        "        elseif n == #\"CMT\":",
        "            res @= create_cmt_index( idxName, i, fixingid_[i])",
        "        else:",
        "            res @= create_rate_index(idxName, i, fixingid_[i])",
        "    }",
        null,
        "    return if is_term_structured_index? res : res[1]",
        "}",
        null,
        "// return ture if Currency + Name + Tenor is a list",
        "constfunction is_term_structured_index",
        "{",
        "    if Currency.Exists: if Name.Exists: if Tenor.Exists",
        "    {",
        "        if generic_index_size != Numerix::TableRowCount(Name) or generic_index_size != Numerix::TableRowCount(Tenor)",
        "        {",
        "            Numerix::SetMajor(\"Table size of Currency, Name, Tenor do not match, please double check the input tables\")",
        "            return false",
        "        }",
        "        return true",
        "    }",
        "    return false",
        "}",
        null,
        "constfunction create_cis_index(fn_indexname, cnt, fn_fixingid)",
        "{",
        "    curr = generic_index_currency",
        "    n = generic_index_name",
        "    t = generic_index_tenor",
        "    b = generic_index_basis",
        "    conv = generic_index_convention",
        "    indexCurve = generic_index_projectioncurve",
        "    idxName_tmp = rateIndexName(curr[cnt], n[cnt], t[cnt])",
        null,
        "    call = Numerix::Object({\"genericindex_\" + idxName_tmp, \"INDEX\", \"COMPOUND INDEX SWAP\"}) & ",
        "    {",
        "        \"name\"                  : if fn_indexname ? fn_indexname : idxName_tmp,",
        "        \"currency\"              : curr[cnt],",
        "        \"maturity\"              : t[cnt], ",
        "        \"convention\"            : conv[cnt],",
        "        \"fixings\"               : fn_fixingid,",
        "        \"index curve\"           : indexCurve[cnt]",
        "    }",
        "    return call.create",
        "}",
        null,
        null,
        null,
        "constfunction create_cms_index(fn_indexname, cnt, fn_fixingid)",
        "{",
        "    curr = generic_index_currency",
        "    n = generic_index_name",
        "    t = generic_index_tenor",
        "    b = generic_index_basis",
        "    conv = generic_index_convention",
        "    indexCurve = generic_index_projectioncurve",
        "    idxName_tmp = rateIndexName(curr[cnt], n[cnt], t[cnt])",
        null,
        "    call = Numerix::Object({\"genericindex_\" + idxName_tmp, \"INDEX\", \"CONSTANT MATURITY SWAP\"}) & ",
        "    {",
        "        \"name\"                  : if fn_indexname ? fn_indexname : idxName_tmp,",
        "        \"currency\"              : curr[cnt],",
        "        \"tenor\"                 : t[cnt], ",
        "        \"convention\"            : conv[cnt],",
        "        \"fixings\"               : fn_fixingid,",
        "        \"index curve\"           : indexCurve[cnt],",
        "        //",
        "        \"freq\"                  : if Frequency ? Frequency : Numerix::GetConventions(conv[cnt],\"FixedFrequency\"),",
        "        \"basis\"                 : if b[cnt] ? b[cnt] : Numerix::GetConventions(conv[cnt],\"FixedAccrualBasis\"),",
        "        \"fix calendar\"          : if FixingCalendar ? FixingCalendar : Numerix::GetConventions(conv[cnt],\"FloatFixingCalendar\") ,",
        "        \"fix convention\"        : if FixingRollConvention ? FixingRollConvention : Numerix::GetConventions(conv[cnt],\"FloatFixingConvention\"),",
        "        \"notice period\"         : if FixingLag ? FixingLag : Numerix::GetConventions(conv[cnt],\"FloatFixingLag\")",
        "    }",
        "    return call.create",
        "}",
        null,
        "constfunction create_cmt_index(fn_indexname, cnt, fn_fixingid)",
        "{",
        "    curr = generic_index_currency",
        "    n = generic_index_name",
        "    t = generic_index_tenor",
        "    b = generic_index_basis",
        "    conv = generic_index_convention",
        "    indexCurve = generic_index_projectioncurve",
        "    idxName_tmp = rateIndexName(curr[cnt], n[cnt], t[cnt])",
        null,
        "    call = Numerix::Object({\"genericindex_\" + idxName_tmp, \"INDEX\", \"BOND\"}) & ",
        "    {",
        "        \"name\"                  : if fn_indexname ? fn_indexname : idxName_tmp,",
        "        \"currency\"              : curr[cnt],",
        "        \"tenor\"                 : t[cnt], ",
        "        \"convention\"            : conv[cnt],",
        "        \"fixings\"               : fn_fixingid,",
        "        \"index curve\"           : indexCurve[cnt],",
        "        //",
        "        \"freq\"                  : Frequency,     ",
        "        \"basis\"                 : b[cnt],              ",
        "        \"pay calendar\"          : PaymentCalendar,",
        "        \"pay convention\"        : PaymentRollConvention,",
        "        \"settlement calendar\"   : SettlementCalendar,",
        "        \"settlement lag\"        : SettlementLag",
        "    }",
        "    return call.create",
        "}",
        null,
        "constfunction create_rate_index(fn_indexname, cnt, fn_fixingid)",
        "{",
        "    curr = generic_index_currency",
        "    n = generic_index_name",
        "    t = generic_index_tenor",
        "    b = generic_index_basis",
        "    conv = generic_index_convention",
        "    indexCurve = generic_index_projectioncurve",
        "    idxName_tmp = rateIndexName(curr[cnt], n[cnt], t[cnt])",
        null,
        "    call = Numerix::Object({\"genericindex_\" + idxName_tmp, \"INDEX\", \"LIBOR\"}) & ",
        "    {",
        "        \"name\"                  : if fn_indexname ? fn_indexname : idxName_tmp,",
        "        \"basis\"                 : if b[cnt] ? b[cnt] : Numerix::GetConventions(conv[cnt],\"Basis\"),",
        "        \"currency\"              : curr[cnt],",
        "        \"rate settings\"         : RateSettings(curr[cnt], n[cnt], t[cnt]),",
        "        \"index curve\"           : indexCurve[cnt],",
        "        \"rounding\"              : rounding,",
        "        \"fixings\"               : fn_fixingid       ",
        "    }",
        "    return call.create",
        "}",
        null,
        "// return string/list of fixing name(s)",
        "constfunction generic_index_convention",
        "{",
        "    if Convention",
        "    {",
        "        if is_term_structured_index",
        "        {",
        "            if Convention.Exists: if Numerix::TableRowCount(Convention) == generic_index_size:",
        "                return convention",
        "        }",
        "        else:",
        "            return convention",
        "    }",
        null,
        "    res = {}",
        "    foreach n in generic_index_name",
        "    {",
        "        i = n.iteration",
        "        curr = generic_index_currency",
        "        t = generic_index_tenor",
        null,
        "        if n == #\"CIS\":",
        "            res @= generic_index_cis_convention(curr[i])",
        "        elseif n == #\"CMS\":",
        "            res @= generic_index_cms_convention(curr[i])",
        "        elseif n == #\"CMT\":",
        "            res @= generic_index_cmt_convention(curr[i])",
        "        else:// Libor & others",
        "            res @= generic_index_rate_convention(curr[i], n, t[i])",
        "    }",
        "    return res",
        "}",
        null,
        "constfunction generic_index_cis_convention(curr)",
        "{",
        "	irIndex = numerix::GetSettings(\"Settings.Currency\", curr, \"ARRIndex\")",
        "	irIndexTenor = numerix::GetSettings(\"Settings.Currency\", curr, \"ARRIndexTenor\")",
        "    return Numerix::SwapConventionID(curr, irIndex, irIndexTenor)",
        "}",
        null,
        "constfunction generic_index_cms_convention(curr)",
        "{",
        "	irIndex = numerix::GetSettings(\"Settings.Currency\", curr, \"IRIndex\")",
        "	irIndexTenor = numerix::GetSettings(\"Settings.Currency\", curr, \"IRIndexTenor\")",
        "    return Numerix::SwapConventionID(curr, irIndex, irIndexTenor)",
        "}",
        null,
        "constfunction generic_index_cmt_convention(curr)",
        "{",
        "    BondCountryCode = Numerix::GetSettings(\"Settings.Currency\",curr,\"COUNTRY\")",
        "    return Numerix::TreasuryBondConventionID(curr, BondCountryCode)",
        "}",
        null,
        "constfunction generic_index_rate_convention(fn_curr,fn_name, fn_tenor)",
        "{",
        "    return Numerix::RateConventionID(fn_curr, fn_name, fn_tenor)",
        "}",
        null,
        null,
        "// return string/list of fixing name(s)",
        "constfunction generic_index_fixings",
        "{",
        "    if Fixings",
        "    {",
        "        if is_term_structured_index",
        "        {",
        "            if Fixings.Exists: if Numerix::TableRowCount(Fixings) == generic_index_size:",
        "                return Fixings",
        "        }else:",
        "            return {Fixings}",
        "    }",
        null,
        "    FixingSource_ = if FixingSource? if FixingSource.Exists? FixingSource.load.value : FixingSource.copy(generic_index_size) : \"\".copy(generic_index_size)",
        null,
        "    res = {}",
        "    foreach n in generic_index_name",
        "    {",
        "        i = n.iteration",
        "        curr = generic_index_currency",
        "        t = generic_index_tenor",
        "        if n == #\"CIS\":",
        "            res @= Numerix::CISFixingsID( curr[i],    t[i], FixingSource_[i])",
        "        elseif n == #\"CMS\":",
        "            res @= Numerix::CMSFixingsID( curr[i],    t[i], FixingSource_[i])",
        "        elseif n == #\"CMT\":",
        "            res @= Numerix::CMSFixingsID( curr[i],    t[i], FixingSource_[i])",
        "        else:// Libor & others",
        "            res @= Numerix::RateFixingsID(curr[i], n, t[i], FixingSource_[i])",
        "    }",
        "    return res",
        "}",
        null,
        "// return the list of basis if exists from input",
        "constfunction generic_index_basis",
        "{",
        "    if basis",
        "    {",
        "        if is_term_structured_index",
        "        {",
        "            if basis.Exists: if Numerix::TableRowCount(basis) == generic_index_size:",
        "                return basis",
        "        }",
        "        else:",
        "            return basis",
        "    }",
        "    return \"\".copy(generic_index_size)",
        "}",
        null,
        "// return string/list of Projection curve(s)",
        "constfunction generic_index_projectioncurve",
        "{",
        "    if ProjectionCurve",
        "    {",
        "        if is_term_structured_index",
        "        {",
        "            if ProjectionCurve.Exists: if Numerix::TableRowCount(ProjectionCurve) == generic_index_size:",
        "                return ProjectionCurve",
        "        }",
        "        else:",
        "            return {ProjectionCurve}",
        "    }",
        null,
        "    res = {}",
        "    foreach n in generic_index_name",
        "    {",
        "        i = n.iteration",
        "        curr = generic_index_currency",
        "        t = generic_index_tenor",
        "        if n == #\"CIS\":",
        "            res @= generic_index_cis_projectioncurve(curr[i])",
        "        elseif n == #\"CMS\":",
        "            res @= generic_index_cms_projectioncurve(curr[i])",
        "        elseif n == #\"CMT\":",
        "            res @= generic_index_cmt_projectioncurve(curr[i])",
        "        else:",
        "            res @= generic_index_rate_projectioncurve(curr[i], n, t[i])",
        null,
        "    }",
        "    return res",
        "}",
        null,
        "constfunction generic_index_cis_projectioncurve(curr)",
        "{",
        "    ir_index = Numerix::GetSettings(\"Settings.Currency\",curr,\"ARRIndex\")",
        "    ir_indextenor= Numerix::GetSettings(\"Settings.Currency\",curr,\"ARRIndexTenor\")",
        "    return Numerix::ProjectionCurveID(curr, ir_index, ir_indextenor)",
        "}",
        null,
        "constfunction generic_index_cms_projectioncurve(curr)",
        "{",
        "    ir_index = Numerix::GetSettings(\"Settings.Currency\",curr,\"ARRIndex\")",
        "    ir_indextenor= Numerix::GetSettings(\"Settings.Currency\",curr,\"ARRIndexTenor\")",
        "    return Numerix::ProjectionCurveID(curr, ir_index, ir_indextenor)",
        "}",
        null,
        "constfunction generic_index_cmt_projectioncurve(curr)",
        "{",
        "    // BondCountryCode = Numerix::GetSettings(\"Settings.Currency\",curr,\"Country\")",
        "    bond_issuer = Numerix::GetSettings(\"Settings.Currency\",curr,\"ISSUER\")",
        "    return Numerix::BondCurveID(curr,bond_issuer)",
        "}",
        null,
        "constfunction generic_index_rate_projectioncurve(fn_curr,fn_name, fn_tenor)",
        "{",
        "    return Numerix::ProjectionCurveID(fn_curr, fn_name, fn_tenor)",
        "}",
        null,
        "constfunction RateIndexName(fn_currency,fn_name,fn_tenor)",
        "{",
        "    return fn_currency + \"_\" + fn_name + \"_\" + fn_tenor",
        "}",
        null,
        "constfunction RateSettings(fn_currency,fn_name,fn_tenor)",
        "{",
        "    return \"IR.RATE-SETTINGS.\"+fn_currency+\"-\"+fn_name+\"-\"+fn_tenor",
        "}",
        null,
        "//=============================================================================",
        "// Year Fraction",
        "//=============================================================================",
        null,
        "constfunction genericindex_yearfraction(IndexName, IndexEvent)",
        "{",
        "    call = Numerix::Object({\"YearFraction\", \"INDEX\", \"YEAR FRACTION\"}) &",
        "    {",
        "        \"name\"            : IndexName,",
        "        \"basis\"           : Basis,",
        "        \"events\"          : IndexEvent",
        "    }",
        null,
        "    return call.create",
        "}",
        null,
        "//=============================================================================",
        "// Compounding Type",
        "//=============================================================================",
        null,
        "constfunction compoundingtype_func",
        "{",
        "    switch on CompoundingType",
        "        case \"Straight\"",
        "            return \"INT PLUS SPREAD AT INT PLUS SPREAD\"",
        "        case \"FLAT\"",
        "            return \"INT PLUS SPREAD AT INT\"",
        "        case \"Spread Exclusive\"",
        "            return \"INT AT INT ADD SPREAD\"",
        "        default",
        "            return \"NONE\"",
        "    end switch",
        "}",
        null,
        "//constfunction create_index(indexname)",
        "//{",
        "//    object_type = \"LIBOR\"",
        null,
        "//    if Name == #\"CMS\" :",
        "//        object_type = \"CONSTANT MATURITY SWAP\"",
        "//    if Name == #\"CMT\" : ",
        "//        object_type = \"BOND\"",
        null,
        null,
        "//    call = Numerix::Object({\"genericindex_\"+Name + \"_\"+Tenor, \"INDEX\", object_type}) & ",
        "//    {",
        "//        \"name\"                  : indexname,",
        "//        \"currency\"              : Currency,",
        "//        \"tenor\"                 : Tenor, ",
        "//        \"convention\"            : generic_index_convention,",
        "//        \"accrual calendar\"      : AccrualCalendar,",
        "//        \"accrual convention\"    : AccrualRollConvention,        ",
        "//        \"fixings\"               : generic_index_fixings,",
        "//        \"index curve\"           : generic_index_projectioncurve",
        "//    }",
        null,
        "//    if NAME ==\"CMT\" :",
        "//        call &=",
        "//        {",
        "//            \"freq\"                  : Frequency,     ",
        "//            \"basis\"                 : Basis,              ",
        "//            \"pay calendar\"          : PaymentCalendar,",
        "//            \"pay convention\"        : PaymentRollConvention,",
        "//            \"settlement calendar\"   : SettlementCalendar,",
        "//            \"settlement lag\"        : SettlementLag",
        "//        }",
        null,
        "//    if NAME ==\"CMS\" :",
        "//        call &=",
        "//        {",
        "//            \"freq\"                  : if Frequency ? Frequency : Numerix::GetConventions(generic_index_convention,\"FixedFrequency\"),",
        "//            \"basis\"                 : if Basis ? Basis : Numerix::GetConventions(generic_index_convention,\"FixedAccrualBasis\"),              ",
        "//            \"fix calendar\"          : if FixingCalendar ? FixingCalendar : Numerix::GetConventions(generic_index_convention,\"FloatFixingCalendar\") ,",
        "//            \"fix convention\"        : if FixingRollConvention ? FixingRollConvention : Numerix::GetConventions(generic_index_convention,\"FloatFixingConvention\"),",
        "//            \"notice period\"         : if FixingLag ? FixingLag : Numerix::GetConventions(generic_index_convention,\"FloatFixingLag\")",
        "//        }",
        null,
        "//    if object_type ==\"LIBOR\" :",
        "//        call &=",
        "//        {",
        "//            \"fix calendar\"          : FixingCalendar,",
        "//            \"basis\"                 : Basis,              ",
        "//            \"fix convention\"        : FixingRollConvention,",
        "//            \"notice period\"         : FixingLag            ",
        "//        }",
        null,
        "//    return call.Create",
        "//}"]
    }
  },
  "DEFINITION.GENERICRATEINDEX": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.GENERICRATEINDEX",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.GENERICRATEINDEX.PARAMETERS",
      "RESULTS" : "DEFINITION.GENERICRATEINDEX.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.GENERICRATEINDEX.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.GENERICRATEINDEX.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.GENERICRATEINDEX.VALUESPEC",
      "SCRIPT" : "DEFINITION.GENERICRATEINDEX.SCRIPT.NXSL"
    }
  },
  "DEFINITION.OPTIONEVENT.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Custom Schedule","Option Position","Start Date","End Date","Exercise Frequency","Exercise Notice Calendar","Exercise Notice Roll Convention","Exercise Notice Period","Pay Calendar","Pay Roll Convention","Pay Lag","Accrual Calendar","Accrual Roll Convention","Include Front","Include Last","Arrears Reset","Front Pay","Exclude Past"],
      "TYPE" : ["Table(DEFINITION.OPTIONEVENT.DATESPEC)","String","Date","Date","Tenor","Calendar","RollConvention","Tenor","Calendar","RollConvention","Tenor","Calendar","RollConvention","Boolean","Boolean","Boolean","Boolean","Boolean"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,"Long",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "GROUPING" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "DESCRIPTION" : ["Custom option exercise schedule.","The position of the option. Long or short.  Default: Long","The start date of the option exercise period.","The end date of the option exercise period.","The frequency of exercise for the exercise period.","Calendar used to adjust fixing dates.","Business date convention for adjusting fixing dates when fixing dates fall on a non-business date.","Number of business days prior to the period start date.","Calendar used to adjust payment dates.","Business date convention for adjusting payment dates when payment dates for on a non-business date.","Period between accrual end and payment dates.","Holiday calendar used to adjust accrual dates.","Roll date convention for adjusting accrual dates when it falls on a non-business date.","Indicates whether the first period should be covered by the optionality
true to cover the first period; otherwise, false","Indicates whether the last period should be covered by the optionality
true to cover the last period; otherwise, false","Indicates if fixing is in arrears or in advance
true for fixing in arrears; false for advance fixing","Indicates if payment is in advance or at the end of the period
true for advance payment; false (default) for end of period payment.","Indicates whether all periods with fixings before the supplied now date are omitted. This is to ensure that no historic dates are erroneously used in script for calls etc.
true to omit all periods with fixings before the now date; otherwise, false"]
    }
  },
  "DEFINITION.OPTIONEVENT.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.OPTIONEVENT.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.OPTIONEVENT.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.OPTIONEVENT.DATESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "FIXDATE" : ["DATE"],
      "PAYDATE" : ["DATE"]
    }
  },
  "DEFINITION.OPTIONEVENT.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        null,
        "//==============================================================================",
        "//OPTIONDIRECTION",
        "// creates an index object that denotes in the payoff script whether the option is long or short",
        "//==============================================================================",
        null,
        "function optiondirection(indexname)",
        "{",
        "    call = Numerix::Object({\"OPTIONDIRECTION\", \"INDEX\", \"DATA\"}) & ",
        "    {",
        "        \"name\" : indexname,",
        "        \"data\" : if OptionPosition ==#\"Long\" ? 1 : -1",
        "	}",
        null,
        "    return call.Create",
        "}",
        null,
        "//=============================================================================",
        "// OPTIONDATES",
        "// creates an events object when given the event_name.  ",
        "// if StartDate and EndDate parameters are provided, use them; else use the provided event_startdate, event_enddate",
        "// if a custom schedule is provided, use it.",
        "//=============================================================================",
        null,
        "constfunction optiondates(event_name, event_startdate=\"\", event_enddate=\"\", event_freq=\"\")",
        "{",
        "    if CustomSchedule",
        "    {",
        "        call = Numerix::Object({event_name+\"event\", \"EVENTS\", \"OPTION DATES\"}) & ",
        "    	{",
        "            \"name\" 			 : event_name,",
        "            \"dates\" 	 	 : CustomSchedule,",
        "            \"exclude past\" 	 : ExcludePast",
        "        }",
        "        return call.Create",
        "    }",
        "    ",
        "    if ExerciseFrequency.Size == 0 and event_freq==\"\": // swtich to single period implementation.",
        "        return optiondate(event_name, (if StartDate is \"date\" ? StartDate : event_startdate), (if EndDate is\"date\" ? EndDate : event_enddate))",
        null,
        null,
        "    call = Numerix::Object({event_name+\"event\", \"EVENTS\", \"OPTION DATES\"}) & ",
        "    {",
        "        \"name\"			    : event_name,",
        "        \"paycalendar\"  	    : PayCalendar,",
        "        \"payconvention\"     : PayRollConvention,",
        "        \"paymentlag\"        : PayLag,",
        "        \"accrualcalendar\"  	: AccrualCalendar,",
        "        \"accrualconvention\" : AccrualRollConvention,",
        "        \"frontpay\"          : FrontPay,",
        "        \"includefront\"      : IncludeFront,",
        "        \"includelast\"       : IncludeLast,",
        "        \"arrearsreset\"      : ArrearsReset,",
        "        \"exclude past\"      : ExcludePast,",
        "        \"startdate\"         : if StartDate is \"date\" ? StartDate : event_startdate,",
        "        \"enddate\"           : if EndDate is \"date\" ? EndDate : event_enddate,",
        "        \"freq\"              : if event_freq is \"tenor\" ? event_freq: ExerciseFrequency,",
        "        \"fixcalendar\"       : ExerciseNoticeCalendar,",
        "        \"fixconvention\"     : ExerciseNoticeRollConvention,",
        "        \"noticeperiod\"      : ExerciseNoticePeriod",
        "	}",
        null,
        "    return call.Create",
        "}",
        null,
        "//=============================================================================",
        "// OPTIONDATE",
        "// creates an one period event object when given the event_name.  ",
        "//=============================================================================",
        null,
        "constfunction optiondate(event_name, event_exercisedate, event_paydate)",
        "{",
        "    call = Numerix::Object({\"ext\", \"EVENTS\", \"OPTION DATES\"}) &",
        "    {",
        "        \"name\"              : event_name,",
        "        \"exercise date\"     : event_exercisedate,",
        "        \"pay date\"          : event_paydate,",
        "        \"exclude past\"      : \"\"",
        "    }",
        null,
        "    return call.create",
        "}"]
    }
  },
  "DEFINITION.OPTIONEVENT": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.OPTIONEVENT",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.OPTIONEVENT.PARAMETERS",
      "RESULTS" : "DEFINITION.OPTIONEVENT.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.OPTIONEVENT.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.OPTIONEVENT.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.OPTIONEVENT.DATESPEC",
      "SCRIPT" : "DEFINITION.OPTIONEVENT.SCRIPT.NXSL"
    }
  },
  "DEFINITION.RATEINDEX.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Quote Type","Currency","Name","Tenor","Convention","Basis","Fixing Calendar","Fixing Roll Convention","Fixing Lag","Accrual Frequency","Accrual Calendar","Accrual Roll Convention","Fixing Source","Fixings","Index Fixings","Round Future Values","Rate Calculation Rule","End of Month","Rounding","Projection Curve","Rate Settings","Observation Period Shift","Observation Calendar","Observation Roll Convention","Compounding Schedule Generation Method","Percentage Rounding","Index Calculation Method","Index Output Format","Cutoff Lag","Floor","Reference Date"],
      "TYPE" : ["String","Currency","String","Tenor|String","ID","Basis","Calendar","RollConvention","Tenor","Tenor","Calendar","RollConvention","String","ID","ID","Boolean","String","Boolean","String","ID","ID","Tenor","Calendar","RollConvention","String","String","String","String","Tenor","Double","Date"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : ["MID",null,
        ">Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndex\")",    
        ">Numerix::GetSettings(\"Settings.Currency\",Currency,\"IRIndexTenor\")",    
        ">\"CONV.IR.RATE-SETTINGS.\"+Currency+\"-\"+Name+\"-\"+Tenor",    
        ">Numerix::GetConventions(Convention, \"Basis\")",    null,null,null,null,null,null,null,
        ">Numerix::RateFixingsID(Currency,Name,Tenor,FixingSource)",    
        ">Numerix::RateFixingsID(Currency,Name + \"INDEX\",Tenor,FixingSource)",    null,null,null,null,
        ">Numerix::ProjectionCurveID(Currency,Name,Tenor)",    
        ">\"IR.RATE-SETTINGS.\"+Currency+\"-\"+Name+\"-\"+Tenor",    null,null,null,null,null,null,"Annualized",null,null,null],
      "GROUPING" : ["Pricing Parameters","Rate Definition","Rate Definition","Rate Definition","Rate Convention","Rate Convention","Rate Convention","Rate Convention","Rate Convention","Rate Convention","Rate Convention","Rate Convention",null,"Rate Definition","Rate Definition","Rate Definition","Pricing Parameters","Trade T&C","Rate Definition","Rate Definition","Rate Convention",null,null,null,null,null,null,null,null,"Trade T&C","Rate Convention"],
      "DESCRIPTION" : ["Indicate the Quote types used. May be Mid, Bid or Ask.","The currency in which the underlying rate index is denominated.","The name of the rate index.","The tenor of the underlying rate.","The ID of the convention object for the underlying rate index.","Day count conventions used for computing interest.","Calendar used to adjust fixing dates.","Business date convention for adjusting rate fixing dates when they fall on a non-business date.","Lookback period for ARR Index, period between the fixing and accrual start date, it impacts the rate, but not the weight.","Periodicity of accrual dates","Calendar used to adjust accrual dates.","Business date convention for adjusting accrual dates when they fall on a non-business date.","Source of Fixings","Historical fixings for the underlying rate index.","Historical Index fixings for an RFR Index","Indicates whether to round future rate projections/index values. Values are rounded according to the ROUNDING specification. If ROUNDING is not specified, no rounding is applied to the rate fixings.","Rule used for computing the dates in the basis rate calculation
Use Accrual Dates is an approximation but one that has some analytic properties, such as the leg prices exactly to par as there are no date mismatches. This approach is commonly used in some systems.

 USE RATE DATES - The standard approach of computing the dates of the underlying cash deposit independently of the accrual dates in the floating leg of the swap 
 USE ACCRUAL DATES - The rate is projected using the accrual dates of the swap leg itself","Indicates whether the underlying rate follows end-of-month rules
true for basis leg to follow end-of-month rules; otherwise, false","Rounding rule for the rates represented by this INDEX object.","Used where the model is cross-currency and there is a difference between the discounting (i.e., model) curve and the predictive curve for the index",null,"A number k specified here indicates that for every observation day in the current interest period, the rate and weight from k days earlier are used.","Holiday calendar used to adjust observation dates.
To view the predefined calendars, access the Calendars workbook from the Static Data group of the Numerix tab. New calendars can be created with the CALENDAR Settings object.","Roll date convention for adjusting observation dates when they fall on a non-business date","Allows specifying which dates the inner compounding periods are generated from.

USE UNADJUSTED DATES (default) - Uses accrual dates, unadjusted by any calendars or conventions, to generate inner compounding periods
USE ACCRUAL DATES - Uses adjusted accrual dates to generate inner compounding periods
USE PAY DATES - Uses pay dates to generate inner compounding periods","Controls rounding of percentages in calculations other than determined through interpolation on two rates. This will reflect the number of decimal points in the Coupon Observed RATE, which is displayed in the ARR Index output.","Averaging or Compounding method, specified in a single header.  
NONE (default)
WEIGHTED
UNWEIGHTED
STRAIGHT
FLAT
SPREAD EXCLUSIVE","Specify whether the ARR Index is an annualized coupon rate when used in script, which is equal to COUPON OBSERVED RATE when used with a deterministic model.","A number k specified here is used to fix the rate k days before the current interest period ends (a 2-5 day lockout has been used in most SOFR FRNs). The conventional name is the LOCKOUT PERIOD according to ARRC.","The floor of the overnight rate. When specified, the output of ACCRUAL OBSERVED RATE will be the max [ACCRUAL OBSERVED RATE, floor], which will be used for calculation of coupon rate.","A date referring to the start date of cumulative ARR Index calculation, for cumulative SOFR INDEX, it is 4/2/2018."]
    }
  },
  "DEFINITION.RATEINDEX.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.RATEINDEX.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.RATEINDEX.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.RATEINDEX.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        null,
        "//===================================================================",
        "// IR_INDEXOBJECT",
        "//    Creates a LIBOR Index object to be used in Kernel Component",
        "//    The calling template - TERMS - supplies the indexname and eventname (Optional) to construct the index",
        "//===================================================================",
        null,
        "constfunction ir_indexobject(indexName, ProjectionCurveName=\"\", eventName=\"\", TLC_Fixing=\"\")",
        "{",
        "    call = Numerix::Object({\"IRRATE\"+Numerix::UniqueNumber, \"INDEX\", \"LIBOR\"}) & ",
        "    {",
        "        \"name\"                      : indexName,",
        "        \"basis\"                     : Basis,",
        "        \"currency\"                  : Currency,",
        "        \"rate settings\"             : RateSettings,",
        "        \"indexcurve\"                : if ProjectionCurveName ? ProjectionCurveName : ProjectionCurve,",
        "        \"Round Future Values\"       : RoundFutureValues,",
        "        \"Rounding\"                  : Rounding,",
        "        \"fixings\"                   : if TLC_Fixing ? TLC_Fixing : Fixings ",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        "constfunction ir_arrindex(indexName, coupon_dates, ProjectionCurveName=\"\", eventName=\"\", multiplier=\"\", spread=\"\",TLC_Fixing=\"\", TLC_indexFixing=\"\")",
        "{",
        "    call = Numerix::Object({\"ARRINDEX\"+Numerix::UniqueNumber, \"INDEX\", \"ARR\"}) & ",
        "    {",
        "        \"name\"                      : indexName,",
        "        \"basis\"                     : Basis,",
        "        \"currency\"                  : Currency,",
        "        \"accrual frequency\"         : AccrualFrequency,",
        "        \"coupon dates\"              : coupon_dates,",
        "        \"rate settings\"             : RateSettings,",
        "        \"indexcurve\"                : if ProjectionCurveName ? ProjectionCurveName : ProjectionCurve,",
        "        \"Round Future Values\"       : RoundFutureValues,",
        "        \"convention\"                : arr_convention,",
        "        \"fixing lag\"                : FixingLag,",
        "        \"accrual calendar\"          : AccrualCalendar,",
        "        \"accrual roll convention\"   : AccrualRollConvention,",
        "        \"fixing calendar\"           : FixingCalendar,",
        "        \"cutoff lag\"                : CutoffLag,",
        "        \"accrual end of month\"      : EndofMonth,",
        "        \"fixing roll convention\"    : FixingRollConvention,",
        "        \"observation period shift\"  : ObservationPeriodShift,",
        "        \"observation calendar\"      : ObservationCalendar,",
        "        \"observation roll convention\"   : ObservationRollConvention,",
        "        \"compounding schedule generation method\": CompoundingScheduleGenerationMethod,",
        "        \"index calculation method\"  : IndexCalculationMethod,",
        "        \"index output format\"       : IndexOutputFormat,",
        "        \"Rounding\"                  : Rounding,",
        "        \"fixings\"                   : if TLC_Fixing ? TLC_Fixing : Fixings,",
        "        \"floor\"                     : Floor,",
        "        \"reference date\"            : ReferenceDate",
        "    }",
        null,
        "    if multiplier",
        "    {",
        "        if multiplier is \"DOUBLE\":",
        "            call &=",
        "            {",
        "                \"rate multiplier\"   : multiplier",
        "            }",
        "        else:",
        "            call &=",
        "            {",
        "                \"rate multiplier table\" : changeTableHeader(multiplier,\"multiplier\")",
        "            }",
        "    }",
        null,
        "    if spread",
        "    {",
        "        if spread is \"DOUBLE\":",
        "            call &=",
        "            {",
        "                \"rate spread\"   : spread",
        "            }",
        "        else:",
        "            call &=",
        "            {",
        "                \"rate spread table\" : changeTableHeader(spread,\"spread\")",
        "            }",
        "    }",
        null,
        "    ifnot Numerix::CompareVersion(\"18.3\") > 0: if TLC_indexFixing    // VTP-110, NXCA-957, VTP-1218",
        "    {",
        "        idxFxgID = Numerix::TryResolve(TLC_indexFixing)",
        "        if NxStd::GetOutputValue(idxFxgID, \"DATE\"):",
        "            call &=",
        "            {",
        "                \"from index fixings\"    : true,",
        "                \"index fixings\"         : TLC_indexFixing",
        "            }",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        "constfunction arr_convention",
        "{",
        "    arr_swap_convention = Numerix::SwapConventionID(Currency, Name, Tenor)",
        null,
        "    name_list = {\"accrual frequency\", \"basis\", \"rate settings\", \"fixing lag\", \"accrual calendar\", \"accrual roll convention\", \"fixing calendar\", \"fixing roll convention\"}",
        "    name_list &= {\"accrual end of month\", \"cut off lag\", \"compounding schedule generation method\", \"index calculation method\"}",
        "    name_list &= {\"Publish-in-arrears calendar\", \"publish-in-arrears lag\", \"Publish-in-arrears roll convention\"}",
        null,
        "    value_list = {}",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Accrual Freq\")",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Accrual Basis\") ",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Rate Settings\") ",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Fixing Lag\") ",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Accrual Calendar\") ",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Accrual Convention\") ",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Fixing Calendar\") ",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Fixing Convention\") ",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float End of Month\") ",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Cutoff Lag\") ",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Compounding Schedule Generation Method\")",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Compounding Method\")",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Fixing Calendar\") //Publish-in-arrears calendar",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Accrual Freq\") //publish-in-arrears lag",
        "    value_list @= Numerix::GetConventions(arr_swap_convention, \"Float Accrual Convention\") //Publish-in-arrears roll convention",
        null,
        "    conv_table = Numerix::Table(\"arr_convention_\", {\"NAME\",\"VALUE\"},{name_list, value_list})",
        null,
        "    call = Numerix::Object({\"ARRINDEX_CONVENTION\"+Numerix::UniqueNumber, \"SETTINGS\", \"CONVENTION\"}) & ",
        "    {",
        "        \"default values\" : conv_table.Create",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        null,
        "constfunction ir_ratesetting(indexName = \"\")",
        "{",
        "    call = Numerix::Object({\"RateSetting\"+Numerix::UniqueNumber, \"SETTINGS\", \"RATE SETTINGS\"}) &",
        "    {",
        "        \"name\"                  : indexName,",
        "        \"basis\"                 : Basis,",
        "        \"tenor\"                 : if Tenor.Canonical == \"ON\" ? \"1BD\" : Tenor,",
        "        \"end of month\"          : EndofMonth,",
        "        \"spot calendar\"         : FixingCalendar,",
        "        \"spot roll convention\"  : FixingRollConvention,",
        "        \"spot lag\"              : FixingLag,",
        "        \"accrual calendar\"      : AccrualCalendar,",
        "        \"accrual convention\"    : AccrualRollConvention,",
        "        \"reset convention\"      : \"\",",
        "        \"reset calendar\"        : \"\"",
        "    }",
        null,
        "    return call.create",
        "}",
        null,
        "constfunction changeTableHeader(tableid, newHeader)",
        "{",
        "    ifnot tableid:",
        "        return \"\"",
        null,
        "    ifnot tableid.exists:",
        "        return \"\"",
        null,
        "    vals = tableid.load.value",
        "    return Numerix::Table(NxStd::MakeID(\"table\"), {newHeader}, vals).create",
        "}"]
    }
  },
  "DEFINITION.RATEINDEX": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.RATEINDEX",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.RATEINDEX.PARAMETERS",
      "RESULTS" : "DEFINITION.RATEINDEX.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.RATEINDEX.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.RATEINDEX.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "SCRIPT" : "DEFINITION.RATEINDEX.SCRIPT.NXSL"
    }
  },
  "CONV.IR.RATE-SETTINGS.USD-SOFR-ON.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Basis","SpotLag","SpotrollConvention","SpotCalendar","Tenor","EndOfMonth","AccrualrollConvention","AccrualCalendar"],
      "VALUE" : ["ACT/360","0BD","F","NYX","1BD",false,"F","NYX"]
    }
  },
  "CONV.IR.RATE-SETTINGS.USD-SOFR-ON": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "CONV.IR.RATE-SETTINGS.USD-SOFR-ON",
      "OBJECT" : "SETTINGS",
      "TYPE" : "CONVENTION",
      "DEFAULTVALUES" : "CONV.IR.RATE-SETTINGS.USD-SOFR-ON.DATA"
    }
  },
  "SETTINGS.CURRENCY": {
    "TYPE" : "DATA",
    "TABLE" : {
      "KEY" : ["AED","ARS","AUD","BCH","BRL","BTC","CAD","CHF","CLP","CNH","CNY","COP","CZK","DKK","ETH","EUR","GBP","HKD","HUF","IDR","ILS","INR","ISK","JPY","KRW","KWD","KZT","MXN","MYR","NOK","NZD","PEN","PHP","PLN","RON","RUB","SAR","SEK","SGD","THB","TRL","TRY","TWD","USD","ZAR","KHR","MMK","VND"],
      "RANK" : [11,35,4,48,32,47,6,7,36,19,18,34,21,14,49,2,3,17,29,31,12,26,28,27,30,37,38,33,10,15,5,39,25,13,40,22,41,16,8,24,43,9,23,1,20,80,null,null],
      "IRINDEX" : ["EIBO3M","APDRC","BBSW","BITCOINCASH","DI","BITCOIN","CDOR","LIBOR","CLICP","HIBOR","SHIBOR","IBR","PRIBOR","CIBOR","ETHEREUM","EURIBOR","LIBOR","HIBOR","BUBOR","BITD","TELBOR","MIFOR","REIBOR","LIBOR","KORIBOR","KIBOB","KIBID","TIIE","KLIBOR","NIBOR","BKBM","GOVBOND","PHIBOR","WIBOR","ROBOR","MOSPRIME","SAIBOR","STIBOR","SOR","BIBOR","TRLIBOR","TRLIBOR","TAIBOR","LIBOR","JIBAR","KIBOR","MIBOR","VNIBOR"],
      "IRINDEXTENOR" : ["3M","3M","3M","3M","1Y","3M","3M","3M","6M","3M","3M","ON","6M","6M","3M","6M","6M","3M","6M","6M","3M","6M","3M","6M","3M","3M","3M","28D","3M","6M","3M","3M","3M","6M","3M","3M","3M","3M","3M","3M","3M","3M","3M","3M","3M","3M","3M","3M"],
      "DISCOUNTCURVE" : ["IR.AED-EIBO3M-3M","IR.ARS-APDRC-3M","IR.AUD-BBSW-3M","FX.CUSTOMCCY.BCH/USD.FWD","IR.BRL-DI-1Y","FX.CUSTOMCCY.BTC/USD.FWD","IR.CAD-CORRA-ON","IR.CHF-LIBOR-6M","IR.CLP-CLICP-6M","IR.CNH-HIBOR-3M","IR.CNY-REPO-7D","IR.COP-COLGOVT","IR.CZK-PRIBOR-6M","IR.DKK-CIBOR-6M","FX.CUSTOMCCY.ETH/USD.FWD","IR.EUR-ESTR-ON","IR.GBP-SONIA-ON","IR.HKD-HIBOR-3M","IR.HUF-BUBOR-6M","IR.IDR-BITD-6M","IR.ILS-TELBOR-3M","IR.INR-MIFOR-6M","IR.ISK-REIBOR-3M","IR.JPY-TONAR-ON","IR.KRW-KORIBOR-3M","IR.KWD-KIBOB-3M","IR.KZT-KIBID-3M","IR.MXN-TIIE-28D","IR.MYR-KLIBOR-3M","IR.NOK-NIBOR-6M","IR.NZD-BKBM-3M","IR.PEN-GOVBOND-3M","IR.PHP-PHIBOR-3M","IR.PLN-WIBOR-6M","IR.RON-ROBOR-3M","IR.RUB-MOSPRIME-3M","IR.SAR-SAIBOR-3M","IR.SEK-STIBOR-3M","IR.SGD-SORA-ON","IR.THB-THOR-ON","IR.TRL-TRLIBOR-3M","IR.TRY-TRLIBOR-3M","IR.TWD-TAIBOR-3M","IR.USD-SOFR-ON","IR.ZAR-JIBAR-3M","IR.KHR-KIBOR-3M","IR.MMK-MIBOR-3M","IR.VND-VNIBOR-3M"],
      "DUALCURVE" : [false,false,true,false,false,false,true,false,false,false,true,false,false,false,false,true,true,true,false,false,false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false,false,false,true,false,false,false,false],
      "ARRINDEX" : [null,null,"AONIA",null,null,null,"CORRA","SARON",null,null,null,null,null,null,null,"ESTR","SONIA","HONIA",null,null,null,null,null,"TONAR",null,null,null,null,null,null,null,null,null,null,null,null,null,null,"SORA",null,null,null,null,"SOFR",null,null,null,null],
      "ARRINDEXTENOR" : [null,null,"ON",null,null,null,"ON","ON",null,null,null,null,null,null,null,"ON","ON","ON",null,null,null,null,null,"ON",null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ON",null,null,null,null,"ON",null,null,null,null],
      "OVERNIGHTINDEX" : [null,null,"AONIA",null,null,null,"CORRA",null,null,null,"REPO","IBR",null,null,null,"ESTR","SONIA","HONIA",null,null,null,null,null,"TONAR",null,null,null,null,null,null,null,null,null,null,null,null,null,null,"SORA","THOR",null,null,null,"SOFR",null,null,null,null],
      "OVERNIGHTINDEXTENOR" : [null,null,"ON",null,null,null,"ON",null,null,null,"7D","ON",null,null,null,"ON","ON","ON",null,null,null,null,null,"ON",null,null,null,null,null,null,null,null,null,null,null,null,null,null,"ON","ON",null,null,null,"ON",null,null,null,null],
      "CITY" : ["DBB",null,"SYB","NYX","SPS","NYX","TRB","ZUB","SAB","BEB HKB","BEB","BOB","PRB","COB","NYX","TGT","LNB","HKB","BDB","JAB","TAB","BMB","RKB","TKB","SEB","KUB",null,"MXB","KLB","OSB","WEB","LMB","MNB","WAB","BCB","MWB","SMB","STB","SIB","BKB",null,"ISX","TPB","NYB","JOB",null,null,null],
      "COUNTRY" : ["AE","AR","AU",null,"BR",null,"CA","CH","CL","CN","CN","CO","CZ","DK",null,"DE","GB","HK","HU","ID","IL","IN","IS","JP","KR","KW","KZ","MX","MY","NO","NZ","PE","PH","PL","RO","RU","SA","SE","SG","TH","TR","TR","TW","US","ZA","KH","MM","VN"],
      "ALLOWEDYIELDCURVEIDS" : ["IR.AED-EIBO3M-3M.SWAPDISCOUNTING.MID","IR.ARS-APDRC-3M.SWAPDISCOUNTING.MID","IR.AUD-BBSW-6M.SWAPDISCOUNTING.MID IR.AUD-BBSW-3M.SWAPDISCOUNTING.MID IR.AUD-BBSW-3M/USD-LIBOR-3M.MID IR.AUD-BBSW-3M/EUR-EURIBOR-3M.MID",null,"IR.BRL-DI-1D.SWAPDISCOUNTING.MID",null,"IR.CAD-CDOR-3M/USD-LIBOR-3M.MID IR.CAD-CORRA-ON.MID IR.CAD-CDOR-6M.OISDISCOUNTING.MID IR.CAD-CDOR-3M.OISDISCOUNTING.MID IR.CAD-CDOR-3M.SWAPDISCOUNTING.MID IR.CAD-CDOR-1M.OISDISCOUNTING.MID IR.CAD-CDOR-3M/EUR-EURIBOR-3M.MID","IR.CHF-LIBOR-3M/USD-LIBOR-3M.MID IR.CHF-LIBOR-3M/EUR-EURIBOR-3M.MID IR.CHF-LIBOR-6M.OISDISCOUNTING.MID IR.CHF-LIBOR-6M.SWAPDISCOUNTING.MID IR.CHF-LIBOR-1M.OISDISCOUNTING.MID IR.CHF-TOIS-ON.MID IR.CHF-LIBOR-3M.OISDISCOUNTING.MID","IR.CLP-CLICP-6M.SWAPDISCOUNTING.MID","IR.CNH-HIBOR-3M.SWAPDISCOUNTING.MID","IR.CNY-REPO-7D.MID IR.CNY-SHIBOR-3M.SWAPDISCOUNTING.MID","IR.COP-IBR-ON.MID,IR.COP-COLGOVT.MID","IR.CZK-PRIBOR-6M.SWAPDISCOUNTING","IR.DKK-CIBOR-6M.SWAPDISCOUNTING.MID IR.DKK-CIBOR-3M.SWAPDISCOUNTING.MID IR.DKK-CIBOR-3M/EUR-EURIBOR-3M.MID",null,"IR.EUR-EURIBOR-3M/USD-LIBOR-3M.MID IR.EUR-EONIA-ON.MID IR.EUR-EURIBOR-1M.OISDISCOUNTING.MID IR.EUR-EURIBOR-3M.OISDISCOUNTING.MID IR.EUR-EURIBOR-6M.OISDISCOUNTING.MID IR.EUR-EURIBOR-6M.SWAPDISCOUNTING.MID IR.EUR-EURIBOR-9M.OISDISCOUNTING.MID IR.EUR-EURIBOR-12M.OISDISCOUNTING.MID, IR.EUR-ESTR-ON.MID","IR.GBP-LIBOR-3M/USD-LIBOR-3M.MID IR.GBP-LIBOR-3M/EUR-EURIBOR-3M.MID IR.GBP-ISDA-STDRATES.MID IR.GBP-SONIA-ON.MID IR.GBP-LIBOR-1M.OISDISCOUNTING.MID IR.GBP-LIBOR-6M.OISDISCOUNTING.MID IR.GBP-LIBOR-6M.SWAPDISCOUNTING.MID IR.GBP-LIBOR-3M.OISDISCOUNTING.MID IR.GBP-SONIA-ON.ARR.MID","IR.HKD-HIBOR-3M.SWAPDISCOUNTING.MID IR.HKD-HKFEDBA-ON.MID IR.HKD-HIBOR-3M/USD-LIBOR-3M.MID","IR.HUF-BUBOR-6M.SWAPDISCOUNTING.MID","IR.IDR-BITD-6M.SWAPDISCOUNTING.MID","IR.ILS-TELBOR-3M.SWAPDISCOUNTING.MID","IR.INR-MIFOR-6M.SWAPDISCOUNTING.MID","IR.ISK-REIBOR-3M.SWAPDISCOUNTING.MID","IR.JPY-LIBOR-3M/USD-LIBOR-3M.MID IR.JPY-LIBOR-3M/EUR-EURIBOR-3M.MID IR.JPY-TONAR-ON.MID IR.JPY-LIBOR-1M.OISDISCOUNTING.MID IR.JPY-LIBOR-3M.OISDISCOUNTING.MID IR.JPY-ISDA-STDRATES.MID IR.JPY-LIBOR-6M.OISDISCOUNTING.MID IR.JPY-LIBOR-6M.SWAPDISCOUNTING.MID","IR.KRW-KORIBOR-3M.SWAPDISCOUNTING.MID","IR.KWD-KIBOB-3M.SWAPDISCOUNTING.MID","IR.KZT-KIBID-3M.SWAPDISCOUNTING.MID","IR.MXN-MXIBTIIE-ON.MID IR.MXN-BONDESD-MXGOVT.SOVEREIGN.MID IR.MXN-BONOSM-MXGOVT.SOVEREIGN.MID IR.MXN-BPA182-MXGOVT.SOVEREIGN.MID IR.MXN-BPAG28-MXGOVT.SOVEREIGN.MID IR.MXN-UDIBONOS-MXGOVT.SOVEREIGN.MID IR.MXN-BPAG91-MXGOVT.SOVEREIGN.MID IR.MXN-MEXIBOR-28D.SWAPDISCOUNTING.MID IR.MXN-MEXIBOR-1M.SWAPDISCOUNTING.MID","IR.MYR-KLIBOR-3M/USD-LIBOR-3M.MID IR.MYR-KLIBOR-3M.SWAPDISCOUNTING.MID","IR.NOK-NIBOR-3M/EUR-EURIBOR-3M.MID IR.NOK-NIBOR-6M.SWAPDISCOUNTING.MID","IR.NZD-BKBM-3M.SWAPDISCOUNTING.MID IR.NZD-NZOCR-ON.MID IR.NZD-BKBM-3M/USD-LIBOR-3M.MID IR.NZD-BKBM-3M/EUR-EURIBOR-3M.MID","IR.PEN-GOVBOND-3M.SWAPDISCOUNTING.MID","IR.PHP-PHIBOR-3M.SWAPDISCOUNTING.MID","IR.PLN-WIBOR-3M/EUR-EURIBOR-3M.MID IR.PLN-WIBOR-3M.SWAPDISCOUNTING.MID IR.PLN-WIBOR-6M.SWAPDISCOUNTING.MID","IR.RON-ROBOR-3M.SWAPDISCOUNTING.MID","IR.RUB-MOSPRIME-3M.SWAPDISCOUNTING.MID","IR.SAR-SAIBOR-3M.SWAPDISCOUNTING.MID","IR.SEK-STIBOR-1M.SWAPDISCOUNTING.MID IR.SEK-STIBOR-3M/EUR-EURIBOR-3M.MID IR.SEK-STIBOR-3M.SWAPDISCOUNTING.MID IR.SEK-STIB1D-ON.MID","IR.SGD-SIBOR-6M.SWAPDISCOUNTING.MID IR.SGD-SIBOR-6M/USD-LIBOR-6M.MID","IR.THB-THBFIX-6M.SWAPDISCOUNTING.MID","IR.TRL-TRLIBOR-3M.SWAPDISCOUNTING.MID","IR.TRY-TRLIBOR-3M.SWAPDISCOUNTING.MID","IR.TWD-TAIBOR-3M.SWAPDISCOUNTING.MID IR.TWD-FIXED/USD-LIBOR-6M.ND.MID IR.TWD-FIXED/USD-LIBOR-6M.ONSHORE.MID","CR.USD-MSFT.MID IR.USD-PROXY1.ZERORATE.MID IR.USD-USGOVT.MID IR.USD-FEDFUNDS-ON.MID IR.USD-ISDA-STDRATES.MID IR.USD-LIBOR-1M.OISDISCOUNTING.MID IR.USD-LIBOR-3M.OISDISCOUNTING.MID IR.USD-LIBOR-3M.SWAPDISCOUNTING.MID IR.USD-LIBOR-6M.OISDISCOUNTING.MID IR.USD-LIBOR-12M.OISDISCOUNTING.MID IR.USD-SOFR-ON.MID","IR.ZAR-JIBAR-3M.SWAPDISCOUNTING.MID IR.ZAR-JIBAR-3M/EUR-EURIBOR-3M.MID",null,null,null],
      "BONDTYPE" : [null,null,"AUTREASURY",null,null,null,"CATREASURY",null,null,null,null,"COLTREASURY",null,null,null,"DEBUND","GBGILT",null,null,null,null,null,null,"JPJGB",null,null,null,null,null,null,"NZTREASURY",null,null,null,null,null,null,null,null,null,null,null,"FIXED","USTREASURY",null,null,null,null],
      "ISSUER" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"DEGOVT",null,null,null,null,null,null,null,"JPGOVT",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"TWGOVT","USGOVT",null,null,null,null],
      "ALLOWEDSWAPTIONVOLIDS" : [null,null,"IR.VOL.SWPT.AUD-BBSW-3M.ATM.MID,IR.VOLCUBE.SWPT.AUD-BBSW-3M.MID",null,"IR.VOL.SWPT.BRL-DI-1D.ATM.MID,IR.VOLCUBE.SWPT.BRL-DI-1D.MID",null,"IR.VOL.SWPT.CAD-CORRA-ON.ATM.MID,IR.VOL.SWPT.CAD-CDOR-3M.ATM.MID,IR.VOLCUBE.SWPT.CAD-CDOR-3M.MID","IR.VOL.SWPT.CHF-LIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.CHF-LIBOR-6M.MID","IR.VOL.SWPT.CLP-CLICP-6M.ATM.MID,IR.VOLCUBE.SWPT.CLP-CLICP-6M.MID","IR.VOL.SWPT.CNH-HIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.CNH-HIBOR-3M.MID","IR.VOL.SWPT.CNY-SHIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.CNY-SHIBOR-3M.MID","IR.VOL.SWPT.COP-LIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.COP-LIBOR-6M.MID","IR.VOL.SWPT.CZK-PRIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.CZK-PRIBOR-6M.MID","IR.VOL.SWPT.DKK-CIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.DKK-CIBOR-6M.MID",null,"IR.VOL.SWPT.EUR-ESTR-ON.ATM.MID,IR.VOL.SWPT.EUR-EURIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.EUR-EURIBOR-6M.MID","IR.VOL.SWPT.GBP-SONIA-ON.ATM.MID,IR.VOL.SWPT.GBP-LIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.GBP-LIBOR-6M.MID","IR.VOL.SWPT.HKD-HIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.HKD-HIBOR-3M.MID","IR.VOL.SWPT.HUF-BUBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.HUF-BUBOR-6M.MID","IR.VOL.SWPT.IDR-BITD-6M.ATM.MID,IR.VOLCUBE.SWPT.IDR-BITD-6M.MID","IR.VOL.SWPT.ILS-TELBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.ILS-TELBOR-3M.MID","IR.VOL.SWPT.INR-MIFOR-3M.ATM.MID,IR.VOLCUBE.SWPT.INR-MIFOR-3M.MID","IR.VOL.SWPT.ISK-REIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.ISK-REIBOR-3M.MID","IR.VOL.SWPT.JPY-TONAR-ON.ATM.MID,IR.VOL.SWPT.JPY-LIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.JPY-LIBOR-6M.MID","IR.VOL.SWPT.KRW-KORIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.KRW-KORIBOR-3M.MID","IR.VOL.SWPT.KWD-KIBOB-3M.ATM.MID,IR.VOLCUBE.SWPT.KWD-KIBOB-3M.MID",null,"IR.VOL.SWPT.MXN-MEXIBOR-28D.ATM.MID,IR.VOLCUBE.SWPT.MXN-MEXIBOR-28D.MID","IR.VOL.SWPT.MYR-KLIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.MYR-KLIBOR-3M.MID","IR.VOL.SWPT.NOK-NIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.NOK-NIBOR-6M.MID","IR.VOL.SWPT.NZD-BKBM-3M.ATM.MID,IR.VOLCUBE.SWPT.NZD-BKBM-3M.MID",null,"IR.VOL.SWPT.PHP-PHIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.PHP-PHIBOR-3M.MID","IR.VOL.SWPT.PLN-WIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.PLN-WIBOR-6M.MID",null,"IR.VOL.SWPT.RUB-MOSPRIME-3M.ATM.MID,IR.VOLCUBE.SWPT.RUB-MOSPRIME-3M.MID","IR.VOL.SWPT.SAR-SAIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.SAR-SAIBOR-3M.MID","IR.VOL.SWPT.SEK-STIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.SEK-STIBOR-3M.MID","IR.VOL.SWPT.SGD-SIBOR-6M.ATM.MID,IR.VOLCUBE.SWPT.SGD-SIBOR-6M.MID","IR.VOL.SWPT.THB-THBFIX-6M.ATM.MID,IR.VOLCUBE.SWPT.THB-THBFIX-6M.MID","IR.VOL.SWPT.TRL-TRLIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.TRL-TRLIBOR-3M.MID","IR.VOL.SWPT.TRY-TRLIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.TRY-TRLIBOR-3M.MID","IR.VOL.SWPT.TWD-CP-90D.ATM.MID,IR.VOLCUBE.SWPT.TWD-CP-90D.MID","IR.VOL.SWPT.USD-LIBOR-3M.ATM.MID,IR.VOLCUBE.SWPT.USD-LIBOR-3M.MID, IR.VOL.SWPT.USD-SOFR-ON.ATM.MID","IR.VOL.SWPT.ZAR-JIBAR-3M.ATM.MID,IR.VOLCUBE.SWPT.ZAR-JIBAR-3M.MID",null,null,null]
    }
  },
  "DEFINITION.CR.CDSPROXY.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Guarantor Ratio","Guarantor","Guarantor Name","Credit Rating","Country","Guarantor Group","Guarantor Group Country","Guarantor Credit ID","Credit Reference Entity","Restructuring Clause","Debt Type","Recovery Rate"],
      "TYPE" : ["Double","String","String","String","String","String","String","String","String","String","String","Double"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,null,null,null,null,null,null,null,
        ">if GuarantorCreditID ? GuarantorCreditID.Split(\"_\")[1] : \"\"",    
        ">if GuarantorCreditID ? GuarantorCreditID.Split(\"_\")[3] : \"\"",    
        ">if GuarantorCreditID ? GuarantorCreditID.Split(\"_\")[2] : \"\"",    0.400000000000000022],
      "GROUPING" : ["Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters","Credit Parameters"],
      "DESCRIPTION" : ["Guarantor ratio of the note.","Guarantor of the note which is predefined in Legal Entity. This input will be considered in higher priority than [Guarantor Reference Entity], [Guarantor Debt Type] and [Guarantor Restructuring Clause]","Description of the issuer guarantor during security capture.","Derived from the predefined guarantor details from Legal Entity.","Country of the guarantor selected during security capture.","Derived from the predefined guarantor details from Legal Entity.","Derived from the predefined guarantor details from Legal Entity.","An ID indicate the necessary information of credit for issuer which includes below terms with separator ?_?:
1) Reference Entity
2) Debt Type
3) Restructuring Clause

ReferenceEntity_DebtType_RestructuringClause
","The reference entity","The restructuring clause; one of XR, CR, MR or MM","The debt type","Used to specify what the recovery is for the defaulted asset; this heading overrides the recovery rate that may have been specified earlier for the asset in the basket or instrument. This is the recovery rate applied at the time of default."]
    }
  },
  "DEFINITION.CR.CDSPROXY.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.CR.CDSPROXY.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CR.CDSPROXY.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CR.CDSPROXY.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        null]
    }
  },
  "DEFINITION.CR.CDSPROXY": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.CR.CDSPROXY",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.CR.CDSPROXY.PARAMETERS",
      "RESULTS" : "DEFINITION.CR.CDSPROXY.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.CR.CDSPROXY.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.CR.CDSPROXY.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "SCRIPT" : "DEFINITION.CR.CDSPROXY.SCRIPT.NXSL"
    }
  },
  "DEFINITION.FXINDEX.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Quote Type","Base Currency","Term Currency","Convention","Spot Calendar","Spot Roll Convention","Spot Lag","Fixing Source","Fixings","Closing Time","Base Calendar","Term Calendar","Foreign Index Curve","Domestic Index Curve","Spot Strategy","Multiplier"],
      "TYPE" : ["String","Currency","Currency","ID","Calendar","RollConvention","Tenor","String","ID","String","Calendar","Calendar","ID","ID","ID","Double|Table(DEFINITION.FXINDEX.VALUESPEC)"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : ["MID",null,null,
        ">if isValid ? Numerix::FXOptionConventionID(BaseCurrency,TermCurrency) : \"\"",    
        "> if isValid ? Numerix::GetConventions(Convention,\"FixCalendar\") : \"\"",    
        ">if isValid ? Numerix::GetConventions(Convention,\"FixConvention\") : \"\"",    
        ">if isValid ? Numerix::GetConventions(Convention,\"NoticePeriod\") : \"\"",    null,
        ">if isValid ? Numerix::FXFixingsID(BaseCurrency,TermCurrency,FixingSource) : \"\"",    null,null,null,
        ">if isValid ? Numerix::FXDiscountCurveID(BaseCurrency,TermCurrency,Numerix::GetSettings(\"Settings.Currency\",BaseCurrency,\"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",BaseCurrency,\"IRIndexTenor\")) : \"\"",    
        ">if isValid ? Numerix::FXDiscountCurveID(TermCurrency,BaseCurrency,Numerix::GetSettings(\"Settings.Currency\",TermCurrency,\"IRIndex\"),Numerix::GetSettings(\"Settings.Currency\",TermCurrency,\"IRIndexTenor\")) : \"\"",    
        ">if isValid ? NxStd::FXSpotStrategyID(BaseCurrency,TermCurrency) : \"\"",    1],
      "GROUPING" : ["Pricing Parameters","Underlying","Underlying","Underlying","Underlying","Underlying","Underlying",null,"Underlying",null,null,null,null,null,null,"Pricing Parameters"],
      "DESCRIPTION" : ["Indicate the Quote types used. May be Mid, Bid or Ask.","The base/foreign currency for the FX index.","The term/domestic currency for the FX index.","The ID of the convention object for the FX Index.","Calendar used to adjust settlement dates.","Business day convention when settlement date falls on a non-business date.","The period between purchase and settlement.","Source of Fixings","Historical fixings for the FX index.","Time zone in Coordinated Universal Time (UTC) format, i.e., UTC[{+-}hh[:mm[:ss]]]. Parameters in bracket are optional; examples are UTC, UTC+5, UTC-5, UTC+8:30, and UTC+8:26:31 ","Calendar for the base currency. ","Calendar for the term currency.",null,null,"The FX Spot Strategy used to generate the spot date.",null]
    }
  },
  "DEFINITION.FXINDEX.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.FXINDEX.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.FXINDEX.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.FXINDEX.VALUESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "VALUE" : [
        "Double"]
    }
  },
  "DEFINITION.FXINDEX.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        null,
        "//==============================================================",
        "// FX_INDEXOBJECT",
        "// creates an FX index object to be used in Kernel Component",
        "//===============================================================",
        null,
        "function fx_indexobject(indexname, fn_event=\"\", TLC_Fixing=\"\")",
        "{",
        "    call = Numerix::Object({\"FXRATE\", \"INDEX\", \"FX\"}) & ",
        "    {",
        "        \"name\"                  : indexname,",
        "        \"currency\"              : TermCurrency,",
        "        \"foreign1currency\"      : BaseCurrency,",
        "        \"fixings\"               : if TLC_Fixing ? TLC_Fixing : Fixings,",
        "        \"foreignindexcurve\"     : ForeignIndexCurve,",
        "		\"domesticindexcurve\"    : DomesticIndexCurve",
        "    }",
        null,
        "    if Numerix::TryResolve(SpotStrategy) :",
        "        call &=",
        "        {",
        "            \"spot strategy\" : SpotStrategy,",
        "            \"events\"        : fn_event",
        "        }",
        "    else :",
        "        call &=",
        "        {",
        "            \"convention\"            : Convention,",
        "            \"fixcalendar\"           : SpotCalendar,",
        "            \"fixconvention\"         : SpotRollConvention,",
        "            \"noticeperiod\"          : SpotLag",
        "        }",
        null,
        "    return call.Create",
        "}",
        null,
        "constfunction isValid",
        "{",
        "    if BaseCurrency: if TermCurrency: ifnot BaseCurrency.canonical == TermCurrency.canonical:",
        "        return true",
        "    return false",
        "}"]
    }
  },
  "DEFINITION.FXINDEX": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.FXINDEX",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.FXINDEX.PARAMETERS",
      "RESULTS" : "DEFINITION.FXINDEX.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.FXINDEX.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.FXINDEX.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.FXINDEX.VALUESPEC",
      "SCRIPT" : "DEFINITION.FXINDEX.SCRIPT.NXSL"
    }
  },
  "CONV.IR.USD-SOFR-ON.SWAP.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Currency","SpotStRategy","FixedAccrualBasis","FixedFrequency","FixedFrontStub","FixedLongStub","FixedEndOfMonth","FixedAccrualConvention","FixedAccrualCalendar","FixedPayLag","FixedPayConvention","FixedPayCalendar","CompoundingScheduleGenerationMethod","CompoundingMethod","FloatAccrualBasis","FloatFreq","FloatAccrualFreq","FloatFrontStub","FloatLongStub","FloatEndOfMonth","FloatConvention","FloatCalendar","FloatPayLag","FloatPayConvention","FloatPayCalendar","FloatAccrualConvention","FloatAccrualCalendar","FloatFixingLag","FloatFixingConvention","FloatFixingCalendar","FloatCutOffLag","RateSettings"],
      "VALUE" : ["USD","IR.SPOT-STRATEGY.USD-SOFR.T+2","ACT/360","1Y",true,false,true,"MF","NYX","2BD","MF","NYX","USE UNADJUSTED DATES","SPREAD EXCLUSIVE","ACT/360","1Y","1BD",true,false,true,"MF","NYX","2BD","MF","NYX","F","NYX","0BD","P","NYX","0BD","IR.RATE-SETTINGS.USD-SOFR-ON"]
    }
  },
  "CONV.IR.USD-SOFR-ON.SWAP": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "CONV.IR.USD-SOFR-ON.SWAP",
      "OBJECT" : "SETTINGS",
      "TYPE" : "CONVENTION",
      "DEFAULTVALUES" : "CONV.IR.USD-SOFR-ON.SWAP.DATA"
    }
  },
  "MDE.RATESPOTSTRATEGY.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Spot Calendar","Spot Roll Convention","Reset Calendar","Reset Roll Convention","Currency","IR Index","Spot Rule","Spot Lag","Convention"],
      "TYPE" : ["Calendar","RollConvention","Calendar","RollConvention","Currency","String","String","Tenor","ID"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,null,null,null,null,null,null,null,null],
      "GROUPING" : [null,null,null,null,null,null,null,null,null],
      "DESCRIPTION" : [" Holiday calendar used to adjust the spot date; defaults to instrument.","Roll date convention used for adjusting the spot date when it falls on a non-business date"," Holiday calendar used to adjust the intermediate date;","Roll date convention used for adjusting the intermediate date when it falls on a non-business date.","The Currency for the Rate Settings.","The name of the rate index.","The underlying tenor of the rate index.",null,"The convention for the rates spot strategy"]
    }
  },
  "MDE.RATESPOTSTRATEGY.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["MDE Output"],
      "TYPE" : ["Table()"],
      "REQUIRED" : [false],
      "ID" : [null],
      "HEADER" : [null],
      "VALUE" : [
        ">ImplementedObject"],
      "CURRENCY" : [null],
      "CATEGORY" : [null],
      "DESCRIPTION" : [null],
      "PRI" : [null]
    }
  },
  "MDE.RATESPOTSTRATEGY.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name","Asset Class","MDE Type"],
      "TYPE" : ["String","String","String"],
      "VALUE" : ["Rate Spot Strategy","RATESPOTSTRATEGY",null]
    }
  },
  "MDE.RATESPOTSTRATEGY.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Underlying Asset"],
      "TYPE" : ["String"],
      "VALUE" : [null]
    }
  },
  "MDE.RATESPOTSTRATEGY.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        null,
        "//================================================================================",
        "// Main Function",
        "//================================================================================",
        null,
        "constfunction main",
        "{",
        "    if Currency:",
        "        call = Numerix::Object({\"RateSpotStrategy.\"+Currency+\"-\"+IRIndex+\".\"+SpotRule, \"SETTINGS\", \"RATES SPOT STRATEGY\"}) & ",
        "        {",
        "            \"spotlag\"                   : if SpotLag ? SpotLag : get_conventions(conv_spot_strat, \"SpotLag\"),",
        "            \"spotrollconvention\"        : if SpotRollConvention ? SpotRollConvention : get_conventions(conv_spot_strat, \"SPOTROLLCONVENTION\"),",
        "            \"spotcalendar\"              : if SpotCalendar ? SpotCalendar : get_conventions(conv_spot_strat, \"SPOTCALENDAR\"),",
        "            \"resetcalendar\"             : if ResetCalendar ? ResetCalendar : get_conventions(conv_spot_strat, \"RESETCALENDAR\"),",
        "            \"resetrollconvention\"       : if ResetRollConvention ? ResetRollConvention : get_conventions(conv_spot_strat, \"RESETROLLCONVENTION\")",
        "        }",
        null,
        "    else: // special case",
        "        call = Numerix::Object({\"RateSpotStrategy.T+0\", \"SETTINGS\", \"RATES SPOT STRATEGY\"}) & ",
        "        {",
        "            \"spotlag\"                   : \"0BD\",",
        "            \"spotrollconvention\"        : \"NONE\",",
        "            \"spotcalendar\"              : \"NONE\"",
        "        } ",
        null,
        "	return call.Create        ",
        null,
        "}",
        null,
        "constfunction conv_spot_strat",
        "{",
        "    if Convention:",
        "        return Convention",
        null,
        "    if Currency:",
        "        return \"CONV.IR.SPOT-STRATEGY.\"+Currency+\"-\"+IRIndex+\".\"+SpotRule",
        null,
        "    return \"CONV.IR.SPOT-STRATEGY.\"+SpotRule",
        "}",
        null,
        "function get_conventions(id, key)",
        "{",
        "    conv_value = \"\"",
        "    if Numerix::TryResolve(id)",
        "    {",
        "        defs = id.defaultValuesInput ",
        "        i = defs.Name.find(key.canonical)",
        "	    if i :",
        "	        conv_value =  defs.value(\"Value\")[i]",
        "    }",
        "    else",
        "    {",
        "        Numerix::SetMajor(\"Convention \" + id + \" not found\")   ",
        "    ",
        "    }",
        "    ",
        "    return conv_value",
        null,
        "}"]
    }
  },
  "MDE.RATESPOTSTRATEGY": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "MDE.RATESPOTSTRATEGY",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "MDE.RATESPOTSTRATEGY.PARAMETERS",
      "RESULTS" : "MDE.RATESPOTSTRATEGY.RESULTS",
      "CLASSPROPERTIES" : "MDE.RATESPOTSTRATEGY.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "MDE.RATESPOTSTRATEGY.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "SCRIPT" : "MDE.RATESPOTSTRATEGY.SCRIPT.NXSL"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_11566_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["CURRENCY","IRINDEX","SPOTRULE"],
      "VALUE" : ["USD","SOFR","T+2"]
    }
  },
  "CONV.IR.SPOT-STRATEGY.USD-SOFR.T+2.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["SpotLag","SpotrollConvention","SpotCalendar"],
      "VALUE" : ["2BD","F","NYX"]
    }
  },
  "CONV.IR.SPOT-STRATEGY.USD-SOFR.T+2": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "CONV.IR.SPOT-STRATEGY.USD-SOFR.T+2",
      "OBJECT" : "SETTINGS",
      "TYPE" : "CONVENTION",
      "DEFAULTVALUES" : "CONV.IR.SPOT-STRATEGY.USD-SOFR.T+2.DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.SPOT-STRATEGY.USD-SOFR.T+2": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "IR.SPOT-STRATEGY.USD-SOFR.T+2",
      "DEFINITION" : "MDE.RATESPOTSTRATEGY",
      "INSTANTIATION TYPE" : "MDE",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "REQUESTOUTPUT" : "NONE",
      "INPUTS" : "_11566_NX_AUTOGEN"
    }
  },
  "CALENDAR.NYX.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DATES" : [
        50988,
        52053,
        52059,
        52060,
        52066,
        52067,
        52073,
        52074,
        52080,
        52081,
        52087,
        52088,
        52094,
        52095,
        52101,
        52102,
        52108,
        52109,
        52110,
        52115,
        52116,
        52122,
        52123,
        52129,
        52130,
        39083,
        39088,
        39089,
        39095,
        39096,
        39097,
        39102,
        39103,
        39109,
        39110,
        39116,
        39117,
        39123,
        39124,
        39130,
        39131,
        39132,
        39137,
        39138,
        39144,
        39145,
        39151,
        39152,
        39158,
        39159,
        39165,
        39166,
        39172,
        39173,
        39179,
        39180,
        39186,
        39187,
        39193,
        39194,
        39200,
        39201,
        39207,
        39208,
        39214,
        39215,
        39221,
        39222,
        39228,
        39229,
        39230,
        39235,
        39236,
        39242,
        39243,
        39249,
        39250,
        39256,
        39257,
        39263,
        39264,
        39267,
        39270,
        39271,
        39277,
        39278,
        39284,
        39285,
        39291,
        39292,
        39298,
        39299,
        39305,
        39306,
        39312,
        39313,
        39319,
        39320,
        39326,
        39327,
        39328,
        39333,
        39334,
        39340,
        39341,
        39347,
        39348,
        39354,
        39355,
        39361,
        39362,
        39363,
        39368,
        39369,
        39375,
        39376,
        39382,
        39383,
        39389,
        39390,
        39396,
        39397,
        39398,
        39403,
        39404,
        39408,
        39410,
        39411,
        39417,
        39418,
        39424,
        39425,
        39431,
        39432,
        39438,
        39439,
        39441,
        39445,
        39446,
        39448,
        39452,
        39453,
        39459,
        39460,
        39466,
        39467,
        39468,
        39473,
        39474,
        39480,
        39481,
        39487,
        39488,
        39494,
        39495,
        39496,
        50982,
        51686,
        39684,
        39690,
        39691,
        39692,
        39697,
        39698,
        39704,
        39705,
        39711,
        39712,
        39718,
        39719,
        39725,
        39726,
        39732,
        39733,
        39734,
        39739,
        39740,
        39746,
        39747,
        39753,
        39754,
        39760,
        39761,
        39763,
        39767,
        39768,
        39774,
        39775,
        39779,
        39781,
        39782,
        39788,
        39789,
        39795,
        39796,
        39802,
        39803,
        39807,
        39809,
        39810,
        39814,
        39816,
        39817,
        39823,
        39824,
        39830,
        39831,
        39832,
        39837,
        39838,
        39844,
        39845,
        39851,
        39852,
        39858,
        39859,
        39860,
        39865,
        50989,
        50995,
        50996,
        51002,
        51003,
        51009,
        51010,
        51016,
        51017,
        51018,
        51023,
        51024,
        51030,
        51031,
        51037,
        51038,
        51044,
        51045,
        51051,
        51052,
        51053,
        51058,
        51059,
        39866,
        39872,
        39873,
        39879,
        39880,
        39886,
        39887,
        39893,
        39894,
        39900,
        39901,
        39907,
        39908,
        51065,
        52815,
        52816,
        52822,
        52823,
        52829,
        52830,
        52836,
        52837,
        52843,
        52844,
        52845,
        52850,
        52851,
        52857,
        52858,
        52864,
        52865,
        52871,
        52872,
        52878,
        52879,
        52880,
        52885,
        52886,
        52892,
        52893,
        52899,
        52900,
        52906,
        52907,
        52912,
        52913,
        52914,
        39914,
        39915,
        39921,
        39922,
        39928,
        39929,
        39935,
        39936,
        39942,
        39943,
        39949,
        39950,
        39956,
        39957,
        39958,
        39963,
        39964,
        39970,
        39971,
        39977,
        39978,
        39984,
        39985,
        39991,
        39992,
        39998,
        39999,
        40005,
        40006,
        40012,
        40013,
        40019,
        40020,
        40026,
        52920,
        41574,
        41580,
        41581,
        41587,
        41588,
        41589,
        41594,
        41595,
        41601,
        41602,
        41606,
        41608,
        41609,
        41615,
        41616,
        41622,
        41623,
        41629,
        41630,
        41633,
        41636,
        41637,
        41640,
        41643,
        41644,
        41650,
        41651,
        41657,
        41658,
        41659,
        41664,
        41665,
        41671,
        41672,
        41678,
        41679,
        41685,
        41686,
        41687,
        41692,
        41693,
        41699,
        41700,
        41706,
        41707,
        41713,
        41714,
        41720,
        41721,
        41727,
        41728,
        41734,
        41735,
        41741,
        41742,
        41748,
        41749,
        41755,
        41756,
        51066,
        51072,
        51073,
        51079,
        51080,
        51085,
        51086,
        51087,
        51093,
        51094,
        51098,
        51100,
        51101,
        51107,
        51108,
        51114,
        51115,
        51121,
        51122,
        52136,
        52137,
        52143,
        52144,
        52150,
        52151,
        52152,
        52157,
        52158,
        52164,
        52165,
        52171,
        52172,
        52178,
        52179,
        52181,
        52185,
        52186,
        52192,
        52193,
        52197,
        52199,
        52200,
        52206,
        52207,
        52213,
        41762,
        41763,
        41769,
        41770,
        41776,
        41777,
        41783,
        41784,
        41785,
        41790,
        41791,
        41797,
        41798,
        41804,
        41805,
        41811,
        41812,
        41818,
        41819,
        41824,
        41825,
        41826,
        41832,
        41833,
        41839,
        41840,
        41846,
        41847,
        41853,
        41854,
        41860,
        41861,
        41867,
        41868,
        41874,
        41875,
        41881,
        41882,
        41883,
        41888,
        41889,
        41895,
        41896,
        41902,
        41903,
        41909,
        41910,
        41916,
        41917,
        41923,
        41924,
        41925,
        41930,
        41931,
        41937,
        41938,
        41944,
        41945,
        41951,
        41952,
        41954,
        41958,
        41959,
        41965,
        41966,
        41970,
        41972,
        41973,
        41979,
        41980,
        41986,
        41987,
        41993,
        41994,
        41998,
        42000,
        42001,
        42005,
        42007,
        42008,
        42014,
        42015,
        42021,
        42022,
        42023,
        42028,
        42029,
        42035,
        42036,
        42042,
        42043,
        42049,
        42050,
        42051,
        42056,
        42057,
        42063,
        42064,
        42070,
        42071,
        42077,
        42078,
        42084,
        42085,
        42091,
        42092,
        51688,
        51689,
        51695,
        51696,
        51702,
        51703,
        51709,
        51710,
        51716,
        51717,
        51723,
        51724,
        51730,
        51731,
        51737,
        51738,
        51744,
        51745,
        51746,
        51751,
        51752,
        51758,
        51759,
        51765,
        51766,
        51772,
        51773,
        51779,
        51780,
        51786,
        51787,
        51788,
        51793,
        51794,
        51800,
        51801,
        51807,
        51808,
        51814,
        51128,
        51129,
        51130,
        51135,
        51136,
        51137,
        51142,
        51143,
        51149,
        51150,
        51151,
        51156,
        51157,
        51163,
        51164,
        51170,
        51171,
        51177,
        51178,
        51184,
        51185,
        51186,
        51191,
        51192,
        51198,
        51199,
        51205,
        51206,
        51212,
        40027,
        40033,
        40034,
        40040,
        40041,
        40047,
        40048,
        40054,
        40055,
        40061,
        40062,
        40063,
        40068,
        40069,
        40075,
        40076,
        40082,
        40083,
        40089,
        40090,
        40096,
        40097,
        40098,
        40103,
        40104,
        40110,
        40111,
        40117,
        40118,
        40124,
        40125,
        40128,
        40131,
        40132,
        40138,
        40139,
        40143,
        40145,
        40146,
        40152,
        40153,
        40159,
        40160,
        40166,
        40167,
        40172,
        40173,
        40174,
        40179,
        40180,
        40181,
        40187,
        40188,
        40194,
        40195,
        40196,
        40201,
        40202,
        40208,
        40209,
        40215,
        40216,
        40222,
        40223,
        40224,
        40229,
        40230,
        40236,
        40237,
        40243,
        52921,
        52925,
        52927,
        52928,
        52934,
        52935,
        52941,
        52942,
        52948,
        42098,
        42099,
        42105,
        42106,
        42112,
        42113,
        42119,
        42120,
        42126,
        42127,
        42133,
        42134,
        42140,
        42141,
        42147,
        42148,
        42149,
        42154,
        42155,
        42161,
        42162,
        42168,
        42169,
        42175,
        42176,
        42182,
        42183,
        42189,
        42190,
        42196,
        42197,
        42203,
        42204,
        42210,
        42211,
        42217,
        42218,
        42224,
        42225,
        42231,
        42232,
        42238,
        42239,
        42245,
        42246,
        42252,
        42253,
        42254,
        42259,
        42260,
        42266,
        42267,
        42273,
        42274,
        42280,
        42281,
        42287,
        42288,
        42289,
        42294,
        42295,
        42301,
        42302,
        42308,
        42309,
        42315,
        42316,
        42319,
        42322,
        42323,
        42329,
        40908,
        40909,
        40910,
        40915,
        40916,
        40922,
        40923,
        40924,
        40929,
        40930,
        40936,
        40937,
        40943,
        40944,
        40950,
        40951,
        40957,
        40958,
        40959,
        40964,
        40965,
        40971,
        40972,
        40978,
        40979,
        40985,
        40986,
        40992,
        40993,
        40999,
        41000,
        41006,
        41007,
        41013,
        41014,
        41020,
        41021,
        41027,
        41028,
        41034,
        41035,
        41041,
        41042,
        41048,
        41049,
        41055,
        41056,
        41057,
        41062,
        41063,
        41069,
        41070,
        41076,
        41077,
        41083,
        41084,
        41090,
        41091,
        41094,
        41097,
        41098,
        41104,
        41105,
        52214,
        52220,
        52221,
        52225,
        52227,
        52228,
        52232,
        52234,
        52235,
        52241,
        52242,
        52248,
        52249,
        52250,
        52255,
        52256,
        52262,
        52263,
        52269,
        52270,
        52276,
        52277,
        52278,
        52283,
        52284,
        52290,
        52291,
        52297,
        52298,
        52304,
        52305,
        52311,
        52312,
        52318,
        52319,
        52325,
        52949,
        52955,
        52956,
        52957,
        52962,
        52963,
        52964,
        52969,
        52970,
        52976,
        52977,
        52978,
        52983,
        52984,
        52990,
        52991,
        52997,
        52998,
        40244,
        40250,
        40251,
        40257,
        40258,
        40264,
        40265,
        40271,
        40272,
        40278,
        40279,
        40285,
        40286,
        40292,
        40293,
        40299,
        40300,
        40306,
        40307,
        40313,
        40314,
        40320,
        40321,
        40327,
        40328,
        40329,
        40334,
        40335,
        40341,
        53004,
        41111,
        41112,
        41118,
        41119,
        41125,
        41126,
        41132,
        41133,
        41139,
        41140,
        41146,
        41147,
        41153,
        41154,
        41155,
        41160,
        41161,
        41167,
        41168,
        41174,
        41175,
        41181,
        41182,
        41188,
        41189,
        41190,
        41195,
        41196,
        41202,
        41203,
        41209,
        41210,
        41216,
        41217,
        41223,
        41224,
        41225,
        41230,
        41231,
        41235,
        41237,
        41238,
        41244,
        41245,
        41251,
        41252,
        41258,
        41259,
        41265,
        41266,
        41268,
        41272,
        41273,
        41275,
        41279,
        41280,
        41286,
        41287,
        41293,
        41294,
        41295,
        41300,
        41301,
        41307,
        41308,
        41314,
        41315,
        41321,
        41322,
        41323,
        41328,
        41329,
        52326,
        52332,
        52333,
        52339,
        52340,
        52346,
        52347,
        52353,
        52354,
        52360,
        52361,
        52367,
        52368,
        52374,
        52375,
        52376,
        52381,
        52382,
        52388,
        52389,
        52395,
        52396,
        52401,
        51213,
        51219,
        51220,
        51226,
        51227,
        51233,
        51234,
        51240,
        51241,
        51247,
        51248,
        51254,
        51255,
        51261,
        51262,
        51268,
        51269,
        51275,
        51276,
        51282,
        51283,
        51284,
        51289,
        51290,
        51296,
        42834,
        42840,
        42841,
        42847,
        42848,
        42854,
        42855,
        42861,
        42862,
        42868,
        42869,
        42875,
        42876,
        42882,
        42883,
        42884,
        42889,
        42890,
        42896,
        42897,
        42903,
        42904,
        42910,
        42911,
        42917,
        42918,
        42920,
        42924,
        42925,
        42931,
        42932,
        42938,
        42939,
        42945,
        42946,
        42952,
        42953,
        42959,
        42960,
        42966,
        42967,
        42973,
        42974,
        42980,
        42981,
        42982,
        42987,
        42988,
        42994,
        42995,
        43001,
        43002,
        43008,
        43009,
        43015,
        43016,
        43017,
        43022,
        43023,
        43029,
        43030,
        43036,
        43037,
        43043,
        43044,
        43050,
        43051,
        43057,
        43058,
        43062,
        43064,
        52402,
        51815,
        51816,
        51821,
        51822,
        51828,
        51829,
        51833,
        51835,
        51836,
        51842,
        51843,
        51849,
        51850,
        51856,
        51857,
        51860,
        51863,
        51864,
        51867,
        51870,
        51871,
        51877,
        51878,
        51884,
        43065,
        40342,
        40348,
        40349,
        40355,
        40356,
        40362,
        40363,
        40364,
        40369,
        40370,
        40376,
        40377,
        40383,
        40384,
        40390,
        40391,
        40397,
        40398,
        40404,
        40405,
        40411,
        40412,
        40418,
        40419,
        40425,
        40426,
        40427,
        40432,
        40433,
        40439,
        40440,
        40446,
        40447,
        40453,
        40454,
        40460,
        40461,
        40462,
        40467,
        40468,
        40474,
        40475,
        40481,
        40482,
        40488,
        40489,
        40493,
        40495,
        40496,
        40502,
        40503,
        40507,
        40509,
        40510,
        40516,
        40517,
        40523,
        40524,
        40530,
        40531,
        40537,
        40538,
        40544,
        40545,
        40551,
        40552,
        40558,
        40559,
        40560,
        40565,
        40566,
        40572,
        40573,
        51885,
        51886,
        51891,
        51892,
        51898,
        51899,
        51905,
        51906,
        51912,
        51913,
        51914,
        51919,
        51920,
        51926,
        51927,
        51933,
        51934,
        51940,
        51941,
        51947,
        51948,
        51954,
        51955,
        51961,
        51962,
        51968,
        51969,
        51975,
        42330,
        42334,
        42336,
        42337,
        42343,
        42344,
        42350,
        42351,
        42357,
        42358,
        42363,
        42364,
        42365,
        42370,
        42371,
        42372,
        42378,
        42379,
        42385,
        42386,
        42387,
        42392,
        42393,
        42399,
        42400,
        42406,
        42407,
        42413,
        42414,
        42415,
        42420,
        42421,
        42427,
        42428,
        42434,
        42435,
        42441,
        42442,
        42448,
        42449,
        42455,
        42456,
        42462,
        42463,
        42469,
        42470,
        42476,
        42477,
        42483,
        42484,
        42490,
        42491,
        42497,
        42498,
        42504,
        42505,
        42511,
        42512,
        42518,
        42519,
        42520,
        42525,
        42526,
        42532,
        42533,
        42539,
        42540,
        42546,
        42547,
        42553,
        42554,
        42555,
        42560,
        42561,
        42567,
        42568,
        42574,
        42575,
        42581,
        42582,
        42588,
        42589,
        42595,
        42596,
        42602,
        42603,
        51976,
        52403,
        52409,
        52410,
        52416,
        52417,
        52423,
        52424,
        52430,
        52431,
        52437,
        52438,
        52444,
        52445,
        52451,
        52452,
        52458,
        52459,
        52465,
        52466,
        52472,
        52473,
        52479,
        52480,
        52481,
        52486,
        52487,
        52493,
        52494,
        52500,
        52501,
        52507,
        52508,
        52514,
        52515,
        52516,
        52521,
        52522,
        52528,
        52529,
        42609,
        42610,
        42616,
        42617,
        42618,
        42623,
        42624,
        42630,
        42631,
        42637,
        42638,
        42644,
        42645,
        42651,
        42652,
        42653,
        42658,
        42659,
        42665,
        42666,
        42672,
        42673,
        42679,
        42680,
        42685,
        42686,
        42687,
        42693,
        42694,
        42698,
        42700,
        42701,
        42707,
        42708,
        42714,
        42715,
        42721,
        42722,
        42728,
        42729,
        42730,
        42735,
        42736,
        42737,
        42742,
        42743,
        42749,
        42750,
        42751,
        42756,
        42757,
        42763,
        42764,
        42770,
        42771,
        42777,
        42778,
        42784,
        42785,
        42786,
        42791,
        42792,
        42798,
        42799,
        42805,
        42806,
        42812,
        42813,
        42819,
        42820,
        42826,
        42827,
        51297,
        51303,
        51304,
        51306,
        51310,
        51311,
        51317,
        51318,
        51321,
        51324,
        51325,
        51331,
        51332,
        51338,
        51339,
        51345,
        51346,
        51352,
        51353,
        51359,
        51360,
        51366,
        51367,
        51373,
        51374,
        51380,
        51381,
        51382,
        51387,
        51388,
        51394,
        51395,
        51401,
        40579,
        40580,
        40586,
        40587,
        40593,
        40594,
        40595,
        40600,
        40601,
        40607,
        40608,
        40614,
        40615,
        40621,
        40622,
        40628,
        40629,
        40635,
        40636,
        40642,
        40643,
        40649,
        40650,
        40656,
        40657,
        40663,
        40664,
        40670,
        40671,
        40677,
        40678,
        40684,
        40685,
        40691,
        40692,
        40693,
        40698,
        40699,
        40705,
        40706,
        40712,
        40713,
        40719,
        40720,
        40726,
        40727,
        40728,
        40733,
        40734,
        40740,
        40741,
        40747,
        40748,
        40754,
        40755,
        40761,
        40762,
        40768,
        40769,
        40775,
        40776,
        40782,
        40783,
        40789,
        40790,
        40791,
        40796,
        40797,
        40803,
        40804,
        40810,
        40811,
        40817,
        42833,
        52535,
        52536,
        52542,
        52543,
        52546,
        52549,
        52550,
        52556,
        52557,
        52561,
        52563,
        52564,
        52570,
        52571,
        52577,
        52578,
        52584,
        52585,
        52590,
        52591,
        52592,
        52597,
        52598,
        52599,
        52605,
        52606,
        51402,
        51408,
        51409,
        51415,
        51416,
        51417,
        51422,
        51423,
        51429,
        51430,
        51436,
        51437,
        51443,
        51444,
        51450,
        51451,
        51452,
        51457,
        51458,
        51462,
        51464,
        51465,
        51471,
        51472,
        51478,
        51479,
        51485,
        51486,
        51492,
        51493,
        51495,
        51499,
        51500,
        51502,
        51506,
        51507,
        51513,
        51514,
        51520,
        51521,
        51522,
        51527,
        51528,
        51982,
        51983,
        51989,
        51990,
        51996,
        51997,
        52003,
        52004,
        52010,
        52011,
        52012,
        52017,
        52018,
        52024,
        52025,
        52031,
        52032,
        52036,
        52038,
        52039,
        52045,
        52046,
        52051,
        52052,
        39501,
        51534,
        51535,
        51541,
        51542,
        51548,
        51549,
        51550,
        51555,
        51556,
        51562,
        51563,
        51569,
        51570,
        53005,
        53011,
        53012,
        53013,
        53018,
        53019,
        53025,
        53026,
        53032,
        53033,
        53039,
        53040,
        53046,
        53047,
        53053,
        53054,
        53060,
        53061,
        53067,
        53068,
        53074,
        53075,
        53081,
        53082,
        53088,
        53089,
        53095,
        53096,
        53102,
        53103,
        53109,
        53110,
        53111,
        53116,
        53117,
        53123,
        51576,
        51577,
        51583,
        51584,
        51590,
        51591,
        51597,
        51598,
        51604,
        51605,
        51611,
        51612,
        51618,
        51619,
        51625,
        51626,
        43071,
        43072,
        43078,
        40818,
        40824,
        40825,
        40826,
        40831,
        40832,
        40838,
        40839,
        40845,
        40846,
        40852,
        40853,
        40858,
        40859,
        40860,
        40866,
        40867,
        40871,
        40873,
        40874,
        40880,
        40881,
        40887,
        40888,
        40894,
        40895,
        40901,
        40902,
        52612,
        52613,
        52614,
        52619,
        52620,
        52626,
        52627,
        52633,
        52634,
        52640,
        52641,
        52642,
        52647,
        52648,
        52654,
        52655,
        52661,
        52662,
        52668,
        52669,
        52675,
        52676,
        52682,
        52683,
        52689,
        52690,
        52696,
        52697,
        52703,
        52704,
        52710,
        52711,
        52717,
        39502,
        39508,
        39509,
        39515,
        39516,
        39522,
        39523,
        39529,
        39530,
        39536,
        39537,
        39543,
        39544,
        39550,
        39551,
        39557,
        39558,
        39564,
        39565,
        39571,
        39572,
        39578,
        39579,
        39585,
        43079,
        43085,
        43086,
        43092,
        43093,
        43094,
        43099,
        43100,
        43101,
        43106,
        43107,
        43113,
        43114,
        43115,
        43120,
        43121,
        43127,
        43128,
        43134,
        43135,
        43141,
        43142,
        43148,
        43149,
        43150,
        43155,
        43156,
        43162,
        43163,
        43169,
        43170,
        43176,
        43177,
        43183,
        43184,
        43190,
        43191,
        43197,
        43198,
        43204,
        43205,
        43211,
        43212,
        43218,
        43219,
        43225,
        43226,
        43232,
        43233,
        43239,
        43240,
        43246,
        43247,
        43248,
        43253,
        43254,
        43260,
        43261,
        43267,
        43268,
        43274,
        43275,
        43281,
        43282,
        43285,
        43288,
        43289,
        43295,
        43296,
        40903,
        53124,
        39586,
        52718,
        41335,
        41336,
        41342,
        41343,
        41349,
        41350,
        41356,
        41357,
        41363,
        41364,
        41370,
        41371,
        41377,
        41378,
        41384,
        41385,
        41391,
        41392,
        41398,
        41399,
        41405,
        41406,
        41412,
        41413,
        41419,
        41420,
        41421,
        41426,
        41427,
        41433,
        41434,
        41440,
        41441,
        41447,
        41448,
        41454,
        41455,
        41459,
        41461,
        41462,
        41468,
        41469,
        41475,
        41476,
        41482,
        41483,
        41489,
        41490,
        41496,
        41497,
        41503,
        41504,
        41510,
        41511,
        41517,
        41518,
        41519,
        41524,
        41525,
        41531,
        41532,
        41538,
        41539,
        41545,
        41546,
        41552,
        41553,
        41559,
        41560,
        41561,
        41566,
        41567,
        51632,
        51633,
        51639,
        51640,
        51646,
        51647,
        51648,
        51653,
        51654,
        51660,
        51661,
        51667,
        51668,
        51671,
        51674,
        51675,
        51681,
        51682,
        52724,
        52725,
        52731,
        52732,
        52738,
        52739,
        52745,
        52746,
        52747,
        52752,
        52753,
        52759,
        52760,
        52766,
        52767,
        52768,
        52773,
        52774,
        52780,
        52781,
        52782,
        52787,
        52788,
        52794,
        52795,
        52801,
        52802,
        52808,
        39592,
        39593,
        39594,
        39599,
        39600,
        39606,
        39607,
        39613,
        39614,
        39620,
        39621,
        39627,
        39628,
        39633,
        39634,
        39635,
        39641,
        39642,
        39648,
        39649,
        39655,
        39656,
        39662,
        39663,
        39669,
        39670,
        39676,
        39677,
        41573,
        39683,
        52809,
        44080,
        53613,
        43302,
        43303,
        43309,
        43310,
        43316,
        43317,
        43323,
        43324,
        43330,
        43331,
        43337,
        43338,
        43344,
        43345,
        43346,
        43351,
        43352,
        43358,
        43359,
        43365,
        43366,
        43372,
        43373,
        43379,
        43380,
        43381,
        43386,
        43387,
        43393,
        43394,
        43400,
        43401,
        43407,
        43408,
        43414,
        43415,
        43416,
        43421,
        43422,
        43426,
        43428,
        43429,
        43435,
        43436,
        43442,
        43443,
        43449,
        43450,
        43456,
        43457,
        43459,
        43463,
        43464,
        43466,
        43470,
        43471,
        43477,
        43478,
        43484,
        43485,
        43486,
        43491,
        43492,
        43498,
        43499,
        43505,
        43506,
        43512,
        43513,
        43514,
        43519,
        43520,
        43526,
        53222,
        53228,
        53229,
        53235,
        53236,
        53242,
        53243,
        53244,
        53249,
        53250,
        53256,
        53257,
        53263,
        53264,
        53270,
        53271,
        53277,
        53278,
        53284,
        53285,
        53289,
        53291,
        53292,
        53298,
        53299,
        53305,
        53306,
        53312,
        53313,
        53130,
        53131,
        53132,
        53137,
        53138,
        53144,
        53145,
        53147,
        53151,
        53152,
        53158,
        53159,
        53165,
        53166,
        53172,
        53173,
        53179,
        53180,
        53186,
        53187,
        53193,
        53194,
        53200,
        53201,
        53207,
        53208,
        53209,
        53214,
        53215,
        43527,
        43533,
        43534,
        43540,
        43541,
        43547,
        43548,
        43554,
        43555,
        43561,
        43562,
        43568,
        43569,
        43575,
        43576,
        43582,
        43583,
        43589,
        43590,
        43596,
        43597,
        43603,
        43604,
        43610,
        43611,
        43612,
        43617,
        43618,
        43624,
        43631,
        43632,
        43638,
        43639,
        43645,
        43646,
        43650,
        43652,
        43653,
        43659,
        43660,
        43666,
        43667,
        43673,
        43674,
        43680,
        43681,
        43687,
        43688,
        43694,
        43695,
        43701,
        43702,
        43708,
        43709,
        43710,
        43715,
        43716,
        43722,
        53319,
        43625,
        53221,
        53320,
        53321,
        53326,
        53327,
        53328,
        53333,
        53334,
        53340,
        53341,
        53342,
        53347,
        53348,
        53354,
        53355,
        53361,
        53362,
        53368,
        53369,
        53375,
        53376,
        53377,
        53382,
        53383,
        53389,
        53390,
        53396,
        53397,
        53403,
        43723,
        43729,
        43730,
        43736,
        43737,
        43743,
        43744,
        43750,
        43751,
        43752,
        43757,
        43758,
        43764,
        43765,
        43771,
        43772,
        43778,
        43779,
        43780,
        43785,
        43786,
        43792,
        43793,
        43797,
        43799,
        43800,
        43806,
        43807,
        53404,
        53410,
        53411,
        53417,
        53418,
        53424,
        53425,
        53431,
        53432,
        53438,
        53439,
        53445,
        53446,
        53452,
        53453,
        53459,
        53460,
        53466,
        53467,
        53473,
        53474,
        53475,
        53480,
        53481,
        53487,
        53488,
        53494,
        53495,
        43813,
        43814,
        43820,
        43821,
        43824,
        43827,
        43828,
        43831,
        43834,
        43835,
        43841,
        43842,
        43848,
        43849,
        43850,
        43855,
        43856,
        43862,
        43863,
        43869,
        43870,
        43876,
        43877,
        43878,
        43883,
        43884,
        43890,
        43891,
        53497,
        53501,
        53502,
        53508,
        53509,
        53512,
        53515,
        53516,
        53522,
        53523,
        53529,
        53530,
        53536,
        53537,
        53543,
        53544,
        53550,
        53551,
        53557,
        53558,
        53564,
        53565,
        53571,
        53572,
        53573,
        53578,
        53579,
        53585,
        53586,
        53592,
        53593,
        53599,
        53600,
        53606,
        53607,
        53608,
        43897,
        43898,
        43904,
        43905,
        43911,
        43912,
        43918,
        43919,
        43925,
        43926,
        43932,
        43933,
        43939,
        43940,
        43946,
        43947,
        43953,
        43954,
        43960,
        43961,
        43967,
        43968,
        43974,
        43975,
        43976,
        43981,
        43982,
        43988,
        43989,
        43995,
        43996,
        44002,
        44003,
        44009,
        44010,
        44016,
        44017,
        44023,
        44024,
        44030,
        44031,
        44037,
        44038,
        44044,
        44045,
        44051,
        44052,
        44058,
        44059,
        44065,
        44066,
        44072,
        44073,
        44079,
        44081,
        44086,
        44087,
        44093,
        44094,
        44100,
        44101,
        44107,
        44108,
        44114,
        44115,
        44116,
        44121,
        44122,
        44128,
        44129,
        44135,
        44136,
        44142,
        44143,
        44146,
        44149,
        44150,
        44156,
        44157,
        44161,
        44163,
        44164,
        44170,
        53698,
        53614,
        53620,
        53621,
        53627,
        53628,
        53634,
        53635,
        53641,
        53642,
        53643,
        53648,
        53649,
        53653,
        53655,
        53656,
        53662,
        53663,
        53669,
        53670,
        53676,
        53677,
        53683,
        53684,
        53686,
        53690,
        53691,
        53693,
        53697,
        53796,
        53802,
        53803,
        53809,
        53810,
        53816,
        53817,
        53823,
        53824,
        53830,
        53831,
        53837,
        53838,
        53839,
        53844,
        53845,
        53851,
        53852,
        53858,
        53859,
        53862,
        53865,
        53866,
        53872,
        53873,
        53877,
        53879,
        53880,
        53886,
        44254,
        44255,
        44261,
        44262,
        44268,
        44269,
        44275,
        44276,
        44282,
        44283,
        44289,
        44290,
        44296,
        44297,
        44303,
        44304,
        44310,
        44311,
        44317,
        44318,
        44324,
        44325,
        44331,
        44332,
        44338,
        44339,
        44345,
        53887,
        54250,
        54251,
        54257,
        54258,
        54264,
        54265,
        54271,
        54272,
        54278,
        54279,
        54285,
        54286,
        54292,
        54293,
        54299,
        54300,
        54306,
        54307,
        54308,
        54313,
        54314,
        54320,
        54321,
        54327,
        54328,
        54334,
        54335,
        44800,
        44801,
        44807,
        44808,
        44809,
        44814,
        44815,
        44821,
        44822,
        44828,
        44829,
        44835,
        44836,
        44842,
        44843,
        44844,
        44849,
        44850,
        44856,
        44857,
        44863,
        44864,
        44870,
        44871,
        44876,
        44877,
        44878,
        44884,
        44885,
        54341,
        54153,
        54159,
        54160,
        54166,
        54167,
        54173,
        54174,
        54180,
        54181,
        54187,
        54188,
        54194,
        54195,
        54201,
        54202,
        54203,
        54208,
        54209,
        54215,
        54216,
        54222,
        54223,
        54228,
        54229,
        54230,
        54236,
        54237,
        54243,
        44703,
        44709,
        44710,
        44711,
        44716,
        44717,
        44723,
        44724,
        44730,
        44731,
        44732,
        44737,
        44738,
        44744,
        44745,
        44746,
        44751,
        44752,
        44758,
        44759,
        44765,
        44766,
        44772,
        44773,
        44779,
        44780,
        44786,
        44787,
        44793,
        53893,
        53894,
        53900,
        53901,
        53907,
        53908,
        53914,
        53915,
        53921,
        53922,
        53928,
        53929,
        53935,
        53936,
        53937,
        53942,
        53943,
        53949,
        53950,
        53956,
        53957,
        53963,
        53964,
        53970,
        53971,
        53977,
        53978,
        53979,
        44346,
        44347,
        44352,
        44353,
        44359,
        44360,
        44366,
        44367,
        44373,
        44374,
        44380,
        44381,
        44382,
        44387,
        44388,
        44394,
        44395,
        44401,
        44402,
        44408,
        44409,
        44415,
        44416,
        44422,
        44423,
        44429,
        44430,
        44436,
        44794,
        54244,
        53704,
        53705,
        53711,
        53712,
        53713,
        53718,
        53719,
        53725,
        53726,
        53732,
        53733,
        53739,
        53740,
        53741,
        53746,
        53747,
        53753,
        53754,
        53760,
        53761,
        53767,
        53768,
        53774,
        53775,
        53781,
        53782,
        53788,
        53789,
        44171,
        44177,
        44178,
        44184,
        44185,
        44190,
        44191,
        44192,
        44197,
        44198,
        44199,
        44205,
        44206,
        44212,
        44213,
        44214,
        44219,
        44220,
        44226,
        44227,
        44233,
        44234,
        44240,
        44241,
        44242,
        44247,
        44248,
        53795,
        44437,
        53984,
        53985,
        53991,
        53992,
        53998,
        53999,
        54005,
        54006,
        54007,
        54012,
        54013,
        54019,
        54020,
        54024,
        54026,
        54027,
        54033,
        54034,
        54040,
        54041,
        54047,
        54048,
        54051,
        54054,
        54055,
        54058,
        54061,
        54062,
        44443,
        44444,
        44445,
        44450,
        44451,
        44457,
        44458,
        44464,
        44465,
        44471,
        44472,
        44478,
        44479,
        44480,
        44485,
        44486,
        44492,
        44493,
        44499,
        44500,
        44506,
        44507,
        44511,
        44513,
        44514,
        44520,
        44521,
        44525,
        44527,
        44528,
        44534,
        44535,
        44541,
        44542,
        44548,
        44549,
        44555,
        44556,
        44562,
        44563,
        44569,
        44570,
        44576,
        44577,
        44578,
        54068,
        54069,
        54075,
        54076,
        54077,
        54082,
        54083,
        54089,
        54090,
        54096,
        54097,
        54103,
        54104,
        54105,
        54110,
        54111,
        54117,
        54118,
        54124,
        54125,
        54131,
        54132,
        54138,
        54139,
        54145,
        54146,
        44583,
        44584,
        44590,
        44591,
        44597,
        44598,
        44604,
        44605,
        44611,
        44612,
        44613,
        44618,
        44619,
        44625,
        44626,
        44632,
        44633,
        44639,
        44640,
        44646,
        44647,
        44653,
        44654,
        44660,
        44661,
        44667,
        44668,
        44674,
        44675,
        44681,
        44682,
        44688,
        44689,
        44695,
        44696,
        44702,
        54152,
        54342,
        54343,
        54348,
        54349,
        54355,
        54356,
        54362,
        54363,
        54369,
        54370,
        54373,
        54376,
        54377,
        54383,
        54384,
        54388,
        54390,
        54391,
        54397,
        54398,
        54404,
        54405,
        54411,
        54412,
        54417,
        54418,
        54419,
        54424,
        44889,
        54609,
        54614,
        54615,
        54621,
        54622,
        54628,
        54629,
        54635,
        54636,
        54642,
        54643,
        54649,
        54650,
        54656,
        54657,
        54663,
        54664,
        54670,
        54671,
        54672,
        54677,
        54678,
        54684,
        54685,
        54691,
        54692,
        54698,
        54699,
        54705,
        45809,
        45815,
        45816,
        45822,
        45823,
        45827,
        45829,
        45830,
        45836,
        45837,
        45842,
        45843,
        45844,
        45850,
        45851,
        45857,
        45858,
        45864,
        45865,
        45871,
        45872,
        45878,
        45879,
        45885,
        45886,
        45892,
        44891,
        44892,
        44898,
        44899,
        44905,
        44906,
        44912,
        44913,
        44919,
        44920,
        44921,
        44926,
        44927,
        44928,
        44933,
        44934,
        44940,
        44941,
        44942,
        44947,
        44948,
        44954,
        44955,
        44961,
        44962,
        44968,
        44969,
        44975,
        54425,
        45893,
        54706,
        54426,
        54432,
        54433,
        54439,
        54440,
        54441,
        54446,
        54447,
        54453,
        54454,
        54460,
        54461,
        54467,
        54468,
        54469,
        54474,
        54475,
        54481,
        54482,
        54488,
        54489,
        54495,
        54496,
        54502,
        54503,
        54509,
        54510,
        54516,
        45213,
        45214,
        45220,
        45221,
        45227,
        45228,
        45234,
        45235,
        45241,
        45242,
        45248,
        45249,
        45253,
        45255,
        45256,
        45262,
        45263,
        45269,
        45270,
        45276,
        45277,
        45283,
        45284,
        45285,
        45290,
        45291,
        45292,
        45297,
        45298,
        45304,
        45305,
        45306,
        45311,
        45312,
        45318,
        45319,
        45325,
        45326,
        45332,
        45333,
        45339,
        45340,
        45341,
        45346,
        45347,
        45353,
        45354,
        45360,
        45361,
        45367,
        45368,
        45374,
        45375,
        45381,
        45382,
        45388,
        45389,
        45395,
        45396,
        45402,
        45403,
        45409,
        45410,
        45416,
        45417,
        45423,
        45424,
        45430,
        45431,
        45437,
        45438,
        45439,
        45444,
        45445,
        45451,
        54517,
        45452,
        45458,
        45459,
        45462,
        45465,
        45466,
        45472,
        45473,
        45477,
        45479,
        45480,
        45486,
        45487,
        45493,
        45494,
        45500,
        45501,
        45507,
        45508,
        45514,
        45515,
        45521,
        45522,
        45528,
        45529,
        45535,
        45536,
        45537,
        45542,
        45543,
        45549,
        45550,
        45556,
        45557,
        45563,
        45564,
        45570,
        45571,
        45577,
        45578,
        45579,
        45584,
        45585,
        45591,
        45592,
        45598,
        45599,
        45605,
        45606,
        45607,
        45612,
        45613,
        45619,
        45620,
        45624,
        45626,
        45627,
        45633,
        45634,
        45640,
        45641,
        45647,
        45648,
        45651,
        45899,
        45900,
        45901,
        45906,
        45907,
        45913,
        45914,
        45920,
        45921,
        45927,
        45928,
        45934,
        45935,
        45941,
        45942,
        45943,
        45948,
        45949,
        45955,
        45956,
        45962,
        45963,
        45969,
        45970,
        45972,
        45976,
        45977,
        45983,
        45984,
        45988,
        45990,
        45991,
        45997,
        45998,
        46004,
        46005,
        46011,
        46012,
        46016,
        46018,
        46019,
        46023,
        46025,
        46026,
        46032,
        46033,
        46039,
        46040,
        46041,
        46046,
        46047,
        46053,
        46054,
        46060,
        46061,
        46067,
        46068,
        46069,
        46074,
        46075,
        46081,
        46082,
        46088,
        46089,
        46095,
        46096,
        46102,
        46103,
        46109,
        46110,
        46116,
        54523,
        54524,
        54530,
        54531,
        54537,
        54538,
        54544,
        54545,
        54551,
        54552,
        54558,
        54559,
        54565,
        54566,
        54572,
        54573,
        54574,
        54579,
        54580,
        54586,
        54587,
        54593,
        54594,
        54600,
        54601,
        54607,
        45654,
        45655,
        45658,
        45661,
        45662,
        45668,
        45669,
        45675,
        45676,
        45677,
        45682,
        45683,
        45689,
        45690,
        45696,
        45697,
        45703,
        45704,
        45705,
        45710,
        45711,
        45717,
        45718,
        45724,
        45725,
        45731,
        45732,
        45738,
        45739,
        45745,
        45746,
        45752,
        45753,
        45759,
        45760,
        45766,
        45767,
        45773,
        45774,
        45780,
        45781,
        45787,
        45788,
        45794,
        45795,
        45801,
        45802,
        45803,
        45808,
        54608,
        44976,
        44977,
        44982,
        44983,
        44989,
        44990,
        44996,
        44997,
        45003,
        45004,
        45010,
        45011,
        45017,
        45018,
        45024,
        45025,
        45031,
        45032,
        45038,
        45039,
        45045,
        45046,
        45052,
        45053,
        45059,
        45060,
        45066,
        45067,
        45073,
        45074,
        45075,
        45080,
        45081,
        45087,
        45088,
        45094,
        45095,
        45096,
        45101,
        45102,
        45108,
        45109,
        45111,
        45115,
        45116,
        45122,
        45123,
        45129,
        45130,
        45136,
        45137,
        45143,
        45144,
        45150,
        45151,
        45157,
        45158,
        45164,
        45165,
        45171,
        45172,
        45173,
        45178,
        45179,
        45185,
        45186,
        45192,
        45193,
        45199,
        45200,
        45206,
        45207,
        45208,
        46831,
        46837,
        46838,
        46844,
        46845,
        46851,
        46852,
        46858,
        46859,
        46865,
        46866,
        46872,
        46873,
        46879,
        46880,
        46886,
        46887,
        46893,
        46894,
        46900,
        46901,
        46902,
        46907,
        46908,
        46914,
        46915,
        46921,
        46922,
        46923,
        46928,
        46929,
        46935,
        46936,
        54916,
        54922,
        54923,
        54929,
        54930,
        54936,
        54937,
        54938,
        54943,
        54944,
        54950,
        54951,
        54957,
        54958,
        54959,
        54964,
        54965,
        54971,
        54972,
        54973,
        54978,
        54979,
        54985,
        54986,
        54992,
        54993,
        54999,
        55000,
        55006,
        55007,
        55013,
        55014,
        55020,
        55021,
        46235,
        46236,
        46242,
        46243,
        46249,
        46250,
        46256,
        46257,
        46263,
        46264,
        46270,
        46271,
        46272,
        46277,
        46278,
        46284,
        46285,
        46291,
        46292,
        46298,
        46299,
        46305,
        46306,
        46307,
        46312,
        46313,
        47481,
        47482,
        47484,
        47488,
        47489,
        47495,
        47496,
        47502,
        47503,
        47504,
        47509,
        47510,
        47516,
        47517,
        47523,
        47524,
        47530,
        47531,
        47532,
        47537,
        47538,
        47544,
        47545,
        47551,
        47552,
        47558,
        47559,
        47832,
        46938,
        46319,
        55027,
        47565,
        46942,
        46943,
        46949,
        46950,
        46956,
        46957,
        46963,
        46964,
        46970,
        46971,
        46977,
        46978,
        46984,
        46985,
        46991,
        46992,
        46998,
        46999,
        47000,
        47005,
        47006,
        47012,
        47013,
        47019,
        47020,
        47026,
        47027,
        54707,
        54712,
        54713,
        54719,
        54720,
        54726,
        54727,
        54733,
        54734,
        54738,
        54740,
        54741,
        54747,
        54748,
        54752,
        54754,
        54755,
        54761,
        54762,
        54768,
        54769,
        54775,
        54776,
        54782,
        54783,
        54789,
        54790,
        54796,
        54797,
        54803,
        54804,
        54805,
        54810,
        54811,
        54817,
        54818,
        54824,
        54825,
        54831,
        54832,
        54838,
        54839,
        54840,
        54845,
        54846,
        54852,
        54853,
        54859,
        54860,
        54866,
        54867,
        54873,
        54874,
        54880,
        54881,
        54887,
        54888,
        47033,
        54894,
        54895,
        54901,
        54902,
        54908,
        54909,
        46117,
        46123,
        46124,
        46130,
        46131,
        46137,
        46138,
        46144,
        46145,
        46151,
        46152,
        46158,
        46159,
        46165,
        46166,
        46167,
        46172,
        46173,
        46179,
        46180,
        46186,
        46187,
        46192,
        46193,
        46194,
        46200,
        46201,
        46207,
        46208,
        46214,
        46215,
        46221,
        46222,
        46228,
        46229,
        54915,
        47034,
        47035,
        47040,
        47041,
        47047,
        47048,
        47054,
        47055,
        47061,
        47062,
        47068,
        47069,
        47075,
        47076,
        47080,
        47082,
        47083,
        47089,
        47090,
        47096,
        47097,
        47103,
        47104,
        47110,
        47838,
        47839,
        47842,
        47845,
        47846,
        47849,
        47852,
        47853,
        47859,
        47860,
        47866,
        47867,
        47868,
        47873,
        47874,
        47880,
        47881,
        47887,
        47888,
        47894,
        47895,
        47896,
        47901,
        47902,
        47908,
        47909,
        47915,
        47916,
        47922,
        48336,
        48342,
        48343,
        48349,
        48350,
        48356,
        48357,
        48363,
        48364,
        48365,
        48370,
        48371,
        48377,
        48378,
        48384,
        48385,
        48391,
        48392,
        48398,
        48399,
        48400,
        48405,
        48406,
        48412,
        48413,
        48419,
        48420,
        48426,
        48427,
        47111,
        47112,
        47117,
        47118,
        47119,
        47124,
        47125,
        47131,
        47132,
        47133,
        47138,
        47139,
        47145,
        47146,
        47152,
        47153,
        47159,
        47160,
        47166,
        47167,
        47168,
        47173,
        47174,
        47180,
        47181,
        47187,
        47188,
        47194,
        47195,
        47566,
        47572,
        47573,
        47579,
        47580,
        47586,
        47587,
        47593,
        47594,
        47600,
        47601,
        47607,
        47608,
        47614,
        47615,
        47621,
        47622,
        47628,
        47629,
        47630,
        47635,
        47636,
        47642,
        47643,
        47649,
        47650,
        47653,
        47656,
        47657,
        47663,
        47923,
        47929,
        47930,
        47936,
        47937,
        47943,
        47944,
        47950,
        47951,
        47957,
        47958,
        47964,
        47965,
        47971,
        47972,
        47978,
        47979,
        47985,
        47986,
        47992,
        47993,
        47994,
        47999,
        48000,
        48006,
        48007,
        48013,
        48014,
        48018,
        47201,
        47202,
        47208,
        47209,
        47215,
        47216,
        47222,
        47223,
        47229,
        47230,
        47236,
        47237,
        47243,
        47244,
        47250,
        47251,
        47257,
        47258,
        47264,
        47265,
        47266,
        47271,
        47272,
        47278,
        47279,
        47285,
        47286,
        47288,
        47292,
        55028,
        55034,
        55035,
        55036,
        55041,
        55042,
        55048,
        55049,
        55055,
        55056,
        55062,
        55063,
        55069,
        55070,
        55071,
        55076,
        55077,
        55083,
        55084,
        55090,
        55091,
        55097,
        55098,
        55103,
        55104,
        55105,
        55111,
        55112,
        46320,
        46326,
        46327,
        46333,
        46334,
        46337,
        46340,
        46341,
        46347,
        46348,
        46352,
        46354,
        46355,
        46361,
        46362,
        46368,
        46369,
        46375,
        46376,
        46381,
        46382,
        46383,
        46388,
        46389,
        46390,
        46396,
        46397,
        46403,
        48020,
        47293,
        46404,
        55116,
        48021,
        48027,
        48028,
        48033,
        48034,
        48035,
        48041,
        48042,
        48048,
        48049,
        48055,
        48056,
        48062,
        48063,
        48069,
        48070,
        48076,
        48077,
        48083,
        48084,
        48090,
        48091,
        48092,
        48097,
        48098,
        48104,
        48105,
        48111,
        48112,
        48118,
        48433,
        48434,
        48440,
        48441,
        48447,
        48448,
        48454,
        48455,
        48461,
        48462,
        48463,
        48468,
        48469,
        48475,
        48476,
        48482,
        48483,
        48489,
        48490,
        48496,
        48497,
        48498,
        48503,
        48504,
        48510,
        48511,
        48517,
        48518,
        48524,
        48525,
        48529,
        48531,
        48532,
        48538,
        48119,
        48125,
        48126,
        48132,
        48133,
        48134,
        48139,
        48140,
        48146,
        48147,
        48153,
        48154,
        48539,
        47299,
        47300,
        47303,
        47306,
        47307,
        47313,
        47314,
        47320,
        47321,
        47327,
        47328,
        47334,
        47335,
        47341,
        47342,
        47348,
        47349,
        47355,
        47356,
        47362,
        47363,
        47364,
        47369,
        47370,
        47376,
        47377,
        47383,
        47384,
        47390,
        48543,
        48545,
        48546,
        48552,
        48553,
        48559,
        48560,
        48566,
        48567,
        48573,
        48574,
        48580,
        48581,
        48587,
        48588,
        48594,
        48595,
        48596,
        48601,
        48602,
        48608,
        48609,
        48615,
        48616,
        48622,
        48623,
        48629,
        48630,
        55118,
        55119,
        55125,
        55126,
        55132,
        55133,
        55139,
        55140,
        55146,
        55147,
        55148,
        55153,
        46405,
        46410,
        46411,
        46417,
        46418,
        46424,
        46425,
        46431,
        46432,
        46433,
        46438,
        46439,
        46445,
        46446,
        46452,
        46453,
        46459,
        46460,
        46466,
        46467,
        46473,
        46474,
        46480,
        46481,
        46487,
        46488,
        46494,
        46495,
        48160,
        48161,
        48163,
        48167,
        48168,
        48174,
        48175,
        48179,
        48181,
        48182,
        48188,
        48189,
        48195,
        48196,
        48202,
        48203,
        48207,
        48209,
        48210,
        48214,
        48216,
        48217,
        48223,
        48224,
        48230,
        48231,
        48232,
        48237,
        48238,
        48244,
        48631,
        46501,
        48245,
        46502,
        46508,
        46509,
        46515,
        46516,
        46522,
        46523,
        46529,
        46530,
        46536,
        46537,
        46538,
        46543,
        46544,
        46550,
        46551,
        46557,
        46558,
        46564,
        46565,
        46571,
        46572,
        46573,
        46578,
        46579,
        46585,
        46586,
        46592,
        46593,
        47664,
        47668,
        47670,
        47671,
        47677,
        47678,
        47684,
        47685,
        47691,
        47692,
        47698,
        47699,
        47705,
        47706,
        47712,
        47713,
        47719,
        47720,
        47726,
        47727,
        47728,
        47733,
        47734,
        47740,
        47741,
        48251,
        48252,
        47747,
        48258,
        48259,
        48260,
        48265,
        48266,
        48272,
        48273,
        48279,
        48280,
        48286,
        48287,
        48293,
        48294,
        48300,
        48301,
        48307,
        48308,
        48314,
        48315,
        48321,
        48322,
        48328,
        48329,
        48335,
        48636,
        48637,
        48643,
        48644,
        48650,
        48651,
        48657,
        48658,
        48664,
        48665,
        48671,
        48672,
        48678,
        48679,
        48685,
        48686,
        48692,
        48693,
        48699,
        48700,
        48706,
        48707,
        48713,
        48714,
        48720,
        48721,
        48727,
        48728,
        48729,
        47391,
        47397,
        47398,
        47399,
        47404,
        47405,
        47411,
        47412,
        47418,
        47419,
        47425,
        47426,
        47432,
        47433,
        47434,
        47439,
        47440,
        47444,
        47446,
        47447,
        47453,
        47454,
        47460,
        47461,
        47467,
        47468,
        47474,
        47475,
        47477,
        46599,
        46600,
        46606,
        46607,
        46613,
        46614,
        46620,
        46621,
        46627,
        46628,
        46634,
        46635,
        46636,
        46641,
        46642,
        46648,
        46649,
        46655,
        46656,
        46662,
        46663,
        46669,
        46670,
        48734,
        48916,
        48917,
        48923,
        48924,
        48930,
        48931,
        48937,
        48938,
        48939,
        48944,
        48945,
        48946,
        48951,
        48952,
        48958,
        48959,
        48960,
        48965,
        48966,
        48972,
        48973,
        48979,
        48980,
        48986,
        48987,
        48993,
        48994,
        48995,
        49000,
        49001,
        49007,
        49008,
        49014,
        49015,
        49021,
        49022,
        49028,
        49029,
        49035,
        49036,
        49042,
        46671,
        46676,
        46677,
        46683,
        46684,
        46690,
        46691,
        46697,
        46698,
        46702,
        46704,
        46705,
        46711,
        46712,
        46716,
        46718,
        46719,
        46725,
        46726,
        46732,
        46733,
        46739,
        46740,
        46746,
        46747,
        46753,
        46754,
        46760,
        46761,
        46767,
        46768,
        46769,
        46774,
        46775,
        46781,
        46782,
        46788,
        46789,
        46795,
        46796,
        46802,
        46803,
        46804,
        46809,
        46810,
        46816,
        46817,
        46823,
        46824,
        46830,
        47748,
        47754,
        47755,
        47761,
        47762,
        47768,
        47769,
        47770,
        47775,
        47776,
        47782,
        47783,
        47789,
        47790,
        47796,
        47797,
        47798,
        47803,
        47804,
        47810,
        47811,
        47815,
        47817,
        47818,
        47824,
        47825,
        47831,
        49406,
        49407,
        49413,
        49414,
        49420,
        49421,
        49427,
        49428,
        49434,
        49435,
        49441,
        49442,
        49448,
        49449,
        49455,
        49456,
        49457,
        49462,
        49463,
        49469,
        49470,
        49476,
        49477,
        49479,
        49483,
        49484,
        49490,
        49491,
        49494,
        49497,
        49498,
        49504,
        49505,
        49511,
        49512,
        49518,
        49519,
        49525,
        49526,
        49532,
        49533,
        49539,
        49540,
        49546,
        49547,
        49553,
        49554,
        49555,
        49560,
        49561,
        49567,
        49568,
        49574,
        49575,
        49581,
        49582,
        49588,
        49589,
        49590,
        49595,
        49596,
        49602,
        49603,
        49609,
        49610,
        49616,
        49617,
        49623,
        49624,
        49625,
        49630,
        49631,
        49635,
        49637,
        49638,
        49644,
        49645,
        49651,
        49652,
        49658,
        49659,
        49665,
        49666,
        49668,
        49672,
        49673,
        49675,
        49679,
        49680,
        49686,
        49687,
        49693,
        49694,
        49695,
        49700,
        49701,
        49707,
        49708,
        49714,
        49715,
        49721,
        49722,
        49723,
        49728,
        49729,
        49735,
        49736,
        49742,
        49743,
        49749,
        49750,
        49756,
        49757,
        49763,
        50210,
        50211,
        50212,
        50218,
        50219,
        50225,
        50226,
        50232,
        50233,
        50239,
        50240,
        50246,
        50247,
        50253,
        50254,
        50260,
        50261,
        50267,
        50268,
        50274,
        50275,
        50281,
        50282,
        50288,
        50289,
        50290,
        50295,
        50296,
        50674,
        50680,
        50681,
        50687,
        50688,
        50689,
        50694,
        50695,
        50701,
        50702,
        50708,
        50709,
        50715,
        50716,
        50720,
        50722,
        50723,
        50729,
        50730,
        50734,
        50736,
        50737,
        50743,
        50744,
        50750,
        50751,
        50757,
        50758,
        50764,
        50765,
        50771,
        50772,
        50778,
        50779,
        50785,
        50786,
        49764,
        49770,
        49771,
        49777,
        49778,
        49784,
        49785,
        49791,
        49792,
        49798,
        49799,
        49805,
        49806,
        49812,
        49813,
        49819,
        49820,
        49821,
        50302,
        49043,
        49049,
        49050,
        49056,
        49057,
        49063,
        49064,
        49070,
        49071,
        49077,
        49078,
        49084,
        49085,
        49091,
        49092,
        49093,
        49098,
        49099,
        49105,
        49106,
        49112,
        49113,
        49114,
        49119,
        49120,
        49126,
        49127,
        49129,
        49133,
        48735,
        48741,
        48742,
        48748,
        48749,
        48750,
        48755,
        48756,
        48762,
        48763,
        48764,
        48769,
        48770,
        48776,
        48777,
        48783,
        48784,
        48790,
        48791,
        48797,
        48798,
        48804,
        48805,
        48811,
        48812,
        48818,
        48819,
        48825,
        48826,
        50787,
        50792,
        50793,
        50799,
        50800,
        50806,
        50807,
        50813,
        50814,
        50820,
        50821,
        50822,
        50827,
        50828,
        50834,
        50835,
        50841,
        50842,
        50848,
        50849,
        50855,
        50856,
        50862,
        50863,
        50869,
        50870,
        50876,
        50877,
        50883,
        50884,
        50890,
        50891,
        50897,
        50898,
        50904,
        49826,
        49827,
        49833,
        49834,
        49840,
        49841,
        49845,
        49847,
        49848,
        49854,
        49855,
        49860,
        49861,
        49862,
        49868,
        49869,
        49875,
        49876,
        49882,
        49883,
        49889,
        49890,
        49896,
        49897,
        49903,
        50905,
        49904,
        50911,
        50912,
        50918,
        50919,
        50920,
        50925,
        50926,
        50932,
        50933,
        50939,
        50940,
        50941,
        50946,
        50947,
        50953,
        50954,
        50955,
        50960,
        50961,
        50967,
        50968,
        50974,
        50975,
        50981,
        49134,
        49140,
        49141,
        49147,
        49148,
        49154,
        49155,
        49161,
        49162,
        49168,
        49169,
        49175,
        49176,
        49182,
        49183,
        49189,
        49190,
        49191,
        49196,
        49197,
        49203,
        49204,
        49210,
        49211,
        48827,
        48832,
        48833,
        48839,
        48840,
        48846,
        48847,
        48853,
        48854,
        48860,
        48861,
        48862,
        48867,
        48868,
        48874,
        48875,
        48881,
        48882,
        48888,
        48889,
        48894,
        48895,
        48896,
        48902,
        48903,
        48907,
        48909,
        48910,
        50303,
        50309,
        50310,
        50316,
        50317,
        50323,
        50324,
        50325,
        50330,
        50331,
        50337,
        50338,
        50344,
        50345,
        50351,
        50352,
        50355,
        50358,
        50359,
        50365,
        50366,
        50370,
        50372,
        50373,
        50379,
        50380,
        50386,
        50387,
        50393,
        50394,
        50399,
        50400,
        50401,
        50406,
        50407,
        49910,
        49911,
        49917,
        49918,
        49919,
        49924,
        49925,
        49931,
        49932,
        49938,
        49939,
        49945,
        49946,
        49952,
        49953,
        49959,
        49960,
        49961,
        49966,
        49967,
        49973,
        49974,
        49980,
        49981,
        49987,
        49988,
        49990,
        49994,
        49995,
        50001,
        50002,
        50006,
        50408,
        50008,
        49217,
        49218,
        49224,
        49225,
        49226,
        49231,
        49232,
        49238,
        49239,
        49245,
        49246,
        49252,
        49253,
        49259,
        49260,
        49266,
        49267,
        49271,
        49273,
        49274,
        49280,
        49281,
        49287,
        49288,
        49294,
        49295,
        49301,
        49302,
        49303,
        50414,
        50415,
        50421,
        50422,
        50423,
        50428,
        50429,
        50435,
        50436,
        50442,
        50443,
        50449,
        50450,
        50451,
        50456,
        50457,
        50463,
        50464,
        50470,
        50471,
        50477,
        50478,
        50484,
        50485,
        50491,
        50492,
        50498,
        50499,
        50505,
        50506,
        50512,
        50513,
        50519,
        50520,
        50526,
        50527,
        50533,
        50534,
        50540,
        50541,
        50547,
        50548,
        50554,
        50555,
        50556,
        49308,
        49309,
        49310,
        49315,
        49316,
        49322,
        49323,
        49324,
        49329,
        49330,
        49336,
        49337,
        49343,
        49344,
        49350,
        49351,
        49357,
        49358,
        49359,
        49364,
        49365,
        49371,
        49372,
        49378,
        49379,
        49385,
        49386,
        49392,
        49393,
        49399,
        49400,
        50009,
        50015,
        50016,
        50022,
        50023,
        50029,
        50030,
        50034,
        50036,
        50037,
        50041,
        50043,
        50044,
        50050,
        50051,
        50057,
        50058,
        50059,
        50064,
        50065,
        50071,
        50072,
        50078,
        50079,
        50085,
        50086,
        50561,
        50562,
        50568,
        50569,
        50575,
        50576,
        50582,
        50583,
        50589,
        50590,
        50591,
        50596,
        50597,
        50603,
        50604,
        50610,
        50611,
        50617,
        50618,
        50624,
        50625,
        50631,
        50632,
        50638,
        50639,
        50645,
        50646,
        50652,
        50653,
        50654,
        50659,
        50660,
        50666,
        50667,
        50673,
        50087,
        50092,
        50093,
        50099,
        50100,
        50106,
        50107,
        50113,
        50114,
        50120,
        50121,
        50127,
        50128,
        50134,
        50135,
        50141,
        50142,
        50148,
        50149,
        50155,
        50156,
        50162,
        50163,
        50169,
        50170,
        50176,
        50177,
        50183,
        50184,
        50185,
        50190,
        50191,
        50197,
        50198,
        50204,
        50205]
    }
  },
  "CALENDAR.NYX": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "CALENDAR.NYX",
      "OBJECT" : "SETTINGS",
      "TYPE" : "CALENDAR",
      "CODE" : "NYX",
      "SUNDAY" : true,
      "MONDAY" : true,
      "TUESDAY" : true,
      "WEDNESDAY" : true,
      "THURSDAY" : true,
      "FRIDAY" : true,
      "SATURDAY" : true,
      "DATES" : "CALENDAR.NYX.DATA"
    }
  },
  "CALENDAR.TPB.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DATES" : [
        39355,
        39361,
        39362,
        39365,
        39368,
        39369,
        39375,
        39376,
        39382,
        39383,
        39389,
        39390,
        39396,
        39397,
        39403,
        39404,
        39410,
        39411,
        39417,
        39418,
        39424,
        39425,
        39431,
        39432,
        39438,
        39439,
        39445,
        39446,
        39448,
        39452,
        39453,
        39459,
        39460,
        39466,
        39467,
        39473,
        39474,
        39480,
        39481,
        39484,
        39485,
        39486,
        39487,
        39488,
        39489,
        39494,
        39495,
        39501,
        39502,
        39506,
        39508,
        39509,
        39515,
        39516,
        39522,
        39523,
        39529,
        39530,
        39536,
        39537,
        39542,
        39543,
        39544,
        39550,
        39551,
        39557,
        39558,
        39564,
        39565,
        39569,
        39571,
        39572,
        39578,
        39579,
        39585,
        39586,
        39592,
        39593,
        39599,
        39600,
        39606,
        39607,
        39613,
        39614,
        39620,
        39621,
        39627,
        39628,
        39634,
        39635,
        39641,
        39642,
        39648,
        39350,
        50540,
        52843,
        54349,
        39649,
        52844,
        52850,
        52851,
        52857,
        52858,
        52864,
        52865,
        52871,
        52872,
        52878,
        52879,
        52880,
        52885,
        52886,
        52892,
        52893,
        52899,
        52900,
        50541,
        50547,
        50548,
        50554,
        50555,
        50561,
        50562,
        50568,
        50569,
        50575,
        50576,
        50582,
        50583,
        50589,
        50590,
        50596,
        50597,
        50603,
        50604,
        39655,
        39656,
        39657,
        39662,
        39663,
        39669,
        39670,
        39676,
        39677,
        39683,
        39684,
        39690,
        39691,
        50610,
        52906,
        54419,
        54355,
        54356,
        54362,
        54363,
        54369,
        54370,
        54376,
        54377,
        54383,
        54384,
        54390,
        54391,
        54397,
        54398,
        54404,
        54405,
        54411,
        54412,
        54418,
        54424,
        54425,
        54426,
        54432,
        54433,
        54439,
        54440,
        54446,
        54447,
        54453,
        54454,
        54455,
        54456,
        54457,
        54458,
        54460,
        54461,
        54467,
        54468,
        54474,
        54475,
        54481,
        54482,
        54483,
        54488,
        54489,
        54495,
        54496,
        54502,
        54503,
        54509,
        54510,
        52907,
        52913,
        52914,
        52920,
        52921,
        52927,
        52928,
        52934,
        52935,
        52941,
        52942,
        52948,
        53363,
        53364,
        53365,
        53366,
        53368,
        53369,
        53375,
        53376,
        53382,
        53383,
        53386,
        53389,
        53390,
        53396,
        53397,
        53403,
        53404,
        53410,
        53411,
        53417,
        53418,
        53421,
        53422,
        53424,
        53425,
        53431,
        53432,
        53438,
        53439,
        53445,
        53446,
        53448,
        53452,
        53453,
        53459,
        53460,
        53466,
        53467,
        53473,
        53474,
        53480,
        53481,
        53487,
        53488,
        53494,
        53495,
        53501,
        53502,
        53508,
        53509,
        53515,
        53516,
        53522,
        53523,
        53529,
        53530,
        53536,
        52949,
        52955,
        52956,
        52962,
        52963,
        52964,
        52969,
        52970,
        52976,
        52977,
        52983,
        52984,
        52990,
        52991,
        52997,
        52998,
        53004,
        53005,
        53009,
        53010,
        53011,
        53012,
        53018,
        40461,
        40467,
        40468,
        40474,
        40475,
        40481,
        40482,
        40488,
        40489,
        40495,
        40496,
        40502,
        40503,
        40509,
        40510,
        40516,
        40517,
        40523,
        40524,
        40530,
        40531,
        40537,
        40538,
        40544,
        40545,
        40551,
        40552,
        40558,
        40559,
        40565,
        40566,
        40572,
        40573,
        40576,
        40577,
        40578,
        40579,
        40580,
        40581,
        40586,
        40587,
        40593,
        40594,
        40600,
        40601,
        40602,
        40607,
        40608,
        53537,
        53543,
        53544,
        53550,
        53551,
        53557,
        53558,
        53564,
        53565,
        53571,
        53572,
        53578,
        53579,
        53585,
        53586,
        53592,
        53593,
        53599,
        53600,
        53606,
        53607,
        53610,
        53613,
        53614,
        53620,
        53621,
        53627,
        53628,
        53634,
        53635,
        53641,
        53642,
        53648,
        53649,
        53655,
        54860,
        54866,
        54867,
        54873,
        54874,
        54880,
        54881,
        54882,
        54883,
        54887,
        54888,
        54894,
        54895,
        54901,
        54902,
        54908,
        54909,
        54910,
        54915,
        54916,
        54922,
        54923,
        54929,
        54930,
        54936,
        54937,
        54943,
        54944,
        54950,
        54951,
        54957,
        54958,
        54964,
        54965,
        54971,
        54972,
        54978,
        54979,
        54985,
        54986,
        54992,
        54993,
        54999,
        55000,
        55006,
        55007,
        55013,
        55014,
        55020,
        55021,
        55027,
        55028,
        55034,
        55035,
        55041,
        55042,
        55048,
        55049,
        55055,
        55056,
        55062,
        55063,
        55069,
        55070,
        55071,
        55076,
        55077,
        55083,
        55084,
        55090,
        55091,
        55097,
        55098,
        55104,
        55105,
        55111,
        55112,
        55118,
        55119,
        55125,
        55126,
        55132,
        55133,
        55139,
        55140,
        55146,
        55147,
        55153,
        52830,
        52836,
        52837,
        40614,
        40615,
        40621,
        40622,
        40628,
        40629,
        40635,
        40636,
        40637,
        40638,
        40642,
        40643,
        40649,
        40650,
        40656,
        40657,
        40663,
        40664,
        40665,
        40670,
        40671,
        40677,
        40678,
        40684,
        40685,
        40691,
        40692,
        40698,
        40699,
        40700,
        40705,
        40706,
        40712,
        40713,
        40719,
        40720,
        40726,
        40727,
        40733,
        40734,
        40740,
        40741,
        40747,
        40748,
        40754,
        40755,
        40761,
        40762,
        40768,
        40769,
        40775,
        40776,
        40782,
        40783,
        40789,
        54341,
        54342,
        54348,
        41567,
        41573,
        41574,
        41580,
        41581,
        41587,
        41588,
        41594,
        41595,
        41601,
        41602,
        41608,
        41609,
        41615,
        41616,
        41622,
        41623,
        41629,
        41630,
        41636,
        41637,
        41640,
        41643,
        41644,
        41650,
        41651,
        41657,
        41658,
        41664,
        41665,
        41669,
        41670,
        41671,
        41672,
        41673,
        41674,
        41678,
        41679,
        41685,
        41686,
        41692,
        41693,
        41698,
        41699,
        41700,
        41706,
        41707,
        41713,
        41714,
        41720,
        41721,
        41727,
        41728,
        41733,
        41734,
        41735,
        41741,
        41742,
        41748,
        41749,
        41755,
        41756,
        41760,
        41762,
        41763,
        41769,
        41770,
        41776,
        41777,
        41783,
        41784,
        40790,
        41790,
        41791,
        41792,
        41797,
        41798,
        41804,
        41805,
        41811,
        41812,
        41818,
        41819,
        41825,
        41826,
        41832,
        41833,
        41839,
        41840,
        41843,
        41846,
        41847,
        41853,
        41854,
        41860,
        41861,
        41867,
        41868,
        41874,
        41875,
        41881,
        41882,
        41888,
        41889,
        51283,
        51289,
        51290,
        51296,
        51297,
        51303,
        51304,
        51310,
        51311,
        51317,
        51318,
        51324,
        51325,
        51331,
        51332,
        51338,
        51339,
        51345,
        51346,
        51352,
        51353,
        51359,
        51360,
        51366,
        51367,
        51373,
        51374,
        51380,
        51381,
        51387,
        51388,
        51394,
        51395,
        51401,
        51402,
        51408,
        51409,
        51415,
        51416,
        51419,
        51422,
        51423,
        51429,
        51430,
        51436,
        51437,
        51443,
        51444,
        51450,
        51451,
        51457,
        51458,
        51464,
        51465,
        51471,
        51472,
        51478,
        51479,
        51485,
        51486,
        51492,
        51493,
        51499,
        51500,
        51502,
        51506,
        51507,
        51513,
        51514,
        51520,
        51521,
        51527,
        51528,
        51532,
        51533,
        51534,
        51535,
        51541,
        51542,
        51548,
        51549,
        51555,
        51556,
        51560,
        51562,
        51563,
        51569,
        51570,
        51576,
        51577,
        51583,
        51584,
        51590,
        51591,
        51595,
        51596,
        51597,
        51598,
        51604,
        51605,
        51611,
        51612,
        51618,
        41890,
        51619,
        53656,
        39697,
        39698,
        39704,
        39705,
        39711,
        39712,
        39718,
        39719,
        39720,
        39725,
        39726,
        39731,
        39732,
        39733,
        39739,
        39740,
        39746,
        39747,
        39753,
        39754,
        39760,
        39761,
        39767,
        39768,
        39774,
        39775,
        39781,
        39782,
        39788,
        39789,
        39795,
        39796,
        39802,
        39803,
        39809,
        39810,
        39814,
        39815,
        39816,
        39817,
        39824,
        39831,
        39837,
        39838,
        39839,
        39840,
        39841,
        39842,
        39843,
        39844,
        39845,
        39851,
        39852,
        39858,
        39859,
        39865,
        39866,
        39872,
        39873,
        39879,
        39880,
        39886,
        39887,
        39893,
        39894,
        39900,
        39901,
        39907,
        39908,
        39914,
        39915,
        39921,
        39922,
        39928,
        39929,
        39934,
        39935,
        39936,
        39942,
        39943,
        39949,
        39950,
        39956,
        39957,
        39961,
        39962,
        39963,
        39964,
        39971,
        39977,
        39978,
        39984,
        39985,
        50611,
        50617,
        50618,
        50624,
        50625,
        50631,
        50632,
        50638,
        50639,
        50645,
        50646,
        50652,
        50653,
        50659,
        41895,
        41896,
        41902,
        41903,
        41909,
        41910,
        41916,
        41917,
        41922,
        41923,
        41924,
        41930,
        41931,
        41937,
        41938,
        41944,
        41945,
        41951,
        41952,
        41958,
        41959,
        41965,
        41966,
        41972,
        41973,
        41979,
        41980,
        41986,
        41987,
        41993,
        41994,
        42001,
        42005,
        42006,
        42007,
        42008,
        42014,
        42015,
        42021,
        42022,
        42028,
        42029,
        42035,
        42036,
        42042,
        42043,
        42049,
        42050,
        42053,
        42054,
        42055,
        42056,
        42057,
        42058,
        42062,
        42063,
        42064,
        42070,
        42071,
        42077,
        42078,
        42084,
        42085,
        42091,
        42092,
        42097,
        42098,
        42099,
        42100,
        42105,
        42106,
        42112,
        42113,
        42119,
        42120,
        42125,
        42126,
        42127,
        42133,
        42134,
        42140,
        42141,
        42147,
        42148,
        42154,
        42155,
        42161,
        42162,
        42168,
        42169,
        42174,
        42175,
        42176,
        50527,
        50533,
        50534,
        51622,
        51625,
        51626,
        51632,
        51633,
        51639,
        51640,
        51646,
        51647,
        51653,
        51654,
        51660,
        51661,
        51667,
        51668,
        51674,
        51675,
        51681,
        51682,
        51688,
        51689,
        51695,
        51696,
        51702,
        51703,
        51709,
        51710,
        51716,
        51717,
        51723,
        51724,
        51730,
        51731,
        51737,
        51738,
        51744,
        51745,
        51751,
        51752,
        51758,
        51759,
        51765,
        51766,
        51772,
        51773,
        51779,
        51780,
        51784,
        51786,
        51787,
        51793,
        51794,
        51800,
        51801,
        51807,
        51808,
        51814,
        51815,
        51821,
        51822,
        51828,
        51829,
        51835,
        51836,
        51842,
        51843,
        51849,
        51850,
        51856,
        51857,
        51863,
        51864,
        51867,
        51870,
        51871,
        51877,
        51878,
        51884,
        51885,
        51887,
        51888,
        51889,
        51890,
        51891,
        51892,
        51898,
        50660,
        50666,
        50667,
        50673,
        50674,
        50680,
        50681,
        50687,
        50688,
        50694,
        50695,
        50701,
        50702,
        50708,
        50709,
        50715,
        50716,
        50722,
        50723,
        50729,
        50730,
        50736,
        50737,
        50743,
        50744,
        50750,
        50751,
        50757,
        50758,
        50764,
        50765,
        50770,
        50771,
        50772,
        50778,
        50779,
        50785,
        50786,
        50792,
        50793,
        50794,
        50795,
        50796,
        50799,
        50800,
        50806,
        50807,
        50813,
        50814,
        50820,
        50821,
        50827,
        50828,
        50829,
        50834,
        50835,
        50841,
        50842,
        50848,
        50849,
        50855,
        50856,
        50862,
        50863,
        50864,
        50865,
        50869,
        50870,
        50876,
        50877,
        50883,
        50884,
        50890,
        50891,
        50892,
        50897,
        50898,
        50904,
        50905,
        50911,
        50912,
        50918,
        50919,
        50925,
        50926,
        50932,
        50933,
        50939,
        50940,
        40796,
        40797,
        40798,
        40803,
        40804,
        40810,
        40811,
        40817,
        40818,
        40824,
        40825,
        40826,
        40831,
        40832,
        40838,
        40839,
        40845,
        40846,
        40852,
        40853,
        40859,
        40860,
        40866,
        40867,
        40873,
        40874,
        40880,
        40881,
        40887,
        40888,
        40894,
        40895,
        40901,
        40902,
        40908,
        40909,
        40915,
        40916,
        40922,
        40923,
        40929,
        40930,
        40931,
        40932,
        40933,
        40934,
        40935,
        40936,
        40937,
        40944,
        40950,
        40951,
        40957,
        40958,
        40964,
        40965,
        40966,
        40967,
        40972,
        40978,
        40979,
        40985,
        40986,
        40992,
        40993,
        40999,
        41000,
        41003,
        41006,
        41007,
        41013,
        41014,
        41020,
        41021,
        41027,
        41028,
        41030,
        41034,
        41035,
        41041,
        41042,
        41048,
        41049,
        41055,
        41056,
        41062,
        41063,
        41069,
        41070,
        41076,
        41077,
        41083,
        41084,
        42182,
        51899,
        50947,
        50953,
        50954,
        50960,
        50961,
        50967,
        50968,
        50974,
        50975,
        50981,
        50982,
        50988,
        50989,
        50995,
        50996,
        51002,
        51003,
        51009,
        51010,
        51016,
        51017,
        51023,
        51024,
        51030,
        51031,
        51037,
        51038,
        51044,
        51045,
        51051,
        51052,
        51053,
        51058,
        51059,
        51065,
        51066,
        51072,
        51073,
        51079,
        51080,
        51086,
        51087,
        51093,
        51094,
        51100,
        51101,
        51107,
        51108,
        51114,
        51115,
        51121,
        51122,
        51128,
        51129,
        51135,
        51136,
        51137,
        51142,
        51143,
        51149,
        51150,
        51156,
        51157,
        51163,
        51164,
        51170,
        51171,
        51177,
        51178,
        51179,
        51180,
        51184,
        51185,
        51191,
        51192,
        51194,
        51198,
        51199,
        51205,
        51206,
        51212,
        51213,
        51219,
        51220,
        51226,
        51227,
        51230,
        51231,
        51233,
        51234,
        51240,
        51241,
        51247,
        51248,
        51254,
        51255,
        51257,
        51261,
        51262,
        51268,
        51269,
        51275,
        51276,
        39992,
        39998,
        39999,
        40005,
        40006,
        40012,
        40013,
        40019,
        40020,
        40026,
        40027,
        40032,
        40033,
        40034,
        40040,
        40041,
        40047,
        40048,
        40054,
        40055,
        40061,
        40062,
        40068,
        40069,
        40075,
        40076,
        41090,
        41091,
        41097,
        41098,
        41104,
        41105,
        41111,
        41112,
        41118,
        41119,
        41123,
        41125,
        41126,
        41132,
        41133,
        41139,
        41140,
        41146,
        41147,
        41153,
        41154,
        41160,
        41161,
        41167,
        41168,
        41174,
        40082,
        40083,
        40089,
        40090,
        40096,
        40097,
        40103,
        40104,
        40110,
        40111,
        40117,
        40118,
        40124,
        40125,
        40131,
        40132,
        40138,
        40139,
        40145,
        40146,
        40152,
        40153,
        40159,
        40160,
        40166,
        40167,
        40173,
        42183,
        42189,
        42190,
        42195,
        42196,
        42197,
        42203,
        42204,
        42210,
        42211,
        42217,
        42218,
        42224,
        42225,
        42231,
        42232,
        41175,
        40174,
        42238,
        42239,
        42245,
        42246,
        42252,
        42253,
        42259,
        42260,
        42266,
        42267,
        42273,
        41181,
        41182,
        41188,
        41189,
        41192,
        41195,
        41196,
        41202,
        41203,
        41209,
        41210,
        41216,
        41217,
        41223,
        41224,
        41230,
        41231,
        41237,
        41238,
        41244,
        41245,
        41251,
        41252,
        41258,
        41259,
        41266,
        41272,
        41273,
        41274,
        41275,
        41279,
        41280,
        41286,
        41287,
        41293,
        41294,
        41300,
        41301,
        41307,
        41308,
        41314,
        41315,
        41316,
        41317,
        41318,
        41319,
        41320,
        41321,
        41322,
        41329,
        41333,
        41335,
        41336,
        41342,
        41343,
        41349,
        41350,
        41356,
        41357,
        41363,
        41364,
        41368,
        41369,
        41370,
        41371,
        41377,
        41378,
        41384,
        41385,
        41391,
        41392,
        41395,
        41398,
        41399,
        41405,
        41406,
        41412,
        41413,
        41419,
        41420,
        41426,
        41427,
        41433,
        41434,
        41437,
        41440,
        41441,
        41447,
        41448,
        41454,
        41455,
        41461,
        41462,
        41468,
        41469,
        41475,
        41476,
        41482,
        53021,
        53025,
        53026,
        53032,
        53033,
        53039,
        53040,
        53046,
        53047,
        53053,
        53054,
        53056,
        53057,
        53060,
        53061,
        53067,
        53068,
        53074,
        53075,
        53081,
        53082,
        53083,
        53088,
        53089,
        53095,
        53096,
        53102,
        53103,
        53109,
        53110,
        53116,
        53117,
        53123,
        53124,
        53130,
        53131,
        53137,
        53138,
        53144,
        53145,
        53151,
        53152,
        53158,
        53159,
        53165,
        53166,
        53172,
        53173,
        53179,
        53180,
        53186,
        53187,
        53193,
        53194,
        53200,
        53201,
        53207,
        53208,
        53214,
        53215,
        53221,
        53222,
        53228,
        53229,
        53235,
        53236,
        53242,
        53243,
        53245,
        53249,
        53250,
        53256,
        53257,
        53263,
        53264,
        53270,
        53271,
        53277,
        53278,
        53284,
        53285,
        53291,
        53292,
        53298,
        53299,
        53305,
        53306,
        53312,
        53313,
        53319,
        53320,
        53326,
        53327,
        53328,
        53333,
        53334,
        53340,
        53341,
        53347,
        53348,
        53354,
        53355,
        53361,
        54516,
        54517,
        54518,
        54523,
        54524,
        54530,
        54531,
        54537,
        54538,
        54544,
        54545,
        54551,
        54552,
        54558,
        54559,
        54565,
        54566,
        54572,
        54573,
        54579,
        54580,
        54586,
        54587,
        54593,
        54594,
        54600,
        54601,
        54607,
        54608,
        54614,
        54615,
        54621,
        54622,
        54628,
        54629,
        54635,
        54636,
        54642,
        54643,
        54649,
        54650,
        54656,
        54657,
        54663,
        54664,
        54670,
        54671,
        54677,
        54678,
        54684,
        54685,
        54691,
        54692,
        54698,
        54699,
        54705,
        54706,
        54712,
        54713,
        54719,
        54720,
        54726,
        54727,
        54733,
        54734,
        54740,
        54741,
        54747,
        54748,
        54754,
        54755,
        54761,
        54762,
        54768,
        54769,
        54775,
        54776,
        54782,
        54783,
        54788,
        54789,
        54790,
        54796,
        54797,
        54803,
        54804,
        54810,
        54811,
        54812,
        54813,
        54817,
        54818,
        54824,
        54825,
        54831,
        54832,
        54838,
        54839,
        54845,
        54846,
        54847,
        54852,
        54853,
        40179,
        40180,
        40181,
        40187,
        40188,
        40194,
        40195,
        40201,
        40202,
        40208,
        40209,
        40216,
        40222,
        40223,
        40224,
        40225,
        40226,
        40227,
        40228,
        40229,
        40230,
        40236,
        40237,
        40243,
        40244,
        40250,
        40251,
        40257,
        40258,
        40264,
        40265,
        40271,
        40272,
        40273,
        40278,
        40279,
        40285,
        40286,
        40292,
        40293,
        40299,
        40300,
        40306,
        40307,
        40313,
        40314,
        40320,
        40321,
        40327,
        40328,
        40334,
        40335,
        40341,
        40342,
        40345,
        40348,
        40349,
        40355,
        40356,
        40362,
        40363,
        40369,
        40370,
        40376,
        40377,
        40383,
        40384,
        40390,
        40391,
        40397,
        40398,
        40404,
        40405,
        40411,
        40412,
        40418,
        40419,
        40425,
        40426,
        40432,
        40433,
        40439,
        40440,
        40443,
        40446,
        40447,
        40453,
        40454,
        53662,
        53663,
        53669,
        53670,
        53676,
        53677,
        53683,
        53684,
        53690,
        53691,
        53693,
        53697,
        53698,
        53704,
        53705,
        53711,
        53712,
        53717,
        53718,
        53719,
        53720,
        53725,
        53726,
        53732,
        53733,
        53739,
        42274,
        42275,
        42276,
        42280,
        42281,
        42286,
        42287,
        42288,
        42294,
        42295,
        42301,
        42302,
        42308,
        42309,
        42315,
        42316,
        42322,
        42323,
        42329,
        42330,
        42336,
        42337,
        42343,
        42344,
        42350,
        42351,
        41483,
        41489,
        41490,
        41496,
        41497,
        41503,
        41504,
        41507,
        41510,
        41511,
        41517,
        41518,
        41524,
        41525,
        41532,
        41536,
        41537,
        41538,
        41539,
        41545,
        41546,
        41552,
        41553,
        41557,
        41559,
        41560,
        42357,
        39991,
        50946,
        53019,
        54515,
        41566,
        40460,
        42918,
        42924,
        42925,
        42931,
        42932,
        42938,
        42939,
        42945,
        42946,
        42952,
        42953,
        42959,
        42960,
        42966,
        42967,
        42973,
        42974,
        42980,
        42981,
        42987,
        42988,
        42994,
        42995,
        43001,
        43002,
        43009,
        42358,
        42364,
        42365,
        42370,
        42371,
        42372,
        42378,
        42379,
        42385,
        42386,
        42392,
        42393,
        42400,
        42406,
        42407,
        42408,
        42409,
        42410,
        42411,
        42412,
        42413,
        42414,
        42420,
        42421,
        42427,
        42428,
        51282,
        53362,
        54859,
        43012,
        42429,
        43015,
        43016,
        43017,
        43018,
        43022,
        43023,
        43029,
        43030,
        43036,
        43037,
        43043,
        43044,
        43050,
        43051,
        43057,
        43058,
        43064,
        43065,
        43071,
        43072,
        43078,
        43079,
        43085,
        43086,
        43092,
        43093,
        52094,
        52095,
        52101,
        52102,
        52108,
        52109,
        52115,
        52116,
        52122,
        52123,
        52129,
        52130,
        52136,
        52137,
        52143,
        52144,
        52149,
        52150,
        52151,
        52157,
        52158,
        52164,
        52165,
        52171,
        52172,
        52178,
        52179,
        52185,
        52186,
        52192,
        52193,
        52199,
        52200,
        52206,
        52207,
        52213,
        52214,
        52220,
        52221,
        52227,
        52228,
        52232,
        52234,
        52235,
        52241,
        52242,
        52248,
        52249,
        52255,
        52256,
        52262,
        52263,
        52269,
        52270,
        52271,
        52272,
        52273,
        52274,
        52276,
        52277,
        52283,
        52284,
        52289,
        43099,
        43757,
        43758,
        43764,
        43765,
        43771,
        43772,
        43778,
        43779,
        43785,
        43786,
        43792,
        43793,
        43799,
        43800,
        43806,
        43807,
        43813,
        43814,
        43820,
        43821,
        43827,
        43828,
        43831,
        43834,
        43835,
        43841,
        43100,
        43101,
        43106,
        43107,
        43113,
        43114,
        43120,
        43121,
        43127,
        43128,
        43134,
        43135,
        43141,
        43142,
        43146,
        43147,
        43148,
        43149,
        43150,
        43151,
        43155,
        43156,
        43159,
        43162,
        43163,
        43169,
        42672,
        42673,
        42679,
        42680,
        42686,
        42687,
        42693,
        42694,
        42700,
        42701,
        42707,
        42708,
        42714,
        42715,
        42721,
        42722,
        42728,
        42729,
        42735,
        42736,
        42737,
        42742,
        42743,
        42749,
        42750,
        42756,
        42757,
        42434,
        42435,
        42441,
        42442,
        42448,
        42449,
        42455,
        42456,
        42462,
        42463,
        42464,
        42465,
        42469,
        42470,
        42476,
        42477,
        42483,
        42484,
        42490,
        42491,
        42492,
        42497,
        42498,
        42504,
        42505,
        42511,
        42512,
        43170,
        43842,
        52290,
        53921,
        51905,
        51906,
        51912,
        51913,
        51919,
        51920,
        51925,
        51926,
        51927,
        51933,
        51934,
        51940,
        51941,
        51947,
        51948,
        51954,
        51955,
        51959,
        51960,
        51961,
        51962,
        51968,
        51969,
        51975,
        51976,
        51982,
        43485,
        43491,
        43492,
        43498,
        43499,
        43500,
        43501,
        43502,
        43503,
        43504,
        43505,
        43506,
        43512,
        43513,
        43520,
        43524,
        43525,
        43526,
        43527,
        43533,
        43534,
        43540,
        43541,
        43547,
        43548,
        43554,
        43555,
        43559,
        43560,
        43561,
        43562,
        43568,
        43569,
        43575,
        43576,
        43582,
        43583,
        43586,
        43589,
        43590,
        43596,
        43597,
        43603,
        43604,
        43610,
        43176,
        43177,
        43183,
        43184,
        43191,
        43194,
        43195,
        43196,
        43197,
        43198,
        43204,
        43205,
        43211,
        43212,
        43218,
        43219,
        43221,
        43225,
        43226,
        43232,
        43233,
        43239,
        43240,
        43246,
        43247,
        43253,
        43254,
        52088,
        42518,
        42519,
        42526,
        42530,
        42531,
        42532,
        42533,
        42539,
        42540,
        42546,
        42547,
        42553,
        42554,
        42559,
        42560,
        42561,
        42567,
        42568,
        42574,
        42575,
        42581,
        42582,
        42588,
        42589,
        42595,
        42596,
        42602,
        42603,
        42609,
        42610,
        42616,
        42617,
        42624,
        42628,
        42629,
        42630,
        42631,
        42637,
        42638,
        42640,
        42641,
        42644,
        42645,
        42651,
        42652,
        42653,
        42658,
        42659,
        42665,
        43351,
        43352,
        43358,
        43359,
        43365,
        43366,
        43367,
        43372,
        43373,
        43379,
        43380,
        43383,
        43386,
        43387,
        43393,
        43394,
        43400,
        43401,
        43407,
        43408,
        43414,
        43415,
        43421,
        43422,
        43428,
        43429,
        43435,
        43436,
        43442,
        43443,
        43449,
        43450,
        43457,
        43463,
        43464,
        43465,
        43466,
        43470,
        43471,
        43477,
        42762,
        42666,
        43611,
        43617,
        43618,
        43623,
        43624,
        43625,
        43631,
        43632,
        43638,
        43639,
        43645,
        43646,
        43652,
        43653,
        43659,
        43660,
        43666,
        43667,
        43673,
        43674,
        43680,
        43681,
        43686,
        43687,
        43688,
        43694,
        43695,
        43701,
        43702,
        43708,
        43709,
        43715,
        43716,
        43721,
        43722,
        43723,
        43729,
        43730,
        43736,
        43737,
        43738,
        43744,
        43748,
        43749,
        43750,
        43751,
        43478,
        42763,
        42764,
        42765,
        42766,
        42767,
        42770,
        42771,
        42777,
        42778,
        42785,
        42791,
        42792,
        42793,
        42794,
        42798,
        42799,
        42805,
        42806,
        42812,
        42813,
        42819,
        42820,
        42826,
        42827,
        42828,
        42829,
        51983,
        53740,
        51987,
        51989,
        51990,
        51996,
        51997,
        52003,
        52004,
        52010,
        52011,
        52017,
        52018,
        52024,
        52025,
        52031,
        52032,
        52038,
        52039,
        52045,
        52046,
        52052,
        52053,
        52059,
        52060,
        52066,
        52067,
        52073,
        52074,
        52080,
        52081,
        52087,
        43260,
        43261,
        43267,
        43268,
        43269,
        43274,
        43275,
        43281,
        43282,
        43288,
        43289,
        43295,
        43296,
        43302,
        43303,
        43309,
        43310,
        43316,
        43317,
        43323,
        43324,
        43330,
        43331,
        43337,
        43338,
        43344,
        43345,
        42833,
        42834,
        42840,
        42841,
        42847,
        42848,
        42854,
        42855,
        42856,
        42861,
        42862,
        42868,
        42869,
        42875,
        42876,
        42882,
        42883,
        42884,
        42885,
        42890,
        42896,
        42897,
        42903,
        42904,
        42910,
        42911,
        42917,
        53746,
        53747,
        53751,
        53753,
        53754,
        53760,
        53761,
        53767,
        53768,
        53774,
        53775,
        53781,
        53782,
        53786,
        53787,
        53788,
        53789,
        53795,
        53796,
        53802,
        53803,
        53809,
        53810,
        53813,
        53816,
        53817,
        53823,
        53824,
        53830,
        53831,
        53837,
        53838,
        53844,
        53845,
        53851,
        53852,
        53858,
        53859,
        53865,
        53866,
        53872,
        53873,
        53879,
        53880,
        53886,
        53887,
        53893,
        53894,
        53900,
        53901,
        53907,
        53908,
        53914,
        53915,
        44248,
        43848,
        43849,
        43853,
        43854,
        43855,
        43856,
        43857,
        43858,
        43859,
        43862,
        43863,
        43869,
        43870,
        43877,
        43883,
        43884,
        43889,
        43890,
        43891,
        43897,
        43898,
        43904,
        43905,
        43911,
        43912,
        52291,
        52297,
        52298,
        52304,
        52305,
        52311,
        52312,
        52318,
        52319,
        52324,
        52325,
        52326,
        52327,
        52332,
        52333,
        52339,
        52340,
        52346,
        52347,
        52352,
        52353,
        52354,
        52360,
        52361,
        52367,
        52368,
        44598,
        44604,
        44605,
        44611,
        44612,
        44618,
        44619,
        44620,
        44625,
        44626,
        44632,
        44633,
        44639,
        44640,
        44646,
        44647,
        44653,
        44654,
        44655,
        44656,
        44660,
        44661,
        44667,
        44668,
        44674,
        44675,
        44681,
        44682,
        44683,
        44688,
        44689,
        44695,
        44696,
        44702,
        44703,
        44709,
        44710,
        44715,
        44716,
        44717,
        44723,
        44724,
        44730,
        44731,
        44737,
        44738,
        44744,
        44745,
        44751,
        44752,
        44758,
        44759,
        44765,
        44766,
        44772,
        44773,
        44779,
        44780,
        44786,
        44787,
        44793,
        44794,
        44800,
        44801,
        44807,
        44808,
        44813,
        44814,
        44815,
        44821,
        44822,
        44828,
        44829,
        44835,
        44836,
        44842,
        44843,
        44844,
        44849,
        44850,
        44856,
        44857,
        44863,
        44864,
        44870,
        44871,
        44877,
        44878,
        44884,
        44885,
        44891,
        43918,
        44254,
        44255,
        44256,
        44261,
        44262,
        44268,
        44269,
        44275,
        44276,
        44282,
        44283,
        44288,
        44289,
        44290,
        44291,
        44296,
        44297,
        44303,
        44304,
        44310,
        44311,
        44316,
        44317,
        44318,
        44324,
        44325,
        44331,
        52374,
        54012,
        54013,
        54019,
        54020,
        54026,
        54027,
        54033,
        54034,
        54040,
        54041,
        54047,
        54048,
        54054,
        54055,
        54058,
        54061,
        54062,
        54068,
        52375,
        54075,
        54076,
        54082,
        54083,
        54089,
        54090,
        54096,
        54097,
        54101,
        54102,
        54103,
        54104,
        54110,
        54111,
        54116,
        54117,
        54118,
        54124,
        54125,
        54131,
        54132,
        54138,
        54139,
        54145,
        54146,
        54151,
        54152,
        54153,
        54154,
        54159,
        54160,
        54166,
        54167,
        54173,
        54174,
        54179,
        54180,
        54181,
        54187,
        54188,
        54194,
        54195,
        54201,
        54202,
        54208,
        54209,
        44332,
        44338,
        44339,
        44345,
        44346,
        44352,
        44353,
        44359,
        44360,
        44361,
        44366,
        44367,
        44373,
        44374,
        44380,
        44381,
        44387,
        44388,
        44394,
        44395,
        44401,
        44402,
        44408,
        44409,
        44415,
        44416,
        44422,
        44423,
        44429,
        44430,
        44436,
        44437,
        44443,
        44444,
        44451,
        44457,
        44458,
        44459,
        44460,
        44464,
        44465,
        44471,
        44472,
        44478,
        44479,
        44480,
        52381,
        54069,
        44003,
        44007,
        44008,
        44009,
        44010,
        44016,
        44017,
        44023,
        44024,
        44030,
        44031,
        44037,
        44038,
        44044,
        44045,
        44051,
        44052,
        44058,
        44059,
        44065,
        44066,
        44072,
        44073,
        44079,
        44080,
        44485,
        44486,
        44492,
        44493,
        44499,
        44500,
        44506,
        44507,
        44513,
        44514,
        44520,
        44521,
        44527,
        44528,
        44534,
        44535,
        44541,
        44542,
        44548,
        44549,
        44555,
        44556,
        44561,
        44562,
        44563,
        44569,
        44570,
        44086,
        53922,
        53928,
        53929,
        53935,
        53936,
        53942,
        53943,
        53949,
        53950,
        53956,
        53957,
        53963,
        53964,
        53970,
        53971,
        53975,
        53977,
        53978,
        53984,
        53985,
        53991,
        53992,
        53998,
        53999,
        54005,
        54006,
        44576,
        44577,
        44584,
        44590,
        44591,
        44592,
        44593,
        44594,
        44595,
        44596,
        44597,
        43919,
        43923,
        43924,
        43925,
        43926,
        43932,
        43933,
        43939,
        43940,
        43946,
        43947,
        43952,
        43953,
        43954,
        43960,
        43961,
        43967,
        43968,
        43974,
        43975,
        43981,
        43982,
        43988,
        43989,
        43995,
        43996,
        45186,
        45192,
        45193,
        45198,
        45199,
        45200,
        45206,
        45207,
        45209,
        45213,
        45214,
        45220,
        45221,
        45227,
        45228,
        45234,
        45235,
        45241,
        45242,
        45248,
        45249,
        45255,
        45256,
        45262,
        45263,
        45269,
        45270,
        45276,
        45277,
        45283,
        45284,
        45290,
        45291,
        45292,
        45297,
        45298,
        45304,
        45305,
        45311,
        45312,
        45318,
        45319,
        45325,
        45326,
        45331,
        45332,
        45333,
        45334,
        45335,
        45336,
        45339,
        45340,
        45346,
        45347,
        45350,
        45353,
        45354,
        45360,
        45361,
        45367,
        45368,
        45374,
        45375,
        45381,
        45382,
        45386,
        45387,
        45388,
        45389,
        45395,
        45396,
        45402,
        45403,
        45409,
        45410,
        45413,
        45416,
        45417,
        45423,
        45424,
        45430,
        45431,
        45437,
        45438,
        45444,
        45445,
        45451,
        45452,
        45453,
        45458,
        45459,
        45465,
        45466,
        45472,
        45473,
        45479,
        45480,
        45486,
        45487,
        45493,
        45494,
        45500,
        45501,
        45507,
        45508,
        45514,
        45515,
        45521,
        45522,
        45528,
        45529,
        45535,
        45536,
        45542,
        45543,
        45549,
        45550,
        45552,
        45556,
        45557,
        45563,
        45564,
        45570,
        45571,
        45575,
        45577,
        45578,
        45584,
        45585,
        45591,
        45592,
        45598,
        45599,
        45605,
        45606,
        45612,
        45613,
        45619,
        45620,
        45626,
        45627,
        45633,
        45634,
        45640,
        45641,
        45647,
        45648,
        45654,
        45655,
        45658,
        45661,
        45662,
        45668,
        45669,
        45675,
        45676,
        45682,
        45683,
        45684,
        45685,
        45686,
        45687,
        45688,
        45689,
        45690,
        45696,
        45697,
        45703,
        45704,
        44892,
        44898,
        44899,
        44905,
        44906,
        44912,
        44913,
        44919,
        44920,
        44926,
        44927,
        44928,
        44933,
        44934,
        44940,
        44941,
        44947,
        44948,
        44949,
        44950,
        44951,
        44952,
        44953,
        44954,
        44955,
        44961,
        44962,
        44968,
        44969,
        44975,
        44976,
        44982,
        44983,
        44985,
        44989,
        44990,
        44996,
        44997,
        45003,
        45004,
        45010,
        45011,
        45017,
        45018,
        45020,
        45021,
        45024,
        45025,
        45031,
        45032,
        44087,
        44093,
        44094,
        44101,
        44105,
        44106,
        44107,
        44108,
        44113,
        44114,
        44115,
        44121,
        44122,
        44128,
        44129,
        44135,
        44136,
        44142,
        44143,
        44149,
        44150,
        44156,
        44157,
        44163,
        44164,
        44170,
        44171,
        49463,
        49469,
        49470,
        49476,
        49477,
        49483,
        49484,
        49490,
        49491,
        49497,
        49498,
        49504,
        49505,
        49511,
        49512,
        49518,
        49519,
        49525,
        49526,
        49532,
        49533,
        49539,
        49540,
        49546,
        49547,
        49553,
        49554,
        49560,
        49561,
        49567,
        49568,
        49574,
        49575,
        49581,
        49582,
        49588,
        49589,
        49592,
        49595,
        49596,
        49602,
        49603,
        49609,
        49610,
        49616,
        49617,
        49623,
        49624,
        49630,
        49631,
        49637,
        49638,
        49644,
        49645,
        49651,
        49652,
        49658,
        49659,
        49665,
        49666,
        49672,
        49673,
        49675,
        49679,
        49680,
        49686,
        49687,
        49693,
        49694,
        49700,
        49701,
        49702,
        49703,
        49704,
        49707,
        49708,
        49714,
        49715,
        49721,
        49722,
        49728,
        49729,
        49733,
        49735,
        49736,
        49742,
        49743,
        49749,
        49750,
        49756,
        49757,
        49763,
        49764,
        49768,
        45710,
        45038,
        45039,
        45045,
        45046,
        45047,
        45052,
        45053,
        45059,
        45060,
        45066,
        45067,
        45073,
        45074,
        45080,
        45081,
        45087,
        45088,
        45094,
        45095,
        45099,
        45101,
        45102,
        45108,
        45109,
        45115,
        45116,
        45122,
        45123,
        45129,
        45130,
        45136,
        45137,
        45143,
        45144,
        45150,
        45151,
        45157,
        45158,
        45164,
        45165,
        45171,
        45172,
        45178,
        45179,
        44177,
        44178,
        44184,
        44185,
        44191,
        44192,
        44197,
        44198,
        44199,
        44205,
        44206,
        44212,
        44213,
        44219,
        49769,
        47418,
        47419,
        47425,
        47426,
        47432,
        47433,
        47439,
        47440,
        47446,
        47447,
        47453,
        47454,
        47460,
        47461,
        47467,
        47468,
        47474,
        47475,
        47481,
        47482,
        47484,
        47488,
        47489,
        47495,
        47496,
        47502,
        47503,
        47509,
        47510,
        47516,
        47517,
        47518,
        47519,
        47520,
        47521,
        47523,
        47524,
        47530,
        47531,
        47537,
        47538,
        47542,
        47544,
        47545,
        47551,
        47552,
        47558,
        47559,
        47565,
        47566,
        47572,
        47573,
        47577,
        47578,
        47579,
        47580,
        47586,
        47587,
        47593,
        47594,
        47600,
        47601,
        47604,
        47607,
        47608,
        47614,
        47615,
        47621,
        47622,
        47628,
        47629,
        47635,
        47636,
        47639,
        47642,
        47643,
        47649,
        47650,
        47656,
        47657,
        47663,
        47664,
        47670,
        47671,
        47677,
        47678,
        47684,
        47685,
        47691,
        47692,
        47698,
        47699,
        45711,
        45716,
        45717,
        45718,
        45724,
        45725,
        45731,
        45732,
        45738,
        45739,
        45745,
        45746,
        45750,
        45751,
        45752,
        45753,
        45759,
        45760,
        45766,
        45767,
        45773,
        45774,
        45778,
        45780,
        45781,
        45787,
        45788,
        45794,
        45795,
        45801,
        45802,
        45807,
        45808,
        45809,
        45815,
        45816,
        45822,
        45823,
        45829,
        45830,
        45836,
        45837,
        45843,
        45844,
        45850,
        45851,
        45857,
        45858,
        45864,
        45865,
        45871,
        45872,
        45878,
        45879,
        45885,
        45886,
        45892,
        45893,
        45899,
        45900,
        45906,
        45907,
        45913,
        45914,
        45920,
        45921,
        45927,
        45928,
        45934,
        45935,
        45936,
        45940,
        45941,
        45942,
        45948,
        45949,
        45955,
        45956,
        45962,
        45963,
        45969,
        45970,
        45976,
        45977,
        45983,
        45984,
        45990,
        45991,
        44220,
        44226,
        44227,
        44233,
        44234,
        44237,
        44238,
        44239,
        44240,
        44241,
        44242,
        44243,
        47705,
        47706,
        47712,
        47713,
        47719,
        47720,
        47726,
        47727,
        47733,
        47734,
        47738,
        47740,
        47741,
        47747,
        47748,
        47754,
        47755,
        47761,
        47762,
        47766,
        47768,
        47769,
        47775,
        47776,
        47782,
        47783,
        47789,
        47790,
        47796,
        47797,
        47803,
        47804,
        47810,
        47811,
        47817,
        47818,
        47824,
        47825,
        47831,
        47832,
        47838,
        47839,
        47845,
        47846,
        47849,
        47852,
        47853,
        47859,
        47860,
        47866,
        47867,
        47870,
        47871,
        47872,
        47873,
        47874,
        47875,
        47880,
        47881,
        47887,
        47888,
        47894,
        47895,
        47901,
        47902,
        47907,
        47908,
        47909,
        47915,
        47916,
        47922,
        47923,
        47929,
        47930,
        47936,
        47937,
        47941,
        47942,
        47943,
        47944,
        47950,
        47951,
        47957,
        47958,
        47964,
        47965,
        47969,
        47971,
        47972,
        47978,
        47979,
        47985,
        47986,
        39347,
        39348,
        39349,
        47992,
        47993,
        47999,
        48000,
        48006,
        48007,
        48013,
        48014,
        48020,
        48021,
        48023,
        48027,
        48028,
        48034,
        48035,
        48041,
        48042,
        48048,
        48049,
        48055,
        48056,
        48062,
        48063,
        48069,
        48070,
        48076,
        48077,
        48083,
        48084,
        48090,
        48091,
        48097,
        48098,
        48104,
        48105,
        48111,
        48112,
        48118,
        48119,
        48122,
        48125,
        45997,
        48126,
        48131,
        48132,
        48133,
        48139,
        48140,
        48146,
        48147,
        48153,
        48154,
        48160,
        48161,
        48167,
        48168,
        48174,
        48175,
        48181,
        48182,
        48188,
        48189,
        48195,
        48196,
        48202,
        48203,
        48209,
        48210,
        48214,
        48216,
        48217,
        48223,
        48224,
        48230,
        48231,
        48237,
        48238,
        48244,
        48245,
        48251,
        48252,
        48254,
        48255,
        48256,
        48257,
        48258,
        48259,
        48265,
        48266,
        48271,
        48272,
        49770,
        49771,
        49777,
        49778,
        49784,
        49785,
        49791,
        49792,
        49796,
        49798,
        49799,
        49805,
        49806,
        49812,
        49813,
        49819,
        49820,
        49826,
        49827,
        49833,
        49834,
        49840,
        49841,
        49847,
        49848,
        52382,
        52388,
        52389,
        52395,
        52396,
        52402,
        52403,
        52409,
        52410,
        52416,
        52417,
        52423,
        52424,
        52430,
        52431,
        52437,
        52438,
        52444,
        52445,
        52451,
        52452,
        52458,
        52459,
        52465,
        52466,
        52472,
        52473,
        52479,
        52480,
        52486,
        52487,
        52493,
        52494,
        52500,
        52501,
        52507,
        52508,
        52514,
        52515,
        52521,
        52522,
        52528,
        52529,
        52535,
        52536,
        52542,
        52543,
        52549,
        52550,
        52556,
        52557,
        52563,
        52564,
        52570,
        52571,
        52577,
        52578,
        52584,
        52585,
        52591,
        52592,
        52597,
        52598,
        52599,
        52605,
        52606,
        52612,
        52613,
        52619,
        52620,
        52625,
        52626,
        52627,
        52628,
        52633,
        52634,
        52640,
        52641,
        52647,
        52648,
        52654,
        52655,
        52656,
        52661,
        52662,
        52668,
        52669,
        45185,
        49854,
        49855,
        49861,
        49862,
        49868,
        49869,
        49875,
        49876,
        49882,
        49883,
        49889,
        49890,
        49896,
        49897,
        49903,
        49904,
        49910,
        49911,
        49917,
        49918,
        49924,
        49925,
        49931,
        49932,
        49938,
        49939,
        49945,
        49946,
        49952,
        49953,
        49958,
        49959,
        49960,
        49966,
        49967,
        49973,
        49974,
        49980,
        49981,
        49987,
        49988,
        49994,
        49995,
        50001,
        50002,
        50008,
        50009,
        50015,
        50016,
        50022,
        50023,
        50029,
        50030,
        50036,
        50037,
        50041,
        50043,
        50044,
        50050,
        50051,
        50057,
        50058,
        50064,
        50065,
        50071,
        50072,
        50078,
        50079,
        50085,
        45998,
        46004,
        46005,
        46011,
        46012,
        46018,
        46019,
        46023,
        46025,
        46026,
        46032,
        46033,
        46039,
        46040,
        46046,
        50086,
        50087,
        50088,
        50092,
        50093,
        50098,
        50099,
        50100,
        50106,
        50107,
        50113,
        50114,
        50120,
        50121,
        50127,
        50128,
        50133,
        50134,
        50135,
        50136,
        50141,
        50142,
        50148,
        50149,
        50155,
        50156,
        50161,
        50162,
        50163,
        50169,
        50170,
        50176,
        50177,
        50183,
        50184,
        50190,
        50191,
        50197,
        50198,
        50204,
        50205,
        50211,
        50212,
        50218,
        50219,
        50225,
        50226,
        50232,
        50233,
        50239,
        50240,
        50246,
        50247,
        50253,
        50254,
        50260,
        50261,
        50267,
        50268,
        50274,
        50275,
        50281,
        50282,
        50288,
        50289,
        50295,
        50296,
        50302,
        50303,
        50309,
        50310,
        50316,
        50317,
        50323,
        50324,
        50330,
        50331,
        50337,
        50338,
        50344,
        50345,
        50351,
        50352,
        50358,
        50359,
        50365,
        50366,
        50372,
        50373,
        50379,
        50380,
        50386,
        50387,
        46047,
        46053,
        46054,
        46060,
        46061,
        46067,
        46068,
        46069,
        46070,
        46071,
        46072,
        46073,
        46074,
        46075,
        46080,
        46081,
        46082,
        46088,
        46089,
        46095,
        46096,
        46102,
        46103,
        46109,
        46110,
        46115,
        46116,
        46117,
        46118,
        46123,
        46124,
        46130,
        46131,
        46137,
        46138,
        46143,
        46144,
        46145,
        46151,
        46152,
        46158,
        46159,
        46165,
        46166,
        46172,
        46173,
        46179,
        46180,
        46186,
        46187,
        46192,
        46193,
        46194,
        46200,
        46201,
        46207,
        46208,
        46214,
        46215,
        46221,
        50393,
        39083,
        39088,
        39089,
        39095,
        39096,
        39102,
        39103,
        39109,
        39110,
        39116,
        39117,
        39123,
        39124,
        39130,
        39131,
        39132,
        39133,
        39134,
        39135,
        39136,
        39137,
        39138,
        39141,
        39145,
        39151,
        39152,
        39158,
        39159,
        39165,
        39166,
        39172,
        39173,
        39177,
        39178,
        39179,
        39180,
        39187,
        39193,
        39194,
        39200,
        39201,
        39203,
        52675,
        39207,
        39208,
        39214,
        39215,
        39221,
        39222,
        39228,
        39229,
        39235,
        39236,
        39242,
        39243,
        39249,
        39250,
        39251,
        39252,
        39257,
        39263,
        39264,
        39270,
        39271,
        39277,
        39278,
        39284,
        39285,
        39291,
        39292,
        39298,
        39299,
        39305,
        54215,
        46222,
        46228,
        46229,
        46235,
        46236,
        46242,
        46243,
        46249,
        46250,
        46256,
        46257,
        46263,
        46264,
        46270,
        46271,
        46277,
        46278,
        46284,
        46285,
        46290,
        46291,
        46292,
        46298,
        46299,
        46305,
        46306,
        46312,
        46313,
        46319,
        46320,
        46326,
        46327,
        46333,
        46334,
        46340,
        46341,
        46347,
        46348,
        46354,
        46355,
        46361,
        46362,
        46368,
        46369,
        46375,
        46376,
        46382,
        46383,
        46388,
        46389,
        46390,
        46396,
        46397,
        46403,
        46404,
        46410,
        46411,
        46417,
        46418,
        46423,
        46424,
        46425,
        46426,
        46427,
        46428,
        46431,
        46432,
        46438,
        46439,
        46445,
        46446,
        46447,
        46452,
        46453,
        46459,
        46460,
        46466,
        46467,
        46473,
        46474,
        46479,
        46480,
        46481,
        46482,
        46487,
        46488,
        46494,
        46495,
        46501,
        46502,
        46508,
        46509,
        46515,
        54216,
        54222,
        54223,
        54229,
        54230,
        54236,
        54237,
        54243,
        54244,
        54250,
        54251,
        54257,
        54258,
        54264,
        54265,
        54271,
        54272,
        54278,
        54279,
        54285,
        54286,
        54292,
        54293,
        54299,
        54300,
        54306,
        54307,
        54313,
        54314,
        54320,
        54321,
        54327,
        54328,
        46516,
        46522,
        46523,
        46529,
        46530,
        46536,
        46537,
        46543,
        46544,
        46547,
        46550,
        46551,
        52676,
        52682,
        52683,
        52689,
        52690,
        52691,
        52692,
        52696,
        52697,
        52703,
        52704,
        52710,
        52711,
        52717,
        52718,
        52719,
        52724,
        52725,
        52731,
        52732,
        52738,
        52739,
        52745,
        52746,
        52752,
        52753,
        52759,
        52760,
        52766,
        52767,
        52773,
        52774,
        52780,
        46557,
        46558,
        46564,
        46565,
        46571,
        46572,
        46578,
        46579,
        46585,
        46586,
        46592,
        46593,
        46599,
        46600,
        46606,
        46607,
        46613,
        46614,
        46620,
        46621,
        46627,
        46628,
        46634,
        46635,
        46641,
        46642,
        46645,
        46648,
        46649,
        46655,
        46656,
        46662,
        46663,
        46669,
        46670,
        46676,
        46677,
        46683,
        46684,
        46690,
        46691,
        46697,
        46698,
        46704,
        46705,
        46711,
        46712,
        46718,
        46719,
        46725,
        46726,
        46732,
        46733,
        46739,
        46740,
        46746,
        46747,
        46752,
        46753,
        46754,
        46760,
        46761,
        46767,
        46768,
        46774,
        46775,
        46776,
        46777,
        46778,
        46779,
        46780,
        46781,
        46782,
        46788,
        46789,
        46795,
        46796,
        46802,
        46803,
        46809,
        46810,
        46811,
        46816,
        46817,
        48273,
        48279,
        48280,
        48286,
        48287,
        48293,
        48294,
        48300,
        48301,
        48306,
        48307,
        48308,
        48309,
        48314,
        48315,
        48321,
        48322,
        48328,
        48329,
        48335,
        48336,
        48342,
        48343,
        48349,
        48350,
        48356,
        48357,
        48363,
        48364,
        48370,
        48371,
        48377,
        48378,
        48384,
        48385,
        48391,
        48392,
        48398,
        48399,
        48405,
        48406,
        48412,
        48413,
        48419,
        48420,
        48426,
        48427,
        48433,
        48434,
        48440,
        48441,
        48447,
        48448,
        48454,
        48455,
        48461,
        48462,
        48468,
        48469,
        48475,
        48476,
        48482,
        48483,
        48489,
        48490,
        48496,
        48497,
        48503,
        48504,
        48510,
        48511,
        48517,
        48518,
        48524,
        48525,
        48531,
        48532,
        48538,
        48539,
        48545,
        48546,
        48552,
        48553,
        48559,
        48560,
        48566,
        48567,
        48573,
        48574,
        48579,
        48580,
        48581,
        48587,
        48588,
        46823,
        46824,
        46830,
        46831,
        46837,
        46838,
        46844,
        46845,
        46847,
        46848,
        46851,
        46852,
        46858,
        46859,
        46865,
        46866,
        46872,
        46873,
        46874,
        46879,
        46880,
        46886,
        46887,
        46893,
        46894,
        46900,
        46901,
        46902,
        46907,
        46908,
        46914,
        46915,
        46921,
        46922,
        46928,
        46929,
        46935,
        46936,
        46942,
        46943,
        46949,
        46950,
        46956,
        46957,
        46963,
        46964,
        46970,
        46971,
        46977,
        46978,
        46984,
        46985,
        46991,
        46992,
        46998,
        46999,
        47005,
        47006,
        47012,
        47013,
        47019,
        47020,
        47026,
        47027,
        47029,
        47033,
        47034,
        47036,
        47040,
        47041,
        47047,
        47048,
        47054,
        47055,
        47061,
        47062,
        47068,
        47069,
        47075,
        47076,
        47082,
        47083,
        47089,
        47090,
        47096,
        47097,
        47103,
        47104,
        47110,
        47111,
        47117,
        47118,
        47119,
        47124,
        47125,
        50394,
        50400,
        50401,
        50406,
        50407,
        50408,
        50414,
        50415,
        50421,
        50422,
        50428,
        50429,
        50435,
        50436,
        50439,
        50440,
        50441,
        50442,
        50443,
        50449,
        50450,
        50456,
        50457,
        50463,
        48594,
        48595,
        48601,
        48602,
        48608,
        48609,
        48610,
        48611,
        48612,
        48613,
        48615,
        48616,
        48622,
        48623,
        48629,
        48630,
        48636,
        48637,
        48638,
        48643,
        48644,
        48650,
        48651,
        48657,
        48658,
        48664,
        48665,
        48671,
        48672,
        48673,
        48674,
        48678,
        48679,
        48685,
        48686,
        48692,
        48693,
        48699,
        48700,
        48701,
        48706,
        48707,
        48713,
        48714,
        48720,
        48721,
        48727,
        48728,
        48734,
        48735,
        48741,
        48742,
        48748,
        48749,
        48755,
        48756,
        48762,
        48763,
        48769,
        48770,
        48776,
        48777,
        48783,
        48784,
        48790,
        48791,
        48797,
        48798,
        48804,
        48805,
        48811,
        48812,
        48818,
        48819,
        48825,
        48826,
        48832,
        48833,
        48839,
        48840,
        48846,
        48847,
        48853,
        48854,
        48860,
        48861,
        48862,
        48867,
        48868,
        48874,
        48875,
        48881,
        48882,
        48888,
        39306,
        50464,
        52781,
        54334,
        48889,
        48895,
        48896,
        48902,
        48903,
        48909,
        48910,
        48916,
        48917,
        48923,
        48924,
        48930,
        48931,
        48937,
        48938,
        48944,
        48945,
        48946,
        48951,
        48952,
        48958,
        48959,
        48965,
        48966,
        48972,
        48973,
        48979,
        48980,
        48986,
        48987,
        48993,
        48994,
        48995,
        48996,
        48997,
        48998,
        49000,
        49001,
        49003,
        49007,
        49008,
        49014,
        49015,
        49021,
        49022,
        49028,
        49029,
        49035,
        49036,
        49038,
        49039,
        49042,
        49043,
        49049,
        49050,
        49056,
        49057,
        49063,
        49064,
        49065,
        49070,
        49071,
        49077,
        49078,
        49084,
        49085,
        49091,
        49092,
        49098,
        49099,
        49105,
        49106,
        49112,
        49113,
        49119,
        49120,
        49126,
        49127,
        49133,
        49134,
        49140,
        49141,
        49147,
        49148,
        49154,
        49155,
        49161,
        49162,
        47131,
        47132,
        47138,
        47139,
        47145,
        47146,
        47152,
        47153,
        47159,
        47160,
        47161,
        47162,
        47163,
        47164,
        47165,
        47166,
        47167,
        47173,
        47174,
        47177,
        47180,
        47181,
        47187,
        47188,
        47194,
        47195,
        47201,
        47202,
        47208,
        47209,
        47212,
        47213,
        47215,
        47216,
        47222,
        47223,
        47229,
        47230,
        47236,
        47237,
        47239,
        47243,
        47244,
        47250,
        47251,
        47257,
        47258,
        47264,
        47265,
        47271,
        47272,
        47278,
        47279,
        47284,
        47285,
        47286,
        47292,
        47293,
        47299,
        47300,
        47306,
        47307,
        47313,
        47314,
        47320,
        47321,
        47327,
        47328,
        47334,
        47335,
        47341,
        47342,
        47348,
        47349,
        47355,
        47356,
        47362,
        47363,
        47369,
        47370,
        47376,
        47377,
        47383,
        47384,
        47390,
        47391,
        47397,
        47398,
        47401,
        47404,
        47405,
        47411,
        49168,
        47412,
        49169,
        49175,
        49176,
        49182,
        49183,
        49189,
        49190,
        49196,
        49197,
        49203,
        49204,
        49210,
        49211,
        49217,
        49218,
        49224,
        49225,
        49227,
        49231,
        49232,
        49238,
        49239,
        49245,
        49246,
        49252,
        49253,
        49259,
        49260,
        49266,
        49267,
        49273,
        49274,
        49280,
        49281,
        49287,
        49288,
        49294,
        49295,
        49301,
        49302,
        49308,
        49309,
        49310,
        49315,
        49316,
        49322,
        49323,
        49329,
        49330,
        49336,
        49337,
        49341,
        49343,
        49344,
        49347,
        49348,
        49349,
        49350,
        49351,
        49357,
        49358,
        49364,
        49365,
        49368,
        49371,
        49372,
        49378,
        49379,
        49385,
        49386,
        49392,
        49393,
        49399,
        49400,
        49403,
        49404,
        49406,
        49407,
        49413,
        49414,
        49420,
        49421,
        49427,
        49428,
        49430,
        49434,
        49435,
        49441,
        49442,
        49448,
        49449,
        49455,
        49456,
        49462,
        54335,
        52787,
        52788,
        52794,
        52795,
        52801,
        52802,
        52808,
        52809,
        52815,
        52816,
        52822,
        52823,
        52829,
        50465,
        50470,
        50471,
        50477,
        50478,
        50484,
        50485,
        50491,
        50492,
        50497,
        50498,
        50499,
        50500,
        50505,
        50506,
        50512,
        50513,
        50519,
        50520,
        50526,
        39312,
        39313,
        39319,
        39320,
        39326,
        39327,
        39333,
        39334,
        39340,
        39341,
        39343]
    }
  },
  "CALENDAR.TPB": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "CALENDAR.TPB",
      "OBJECT" : "SETTINGS",
      "TYPE" : "CALENDAR",
      "CODE" : "TPB",
      "SUNDAY" : true,
      "MONDAY" : true,
      "TUESDAY" : true,
      "WEDNESDAY" : true,
      "THURSDAY" : true,
      "FRIDAY" : true,
      "SATURDAY" : true,
      "DATES" : "CALENDAR.TPB.DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-SOFRINDEX-ON.DATA": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "DATE" : [],
      "VALUE" : []
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-SOFRINDEX-ON": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "MARKET DATA",
      "TYPE" : "FIXINGS",
      "ID" : "FIXINGS.USD-SOFRINDEX-ON",
      "FIXINGS" : "FIXINGS.USD-SOFRINDEX-ON.DATA",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "INTERP METHOD" : "None"
    }
  },
  "MDE.RATESETTINGS.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Basis","Tenor","Spot Lag","Spot Calendar","Spot Roll Convention","Accrual Calendar","Accrual Roll Convention","End of Month","Reset Calendar","Reset Roll Convention","Currency","IR Index","IR Index Tenor","Convention"],
      "TYPE" : ["Basis","Tenor","Tenor","Calendar","RollConvention","Calendar","RollConvention","Boolean","Calendar","RollConvention","Currency","String","Tenor","ID"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,true,true,true,false],
      "DEFAULT" : ["Act/360",null,null,null,null,null,null,null,null,null,null,null,null,
        ">\"CONV.IR.RATE-SETTINGS.\"+Currency+\"-\"+IRIndex+\"-\"+IRIndexTenor"],
      "GROUPING" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "DESCRIPTION" : ["Day-count convention used for computing rate accrual periods","The tenor of the underlying rate","Tenor used to calculate the spot date."," Holiday calendar used to adjust the spot date; defaults to instrument.","Roll date convention used for adjusting the spot date when it falls on a non-business date"," Holiday calendar used to adjust accrual dates.","Roll date convention used for adjusting the accrual date when it falls on a non-business date.","Indicates whether to apply end-of-month (EOM) rules."," Holiday calendar used to adjust the intermediate date;","Roll date convention used for adjusting the intermediate date when it falls on a non-business date.","The Currency for the Rate Settings.","The name of the rate index.","The underlying tenor of the rate index.",null]
    }
  },
  "MDE.RATESETTINGS.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["MDE Output"],
      "TYPE" : ["Table()"],
      "REQUIRED" : [false],
      "ID" : [null],
      "HEADER" : [null],
      "VALUE" : [
        ">ImplementedObject"],
      "CURRENCY" : [null],
      "CATEGORY" : [null],
      "DESCRIPTION" : [null],
      "PRI" : [null]
    }
  },
  "MDE.RATESETTINGS.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name","Asset Class","MDE Type"],
      "TYPE" : ["String","String","String"],
      "VALUE" : ["Rate Settings","RATESETTINGS",null]
    }
  },
  "MDE.RATESETTINGS.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Underlying Asset"],
      "TYPE" : ["String"],
      "VALUE" : [null]
    }
  },
  "MDE.RATESETTINGS.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        "define key = Currency+\"-\"+IRIndex+\"-\"+IRIndexTenor",
        "define key_exists = Numerix::KeyExists(\"SETTINGS.RATESETTINGS\",key)",
        "//================================================================================",
        "// Main Function",
        "//================================================================================",
        null,
        "constfunction main",
        "{",
        "    call = Numerix::Object({\"RateSetting.\"+key, \"SETTINGS\", \"RATE SETTINGS\"}) & ",
        "    {",
        "        \"basis\"                     : Basis,",
        "        \"tenor\"                     : Tenor,",
        "        \"spotlag\"                   : SpotLag,",
        "        \"spotrollconvention\"        : SpotRollConvention,",
        "        \"spotcalendar\"              : SpotCalendar,",
        "        \"resetcalendar\"             : ResetCalendar,",
        "        \"resetrollconvention\"       : ResetRollConvention,",
        "        \"accrualcalendar\"           : AccrualCalendar,",
        "        \"accrualrollconvention\"     : AccrualRollConvention,",
        "        \"endofmonth\"                : EndofMonth,",
        "        \"convention\"                : Convention",
        "    }",
        null,
        "	return call.Create        ",
        null,
        "}",
        null,
        "function get_value(fn_header)",
        "{",
        "    fn_value = \"\"",
        "    if key_exists :",
        "        fn_value = Numerix::GetSettings(\"SETTINGS.RATESETTINGS\",key,fn_header)",
        null,
        "    return fn_value",
        null,
        "}"]
    }
  },
  "MDE.RATESETTINGS": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "MDE.RATESETTINGS",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "MDE.RATESETTINGS.PARAMETERS",
      "RESULTS" : "MDE.RATESETTINGS.RESULTS",
      "CLASSPROPERTIES" : "MDE.RATESETTINGS.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "MDE.RATESETTINGS.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "SCRIPT" : "MDE.RATESETTINGS.SCRIPT.NXSL"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_12378_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["CURRENCY","IRINDEXTENOR","IRINDEX"],
      "VALUE" : ["USD","ON","SOFR"]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.RATE-SETTINGS.USD-SOFR-ON": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "IR.RATE-SETTINGS.USD-SOFR-ON",
      "DEFINITION" : "MDE.RATESETTINGS",
      "INSTANTIATION TYPE" : "MDE",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "REQUESTOUTPUT" : "NONE",
      "INPUTS" : "_12378_NX_AUTOGEN"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.TRADE-1701250621129591280090": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.TRADE-1701250621129591280090",
      "DEFINITION" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP",
      "INSTANTIATION TYPE" : "TERMS",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "REQUESTOUTPUT" : "NONE",
      "INPUTS" : "_10550_NX_AUTOGEN"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^MARKETPRICER_12440_NX_AUTOGEN": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "MARKET",
      "TYPE" : "PRICER",
      "ID" : "MarketPricer_12440_NX_AUTOGEN",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "TRADE TERMS" : "TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.TRADE-1701250621129591280090",
      "PRICING POLICY" : "CONTEXT^PRICINGPOLICY.INSTANCE^POLICY",
      "DEBUG" : "FALSE",
      "TRACE" : null
    }
  },
  "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "DEFAULT" : [],
      "GROUPING" : [],
      "DESCRIPTION" : []
    }
  },
  "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Structured PV","NonCredit PV","PV Clean Price","Accrued Interest","Cash Flow","Swap","Leg 1 PV","Leg1 Clean Price","Leg 2 PV","Leg2 Clean Price","Funding PV","PV","Leg 1 Cash Flow Detail","Leg 2 Cash Flow Detail","Consolidated Cash Flow"],
      "TYPE" : ["Double","Double","Double","Double","Table()","Double","Double","Double","Double","Double","Double","Double","Table()","Table()","Table()"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,true,false,false,false],
      "ID" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "HEADER" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "VALUE" : [
        "> SnT::GetMoreOutput(\"StructuredPV\")",    
        "> if TradeTerms.isSwap ? pricer_pv : implementedObject.view(\"PVNonCRNote\")",    
        "> if TradeTerms.isSwap ? implementedObject.view(\"Leg1.Clean\") + implementedObject.view(\"Leg2.Clean\") : implementedObject.view(\"Leg1.Clean\")",    
        "> if TradeTerms.isSwap ? implementedObject.view(\"Leg1.Accrued\") + implementedObject.view(\"Leg2.Accrued\") : implementedObject.view(\"Leg1.Accrued\")",    
        "> OutputOVTCashflow",    "View.SwapPV",
        "> SnT::GetMoreOutput(\"StructuredLeg PV\")",    
        "> SnT::GetMoreOutput(\"StructuredLeg Clean Price\")",    
        "> SnT::GetMoreOutput(\"FundingLeg PV\")",    
        "> SnT::GetMoreOutput(\"FundingLeg Clean Price\")",    
        "> SnT::GetMoreOutput(\"FundingPV\")",    
        "> pricer_pv",    
        "> schedule_ARRLogDetailByName(\"LEG1\", tradeTerms.Leg1Index_name)",    
        "> schedule_ARRLogDetailByName(\"LEG2\", tradeTerms.Leg2Index_name)",    
        "> standardCashflow.ConsolCF"],
      "CURRENCY" : [
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    null,
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    null,null,null],
      "CATEGORY" : ["Price","Price","Price","Price","Cashflow","Price","Price","Price","Price","Price","Price","Price","Report","Report","Cashflow"],
      "DESCRIPTION" : [null,null,null,null,null,null,"Structured Leg PV (without notional)",null,null,null,null,"The present value of the deal.",null,null,"Consolidated all cash flow with fees included.
>SnT::GetConsolidatedPaymentOutput"],
      "PRI" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]
    }
  },
  "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["AssetClass","DisplayName"],
      "TYPE" : ["String","String"],
      "VALUE" : ["HY","IR Quanto Generic Callable Swap"]
    }
  },
  "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "constfunction SnT::GetMoreOutput(item)",
        "{",
        "    switch on item",
        "        case \"StructuredPV\"",
        "                return implementedObject.view(\"Leg1\")        ",
        "        case \"FundingPV\"",
        "                return implementedObject.view(\"Leg2\")                ",
        "        case \"StructuredLeg PV\"",
        "                return implementedObject.view(\"StructuredLegPV\")             ",
        "        case \"StructuredLeg Clean Price\"",
        "                return implementedObject.view(\"StructuredLegPV\") - implementedObject.view(\"Leg1.ACCRUED\")",
        "        case \"StructuredLeg Accrued Interest\"",
        "                return implementedObject.view(\"Leg1.ACCRUED\")",
        "        case \"FundingLeg PV\"",
        "                return implementedObject.view(\"FundingLegPV\")  ",
        "        case \"FundingLeg Clean Price\"",
        "                return implementedObject.view(\"FundingLegPV\") - implementedObject.view(\"Leg2.ACCRUED\")",
        "        case \"FundingLeg Accrued Interest\"",
        "                return implementedObject.view(\"Leg2.ACCRUED\")",
        "        DEFAULT",
        "            return implementedObject.View(item)",
        "    endswitch",
        "}",
        null,
        "constfunction PaymentEntries",
        "{",
        "    entries= {{\"Coupon\", TradeTerms.Currency, implementedObject.View(\"Leg1Log\")}, {\"Coupon\", TradeTerms.Currency, implementedObject.View(\"Leg2Log\")}}    ",
        "    return entries",
        "}",
        null,
        "//Output Cashflow Table for OVT calculation",
        "constfunction OutputOVTCashflow",
        "{",
        "    //Load the table",
        "    CF = Numerix::Load(standardCashflow.Leg1)",
        "    CF2 = Numerix::Load(standardCashflow.Leg2)    ",
        null,
        "    //Define the columns    ",
        "    Col = {\"cashflowCategory\", \"cashflowType\", \"exDate\", \"fixingDate\", \"accrualStartDate\", \"accrualEndDate\", \"paymentDate\", \"valuationCurrency\", ",
        "            \"valuationPV\", \"valuationAmount\", \"paymentCurrency\", \"paymentPV\", \"paymentAmount\", \"isFixed\", \"dcf\", \"df\", \"sp\", \"notionalCurrency\", ",
        "            \"notional\", \"effectiveRate\", \"spread\", \"isCashSettled\", \"cashSettledFixingDate\", \"cashSettledFixingRate\", \"stdcfDetailID\"}    ",
        "    cashflowCategory = {}",
        "    cashflowType = {}",
        "    exDate = {}",
        "    fixingDate = {}",
        "    accrualStartDate = {}",
        "    accrualEndDate = {}",
        "    paymentDate = {}",
        "    valuationCurrency = {}",
        "    valuationPV = {}",
        "    valuationAmount = {}",
        "    paymentCurrency = {}",
        "    paymentPV = {}",
        "    paymentAmount = {}",
        "    isFixed = {}",
        "    dcf = {}",
        "    df = {}",
        "    sp = {}",
        "    notionalCurrency = {}",
        "    notional = {}",
        "    effectiveRate = {}",
        "    spread = {}",
        "    isCashSettled = {}",
        "    cashSettledFixingDate = {}",
        "    cashSettledFixingRate = {}",
        "    stdcfDetailID = {}",
        null,
        "    //if it exsits",
        "    if CF then",
        "        for i =1 to CF.FIXINGDATE.size",
        "            try Begin cashflowCategory @= CF.cashflowCategory[i] end catch error begin cashflowCategory @= \"\" end            ",
        "            try Begin cashflowType @= CF.cashflowType[i] end catch error begin cashflowType @= \"\" end                   ",
        "            try Begin exDate @= CF.paymentDate[i] end catch error begin exDate @= \"\" end",
        "            try Begin fixingDate @= CF.fixingDate[i] end catch error begin fixingDate @= \"\" end",
        "            try Begin accrualStartDate @= CF.accrualStartDate[i] end catch error begin accrualStartDate @= \"\" end",
        "            try Begin accrualEndDate @= CF.accrualEndDate[i] end catch error begin accrualEndDate @= \"\" end",
        "            try Begin paymentDate @= CF.paymentDate[i] end catch error begin paymentDate @= \"\" end",
        "            try Begin valuationCurrency @= CF.valuationCurrency[i] end catch error begin valuationCurrency @= \"\" end",
        "            try Begin valuationPV @= CF.valuationPV[i] end catch error begin valuationPV @= \"\" end",
        "            try Begin valuationAmount @= CF.valuationAmount[i] end catch error begin valuationAmount @= \"\" end",
        "            try Begin paymentCurrency @= CF.paymentCurrency[i] end catch error begin paymentCurrency @= \"\" end",
        "            try Begin paymentPV @= CF.paymentPV[i] end catch error begin paymentPV @= \"\" end",
        "            try Begin paymentAmount @= CF.paymentAmount[i] end catch error begin paymentAmount @= \"\" end",
        "            try Begin isFixed @= if CF.isFixed[i] = \"Y\" ? \"TRUE\" : \"FALSE\" end catch error begin isFixed @= \"\" end",
        "            try Begin dcf @= CF.dcf[i] end catch error begin dcf @= \"\" end",
        "            try Begin df @= CF.df[i] end catch error begin df @= \"\" end",
        "            try Begin sp @= CF.sp[i] end catch error begin sp @= \"\" end",
        "            try Begin notionalCurrency @= CF.notionalCurrency[i] end catch error begin notionalCurrency @= \"\" end",
        "            try Begin notional @= CF.notional[i] end catch error begin notional @= \"\" end",
        "            try Begin effectiveRate @= CF.effectiveRate[i] end catch error begin effectiveRate @= \"\" end",
        "            try Begin spread @= CF.spread[i] end catch error begin spread @= \"\" end",
        "            try Begin isCashSettled @= if CF.isCashSettled[i] = \"Y\" ? \"TRUE\" : \"FALSE\" end catch error begin isCashSettled @= \"\" end",
        "            try Begin cashSettledFixingDate @= CF.cashSettledFixingDate[i] end catch error begin cashSettledFixingDate @= \"\" end    ",
        "            try Begin cashSettledFixingRate @= CF.cashSettledFixingRate[i] end catch error begin cashSettledFixingRate @= \"\" end  ",
        "            try Begin stdcfDetailID @= CF.stdcfDetailID[i] end catch error begin stdcfDetailID @= \"\" end  ",
        "        next",
        "    endif",
        null,
        "    if CF2 then",
        "        for i =1 to CF2.FIXINGDATE.size",
        "            try Begin cashflowCategory @= CF2.cashflowCategory[i] end catch error begin cashflowCategory @= \"\" end            ",
        "            try Begin cashflowType @= CF2.cashflowType[i] end catch error begin cashflowType @= \"\" end                   ",
        "            try Begin exDate @= CF2.paymentDate[i] end catch error begin exDate @= \"\" end",
        "            try Begin fixingDate @= CF2.fixingDate[i] end catch error begin fixingDate @= \"\" end",
        "            try Begin accrualStartDate @= CF2.accrualStartDate[i] end catch error begin accrualStartDate @= \"\" end",
        "            try Begin accrualEndDate @= CF2.accrualEndDate[i] end catch error begin accrualEndDate @= \"\" end",
        "            try Begin paymentDate @= CF2.paymentDate[i] end catch error begin paymentDate @= \"\" end",
        "            try Begin valuationCurrency @= CF2.valuationCurrency[i] end catch error begin valuationCurrency @= \"\" end",
        "            try Begin valuationPV @= CF2.valuationPV[i] end catch error begin valuationPV @= \"\" end",
        "            try Begin valuationAmount @= CF2.valuationAmount[i] end catch error begin valuationAmount @= \"\" end",
        "            try Begin paymentCurrency @= CF2.paymentCurrency[i] end catch error begin paymentCurrency @= \"\" end",
        "            try Begin paymentPV @= CF2.paymentPV[i] end catch error begin paymentPV @= \"\" end",
        "            try Begin paymentAmount @= CF2.paymentAmount[i] end catch error begin paymentAmount @= \"\" end",
        "            try Begin isFixed @= if CF2.isFixed[i] = \"Y\" ? \"TRUE\" : \"FALSE\" end catch error begin isFixed @= \"\" end",
        "            try Begin dcf @= CF2.dcf[i] end catch error begin dcf @= \"\" end",
        "            try Begin df @= CF2.df[i] end catch error begin df @= \"\" end",
        "            try Begin sp @= CF2.sp[i] end catch error begin sp @= \"\" end",
        "            try Begin notionalCurrency @= CF2.notionalCurrency[i] end catch error begin notionalCurrency @= \"\" end",
        "            try Begin notional @= CF2.notional[i] end catch error begin notional @= \"\" end",
        "            try Begin effectiveRate @= CF2.effectiveRate[i] end catch error begin effectiveRate @= \"\" end",
        "            try Begin spread @= CF2.spread[i] end catch error begin spread @= \"\" end",
        "            try Begin isCashSettled @= if CF2.isCashSettled[i] = \"Y\" ? \"TRUE\" : \"FALSE\" end catch error begin isCashSettled @= \"\" end",
        "            try Begin cashSettledFixingDate @= CF2.cashSettledFixingDate[i] end catch error begin cashSettledFixingDate @= \"\" end    ",
        "            try Begin cashSettledFixingRate @= CF2.cashSettledFixingRate[i] end catch error begin cashSettledFixingRate @= \"\" end  ",
        "            try Begin stdcfDetailID @= CF2.stdcfDetailID[i] end catch error begin stdcfDetailID @= \"\" end   ",
        "        next                ",
        "    endif",
        null,
        "    //Create the table",
        "    Table1 = Numerix::Table(\"OVTTable\" + Numerix::UniqueNumber, Col, {cashflowCategory.transpose, cashflowType.transpose, exDate.transpose, fixingDate.transpose,",
        "                    accrualStartDate.transpose, accrualEndDate.transpose, paymentDate.transpose, valuationCurrency.transpose, valuationPV.transpose, valuationAmount.transpose,",
        "                    paymentCurrency.transpose, paymentPV.transpose, paymentAmount.transpose, isFixed.transpose, dcf.transpose, df.transpose, sp.transpose, notionalCurrency.transpose,",
        "                    notional.transpose, effectiveRate.transpose, spread.transpose, isCashSettled.transpose, cashSettledFixingDate.transpose, cashSettledFixingRate.transpose, stdcfDetailID.transpose})",
        "    //Output Table ID",
        "    return Table1.create",
        "}"]
    }
  },
  "DEFINITION.CALLABLESWAPPRICERBASE.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "DEFAULT" : [],
      "GROUPING" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.CALLABLESWAPPRICERBASE.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Swap","Option","Leg 1 PV","Leg1 Clean Price","Leg1 Accrued Interest","Leg 2 PV","Leg2 Clean Price","Leg2 Accrued Interest","Notes PV","Funding PV","Call Probability","Put Probability","Expected Maturity Date","Expected Maturity","PV","Leg 1 Cash Flow Detail","Leg 2 Cash Flow Detail"],
      "TYPE" : ["Double","Double","Double","Double","Double","Double","Double","Double","Double","Double","Table()","Table()","Date","Double","Double","Table()","Table()"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,false],
      "ID" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "HEADER" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "VALUE" : ["View.Swap",
        "> implementedObject.view(\"CallOption\") + implementedObject.view(\"PutOption\")",    "view.Leg1","view.Leg1.Clean","view.Leg1.Accrued","view.Leg2","view.Leg2.Clean","view.Leg2.Accrued","view.NotesPV","view.FundingPV",
        "> ProbLog2(tradeTerms.CallableDates_evt, implementedObject.view(\"CallProbs\"), \"Call Probability\")",    
        "> ProbLog2(tradeTerms.PuttableDates_evt, implementedObject.view(\"PutProbs\"), \"Put Probability\")",    
        "> ExpectedMaturityDate({tradeTerms.CallableDates_evt, tradeTerms.PuttableDates_evt}, {implementedObject.view(\"CallProbs\"), implementedObject.view(\"PutProbs\")}, tradeTerms.EndDate)",    
        "> ExpectedMaturity({tradeTerms.CallableDates_evt,tradeTerms.PuttableDates_evt}, {implementedObject.view(\"CallProbs\"),implementedObject.view(\"PutProbs\")}, tradeTerms.EndDate)",    
        "> pricer_pv",    
        "> schedule_ARRLogDetailByName(\"LEG1\", tradeTerms.Leg1Index_name)",    
        "> schedule_ARRLogDetailByName(\"LEG2\", tradeTerms.Leg2Index_name)"],
      "CURRENCY" : [
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    
        "> PvCurrency",    null,null,null,null,
        "> PvCurrency",    null,null],
      "CATEGORY" : ["Price","Price","Price","Price","Price","Price","Price","Price","Price","Price","Report","Report","Report","Report","Price","Report","Report"],
      "DESCRIPTION" : [null,null,null,null,"The present value of the deal.",null,null,"The present value of the deal.",null,null,null,null,"Expected maturity Date, Expected Termination Date, Option Adjusted Maturity.","Expected maturity, Expected Termination year fraction, Option Adjusted Maturity","The present value of the deal.",null,null],
      "PRI" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]
    }
  },
  "DEFINITION.CALLABLESWAPPRICERBASE.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CALLABLESWAPPRICERBASE.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CALLABLESWAPPRICERBASE.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        null,
        "// return cashflow of the Callable Swap",
        "constfunction standardCashflow_callFunction",
        "{",
        "    keys = {}",
        "    vals ={}",
        "    l1 = ImplementedObject.view(\"LEG1LOG\")",
        "    l2 = ImplementedObject.view(\"LEG2LOG\")",
        "    l3 = ImplementedObject.view(\"ConsolLog\")",
        "    if l1",
        "    {",
        "        keys @= \"LEG1\"",
        "        vals @= l1",
        "    }",
        "    if l2",
        "    {",
        "        keys @= \"LEG2\"",
        "        vals @= l2",
        "    }",
        "    if l3",
        "    {",
        "        keys @= \"ConsolCF\"",
        "        vals @= l3",
        "    }",
        null,
        "    return if keys ? Numerix::Map(keys, vals) : {}",
        "}",
        "// return rounding rules",
        "constfunction standardCashflow_roundingRules",
        "{",
        "    return {{TradeTerms.leg1RoundingType, TradeTerms.leg1RoundingDecimal},{TradeTerms.leg2RoundingType,TradeTerms.leg2RoundingDecimal}}",
        "}",
        "// pv currency",
        "constfunction PvCurrency",
        "{",
        "    return if TradeTerms.Currency ? TradeTerms.Currency : TradeTerms.Leg1NotionalCurrency",
        "}",
        "constfunction pricer_pv",
        "{",
        "    return ImplementedObject.view(\"PV\")",
        "}",
        "// return probability from a log",
        "constfunction probLog(RefLog, newHeader)",
        "{",
        "    ifnot RefLog:",
        "        return \"\"",
        null,
        "    Dates = Numerix::Date(Numerix::query(RefLog, \"DATES=<Date>\", \"Date\").Date)",
        "    Vals = Numerix::query(RefLog, \"ACTUAL=<Double>\", \"ACTUAL\").ACTUAL",
        "    return Numerix::Table(NxStd::MakeID(\"table\"), {\"Dates\", newHeader}, {Dates,Vals}).create",
        "}",
        "// return probability report from an event and Datearray",
        "constfunction ProbLog2(RefEvt, Data, newHeader, isCall = true)",
        "{",
        "    ifnot RefEvt:",
        "        return \"\"",
        "    ifnot Data:",
        "        return \"\"",
        null,
        "    Dates = Numerix::Date(Numerix::query(RefEvt, \"FIXDATE=<Date>\", \"Date\").DATE)",
        "    ifnot Dates is \"LIST\":",
        "        Dates = {Dates}",
        "    Dates @= if isCall ? \"Non call\":\"Non Put\"",
        "    vals = {}",
        "    table = Numerix::Load(Data)",
        "    foreach t in table:",
        "        vals @= Numerix::TableValue(Data, 1, t.iteration)",
        null,
        "    return Numerix::Table(NxStd::MakeID(\"table\"), {\"Dates\", newHeader}, {Dates,Vals}).create",
        "}",
        null,
        "// return maturity if no soft/hard callable, otherwise return the call probability weighted termination date",
        "constfunction ExpectedMaturityDate(RefEvt, DataID, EndDate)",
        "{",
        "    if EndDate < ValueDate:",
        "        return EndDate",
        "    ifnot DataID:",
        "        return EndDate",
        "    DataID_ = if DataID is \"LIST\" ? DataID : {DataId}",
        "    RefEvt_ = if RefEvt is \"LIST\" ? RefEvt : {RefEvt}",
        null,
        "//    ifnot DataID.exists:",
        "//        return EndDate",
        "//    ifnot RefEvt: ifnot Numerix::TableColumnHeaders(DataID).find(\"DATES\"):",
        "//        return EndDate",
        null,
        null,
        "    resArr = {}",
        null,
        "    foreach dID in DataID_",
        "    {",
        "        ifnot RefEvt_[dID.iteration]:ifnot Numerix::TableColumnHeaders(dID).find(\"DATES\"):",
        "        {",
        "            resArr @= Numerix::Double(EndDate)",
        "            continue",
        "        }",
        null,
        "        // Try to pick the value defined in the list, otherwise pick the last column items as output",
        "        headers = Numerix::TableColumnHeaders(dID)",
        "        Targets = {\"ACTUAL\", \"VALUE\"}",
        "        h = {}",
        "        foreach t in Targets:",
        "        if headers.canonical.find(t)",
        "        {",
        "            h = t",
        "            break",
        "        }",
        "        ifnot h:",
        "            h = headers[headers.size]",
        null,
        "        probs = NxStd::GetOutputValue(dID, h)",
        null,
        "        // Dates size might be smaller than values",
        "        Dates = if RefEvt_[dID.iteration] ? NxStd::GetOutputValue(RefEvt_[dID.iteration], \"PAY DATE\") : NxStd::GetOutputValue(dID, \"DATES\")",
        "        ifnot Dates is \"LIST\":",
        "            Dates = {Dates}",
        null,
        "        Dates = Numerix::Double(Dates)",
        null,
        "        //Calculate the expected default date before maturity",
        "        AccProb = 0",
        "        res = 0",
        "        foreach d in Dates",
        "        {",
        "            res += probs[d.iteration] * d",
        "            AccProb += probs[d.iteration]",
        "        }",
        "        //If no default, the call date = maturity",
        "        res += (1 - AccProb) * Numerix::Double(EndDate)",
        null,
        "        resArr @= res",
        "    }",
        null,
        "    // return the min of expected date of call probas and put probas ",
        "    temp = {}",
        "    foreach r in resArr:",
        "        temp = if temp ? min(r, temp) : r",
        null,
        "    return Numerix::Date(round(temp, 0, NEAREST))",
        "}",
        "// Convert ",
        "constfunction ExpectedMaturity(RefEvt, DataID, EndDate, basis=\"ACT/365\")",
        "{",
        "    dates = ExpectedMaturityDate(RefEvt, DataID, EndDate)",
        "    dcf = Numerix::GetDCF(ValueDate, Dates, basis)",
        "    return if dcf ? dcf : 0",
        "}",
        null,
        "//common function to get the sum of PVs with criteria",
        "constfunction getSumFromCF(cashFlowList, valueName, CFType=\"\", variant=\"\")",
        "{",
        "    ifnot cashFlowList is \"LIST\":",
        "        cashFlowList = {cashFlowList}",
        null,
        "    sum = 0",
        "    foreach cf in cashFlowList",
        "    {",
        "        ifnot cf:",
        "            continue",
        "        ifnot cf.exists:",
        "            continue",
        null,
        "        criterial = valueName + \"=<Value:DOUBLE>\"",
        "        if CFType:",
        "            criterial = \"DESCRIPTION=\"+CFType + \",\" + criterial",
        "        if variant:",
        "            criterial += \",\" + variant",
        "        try",
        "        {",
        "            c = Numerix::Query(cf,criterial, \"Value\")",
        "        }catch error",
        "        {",
        "            continue",
        "        }",
        null,
        "        valueList = c.load.value",
        "        foreach v in valueList:",
        "            sum += v",
        null,
        "    }",
        "    return sum",
        "}"]
    }
  },
  "DEFINITION.KERNELPRICER.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Quality","Method","Model Template","Model Parameters","Accrual Resets On","Greeks Products","Use Adaptations","Compute Mode","CSA Discount Curve","Use CSA Discounting"],
      "TYPE" : ["Double|Table(DEFINITION.KERNELPRICER.QUALITYSPEC)","String","ID","String","String","String|Table(DEFINITION.KERNELPRICER.GREEKSPRODUCTS)","Boolean","String","ID","Boolean"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [1,null,null,null,null,null,null,"Immediate",null,null],
      "GROUPING" : ["Pricing Parameters","Pricing Parameters","Pricing Parameters","Pricing Parameters","Pricing Parameters","Pricing Parameters","Pricing Parameters","Pricing Parameters",null,null],
      "DESCRIPTION" : ["Heading is a guideline and its meaning is specific to particular model/method pairs. It pertains to the accuracy of simulation and defines the parameters of simulation to improve quality.","Pricing method.","The ID of the model template. Typically supplied by the pricing policy.","The parameters to be passed to the model template encoded as an NXSL string. Typically supplied by the pricing policy.","Indicates when the accrued interest is reset to zero; it identifies the end of the period for the purpose of calculating accrued interest.  Choices are 'END DATE' and 'PAYMENT'.",null,"Adaptations are cached regression basis functions when the pricing method is
Backward MC or grids when the pricing method is BackwardFinDiff. They are used
for rollbacks. See Object Reference for details.","Indicates when the pricing calculation will occur. Choices are 'IMMEDIATE' and 'DEFERRED'.",null,null]
    }
  },
  "DEFINITION.KERNELPRICER.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["PV"],
      "TYPE" : ["Double"],
      "REQUIRED" : [true],
      "ID" : [null],
      "HEADER" : [null],
      "VALUE" : ["View.PV"],
      "CURRENCY" : [
        ">if TradeTerms.Currency ? TradeTerms.Currency : TradeTerms.FX.TermCurrency"],
      "CATEGORY" : ["Price"],
      "DESCRIPTION" : ["The present value of the deal."],
      "PRI" : [null]
    }
  },
  "DEFINITION.KERNELPRICER.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.KERNELPRICER.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.KERNELPRICER.QUALITYSPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "PATHS" : ["DOUBLE"],
      "TIMESTEPS" : ["DOUBLE"],
      "SEED" : ["DOUBLE"]
    }
  },
  "DEFINITION.KERNELPRICER.GREEKSPRODUCTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "PRODUCTS" : [
        "String"]
    }
  },
  "DEFINITION.KERNELPRICER.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        "define pricingmodel = Numerix::MarketResolve(\"\", Numerix::Execute(ModelParameters), ModelTemplate) ",
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        null,
        "constfunction main",
        "{",
        "    call = Numerix::Object({\"pricer\", \"KERNEL\", \"PRICE\"}) &",
        "    {",
        "        \"nowdate\"            : Numerix::MarketDate,",
        "        \"quality\"            : Quality,",
        "        \"model\"              : pricingmodel,",
        "        //\"mcconcurrency\"        : 8,",
        "        \"compute mode\"       : ComputeMode,",
        "        \"use adaptations\"    : UseAdaptations,",
        "        \"greeks products\"    : GreeksProducts,",
        "        \"include value date\" : IncludeValuationDate,",
        "        \"accrual resets on\"  : AccrualResetsOn",
        "    }",
        "    if kernel_iscpd :",
        "        call &=",
        "        {",
        "            \"forward component\"  : TradeTerms.forwardcomponent,   ",
        "            \"backward component\" : TradeTerms.ImplementedObject",
        "        }",
        "    else :",
        "        call &= ",
        "        {",
        "            \"components\"    : TradeTerms.ImplementedObject,",
        "            \"method\"        : if Method ? Method : kernel_pricingmethod",
        "        }",
        null,
        "    if TradeTerms.Implements(\"statesinfo\") :",
        "        call &= {\"states info\" :  TradeTerms.statesinfo}",
        null,
        "    //add CSA Discount Curve if it's turned on and supported",
        "    if kernel_csadiscounting :",
        "        call &= {\"csa discount curve\" : if CSADiscountCurve ? CSADiscountCurve : NxStd::CSADiscountCurveID(PricingModel.ImplementedObject.CurrencyInput,TradeTerms.Counterparty,TradeTerms.LegalEntity,TradeTerms.NettingSet,TradeTerms.MarginSet)}        ",
        null,
        null,
        "    return call.create",
        "}",
        null,
        "constfunction main_noncr",
        "{",
        "    call = Numerix::Object({\"pricer_noncr\", \"KERNEL\", \"PRICE\"}) &",
        "    {",
        "        \"nowdate\"            : Numerix::MarketDate,",
        "        \"quality\"            : Quality,",
        "        \"model\"              : pricingmodel,",
        "        \"compute mode\"       : ComputeMode,",
        "        \"use adaptations\"    : UseAdaptations,",
        "        \"greeks products\"    : GreeksProducts,",
        "        \"include value date\" : IncludeValuationDate,",
        "        \"accrual resets on\"  : AccrualResetsOn",
        "    }",
        "    if kernel_iscpd :",
        "        call &=",
        "        {",
        "            \"forward component\"  : TradeTerms.forwardcomponent,   ",
        "            \"backward component\" : TradeTerms.ImplementedObject",
        "        }",
        "    else :",
        "        call &= ",
        "        {",
        "            \"components\"    : TradeTerms.terms_noncr,",
        "            \"method\"        : if Method ? Method : kernel_pricingmethod",
        "        }",
        null,
        "    if TradeTerms.Implements(\"statesinfo\") :",
        "        call &= {\"states info\" :  TradeTerms.statesinfo}",
        null,
        "    return call.create",
        "}",
        null,
        "//determines the default pricing method.  ",
        "//if the model is deterministic, use ANALYTIC, otherwise MC.",
        "function kernel_pricingmethod",
        "{",
        "    result = \"BACKWARDANALYTIC\"",
        null,
        "    //determines the direction of the payoffscript",
        "    payoff = TradeTerms.ImplementedObject.view(\"Call Values\")[TradeTerms.ImplementedObject.view(\"Call Headers\").Canonical.find(\"PAYOFF\")]",
        "    payoffheaders = payoff.view(\"Call Headers\").Canonical",
        "    payoffvalues = payoff.view(\"Call Values\").Canonical",
        "    payoffdirection = PayoffValues[PayoffHeaders.find(\"DIRECTION\")]",
        null,
        "    //determines whether the model is deterministic",
        "    modeltype = pricingmodel.ImplementedObject.ModelInput",
        null,
        "    if modeltype ==#\"DETERMINISTIC\" :",
        "        result = if payoffdirection ==#\"FORWARD\" ? \"FORWARDANALYTIC\" : \"BACKWARDANALYTIC\"",
        null,
        "    else :",
        "        result = if payoffdirection ==#\"FORWARD\" ? \"FORWARDMC\" : \"BACKWARDMC\"",
        null,
        null,
        "    return result",
        "}",
        null,
        null,
        "//determines whether to use CSA Discount Curve or not",
        "function kernel_csadiscounting",
        "{",
        "    result = false",
        null,
        "    //get the asset class of the model used.",
        "    asset_class = pricingmodel.ImplementedObject.TypeInput",
        "    support_csadiscounting = true",
        null,
        "    //currently, only IR and HY models support CSA Discounting.",
        "    if asset_class ==#\"CR\" :",
        "        support_csadiscounting = false",
        null,
        "    //if CSA Discounting is turned on, if the version is on or after CrossAsset 15.6, and if the counterparty exists, then use CSA Discounting.",
        "    if UseCSADiscounting : if NxStd::CompareVersion(\"15.6\") : if support_csadiscounting :  ",
        "        result = true",
        null,
        "    return result",
        null,
        "}",
        null,
        "//determines whether the deal is a CPD deal",
        "function kernel_iscpd",
        "{",
        "    result = false",
        null,
        "    //a CPD deal is required to have its forward component named as forwardcomponent.",
        "    if TradeTerms.Implements(\"forwardcomponent\") :",
        "        result = true",
        null,
        "    return result    ",
        "}"]
    }
  },
  "DEFINITION.PRICERBASE.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Trade Terms","Include Valuation Date","Fee Filter","Quote Type","Value Date","Reporting Currency"],
      "TYPE" : ["ID","Boolean","Table(DEFINITION.PRICERBASE.VALUESPEC)","String","Date","Currency"],
      "REQUIRED" : [true,false,false,false,false,false],
      "DEFAULT" : [null,false,null,"MID",
        "> Numerix::MarketDate",    null],
      "GROUPING" : ["Pricing Parameters","Pricing Parameters","Pricing Parameters","Pricing Parameters","Pricing Parameters",null],
      "DESCRIPTION" : ["The ID of a Trade Terms instance.","Indicates whether the payment on the VALUE DATE is included in the dirty price for the purpose of calculating accrued interest. ","The list of fee type that exclude from NPV/exposure",null,"Valuation Date",null]
    }
  },
  "DEFINITION.PRICERBASE.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Capital Parameters","NPV","Premium PV","Quote Dependencies","Quote Dependencies Map","Fee PV","Event PV","Fee Cashflow","Leg 1 Cash Flow","Leg 2 Cash Flow","Leg 1 Cash Flow Detail","Leg 2 Cash Flow Detail","Reporting PV","FXT0RATE","Outstanding Notional"],
      "TYPE" : ["Table()","Double","Double","Table()","Table()","Double","Double","Table()","Table()","Table()","Table()","Table()","Double","Double","Double"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "ID" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "HEADER" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "VALUE" : [
        ">NxStd::RegulatoryCapital(TradeTerms,ImplementedObject)",    
        "> final_pv.NPV",    
        "> final_pv.PREMIUM_PV",    
        ">Numerix::ExportQuotes(this.allquotes)",    
        ">Numerix::ExportQuotes(this.allquotesmap)",    
        "> final_pv.FEE_PV",    
        "> final_pv.EVENT_PV",    
        "> standardCashflowFee.CASHFLOWS",    
        "> standardCashflow.LEG1",    
        "> standardCashflow.LEG2",    
        "> schedule_detail(1)",    
        "> schedule_detail(2)",    
        ">reporting_pv",    
        "> NxStd::GetFXT0(ReportingCurrency, main_currency)",    
        ">outstanding_notional"],
      "CURRENCY" : [null,
        ">main_currency",    
        ">main_currency",    null,null,
        ">main_currency",    
        ">main_currency",    null,null,null,null,null,
        ">ReportingCurrency",    null,
        ">main_currency"],
      "CATEGORY" : ["Report","Price","Price",null,null,"Price","Price","Cashflow","Cashflow","Cashflow","Report","Report","Price","Price","Price"],
      "DESCRIPTION" : ["The result for regulatory capital parameters, if a regulatory policy is supplied.  It is used for capital related calculations.",null,null,null,null,null,null,null,null,null,null,null,null,null,null],
      "PRI" : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]
    }
  },
  "DEFINITION.PRICERBASE.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.PRICERBASE.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.PRICERBASE.VALUESPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "VALUE" : [
        null]
    }
  },
  "DEFINITION.PRICERBASE.PV_NAME_DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Terms Name" : ["TERMS.EQ.EQUITYSWAP","TERMS.IR.CMSSWAP"],
      "is Multiply BuySell" : [false,false],
      "PV Name" : ["ACCPV","SWAP"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_ASSIGNMENT": {
    "TYPE" : "DATA",
    "TABLE" : {
      "KEY" : ["KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","KERNEL_PRICE","ANALYTIC_FXFWD","ANALYTIC_FXSWAP","ANALYTIC_UNIVERSALSWAP","ANALYTIC_EUROPEANOPTION","ANALYTIC_AMERICANOPTION","ANALYTIC_EUROPEANOPTION","PRICER_EQOPTIONPRICER","PRICER_INSTRUMENTPRICER","ANALYTIC_EQFUTURE","ANALYTIC_RATEFUTURES","ANALYTIC_BONDFUTURES","ANALYTIC_CMDTYFUTURE","ANALYTIC_BOND","ANALYTIC_FLOATINGRATENOTE","ANALYTIC_CAPFLOOR","ANALYTIC_CDS","ANALYTIC_VARIANCESWAP"],
      "TEMPLATE NAME" : ["TERMS.IR.CORPORATEBOND","TERMS.IR.SOVEREIGNBOND","TERMS.IR.FLOATINGRATENOTE","TERMS.HY.CALLABLEZEROBOND","TERMS.HY.CRCMSNOTES","TERMS.HY.CRRANOTES","TERMS.HY.CRSWITCHNOTES","TERMS.HY.CRFUNDINDEXNOTES","TERMS.HY.FXCALLABLEDIGITALCOUPONNOTE","TERMS.HY.CMSVARICAPNOTES","TERMS.HY.EQFXRASWAP","TERMS.HY.EQAUTOCALLABLE","TERMS.HY.IRINVFLOATSWAP","TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP","*","*","*","*","TERMS.FX.EUROPEAN","*","TERMS.EQ.EUROPEAN","*","*","*","*","*","*","*","*","*","*","*"],
      "MAPPING" : ["STDCF_MAP_BOND","STDCF_MAP_BOND","STDCF_MAP_FRN","STDCF_MAP_KERNEL_BOND","STDCF_MAP_KERNEL_BOND","STDCF_MAP_KERNEL_BOND","STDCF_MAP_KERNEL_BOND","STDCF_MAP_KERNEL_BOND","STDCF_MAP_KERNEL_BOND","STDCF_MAP_KERNEL_BOND","STDCF_MAP_KERNEL_BOND","STDCF_MAP_KERNEL","STDCF_MAP_KERNEL","STDCF_MAP_KERNEL","STDCF_MAP_KERNEL","STDCF_MAP_FXFORWARD","STDCF_MAP_FXSWAP","STDCF_MAP_UNIVERSALSWAP","STDCF_MAP_OPTION","STDCF_MAP_OPTION","STDCF_MAP_OPTION","STDCF_MAP_OPTION","STDCF_MAP_OPTION","STDCF_MAP_FUTURE","STDCF_MAP_FUTURE","STDCF_MAP_FUTURE","STDCF_MAP_FUTURE","STDCF_MAP_BOND","STDCF_MAP_FRN","STDCF_MAP_CAPFLOOR","STDCF_MAP_CDS","STDCF_MAP_EQVARIANCESWAP"],
      "CALL FUNCTION" : ["standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction","standardCashflow_callFunction"],
      "LEG NAMES" : ["LEG1","LEG1","LEG1","LEG1,ConsolCF","LEG1,ConsolCF","LEG1,ConsolCF","LEG1,ConsolCF","LEG1,ConsolCF","LEG1,ConsolCF","LEG1,LEG2,ConsolCF","LEG1,LEG2,ConsolCF","LEG1,LEG2,ConsolCF","LEG1,LEG2,ConsolCF","LEG1,LEG2,ConsolCF","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1,LEG2","LEG1","LEG1","LEG1","LEG1,LEG2","LEG1,LEG2"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_FEE": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","fixingDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional","isCashSettled","cashSettledFixingDate","cashSettledFixingRate"],
      "REFER TO" : ["STATIC","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","STATIC","STATIC","STATIC","STATIC","STATIC","FUNCTION"],
      "VALUE" : [true,"CATEGORY","DESCRIPTION","Fix Date","Pay Date","Payout CCY,Currency","pv,Pv in Payout CCY","Actual,Actual in payout CCY","Leg CCY,Currency","pv,Pv in Leg CCY","Actual,Actual in Leg CCY",null,null,null,true,null,"FxForward"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_FXSWAP": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","fixingDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional","isCashSettled","cashSettledFixingDate","cashSettledFixingRate"],
      "REFER TO" : ["FUNCTION","CATEGORY","STATIC","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","STATIC","STATIC","STATIC"],
      "VALUE" : ["isFixed","LEG","NTL","paymentDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional",false,null,null]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_UNIVERSALSWAP": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","fixingDate","accrualStartDate","accrualEndDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","dcf","daycount","df","notionalCurrency","notional","effectiveRate","spread","multiplier","isCashSettled","cashSettledFixingDate","cashSettledFixingRate","stdcfDetailID"],
      "REFER TO" : ["FUNCTION","CATEGORY","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","static","static","static","FUNCTION"],
      "VALUE" : ["isFixed","LEG","flowType","Fix Date","accrual start","accrual end","Pay Date","Payout CCY","pv,Pv in Payout CCY","Actual,Actual in payout CCY","Leg CCY","pv,Pv in Leg CCY","Actual,Actual in Leg CCY","accrual period dcf","day count","df","Leg CCY","Notional","fixing rate","Spread","Rate multiplier",null,null,null,"stdcfDetailID"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_OPTION": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","fixingDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional","isCashSettled","cashSettledFixingDate","cashSettledFixingRate"],
      "REFER TO" : ["FUNCTION","CATEGORY","STATIC","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION"],
      "VALUE" : ["isFixed","LEG","INT","fixingDate","PaymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional","isCashSettled","cashSettledFixingDate","cashSettledFixingRate"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_BOND": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","exDate","accrualStartDate","accrualEndDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","dcf","daycount","df","sp","notionalCurrency","notional","effectiveRate","spread","multiplier"],
      "REFER TO" : ["STATIC","CATEGORY","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION"],
      "VALUE" : [true,"LEG","cashflowType","ex Date","accrual start","accrual end","Pay Date","paymentCurrency","paymentPV","Coupon,paymentAmount","paymentCurrency","paymentPV","Coupon,paymentAmount","dcf","daycount","df","SP","paymentCurrency","notional","coupon Rate","spread","multiplier"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_FRN": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","exDate","fixingDate","accrualStartDate","accrualEndDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","dcf","daycount","df","sp","notionalCurrency","notional","effectiveRate","spread","multiplier","cap","floor","stdcfDetailID"],
      "REFER TO" : ["FUNCTION","CATEGORY","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION"],
      "VALUE" : ["isFixed","LEG","cashflowType","ex Date","fix date","accrual start","accrual end","Pay Date","paymentCurrency","paymentPV","Coupon,paymentAmount","paymentCurrency","paymentPV","Coupon,paymentAmount","dcf","daycount","df","sp","paymentCurrency","notional","coupon Rate","spread","multiplier","cap","floor","stdcfDetailID"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_CAPFLOOR": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","fixingDate","accrualStartDate","accrualEndDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","PaymentAmount","dcf","daycount","df","notionalCurrency","notional","delta","gamma","vega","vanna","volga","theta","swapBPV","swapRate","capletVol","strike","stdcfDetailID"],
      "REFER TO" : ["FUNCTION","CATEGORY","STATIC","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION"],
      "VALUE" : ["isFixed","LEG","OPT","fixDate","accrualStart","accrualEnd","payDate","currency","paymentPV","cashFlow","currency","paymentPV","cashFlow","dcf","daycount","df","currency","notional","capletDelta","capletGamma","capletVega","capletVanna","capletVolga","capletTheta","swapBPV","swapRate","capletVol","strike","stdcfDetailID"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_FXFORWARD": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","fixingDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional","isCashSettled","cashSettledFixingDate","cashSettledFixingRate"],
      "REFER TO" : ["FUNCTION","CATEGORY","STATIC","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION"],
      "VALUE" : ["isFixed","LEG","NTL","paymentDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional","isCashSettled","cashSettledFixingDate","cashSettledFixingRate"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_FUTURE": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","fixingDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional"],
      "REFER TO" : ["STATIC","CATEGORY","STATIC","FUNCTION","FUNCTION","FUNCTION","STATIC","FUNCTION","FUNCTION","STATIC","FUNCTION","STATIC","FUNCTION","FUNCTION"],
      "VALUE" : [false,"LEG","INT","fixingDate","PaymentDate","paymentCurrency",0,"paymentAmount","paymentCurrency",0,"paymentAmount",0,"paymentCurrency","Notional"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_CDS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","accrualStartDate","accrualEndDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","dcf","daycount","df","sp","pd","notionalCurrency","notional"],
      "REFER TO" : ["FUNCTION","CATEGORY","STATIC","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION WITH ROUNDING","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION"],
      "VALUE" : ["isFixed","LEG","INT","accrual start","accrual end","PayDate","Currency","valuationPV","paymentAmount","Currency","valuationPV","paymentAmount","dcf","day count","df","sp","pd","Currency","Notional"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_KERNEL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","fixingDate","accrualStartDate","accrualEndDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","dcf","daycount","df","sp","notionalCurrency","notional","effectiveRate","spread","multiplier","basket performance","index1","index2","index3","RAfactor","Quantity1","FXReset","stdcfDetailID"],
      "REFER TO" : ["FUNCTION Y/N","CATEGORY","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","PROPERTY","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION WITH ROUNDING","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION GEN DETAIL"],
      "VALUE" : ["FIXING","LEG","DESCRIPTION","FIXING DATE","ACCRUAL START DATE","ACCRUAL END DATE","PAYMENT DATE","Pricing Currency","PAYMENT PV","PAYMENT ACTUAL DOM CCY","CURRENCY","PAYMENT PV PMT CCY","PAYMENT ACTUAL","DCF","DAY COUNT","DF","SP","CURRENCY","NOTIONAL","EFFECTIVERATE,COUPON","SPREAD","MULTIPLIER","BSK INDEX","INDEX1","INDEX2","INDEX3","RAFACTOR","QUANTITY1","FXRESET","hasStdcfDetail"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_KERNEL_BOND": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","exDate","fixingDate","accrualStartDate","accrualEndDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","dcf","daycount","df","sp","notionalCurrency","notional","effectiveRate","spread","multiplier","basket performance","index1","index2","index3","RAfactor","Quantity1","FXReset","stdcfDetailID"],
      "REFER TO" : ["FUNCTION Y/N","CATEGORY","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","PROPERTY","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION WITH ROUNDING","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION GEN DETAIL"],
      "VALUE" : ["FIXING","LEG","DESCRIPTION","PAYMENT DATE","FIXING DATE","ACCRUAL START DATE","ACCRUAL END DATE","PAYMENT DATE","Pricing Currency","PAYMENT PV","PAYMENT ACTUAL DOM CCY","CURRENCY","PAYMENT PV PMT CCY","PAYMENT ACTUAL","DCF","DAY COUNT","DF","SP","CURRENCY","NOTIONAL","EFFECTIVERATE,COUPON","SPREAD","MULTIPLIER","BSK INDEX","INDEX1","INDEX2","INDEX3","RAFACTOR","QUANTITY1","FXRESET","hasStdcfDetail"]
    }
  },
  "DEFINITION.PRICERBASE.STDCF_MAP_EQVARIANCESWAP": {
    "TYPE" : "DATA",
    "TABLE" : {
      "OUTPUT NAME" : ["isFixed","cashflowCategory","cashflowType","fixingDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional"],
      "REFER TO" : ["FUNCTION","CATEGORY","STATIC","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION","FUNCTION"],
      "VALUE" : ["isFixed","LEG","NTL","fixingDate","paymentDate","valuationCurrency","valuationPV","valuationAmount","paymentCurrency","paymentPV","paymentAmount","df","notionalCurrency","notional"]
    }
  },
  "DEFINITION.PRICERBASE.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        "define fee_terms = TradeTerms.fee_term(Numerix::Load(FeeFilter).VALUE)",
        null,
        "constfunction fee_pricer",
        "{",
        "    fee_component_id = fee_terms",
        "    if not fee_component_id:",
        "        return {}",
        null,
        "    fee_component = Numerix::Load(fee_component_id)",
        "    fee_pricer_ID = \"fee_pricer\"",
        null,
        "    //Default",
        "    fee_isSingleCurr    = true",
        null,
        "    fee_curr = fee_component.Currency.canonical",
        null,
        "    // main pricer",
        "    //fee_main = Numerix::Load(main)",
        null,
        "    // check if the list of fees has more than 1 currency",
        "    for i=1 to Numerix::Load(fee_component.legs).size",
        "    {",
        "        if Numerix::Load(fee_component.legs.LEGID[i]).Currency.canonical != fee_curr:",
        "        {",
        "            fee_isSingleCurr = false",
        "            break",
        "        }",
        "    }",
        null,
        "    // Analytic method",
        "    call = Numerix::Object({fee_pricer_ID, \"Analytic\", \"UNIVERSALSWAP\"}) & ",
        "    {",
        "        \"nowdate\"                   : ValueDate,",
        "        \"universal swap\"            : fee_component_id,",
        "        \"include Value Date\"        : IncludeValuationDate,",
        "        \"accrual resets on\"         : fee_getAccrualResetsOn,",
        "        \"pricing details\"           : \"CashFlow BreakDown\"",
        "    }",
        null,
        "    if fee_isSingleCurr",
        "    {",
        "        if fee_UseCSADiscounting :",
        "            call &= {\"domestic yield curve\" : NxStd::CSADiscountCurveID(fee_curr, TradeTerms.Counterparty, TradeTerms.LegalEntity, TradeTerms.NettingSet, TradeTerms.MarginSet)}",
        "        else :",
        "            call &= {\"domestic yield curve\" : NxStd::DiscountCurveID(Fee_curr)}",
        "    }",
        "    else",
        "    {",
        "        fee_default_curvetable_ = fee_default_curvetable",
        "        call &=",
        "        {",
        "            \"currency\"             : fee_curr,",
        "            \"curves table\"         : fee_default_curvetable_,",
        "            \"spot price\"           : fee_default_spotprice",
        "        }        ",
        "    }",
        null,
        "    return call.create",
        "}",
        null,
        "function reporting_pv",
        "{",
        "    if main_currency",
        "    {",
        "        if ReportingCurrency",
        "        {",
        "            if main_currency == ReportingCurrency:",
        "                return final_pv.NPV",
        null,
        "            else",
        "            {",
        "                fx0 = NxStd::GetFXT0(ReportingCurrency, main_currency)",
        null,
        "                return final_pv.NPV*fx0",
        "            }",
        "        }",
        "        else:",
        "            Numerix::SetMajor(\"No Reporting PV available for this trade\")",
        "    }",
        "    else:",
        "        Numerix::SetMajor(\"No Reporting PV available for this trade\")",
        null,
        "    return 0",
        "}",
        null,
        "// get pv from pricer",
        "constfunction pricer_pv",
        "{",
        "    // try ouput_pv",
        "    try",
        "    {",
        "        return output_pv",
        "    }",
        null,
        "    catch error{}",
        null,
        "    // try find thru PV_NAME_DATA table",
        "    key = trade_terms_key",
        null,
        "    table=Numerix::load(\"DEFINITION.PRICERBASE.PV_NAME_DATA\")",
        null,
        "    i=table.TermsName.find(key)",
        null,
        "    if i>0",
        "    {",
        "        if table.isMultiplyBuySell[i]:",
        "            return ImplementedObject.View(table.pvname[i])*(if tradeterms.BuySell==#\"BUY\"?1:-1)",
        "        else:",
        "            return ImplementedObject.View(table.pvname[i])",
        "    }else   // find PV names in following list",
        "    {",
        "        PVNames={\"PV\",\"PRICE\",\"SWAP\",\"FRN\"}",
        "        foreach p in PVNames:",
        "            if ImplementedObject.view(p) is \"DOUBLE\":",
        "                return ImplementedObject.view(p)",
        "    }",
        null,
        "    Numerix::SetMajor(\"No PV returned\")",
        "    return 0",
        "}",
        null,
        "// final breakdown of the various PVs.  ",
        "constfunction final_pv",
        "{",
        "    // try to get Main PV",
        "    main_PV = pricer_pv",
        null,
        "    //default",
        "    PremiumPV = 0",
        "    EventPV = 0",
        "    FeePV = 0",
        "    TempCashPV = 0",
        null,
        null,
        "    npv = main_PV",
        "    fee_cashflow=\"\"",
        null,
        "    // add on top of ",
        "    if TradeTerms.Implements(\"has_fee\"): if TradeTerms.has_Fee",
        "    {",
        "        f1 = fee_pricer",
        "        if f1:",
        "        {",
        "            premiumPV   = fee_getLegPVByCriteria(f1, \"PREMIUM_\")",
        "            feePV       = fee_getLegPVByCriteria(f1, \"FEE_\")",
        "            eventPV     = fee_getLegPVByCriteria(f1, \"EVENT_\")",
        "            tempCashPV  = fee_getLegPVByCriteria(f1, \"TEMP_\")",
        "            npv         += f1.view(\"PV\")",
        "        }",
        "        fee_cashflow = fee_cf_map({f1})",
        "    }",
        "    return Numerix::Map({\"PREMIUM_PV\",\"FEE_PV\",\"EVENT_PV\",\"NPV\",\"TEMPCASH_PV\",\"CASHFLOWS\"}, {premiumPV, feePV, eventPV, npv, tempCashPV, fee_cashflow})",
        "}",
        null,
        "constfunction fee_cf_map(fs, filter={})",
        "{",
        "    if fs.TYPE == #\"LIST\":",
        "        fs_=fs",
        "    else:",
        "        fs_={fs}",
        null,
        "    headers = {\"CATEGORY\",\"DESCRIPTION\",\"CURRENCY\"}       // be in-line with logpaymentstream",
        "    values  = {}",
        null,
        "    isEmpty=true",
        null,
        "    foreach f in fs_:",
        "        if f.CashFlowsBreakDownofLegsOutput:",
        "        {",
        "            isEmpty=false",
        "            headers &= Numerix::TableColumnHeaders(f.CashFlowsBreakDownofLegsOutput.cashflows[1])",
        "            break",
        "        }",
        "    if isEmpty:",
        "        return {}",
        null,
        "    foreach f in fs_:",
        "    {",
        "        vals=f.CashFlowsBreakDownofLegsOutput",
        "        if not vals:",
        "            continue",
        null,
        "        foreach id in vals.ID do",
        "            temp = Numerix::Local(id).split(\"_\")",
        "            // exclude flow",
        "            if filter: if temp[2] == filter.canonical:",
        "                continue",
        "            rowValue = {temp[1],temp[2],temp[3]}",
        "            rowValue &= Numerix::TableRowValues(vals.CashFlows[id.iteration],1)",
        "            values @= rowValue",
        "        next",
        "    }",
        null,
        "    feeTable=Numerix::Table(\"FeeCashFlow\",headers,values.transpose)",
        "    return numerix::sort(feeTable.create,\"Pay Date\").create",
        "}",
        null,
        "// loops through the fee pricer to aggregate the fee for each type",
        "constfunction fee_getLegPVByCriteria(f_pricer, fee_type)",
        "{",
        "    Sum = 0",
        "    foreach i in f_pricer.PVOFLEGSOutput.ID:",
        "        if i.localID.find(fee_type) == 1:   // local id start with fee_type",
        "            Sum += Numerix::Double(f_pricer.PVOFLEGSOutput.PV[i.iteration])",
        "    return Sum",
        "}",
        null,
        "constfunction fee_getAccrualResetsOn",
        "{",
        "    try",
        "    {",
        "        return AccrualResetsOn",
        "    }",
        null,
        "    catch error",
        "    {",
        "        return \"\"",
        "    }",
        "}",
        null,
        "constfunction fee_UseCSADiscounting",
        "{",
        "    try",
        "    {",
        "        return UseCSADiscounting",
        "    }",
        "    catch error",
        "    {",
        "        return false",
        "    }",
        "}",
        null,
        "constfunction main_currency",
        "{",
        "    try{",
        "        // currency in the pricer",
        "        return main.load.currency.canonical",
        "    }catch error{",
        "        // currency in passed from oneview",
        "        if TradeTerms.currency:",
        "            return TradeTerms.currency.canonical",
        "        else:",
        "        // currency from property",
        "            return EvaluateProperty(TradeTerms, \"Pricing Currency\").canonical",
        "    }",
        "}",
        null,
        "function Fee_default_curvetable",
        "{",
        "    currList = fee_currency_list",
        null,
        "    fee_main = Numerix::Load(main)",
        null,
        "    if main_currency: ifnot currList.find(main_currency):",
        "        currList @= main_currency  ",
        null,
        "    curves_values = {}",
        null,
        "    foreach leg_currency in currList do",
        "        if Fee_UseCSADiscounting :",
        "            leg_discountcurve = NxStd::CSADiscountCurveID(leg_currency,TradeTerms.Counterparty,TradeTerms.LegalEntity,TradeTerms.NettingSet,TradeTerms.MarginSet)",
        "        else",
        "        {",
        "            fee_us_strongest_ccy_ = fee_us_strongest_ccy",
        "            if leg_currency.Canonical == fee_us_strongest_ccy_ :",
        "                leg_discountcurve = NxStd::DiscountCurveID(leg_currency)",
        "            else :",
        "                leg_discountcurve = NxStd::CCDiscountCurveID(leg_currency, fee_us_strongest_ccy_)",
        "        }",
        "        curves_values @= {leg_currency, leg_discountcurve, \"\"}",
        "    next",
        "    return Numerix::Table(\"curvestable_\"+Numerix::uniqueNumber, {\"Currency\", \"Discount Curve\", \"Index Curve\"}, curves_values.Transpose).Create",
        "}",
        null,
        "function fee_default_spotprice",
        "{",
        "    leg_currencies = fee_currency_list",
        null,
        "    if leg_currencies is \"LIST\" : if leg_currencies.Size == 2 : if fee_component.Currency in leg_currencies :",
        "        return NxStd::FXSpotID(leg_currencies[1],leg_currencies[2])",
        null,
        "    //when there is only 1 leg and the payout currency is different",
        "    if not leg_currencies is \"LIST\" : if not leg_currencies == fee_component.Currency :",
        "        return NxStd::FXSpotID(leg_currencies,fee_component.Currency)",
        "    //this is used to pass to the FXSpot template as Currencies",
        "    fx_list = fee_component.Currency",
        null,
        "    foreach ccy in leg_currencies do",
        "        if not ccy == fee_component.Currency.Canonical :",
        "            fx_list = fx_list +\"_\"+ccy",
        "    next ",
        null,
        "    //Only the variant to this function is used.  Please refer to the market policy instance FX Spot Rules.",
        "    return NxStd::FXSpotID(leg_currencies[1], leg_currencies[2], fx_list)",
        "}",
        "//",
        "function fee_currency_list",
        "{",
        "    fee_leg_currencies={}",
        "    fee_leg_currencies @= fee_component.Currency.canonical",
        null,
        "    feeLegs = Numerix::Load(fee_component.legs)",
        "    foreach leg in feeLegs:",
        "    {",
        "        ifnot fee_leg_currencies.find(leg.LegID.currency.canonical):",
        "            fee_leg_currencies @= leg.LegID.currency.canonical",
        "    }",
        "    return fee_leg_currencies   ",
        "}",
        null,
        "function trade_terms_key",
        "{",
        "    call_headers = TradeTerms.View(\"CallHeaders\")",
        "    def_pos = call_headers.Find(\"DEFINITION\")",
        null,
        "    return TradeTerms.View(\"CallValues\")[def_pos]",
        null,
        "}",
        null,
        null,
        "//the strongest avenger?",
        "function fee_us_strongest_ccy",
        "{",
        "    leg_currencies = fee_currency_list",
        "    best_ccy = leg_currencies[1]",
        "    best_rank = Numerix::GetSettings(\"Settings.Currency\",best_ccy,\"Rank\")",
        null,
        "    foreach ccy in leg_currencies do",
        "        if not ccy = best_ccy",
        "        {",
        "            current_rank = Numerix::GetSettings(\"Settings.Currency\",ccy,\"Rank\")",
        "            if current_rank < best_rank",
        "            {",
        "                best_ccy = ccy",
        "                best_rank = current_rank",
        "            }    ",
        "        }",
        "    next",
        null,
        "    return best_ccy.Canonical",
        "}",
        null,
        "function get_product_code",
        "{",
        "    return EvaluateProperty(TradeTerms, \"Product Code\")",
        "}",
        "function get_asset_class",
        "{",
        "    return EvaluateProperty(TradeTerms, \"Asset Class\")",
        "}",
        "function get_pricing_currency",
        "{",
        "    return EvaluateProperty(TradeTerms, \"Pricing Currency\")",
        "}",
        null,
        "function EvaluateProperty(terms, propertyName)",
        "{",
        "    // Get list of trade terms properties.",
        null,
        "    props = terms.PropertyNamesOutput.Canonical",
        null,
        "	// Attempt to find the property. If not found, log error.",
        null,
        "	property = props.Find(propertyName.Canonical)",
        "    ifnot property :",
        "	    throw terms + \": could not evaluate '\" + propertyName + \"' property which is required for pricing policy resolution.\"",
        null,
        "	property = terms.PropertyValuesOutput[property]",
        "	return property",
        "}",
        "//================================================================================",
        "// NXT-60 standardized cashflow Functions",
        "// - functions start with standardCashflow",
        "// - standardCashflow_callFunction is the function to call in terms of generating necessary output items that CA doesn't provide",
        "// - tables start with STDCF",
        "//================================================================================",
        "define CF_TYPE_NOTIONAL = \"NTL\"",
        "define CF_TYPE_COUPON   = \"INT\"",
        "define CF_LEG_DETAIL_TABLE = {\"CF_LEG1_DETAIL_TABLE\", \"CF_LEG2_DETAIL_TABLE\"}",
        null,
        "// this function assigns mapping table, function to call, and leg names to refer",
        "constfunction standardCashflow",
        "{",
        "    t = Numerix::Load(ImplementedObject)",
        "    table = Numerix::Load(\"DEFINITION.PRICERBASE.STDCF_ASSIGNMENT\")",
        null,
        "    key = t[\"OBJECT\"].value.canonical + \"_\" + t[\"TYPE\"].value.canonical",
        "    template = trade_terms_key",
        null,
        "    i = 0",
        "    cnt = 1",
        "    while table.key.find(key.canonical, cnt) > 0 do",
        "        i = table.key.find(key.canonical,cnt)",
        "        t_template = table[i].templateName",
        "        if t_template == #\"*\" or t_template == template:",
        "            break",
        "        cnt += 1",
        "    next",
        "    if i :",
        "        return standardCashflow_output(\"DEFINITION.PRICERBASE.\"+ table[i].mapping, table[i].callFunction, table[i].legNames)",
        null,
        "    return Numerix::Map({\"LEG1\",\"LEG2\"}, {{},{}})",
        "}",
        "// this function returns fee tables",
        "constfunction standardCashflowFee",
        "{",
        "    ifnot final_pv.CASHFLOWS:",
        "        return Numerix::Map({\"CASHFLOWS\"}, {{}})",
        "    return standardCashflow_output(\"DEFINITION.PRICERBASE.STDCF_MAP_FEE\", \"final_pv\", \"CASHFLOWS\")",
        "}",
        "constfunction standardCashflow_callFunction",
        "{",
        "    //abstract function",
        "    return {}",
        "}",
        "constfunction standardCashflow_roundingRules",
        "{",
        "    //abstract function",
        "    return {}",
        "}",
        null,
        "// this function creates the cashflows base on ",
        "constfunction standardCashflow_output(tableName, callFunction, legNames)",
        "{",
        "    table = Numerix::load(tableName.canonical)",
        "    legs = legNames.split(\",\")",
        "    ifnot legs is \"List\":",
        "        legs = {legs}",
        "    // whether results are from a hardcoded function, if yes, trigger function",
        "    result = if callFunction ? Numerix::Execute(callFunction) : {}",
        null,
        "    keys = {}",
        "    vals = {}",
        "    // legs",
        "    foreach l in legs",
        "    {",
        "        keys @= l",
        "        // init",
        "        key = {}",
        "        val = {}",
        null,
        "        try{",
        "            leg_result_id = result[l].value",
        "        }catch error{",
        "            vals @= \"\"",
        "            continue",
        "        }",
        null,
        "        if leg_result_id",
        "        {",
        "            row_num = Numerix::TableRowCount(leg_result_id)",
        null,
        "            // items",
        "            foreach t in table",
        "            {",
        "                key @= t.outputName",
        "                switch on t.ReferTo",
        "                    case \"FUNCTION\"",
        "                        val @= tryTableColumnValues(leg_result_id, t.value)",
        "                    case \"FUNCTION WITH ROUNDING\"",
        "                        val @= ApplyRounding(tryTableColumnValues(leg_result_id, t.value), l.iteration)",
        "                    case \"FUNCTION Y/N\"",
        "                        val @= YN_convertTo_Boolean(tryTableColumnValues(leg_result_id, t.value))",
        "                    case \"FUNCTION GEN DETAIL\"",
        "                        val @= gen_stdcfId(leg_result_id, t.value, key, val)",
        "                    case \"CATEGORY\"",
        "                        val @= if l == \"ConsolCF\"? l.copy(row_num): (t.value + l.iteration).copy(row_num) // (t.value + l.iteration).copy(row_num)",
        "                    case \"ISFIXED\"",
        "                        val @= isFixed_func(tryTableColumnValues(leg_result_id, t.value))",
        "                    case \"REF_TABLE\"",
        "                        val @= Numerix::Execute(tableName + \".\" + t.value)",
        "                    case \"PROPERTY\"",
        "                        val @= EvaluateProperty(TradeTerms, t.value).copy(row_num)",
        "                    default // STATIC",
        "                        val @= t.value.copy(row_num)",
        "                end switch",
        "            }//items",
        "            // create cashflow table",
        "            vals @= Numerix::Table(l+\"_\"+Numerix::uniquenumber, key, val).create",
        "        }",
        "    }// legs",
        null,
        "    return Numerix::Map(keys, vals)",
        "}",
        null,
        null,
        "function tryTableColumnValues(id,key)",
        "{",
        "    keys = key.split(\",\")",
        "    ifnot keys is \"LIST\":",
        "        keys = {keys}",
        "    // will return the fist one defined in the key, splited by \",\"",
        "    foreach k in keys",
        "    {",
        "        try{",
        "            return Numerix::TableColumnValues(id, k)",
        "        }catch error{",
        "        }",
        "    }",
        "    return {}",
        "}",
        "function YN_convertTo_Boolean(list)",
        "{",
        "    list_ = if list is \"List\" ? list : {list}",
        "    res = {}",
        "    foreach l in list_:",
        "        res @= if l == #\"Y\" ? true:false",
        "    return res",
        "}",
        "// apply rounding rules",
        "function ApplyRounding(list, idx)",
        "{",
        "    try{",
        "        list_ = Numerix::Double(list)    ",
        "    }catch error",
        "    {",
        "        return list",
        "    }",
        "    rnd_map = standardCashflow_roundingRules",
        "    ifnot rnd_map:",
        "        return list",
        null,
        "    if idx > rnd_map.size:",
        "        return list",
        null,
        "    rnd = rnd_map[idx].value",
        "    if rnd is \"LIST\": if rnd.size == 2: if rnd[1] != #\"\": if rnd[1] != #\"NONE\": if rnd[2] >= 0:",
        "        return NxStd::Round(list_, Numerix::Double(rnd[2]), rnd[1])",
        "    else:",
        "        return list",
        "}",
        null,
        "function isFixed_func(list)",
        "{",
        "    ifnot list:",
        "        return {}",
        "    nowdate = implementedObject.load.NowDate",
        "    list_ = if list is \"List\" ? list : {list}",
        "    res = {}",
        "    foreach l in list_:",
        "        res @= if nowdate < l ? true : false",
        "    return res",
        "}",
        null,
        "function gen_stdcfId(id, key, keys, vals)",
        "{",
        "    bool = tryTableColumnValues(id, key)",
        "    ifnot bool:",
        "        return {}",
        null,
        "    idx = keys.find(\"cashflowCategory\")",
        "    ifnot idx:",
        "        return {}",
        null,
        "    a = vals[idx]",
        "    b = tryTableColumnValues(leg_result_id, \"PAYMENT DATE,PAY DATE\").type(\"INTEGER\")",
        "    c = {}",
        "    foreach i in bool:",
        "        c @= if i ? a[i.iteration] + \"_\" + b[i.iteration] : \"\"",
        "    return c",
        "}",
        null,
        "constfunction schedule_detail(i)",
        "{",
        "    a = standardCashflow.LEG1",
        "    if i <= CF_LEG_DETAIL_TABLE.size",
        "    {",
        "        // CF_LEG_DETAIL_TABLE[leg.iteration] fail to work.",
        "        tbl_name = \"\"",
        "        foreach a in CF_LEG_DETAIL_TABLE:",
        "            if a.iteration == i:",
        "                tbl_name = a",
        "        tbl = Numerix::TryResolve(tbl_name)",
        "        if tbl:",
        "            return tbl",
        "    }",
        "    return {}    ",
        "}",
        null,
        "constfunction schedule_ARRLogDetailByName(legId, index_name = \"\", obj=\"\", query_param1 = \"\", query_param2 = \"\")",
        "{",
        "    Indexlist = if obj ? {obj} : TradeTerms.implementedObject.load.Value(\"INDEX\")",
        null,
        "    q1 = if query_param1 ? query_param1 : \"ACCRUALPAYDATE=<ACCRUALPAYDATE:DATE>\"",
        "    q2 = if query_param2 ? query_param2 : \"ACCRUALFIXINGDATE,ACCRUALSTARTDATE,ACCRUALENDDATE,ACCRUALPAYDATE,ACCRUALOBSERVEDRATE,ACCRUALWEIGHTSTARTDATE,ACCRUALWEIGHTENDDATE,ACCRUALWEIGHTDCF\"",
        null,
        "    foreach i in Indexlist",
        "    {",
        "        if index_name : ifnot NxStd::GetInputValue(i, \"NAME\") == index_name.canonical:",
        "                continue",
        null,
        "        try{",
        "            cf = Numerix::Query(i, q1, q2)",
        "        }catch{",
        "            continue",
        "        }",
        null,
        "        ifnot NxStd::HasRows(cf):",
        "            continue",
        null,
        "        paydate = NxStd::GetOutputValue(cf, \"ACCRUALPAYDATE\")",
        "        ids = legId + \"_\" + paydate.Type(\"INTEGER\")",
        null,
        "        keys = Numerix::TableRowHeaders(cf) & {\"stdcfDetailID\"}",
        "        vals = cf.load.values & {ids}",
        "        return Numerix::Table(NxStd::MakeID(\"table\"), keys, vals).create",
        "    }",
        "    return {}",
        "}",
        null,
        "function NextFixingDate(Schedule=standardCashflow.LEG1)",
        "{",
        "    try",
        "    {",
        "        fixing_date = Numerix::query(Schedule.ID, \"FIXINGDATE=<Date>\", \"Date\")",
        "        fix_date = fixing_date.Date",
        "        if Numerix::TableRowCount(fixing_date) = 1:",
        "        {",
        "            if Numerix::Date(fix_date) >= Numerix::MarketDate:",
        "                return fix_date",
        "            else:",
        "                return \"There is no more upcoming fixing dates.\"",
        "        }",
        "        else:",
        "        {",
        "            for i = 1 to Numerix::TableRowCount(fixing_date):",
        "                if Numerix::Date(fix_date[i]) >= Numerix::MarketDate:",
        "                    return fix_date[i]",
        "                    break",
        null,
        "            return \"There is no more upcoming fixing dates.\"",
        "        }",
        null,
        "    }",
        "    catch error{}",
        "    {",
        "        return \"Not found\"",
        "    }",
        "}",
        null,
        "function NextPaymentDate(Schedule=standardCashflow.LEG1)",
        "{",
        "    try",
        "    {",
        "        try",
        "        {",
        "            payment_date = Numerix::query(Schedule.ID, \"PAYMENTDATE=<Date>\", \"Date\")",
        "            pay_date = payment_date.Date",
        "        }",
        "        catch error{}",
        "        {",
        "            payment_date = Numerix::query(Schedule.ID, \"DATES=<Date>\", \"Date\")",
        "            pay_date = payment_date.Date",
        "        }",
        "        if Numerix::TableRowCount(payment_date) = 1:",
        "        {",
        "            if Numerix::Date(pay_date) >= Numerix::MarketDate:",
        "                return pay_date",
        "            else:",
        "                return \"There is no more upcoming payment dates.\"",
        "        }",
        "        else:",
        "        {",
        "            for i = 1 to Numerix::TableRowCount(payment_date):",
        "                if Numerix::Date(pay_date[i]) >= Numerix::MarketDate:",
        "                    return pay_date[i]",
        "                    break",
        null,
        "            return \"There is no more upcoming payment dates.\"",
        "        }",
        "    }",
        "    catch error{}",
        "    {",
        "        return \"Not found\"",
        "    }",
        "}",
        null,
        "constfunction marketDataQuoteOutputISIN(marketQuoteOutputType=\"Dirty\", objectOutputName=\"\", AccIntOutputName=\"\", NotionOutput=\"\")",
        "{",
        "    _NotionOutput = if NotionOutput is \"DOUBLE\"? NotionOutput: main.view(NotionOutput)",
        "    _OutFactor100 = _NotionOutput / 100",
        "    _objectOutput = if main.view(objectOutputName) is \"LIST\"? main.view(objectOutputName).Sum: (if objectOutputName is \"DOUBLE\"? objectOutputName: main.view(objectOutputName))",
        "    _objectOutput = if marketQuoteOutputType.find(\"100\") AND !objectOutputName.find(\"100\")? _objectOutput / _OutFactor100: (if !marketQuoteOutputType.find(\"100\") AND objectOutputName.find(\"100\")? _objectOutput * _OutFactor100: _objectOutput)",
        "    _AccIntOutput = if TradeTerms.AccruedInterest? TradeTerms.AccruedInterest: main.view(AccIntOutputName)",
        "    _AccIntOutput = if marketQuoteOutputType.find(\"100\") AND !AccIntOutputName.find(\"100\")? _AccIntOutput / _OutFactor100: (if !marketQuoteOutputType.find(\"100\") AND AccIntOutputName.find(\"100\")? _AccIntOutput * _OutFactor100: _AccIntOutput)",
        "    _AccIntOutput = if _AccIntOutput.Size? _AccIntOutput: 0",
        null,
        "    try {",
        "        _ExpirdOutput = if TradeTerms.Valuationdate < Numerix::MarketDate() ? 0 : 1",
        "    } catch {",
        "        _ExpirdOutput = 1",
        "    }",
        null,
        "    try",
        "    {",
        "        if TradeTerms.MarketQuoteType == \"Price\":",
        "        {",
        "            if marketQuoteOutputType.find(#\"Dirty\"):",
        "            {",
        "                if TradeTerms.DirtyQuote:",
        "                    outputVal = if TradeTerms.MarketQuote.Size > 0? TradeTerms.MarketQuote: NxStd::MarketQuoteISINPrice(TradeTerms.Currency, TradeTerms.ISIN)",
        "                else:",
        "                    outputVal = if TradeTerms.MarketQuote.Size > 0? (TradeTerms.MarketQuote + _AccIntOutput): (NxStd::MarketQuoteISINPrice(TradeTerms.Currency, TradeTerms.ISIN)  + _AccIntOutput)",
        null,
        "                return outputVal * _ExpirdOutput",
        "            }",
        "            elseif marketQuoteOutputType.find(#\"Clean\"):",
        "            {",
        "                if TradeTerms.DirtyQuote:",
        "                    outputVal = if TradeTerms.MarketQuote.Size > 0? (TradeTerms.MarketQuote - _AccIntOutput): (NxStd::MarketQuoteISINPrice(TradeTerms.Currency, TradeTerms.ISIN) - _AccIntOutput)",
        "                else:",
        "                    outputVal = if TradeTerms.MarketQuote.Size > 0? TradeTerms.MarketQuote: NxStd::MarketQuoteISINPrice(TradeTerms.Currency, TradeTerms.ISIN)",
        null,
        "                return outputVal * _ExpirdOutput",
        "            }",
        "            elseif marketQuoteOutputType.find(#\"Accrued\"):",
        "            {",
        "                return _AccIntOutput * _ExpirdOutput",
        "            }",
        "            else:",
        "            {",
        "                return _objectOutput * _ExpirdOutput",
        "            }",
        "        }",
        "//        elseif TradeTerms.MarketQuoteType == \"Yield\":",
        "//        {",
        "//            return if TradeTerms.MarketQuote.Size > 0? TradeTerms.MarketQuote: NxStd::MarketQuoteISINYTM(TradeTerms.Currency, TradeTerms.ISIN)",
        "//        }",
        "//        elseif TradeTerms.MarketQuoteType == \"Z-Spread\":",
        "//        {",
        "//            return if TradeTerms.MarketQuote.Size > 0? TradeTerms.MarketQuote: NxStd::MarketQuoteISINZspread(TradeTerms.Currency, TradeTerms.ISIN)",
        "//        }",
        "//        elseif TradeTerms.MarketQuoteType == \"DiscountMargin\":",
        "//        {",
        "//            return if TradeTerms.MarketQuote.Size > 0? TradeTerms.MarketQuote: NxStd::MarketQuoteISINDM(TradeTerms.Currency, TradeTerms.ISIN)",
        "//        }",
        "        else:",
        "        {",
        "            return _objectOutput * _ExpirdOutput",
        "        }",
        "    }",
        "    catch error{}",
        "    {",
        "        return _objectOutput * _ExpirdOutput",
        "    }",
        "}",
        null,
        "// This is a version of marketDataQuoteOutputISIN with not found then return \"\"",
        "constfunction marketDataQuoteOutputISIN_market(marketQuoteOutputType=\"Dirty\", objectOutputName=\"\", AccIntOutputName=\"\", NotionOutput=\"\")",
        "{",
        "    _NotionOutput = if NotionOutput is \"DOUBLE\"? NotionOutput: main.view(NotionOutput)",
        "    _OutFactor100 = _NotionOutput / 100",
        "    _objectOutput = if main.view(objectOutputName) is \"LIST\"? main.view(objectOutputName).Sum: (if objectOutputName is \"DOUBLE\"? objectOutputName: main.view(objectOutputName))",
        "    _objectOutput = if marketQuoteOutputType.find(\"100\") AND !objectOutputName.find(\"100\")? _objectOutput / _OutFactor100: (if !marketQuoteOutputType.find(\"100\") AND objectOutputName.find(\"100\")? _objectOutput * _OutFactor100: _objectOutput)",
        "    _AccIntOutput = if TradeTerms.AccruedInterest? TradeTerms.AccruedInterest: if main.view(AccIntOutputName) ? main.view(AccIntOutputName) : main.view(\"PV.\" + AccIntOutputName)",
        "    _AccIntOutput = if marketQuoteOutputType.find(\"100\") AND !AccIntOutputName.find(\"100\")? _AccIntOutput / _OutFactor100: (if !marketQuoteOutputType.find(\"100\") AND AccIntOutputName.find(\"100\")? _AccIntOutput * _OutFactor100: _AccIntOutput)",
        "    _AccIntOutput = if _AccIntOutput.Size? _AccIntOutput: 0",
        null,
        "    try {",
        "        _ExpirdOutput = if TradeTerms.Valuationdate < Numerix::MarketDate() ? 0 : 1",
        "    } catch {",
        "        _ExpirdOutput = 1",
        "    }",
        null,
        "    try",
        "    {",
        "        if TradeTerms.MarketQuoteType == \"Price\":",
        "        {",
        "            QuoteValue = if TradeTerms.MarketQuote.Size > 0? TradeTerms.MarketQuote: NxStd::MarketQuoteISINPrice(TradeTerms.Currency, TradeTerms.ISIN)",
        null,
        "            if marketQuoteOutputType.find(#\"Dirty\"):",
        "            {",
        "                if TradeTerms.DirtyQuote:",
        "                    outputVal = QuoteValue * _OutFactor100",
        "                else:",
        "                    outputVal = QuoteValue * _OutFactor100 + _AccIntOutput",
        null,
        "                return outputVal * _ExpirdOutput",
        "            }",
        "            elseif marketQuoteOutputType.find(#\"Clean\"):",
        "            {",
        "                if TradeTerms.DirtyQuote:",
        "                    outputVal = QuoteValue * _OutFactor100 - _AccIntOutput",
        "                else:",
        "                    outputVal = QuoteValue * _OutFactor100",
        null,
        "                return outputVal * _ExpirdOutput",
        "            }",
        "            elseif marketQuoteOutputType.find(#\"Accrued\"):",
        "                return _AccIntOutput * _ExpirdOutput",
        "            else:",
        "                return _objectOutput * _ExpirdOutput",
        "        }",
        "//        elseif TradeTerms.MarketQuoteType == \"Yield\":",
        "//        {",
        "//            return if TradeTerms.MarketQuote.Size > 0? TradeTerms.MarketQuote: NxStd::MarketQuoteISINYTM(TradeTerms.Currency, TradeTerms.ISIN)",
        "//        }",
        "//        elseif TradeTerms.MarketQuoteType == \"Z-Spread\":",
        "//        {",
        "//            return if TradeTerms.MarketQuote.Size > 0? TradeTerms.MarketQuote: NxStd::MarketQuoteISINZspread(TradeTerms.Currency, TradeTerms.ISIN)",
        "//        }",
        "//        elseif TradeTerms.MarketQuoteType == \"DiscountMargin\":",
        "//        {",
        "//            return if TradeTerms.MarketQuote.Size > 0? TradeTerms.MarketQuote: NxStd::MarketQuoteISINDM(TradeTerms.Currency, TradeTerms.ISIN)",
        "//        }",
        "        else:",
        "        {",
        "            return \"\"",
        "        }",
        "    }",
        "    catch error{}",
        "    {",
        "        return \"\"",
        "    }",
        "}",
        null,
        "// Return Day Count for Accrued Payment",
        "function AccruedDayCount(table)",
        "{",
        "    PrevFixingDate = NextPaymentDateFixing(main.view(table))",
        "    if PrevFixingDate = 0 then",
        "        return 0",
        "    else",
        "        if Numerix::Date(PrevFixingDate) <= Numerix::marketDate then",
        "            return Numerix::marketDate - Numerix::Date(PrevFixingDate)",
        "        else ",
        "            return 0",
        "        endif        ",
        "    endif",
        "}",
        null,
        "// Return the fixing date for next payment date",
        "function NextPaymentDateFixing(Schedule=standardCashflow.LEG1)",
        "{",
        "    try",
        "    {",
        "        // Consider [LogPaymenmtStream] Detailed CF table",
        "        payment_date = Numerix::query(Schedule.ID, \"PAYMENTDATE=<Date>\", \"Date\")",
        "        pay_date = payment_date.Date",
        "        fixing_date = Numerix::query(Schedule.ID, \"FIXINGDATE=<Date>\", \"Date\")",
        "        fix_date = fixing_date.Date",
        "        if Numerix::TableRowCount(payment_date) = 1:",
        "        {",
        "            if Numerix::Date(pay_date) >= Numerix::MarketDate:",
        "                return fix_date",
        "            else:",
        "                return 0",
        "        }",
        "        else:",
        "        {",
        "            for i = 1 to Numerix::TableRowCount(payment_date):",
        "                if Numerix::Date(pay_date[i]) >= Numerix::MarketDate:",
        "                    return fix_date[i]",
        "                    break",
        null,
        "            return 0",
        "        }",
        "    }",
        "    catch error{}",
        "    {",
        "        return 0",
        "    }",
        "}",
        null,
        "constfunction outstanding_notional",
        "{",
        "    ObjType = Numerix::Load(TradeTerms)[\"TYPE\"].Value.Canonical",
        "    ObjName = Numerix::Load(TradeTerms)[\"OBJECT\"].Value.Canonical",
        null,
        "    if ObjType == \"BOND\" or ObjType == \"FLOATINGRATENOTE\" or get_product_code == \"CALLABLEZEROBOND\" or get_product_code == \"FXCALLABLEDIGITALCOUPONNOTE\":",
        "    {",
        "        if TradeTerms.Notional is \"DOUBLE\":",
        "        {",
        "            return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TradeTerms.Notional: 0",
        "        }",
        null,
        "        try",
        "        {",
        "            TermsNotional = Numerix::Load(TradeTerms.Notional).VALUES[1]",
        "        }",
        "        catch error{",
        "            Numerix::SetFatal(\"Fail to extract Outstanding Notional, Notional input is neither [Double] nor [Table]\")",
        "        }",
        null,
        "        if TermsNotional is \"LIST\":",
        "        {",
        "            if ObjName == \"INSTRUMENT\":",
        "            {",
        "                if ObjType == \"BOND\" then",
        "                    NtlEvent = Numerix::Table(\"ScheduleTable\", {\"FIXDATE\"}, Numerix::Date(Numerix::Set(TradeTerms.ImplementedObject.view(\"ACCRUAL START\")))).create",
        "                elseif ObjType == \"FLOATINGRATENOTE\" then",
        "                    if TradeTerms.RateIndex.IndexCalculationMethod:",
        "                        NtlEvent = Numerix::Table(\"ScheduleTable\", {\"FIXDATE\"}, Numerix::Date(NxStd::ListRemoveEmptyEntries(Numerix::Set(TradeTerms.ImplementedObject.view(\"COUPON FIXING DATE\"))))).create",
        "                    else:",
        "                        NtlEvent = Numerix::Table(\"ScheduleTable\", {\"FIXDATE\"}, Numerix::Date(TradeTerms.ImplementedObject.view(\"FIXDATE\"))).create",
        "                else",
        "                    Numerix::SetFatal(\"Fail to extract TradeTerms schedule table, please contact Numerix for further assistance.\")",
        "                endif",
        "            }",
        "            else:",
        "                NtlEvent = ESun_HY_Custom_Notional_Event(get_product_code)",
        null,
        "            fixDates = Numerix::Date(Numerix::Query(NtlEvent.ID, \"FIXDATE=<Date>\", \"Date\").Date)",
        null,
        "            if fixDates is \"LIST\":",
        "            {",
        "                idx = 1",
        "                foreach fixDate in fixDates:",
        "                {",
        "                    if fixDate < Numerix::MarketDate:",
        "                        idx = fixDate.iteration",
        "                    else:",
        "                        break",
        "                }",
        "                return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TermsNotional[idx]: 0",
        "            }",
        "            else:",
        "                return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TermsNotional: 0",
        "        }",
        "        else:",
        "            return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TradeTerms.Notional: 0",
        "    }",
        null,
        "    if get_product_code == \"CMSVARICAPNOTES\" or get_product_code == \"CRCMSNOTES\" or get_product_code == \"CRFUNDINDEXNOTES\" or get_product_code == \"CRRANOTES\" or get_product_code == \"CRSWITCHNOTES\":",
        "    {",
        "        if TradeTerms.Principal is \"DOUBLE\":",
        "            return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TradeTerms.Principal: 0",
        null,
        "        try",
        "        {",
        "            TermsNotional = Numerix::Load(TradeTerms.Principal).VALUES[1]",
        "        }",
        "        catch error{",
        "            Numerix::SetFatal(\"Fail to extract Outstanding Notional, Notional input is neither [Double] nor [Table]\")",
        "        }",
        null,
        "        if TermsNotional is \"LIST\":",
        "        {",
        "            NtlEvent = ESun_HY_Custom_Notional_Event(get_product_code)",
        "            fixDates = Numerix::Query(NtlEvent,\"FIXDATE=<Date>\",\"Date\").Date",
        null,
        "            if fixDates is \"LIST\":",
        "            {",
        "                idx = 1",
        "                foreach fixDate in fixDates:",
        "                {",
        "                    if fixDate < Numerix::MarketDate:",
        "                        idx = fixDate.iteration",
        "                    else:",
        "                        break",
        "                }",
        "                return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TermsNotional[idx]: 0",
        "            }",
        "            else:",
        "                return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TermsNotional: 0",
        "        }",
        "        else:",
        "            Numerix::SetFatal(\"Fail to extract Outstanding Notional, Notional input is neither [Double] nor [Table]\")",
        "    }",
        null,
        "    if get_product_code == \"CALLABLEZEROBOND\" or get_product_code == \"FXCALLABLEDIGITALCOUPONNOTE\":",
        "    {",
        "        if TradeTerms.Notional is \"DOUBLE\":",
        "            return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TradeTerms.Notional: 0",
        null,
        "        try",
        "        {",
        "            TermsNotional = Numerix::Load(TradeTerms.Notional).VALUES[1]",
        "        }",
        "        catch error{",
        "            Numerix::SetFatal(\"Fail to extract Outstanding Notional, Notional input is neither [Double] nor [Table]\")",
        "        }",
        null,
        "        if TermsNotional is \"LIST\":",
        "        {",
        "            NtlEvent = ESun_HY_Custom_Notional_Event(get_product_code)",
        "            fixDates = Numerix::Query(NtlEvent,\"FIXDATE=<Date>\",\"Date\").Date",
        null,
        "            if fixDates is \"LIST\":",
        "            {",
        "                idx = 1",
        "                foreach fixDate in fixDates:",
        "                {",
        "                    if fixDate < Numerix::MarketDate:",
        "                        idx = fixDate.iteration",
        "                    else:",
        "                        break",
        "                }",
        "                return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TermsNotional[idx]: 0",
        "            }",
        "            else:",
        "                return if Numerix::MarketDate < TradeTerms.EarlyTerminationDate? TermsNotional: 0",
        "        }",
        "        else:",
        "            Numerix::SetFatal(\"Fail to extract Outstanding Notional, Notional input is neither [Double] nor [Table]\")",
        "    }",
        "    else:",
        "        return \"\"",
        "}",
        null,
        "function ESun_HY_Custom_Notional_Event(ProdCode)",
        "{",
        "    if ProdCode == \"CALLABLEZEROBOND\":",
        "        return TradeTerms.zcb_coupondates",
        null,
        "    if ProdCode == \"CMSVARICAPNOTES\":",
        "        return if TradeTerms.hasGuaranteedCoupon? TradeTerms.CouponStructuredCouponDates_func: TradeTerms.CouponDates_func",
        null,
        "    if ProdCode == \"CRCMSNOTES\" or ProdCode == \"CRFUNDINDEXNOTES\" or ProdCode == \"CRRANOTES\" or ProdCode == \"CRSWITCHNOTES\" or ProdCode == \"FXCALLABLEDIGITALCOUPONNOTE\":",
        "        return TradeTerms.AllDates_func",
        null,
        "}",
        null,
        "constfunction pricing_requests",
        "{",
        "    call = Numerix::Object({\"pricing_requests\", \"SETTINGS\", \"PRICING REQUESTS\"}) &",
        "    {",
        "        \"payment logs\"      : True,",
        "        \"expected lifetime\" : True,",
        "        \"exercise analysis\" : True",
        "    }",
        "    return call.create",
        "}",
        null,
        "constfunction exercise_table",
        "{",
        "    if ImplementedObject.view(\"CALL VALUES\").find(\"KERNEL\"):",
        "    {",
        "        headers = pricer_kernel.view(\"OUTPUT HEADERS\")",
        "        foreach hdr in headers: ",
        "            if hdr.find(\"EXERCISETABLE\"):",
        "                idx = hdr.iteration",
        "        callProbTable = Numerix::Load(pricer_kernel.view(\"OUTPUT VALUES\")[idx])",
        "        return callProbTable",
        "    }",
        "    else:",
        "        return \"\"",
        "}"]
    }
  },
  "DEFINITION.PRICERBASE": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.PRICERBASE",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.PRICERBASE.PARAMETERS",
      "RESULTS" : "DEFINITION.PRICERBASE.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.PRICERBASE.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.PRICERBASE.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "MEMBER" : "DEFINITION.PRICERBASE.VALUESPEC",
      "MEMBER" : "DEFINITION.PRICERBASE.PV_NAME_DATA",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_ASSIGNMENT",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_FEE",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_FXSWAP",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_UNIVERSALSWAP",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_OPTION",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_BOND",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_FRN",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_CAPFLOOR",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_FXFORWARD",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_FUTURE",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_CDS",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_KERNEL",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_KERNEL_BOND",
      "MEMBER" : "DEFINITION.PRICERBASE.STDCF_MAP_EQVARIANCESWAP",
      "SCRIPT" : "DEFINITION.PRICERBASE.SCRIPT.NXSL"
    }
  },
  "DEFINITION.KERNELPRICER": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.KERNELPRICER",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.KERNELPRICER.PARAMETERS",
      "RESULTS" : "DEFINITION.KERNELPRICER.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.KERNELPRICER.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.KERNELPRICER.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "MEMBER" : "DEFINITION.KERNELPRICER.QUALITYSPEC",
      "MEMBER" : "DEFINITION.KERNELPRICER.GREEKSPRODUCTS",
      "SCRIPT" : "DEFINITION.KERNELPRICER.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.PRICERBASE"
    }
  },
  "DEFINITION.CALLABLESWAPPRICERBASE": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.CALLABLESWAPPRICERBASE",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.CALLABLESWAPPRICERBASE.PARAMETERS",
      "RESULTS" : "DEFINITION.CALLABLESWAPPRICERBASE.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.CALLABLESWAPPRICERBASE.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.CALLABLESWAPPRICERBASE.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "SCRIPT" : "DEFINITION.CALLABLESWAPPRICERBASE.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.KERNELPRICER"
    }
  },
  "DEFINITION.PRICERBASE_ESUN.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Valuation Date","Include Value Date","Include Value Date Pricer","PV Incl Premium"],
      "TYPE" : ["Date","Boolean","Boolean","Boolean"],
      "REQUIRED" : [false,false,false,false],
      "DEFAULT" : [
        ">Numerix::MarketDate",    true,false,true],
      "GROUPING" : ["Position","Pricing Parameters","Pricing Parameters","Trade T&C"],
      "DESCRIPTION" : ["Date on which the valuation is done","Indicates whether the payment on the VALUE DATE is included in the REALIZED CASH FLOW. Here VALUE DATE means valuation day.","Indicates whether the payment on the VALUE DATE is included in the (kernel/analytic) pricer. Here VALUE DATE means valuation day.","The computed output PV contains the PV of the upfront and unwind fees."]
    }
  },
  "DEFINITION.PRICERBASE_ESUN.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["PV Realized Cash Flow","NPV Realized Cash Flow","Consolidated Cash Flow"],
      "TYPE" : ["Double","Double","Table()"],
      "REQUIRED" : [false,false,false],
      "ID" : [null,null,null],
      "HEADER" : [null,null,null],
      "VALUE" : [
        ">SnT::GetRealizedCashFlowOutput()",    
        ">SnT::GetRealizedCashFlowInclFeesOutput",    
        ">SnT::GetConsolidatedPaymentOutput"],
      "CURRENCY" : [
        ">TradeTerms.Currency",    
        ">TradeTerms.Currency",    null],
      "CATEGORY" : ["Price","Price","Cashflow"],
      "DESCRIPTION" : ["Present value of realized cash flow.","Present of realized cash flow with fees included.
","Consolidated all cash flow with fees included."],
      "PRI" : ["Realized Cashflow","Realized Cashflow Incl Fees",null]
    }
  },
  "DEFINITION.PRICERBASE_ESUN.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.PRICERBASE_ESUN.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.PRICERBASE_ESUN.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "import \"script.nxcustom\"",
        null,
        "// Return 0 if the option has expired",
        "function SnT::GetOutputAccountForTermination(nonTerminateValue)",
        "{",
        "	if TradeTerms.isEnded then",
        "		return 0",
        "	endif",
        "	// if the nonTerminatedValue is not a numeric type, it will be the ID of the output of the implementation output ",
        "	if nonTerminateValue.type=\"INTEGER\" or nonTerminateValue.type=\"DOUBLE\" then",
        "		r= nonTerminateValue",
        "	else",
        "		r= implementedObject.View(nonTerminateValue)",
        "	endif",
        null,
        "	return r",
        "}",
        null,
        "//Get the NPV, price without premium, of the deal at spot date",
        "constfunction SnT::GetNPV",
        "{",
        "    if TradeTerms.isEnded then",
        "        return 0",
        "    endif",
        null,
        "    return Snt::GetOutputAccountForTermination(implementedObject.view(\"PV\"))",
        "}",
        null,
        "// Return PV with premium and other fees included.  0 if it's terminated.",
        "function SnT::GetPVIncFees",
        "{",
        "	// if the nonTerminatedValue is not a numeric type, it will be the ID of the output of the implementation output ",
        "    try {",
        "    	pv= SnT::GetNPV",
        "		IF TradeTerms.terminationFee THEN ",
        "			pv+= GetCashPayment(TradeTerms.UnwindFeeparameters, \"PV\")",
        "		endif",
        "		IF TradeTerms.upfrontFee THEN ",
        "			pv+= GetCashPayment(TradeTerms.UpfrontFeeparameters, \"PV\")",
        "		endif",
        "	} catch error",
        "	{",
        "		throw \"Error in computing PV with fees. \" + error",
        "	}",
        "	return pv",
        "}",
        null,
        "//Get the final PV output with respond to both PV Incl Fees/FXFixing Index",
        "constfunction SnT::GetFinalPV",
        "{",
        "    ans = \"SnT::GetPV1\".execute",
        "    return ans",
        "}",
        null,
        "// Return PV with respond to the PV Incl Fees index",
        "function SnT::GetPV1",
        "{",
        "    //startdebugger",
        "    IF PVInclPremium THEN",
        "        return SnT::GetPVIncFees",
        "    else",
        "        return SnT::GetNPV",
        "    ENDIF",
        "}",
        null,
        "// Return the payment stream log of the cash payment according to the parameter table",
        "function SnT::GetFeesPaymentOutput1(ParameterTable)",
        "{",
        "	id = GetCashPayment(ParameterTable, \"CASHFLOWTABLE\")	",
        "	RETURN id",
        "}",
        null,
        "// All public function will be prefix by SnT::",
        "// The following functions will be used by child classes and will refer to input in this definition.  ",
        "// We prefix it by SnT:: to show it's a public function",
        "function SnT::GetFeesPaymentOutput(type= \"upfront\")",
        "{",
        "    //startdebugger",
        "    id= \"\"",
        "    if type.canonical=\"UPFRONT\" and TradeTerms.upfrontFee then ",
        "        id= SnT::GetFeesPaymentOutput1(UpfrontFeeparameters)",
        "    elseif TradeTerms.terminationFee then",
        "        id= SnT::GetFeesPaymentOutput1(UnwindFeeparameters)",
        "    endif",
        "    return id",
        "}",
        null,
        "// return the netting of upfront+unwind",
        "function SnT::GetNetFeesPaymentOutput()",
        "{",
        "    pv= 0",
        "    if TradeTerms.upFrontFee then",
        "        pv+= GetCashPayment(UpfrontFeeparameters,\"PV\")",
        "    endif",
        "    if TradeTerms.terminationFee then",
        "        pv+= GetCashPayment(UnwindFeeparameters,\"PV\")",
        "    endif",
        "    return pv",
        "}",
        null,
        "// functions below requires the child class implement the paymentEntries function to return cashflow log table.",
        null,
        "// Add fees to the payment, and create a table with one cashflow per row",
        "constfunction SnT::consolidatedPaymentTable(entries1, includeFees= true)",
        "{",
        "    entries= entries1",
        "    if includeFees then",
        "        if TradeTerms.upfrontFee then",
        "            tt = GetTableWithKey11(TradeTerms.UpfrontFee, \"Currency\").size",
        "            for i = 1 to tt",
        "                try {",
        "                    table1 = Numerix::Table(\"table\"+ NumerixUniqueNumber,Numerix::TableColumnHeaders(TradeTerms.upfrontFee), Numerix::TableRowValues(TradeTerms.upfrontFee,i))",
        "                    Numerix::Create(table1)",
        "                    entries @= {GetTableWithKey11(TradeTerms.UpfrontFee, \"Description\").transpose[i], GetTableWithKey11(TradeTerms.UpfrontFee, \"Currency\").transpose[i], table1.id}",
        "                }",
        "                catch error",
        "                {",
        "                    table2 = Numerix::Table(\"table\"+ NumerixUniqueNumber,Numerix::TableColumnHeaders(TradeTerms.upfrontFee), Numerix::TableRowValues(TradeTerms.upfrontFee,i))",
        "                    Numerix::Create(table2)",
        "                    entries @= {\"Upfront premium\", GetTableWithKey11(TradeTerms.UpfrontFee, \"Currency\").transpose[i], table2.id}",
        "                }",
        "            next",
        "        endif",
        "        if TradeTerms.terminationFee then",
        "            rr = GetTableWithKey11(TradeTerms.terminationFee, \"Currency\").size",
        "            for j = 1 to rr",
        "                try {",
        "                    table3 = Numerix::Table(\"table\"+ NumerixUniqueNumber,Numerix::TableColumnHeaders(TradeTerms.terminationFee), Numerix::TableRowValues(TradeTerms.terminationFee,j))",
        "                    Numerix::Create(table3)",
        "                    entries @= {GetTableWithKey11(TradeTerms.TerminationFee,\"Description\").transpose[j], GetTableWithKey11(TradeTerms.TerminationFee,\"Currency\").transpose[j], table3.id}",
        "                }",
        "                catch error",
        "                {",
        "                    table4 = Numerix::Table(\"table\"+ NumerixUniqueNumber,Numerix::TableColumnHeaders(TradeTerms.terminationFee), Numerix::TableRowValues(TradeTerms.terminationFee,j))",
        "                    Numerix::Create(table4)",
        "                    entries @= {\"Unwind premium\", GetTableWithKey11(TradeTerms.TerminationFee,\"Currency\").transpose[j], table4.id}",
        "                }",
        "            next",
        "        endif",
        "    endif",
        null,
        "    // The uniqueNumber basically taking vary entries1 and includeFees variable so may have differnet consolidatedPayment for 1 trade",
        "    if entries.size=0 then",
        "        // Skip table if no cashflow entries found, the whole table will be skipped in output (blank)",
        "        return \"\"",
        "    endif",
        "    consolidatedPaymentTable1 = Numerix::Table(\"ConsolidatedPaymentTable_\"+ Numerix::UniqueNumber, ",
        "        {\"Name\", \"Currency\", \"CashflowLog\"}, entries.transpose)",
        "    id= Numerix::Create(consolidatedPaymentTable1)",
        "    RETURN id",
        "}",
        null,
        "function SnT::getConsolidatedPaymentOutput",
        "{",
        "	Numerix::SetNormal(\">SnT::getConsolidatedPaymentOutput\")",
        "//    try {",
        "//        // if netting is defined in subclass we will use it instead of the cashsettlement",
        "//        cashSettlement= netting",
        "//    } catch",
        "    {",
        "    }",
        "    e= paymentEntries",
        "    paymentTable= SnT::consolidatedPaymentTable(e, true)",
        "    if paymentTable=\"\" then",
        "    // return blank if no payment entries found",
        "        return \"\"",
        "    endif",
        "	Numerix::SetNormal(\">SnT::getConsolidatedPaymentOutput:\" + paymentTable)",
        "    if not TradeTerms.settlementCurrency then",
        "        settlementCurrency = TradeTerms.pricingCurrency",
        "    else ",
        "        settlementCurrency = TradeTerms.settlementCurrency",
        "    endif",
        null,
        "    if \"DiscountCurve\".Defined{",
        "        if DiscountCurve{",
        "            paymentParameters= SnT::createCashPaymentParameters(paymentTable, TradeTerms.cashSettlement, IncludeValueDate, settlementCurrency, DiscountCurve)",
        "        }",
        "    }",
        "    else{",
        "    	if \"BaseDiscountCurve\".Defined & \"TermDiscountCurve\".Defined{",
        "    		if BaseDiscountCurve & TermDiscountCurve{",
        "    			paymentParameters= SnT::createCashPaymentParameters(paymentTable, TradeTerms.cashSettlement, IncludeValueDate, settlementCurrency, TermDiscountCurve, BaseDiscountCurve, TermDiscountCurve)",
        "    		}",
        "    	}",
        "    	else{       ",
        "    		paymentParameters= SnT::createCashPaymentParameters(paymentTable, TradeTerms.cashSettlement, IncludeValueDate, settlementCurrency)",
        "    	}",
        "    }",
        null,
        "    id= GetConsolidatedCashFlow(paymentParameters.localID)",
        "    RETURN id",
        "}",
        null,
        "function SnT::getRealizedCashFlowOutput(inclFees=false)",
        "{",
        "    e= paymentEntries",
        "    return getTableRealizedCashFlow(SnT::consolidatedPaymentTable(e,inclFees), IncludeValueDate, TradeTerms.PricingCurrency, ValuationDate, QuoteType)",
        "}",
        null,
        "function SnT::getRealizedCashFlowInclFeesOutput",
        "{",
        "    e= paymentEntries",
        "    return getTableRealizedCashFlow(SnT::consolidatedPaymentTable(e,true), IncludeValueDate, TradeTerms.PricingCurrency, ValuationDate, QuoteType)",
        "}",
        null,
        "// This function returns the cash payment for the trade only.  It should be obsolete",
        "constfunction SnT::getNetCashFlowOutput",
        "{",
        "    e= paymentEntries",
        "    // startdebugger",
        "    paymentTable= SnT::consolidatedPaymentTable(e, false)",
        "    if paymentTable=\"\" then",
        "        return \"\"",
        "    endif",
        "    if TradeTerms.settlementCurrency then",
        "    // If Settlement currency is defined, all cash flow output is in that currency, otherwise, simply use the pricing currency",
        "            settlementCurrency1= TradeTerms.settlementCurrency",
        "    else",
        "            settlementCurrency1= TradeTerms.pricingCurrency",
        "    endif",
        null,
        "    if \"DiscountCurve\".Defined{",
        "        if DiscountCurve{",
        "            paymentParameters= SnT::createCashPaymentParameters(paymentTable, TradeTerms.cashSettlement, IncludeValueDate, settlementCurrency1, DiscountCurve)",
        "        }",
        "    }",
        "    else{",
        "    	if \"BaseDiscountCurve\".Defined & \"TermDiscountCurve\".Defined{",
        "    		if BaseDiscountCurve & TermDiscountCurve{",
        "    			paymentParameters= SnT::createCashPaymentParameters(paymentTable, TradeTerms.cashSettlement, IncludeValueDate, settlementCurrency1, TermDiscountCurve, BaseDiscountCurve, TermDiscountCurve)",
        "    		}",
        "    	}",
        "    	else{       ",
        "    		paymentParameters= SnT::createCashPaymentParameters(paymentTable, TradeTerms.cashSettlement, IncludeValueDate, settlementCurrency1)",
        "    	}",
        "    }",
        null,
        "    id= GetConsolidatedCashFlow(NETCASHPAYMENTParameters.localID)",
        "    return id",
        "}",
        null,
        "//return the zero rate accounting for the termination",
        "function SnT::GetZeroRate1",
        "{   ",
        "    if TradeTerms.isEnded then",
        "        return 0",
        "    endif",
        null,
        "    return pow(1 / Numerix::GetDF(NxStd::DiscountCurveID(TradeTerms.Currency), ValuationDate, TradeTerms.SnT::lastPaymentDate) , 1 / Numerix::GetDCF(ValuationDate, TradeTerms.SnT::lastPaymentDate, \"ACT/ACT\")) - 1",
        "}",
        null,
        "//Output Cashflow Table for OVT calculation",
        "constfunction OutputOVTCashflow(table, leg, table2=\"\", leg2=\"\")",
        "{",
        "    //Load the table",
        "    CF = Numerix::Load(implementedObject.View(table))",
        "    CF2 = Numerix::Load(implementedObject.View(table2))",
        null,
        "    //Define the columns    ",
        "    Col = {\"cashflowCategory\", \"cashflowType\", \"exDate\", \"fixingDate\", \"accrualStartDate\", \"accrualEndDate\", \"paymentDate\", \"valuationCurrency\", ",
        "            \"valuationPV\", \"valuationAmount\", \"paymentCurrency\", \"paymentPV\", \"paymentAmount\", \"isFixed\", \"dcf\", \"df\", \"sp\", \"notionalCurrency\", ",
        "            \"notional\", \"effectiveRate\", \"spread\", \"isCashSettled\", \"cashSettledFixingDate\", \"cashSettledFixingRate\", \"stdcfDetailID\"}    ",
        "    cashflowCategory = {}",
        "    cashflowType = {}",
        "    exDate = {}",
        "    fixingDate = {}",
        "    accrualStartDate = {}",
        "    accrualEndDate = {}",
        "    paymentDate = {}",
        "    valuationCurrency = {}",
        "    valuationPV = {}",
        "    valuationAmount = {}",
        "    paymentCurrency = {}",
        "    paymentPV = {}",
        "    paymentAmount = {}",
        "    isFixed = {}",
        "    dcf = {}",
        "    df = {}",
        "    sp = {}",
        "    notionalCurrency = {}",
        "    notional = {}",
        "    effectiveRate = {}",
        "    spread = {}",
        "    isCashSettled = {}",
        "    cashSettledFixingDate = {}",
        "    cashSettledFixingRate = {}",
        "    stdcfDetailID = {}",
        null,
        "    //if it exsits",
        "    if CF then",
        "        for i =1 to CF.FIXINGDATE.size",
        "            cashflowCategory @= leg",
        "            cashflowType @= \"INT\"",
        "            try Begin exDate @= CF.paymentDate[i] end catch error begin exDate @= \"\" end",
        "            try Begin fixingDate @= CF.fixingDate[i] end catch error begin fixingDate @= \"\" end",
        "            try Begin accrualStartDate @= CF.accrualStartDate[i] end catch error begin accrualStartDate @= \"\" end",
        "            try Begin accrualEndDate @= CF.accrualEndDate[i] end catch error begin accrualEndDate @= \"\" end",
        "            try Begin paymentDate @= CF.paymentDate[i] end catch error begin paymentDate @= \"\" end",
        "            try Begin valuationCurrency @= CF.currency[i] end catch error begin valuationCurrency @= \"\" end",
        "            try Begin valuationPV @= CF.paymentPV[i] end catch error begin valuationPV @= \"\" end",
        "            try Begin valuationAmount @= CF.paymentActual[i] end catch error begin valuationAmount @= \"\" end",
        "            try Begin paymentCurrency @= CF.currency[i] end catch error begin paymentCurrency @= \"\" end",
        "            try Begin paymentPV @= CF.paymentPV[i] end catch error begin paymentPV @= \"\" end",
        "            try Begin paymentAmount @= CF.paymentActual[i] end catch error begin paymentAmount @= \"\" end",
        "            try Begin isFixed @= if CF.FIXING[i] = \"Y\" ? \"TRUE\" : \"FALSE\" end catch error begin isFixed @= \"\" end",
        "            try Begin dcf @= CF.dcf[i] end catch error begin dcf @= \"\" end",
        "            try Begin df @= CF.df[i] end catch error begin df @= \"\" end",
        "            try Begin sp @= CF.sp[i] end catch error begin sp @= \"\" end",
        "            try Begin notionalCurrency @= CF.currency[i] end catch error begin notionalCurrency @= \"\" end",
        "            try Begin notional @= CF.notional[i] end catch error begin notional @= \"\" end",
        "            try Begin effectiveRate @= CF.coupon[i] end catch error begin effectiveRate @= \"\" end",
        "            try Begin spread @= CF.spread[i] end catch error begin spread @= \"\" end",
        "            try Begin isCashSettled @= if CF.isCashSettled[i] = \"Y\" ? \"TRUE\" : \"FALSE\" end catch error begin isCashSettled @= \"\" end",
        "            try Begin cashSettledFixingDate @= CF.cashSettledFixingDate[i] end catch error begin cashSettledFixingDate @= \"\" end    ",
        "            try Begin cashSettledFixingRate @= CF.cashSettledFixingRate[i] end catch error begin cashSettledFixingRate @= \"\" end  ",
        "            try Begin stdcfDetailID @= CF.stdcfDetailID[i] end catch error begin stdcfDetailID @= \"\" end  ",
        "        next",
        "    endif",
        null,
        "    if CF2 then",
        "        for i =1 to CF2.FIXINGDATE.size",
        "            cashflowCategory @= leg2",
        "            cashflowType @= \"INT\"",
        "            try Begin exDate @= CF2.paymentDate[i] end catch error begin exDate @= \"\" end",
        "            try Begin fixingDate @= CF2.fixingDate[i] end catch error begin fixingDate @= \"\" end",
        "            try Begin accrualStartDate @= CF2.accrualStartDate[i] end catch error begin accrualStartDate @= \"\" end",
        "            try Begin accrualEndDate @= CF2.accrualEndDate[i] end catch error begin accrualEndDate @= \"\" end",
        "            try Begin paymentDate @= CF2.paymentDate[i] end catch error begin paymentDate @= \"\" end",
        "            try Begin valuationCurrency @= CF2.currency[i] end catch error begin valuationCurrency @= \"\" end",
        "            try Begin valuationPV @= CF2.paymentPV[i] end catch error begin valuationPV @= \"\" end",
        "            try Begin valuationAmount @= CF2.paymentActual[i] end catch error begin valuationAmount @= \"\" end",
        "            try Begin paymentCurrency @= CF2.currency[i] end catch error begin paymentCurrency @= \"\" end",
        "            try Begin paymentPV @= CF2.paymentPV[i] end catch error begin paymentPV @= \"\" end",
        "            try Begin paymentAmount @= CF2.paymentActual[i] end catch error begin paymentAmount @= \"\" end",
        "            try Begin isFixed @= if CF2.FIXING[i] = \"Y\" ? \"TRUE\" : \"FALSE\" end catch error begin isFixed @= \"\" end",
        "            try Begin dcf @= CF2.dcf[i] end catch error begin dcf @= \"\" end",
        "            try Begin df @= CF2.df[i] end catch error begin df @= \"\" end",
        "            try Begin sp @= CF2.sp[i] end catch error begin sp @= \"\" end",
        "            try Begin notionalCurrency @= CF2.currency[i] end catch error begin notionalCurrency @= \"\" end",
        "            try Begin notional @= CF2.notional[i] end catch error begin notional @= \"\" end",
        "            try Begin effectiveRate @= CF2.coupon[i] end catch error begin effectiveRate @= \"\" end",
        "            try Begin spread @= CF2.spread[i] end catch error begin spread @= \"\" end",
        "            try Begin isCashSettled @= if CF2.isCashSettled[i] = \"Y\" ? \"TRUE\" : \"FALSE\" end catch error begin isCashSettled @= \"\" end",
        "            try Begin cashSettledFixingDate @= CF2.cashSettledFixingDate[i] end catch error begin cashSettledFixingDate @= \"\" end    ",
        "            try Begin cashSettledFixingRate @= CF2.cashSettledFixingRate[i] end catch error begin cashSettledFixingRate @= \"\" end  ",
        "            try Begin stdcfDetailID @= CF2.stdcfDetailID[i] end catch error begin stdcfDetailID @= \"\" end  ",
        "        next                ",
        "    endif",
        null,
        "    //Create the table",
        "    Table1 = Numerix::Table(\"OVTTable\" + Numerix::UniqueNumber, Col, {cashflowCategory.transpose, cashflowType.transpose, exDate.transpose, fixingDate.transpose,",
        "                    accrualStartDate.transpose, accrualEndDate.transpose, paymentDate.transpose, valuationCurrency.transpose, valuationPV.transpose, valuationAmount.transpose,",
        "                    paymentCurrency.transpose, paymentPV.transpose, paymentAmount.transpose, isFixed.transpose, dcf.transpose, df.transpose, sp.transpose, notionalCurrency.transpose,",
        "                    notional.transpose, effectiveRate.transpose, spread.transpose, isCashSettled.transpose, cashSettledFixingDate.transpose, cashSettledFixingRate.transpose, stdcfDetailID.transpose})",
        "    //Output Table ID",
        "    return Table1.create",
        "}",
        null,
        "constfunction viewGreeks(_headerName = \"PV\", _GreeksName=\"Delta\")",
        "{",
        "    _Greeks = _headerName + \".\" + _GreeksName",
        "    reportGreeks = IRRisk_func.view(_Greeks)",
        "    if reportGreeks is \"LIST\":",
        "    {",
        "        try",
        "        {",
        "            TargetDiscountCurve = ImplementedObject.DiscountCurve",
        "        }",
        "        catch error{}",
        "        {",
        "            TargetDiscountCurve = Numerix::GetSettings(\"Settings.Currency\", TradeTerms.Currency, \"DiscountCurve\")",
        "        }",
        "        for i=1 to IRRisk_func.view(#\"CurveID\").Size:",
        "            if (IRRisk_func.view(#\"CurveID\")[i]).find(TargetDiscountCurve) > 0:",
        "            {",
        "                idx = i",
        "                break",
        "            }",
        "            else:",
        "                continue",
        null,
        "        reportGreeks = IRRisk_func.view(_Greeks)[idx]",
        "        return reportGreeks",
        "    }",
        "    else:",
        "        return reportGreeks",
        "}",
        null,
        "function AccruedDayCount(table)",
        "{",
        "    PrevFixingDate = NextPaymentDateFixing(main.view(table))",
        "    if PrevFixingDate = 0 then",
        "        return 0",
        "    else",
        "        if Numerix::Date(PrevFixingDate) <= Numerix::marketDate then",
        "            return Numerix::marketDate - Numerix::Date(PrevFixingDate)",
        "        else ",
        "            return 0",
        "        endif        ",
        "    endif",
        "}",
        null,
        "// Return the fixing date for next payment date",
        "function NextPaymentDateFixing(Schedule=standardCashflow.LEG1)",
        "{",
        "    try",
        "    {",
        "        payment_date = Numerix::query(Schedule.ID, \"PAYMENTDATE=<Date>\", \"Date\")",
        "        pay_date = payment_date.Date",
        "        fixing_date = Numerix::query(Schedule.ID, \"FIXINGDATE=<Date>\", \"Date\")",
        "        fix_date = fixing_date.Date",
        "        if Numerix::TableRowCount(payment_date) = 1:",
        "        {",
        "            if Numerix::Date(pay_date) >= Numerix::MarketDate:",
        "                return fix_date",
        "            else:",
        "                return 0",
        "        }",
        "        else:",
        "        {",
        "            for i = 1 to Numerix::TableRowCount(payment_date):",
        "                if Numerix::Date(pay_date[i]) >= Numerix::MarketDate:",
        "                    return fix_date[i]",
        "                    break",
        null,
        "            return 0",
        "        }",
        "    }",
        "    catch error{}",
        "    {",
        "        return 0",
        "    }",
        "}"]
    }
  },
  "DEFINITION.PRICERBASE_ESUN": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.PRICERBASE_ESUN",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.PRICERBASE_ESUN.PARAMETERS",
      "RESULTS" : "DEFINITION.PRICERBASE_ESUN.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.PRICERBASE_ESUN.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.PRICERBASE_ESUN.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "SCRIPT" : "DEFINITION.PRICERBASE_ESUN.SCRIPT.NXSL"
    }
  },
  "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.PARAMETERS",
      "RESULTS" : "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.RESULTS",
      "CLASSPROPERTIES" : "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "SCRIPT" : "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.CALLABLESWAPPRICERBASE",
      "DEFINITION" : "DEFINITION.PRICERBASE_ESUN"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_12768_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["TRADETERMS","MODELTEMPLATE","MODELPARAMETERS","REPORTINGCURRENCY"],
      "VALUE" : ["TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.TRADE-1701250621129591280090","MODEL.HY.UNIVERSAL","Numerix::Table(\"ModelParameters_10001\", {\"NAME\", \"VALUE\"}, {{\"Quote Type\", \"CMDTY Models\", \"EQ Models\", \"IR Models\", \"CR Models\", \"Payout Currency\", \"FX Models\"}, {\"MID\", \"\", \"\", \"CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^MARKETPRICER_12440_NX_AUTOGEN^IRMODELS_CALLABLEDUALGENERICINDEXSPREADRASWAP\", \"\", \"USD\", \"\"}})","USD"]
    }
  },
  "MODEL.HY.UNIVERSAL.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Model ID","EQ Models","Quote Type","Payout Currency","Default Correlation","IR Models","FX Models","CMDTY Models","CR Models","Solver"],
      "TYPE" : ["String","Table(MODEL.HY.UNIVERSAL.EQ_MODELS_SPEC)","String","Currency","Double","Table(MODEL.HY.UNIVERSAL.IR_MODELS_SPEC)","Table(MODEL.HY.UNIVERSAL.FX_MODELS_SPEC)","Table(MODEL.HY.UNIVERSAL.CMDTY_MODELS_SPEC)","Table(MODEL.HY.UNIVERSAL.CR_MODELS_SPEC)","String"],
      "REQUIRED" : [false,false,false,true,false,true,false,false,false,false],
      "DEFAULT" : [null,null,"MID",null,0,null,null,null,null,"FAST"],
      "GROUPING" : ["Model Parameters",null,null,null,null,null,null,null,null,null],
      "DESCRIPTION" : ["A unique string that identifies the model.","Table that supplies information used to construct EQ factor models. Each row represents a different factor model and includes the underlying asset (Key), currency, exchange, ticker, model template and serialized model parameters.","Indicate the Quote types used.  May be Mid, Bid, Ask.
","The underlying currency of the trade.","The default correlation value to use if not supplied by market data.","Table that supplies information used to construct IR factor models. Each row represents a different factor model and includes the underlying asset (Key), currency, model template and serialized model parameters.","Table that supplies information used to construct FX factor models. Each row represents a different factor model and includes the underlying asset (Key), base currency, term currency, model template and serialized model parameters.","Table that supplies information used to construct CMDTY factor models. Each row represents a different factor model and includes the underlying asset (Key), currency, exchange, ticker, model template and serialized model parameters.","Table that supplies information used to construct CR factor models. Each row represents a different factor model and includes the underlying asset (Key), currency, reference entity, debt type, restructuring clause, model template and serialized model parameters.","The type of solver to use in the calibration of a model on a generic tree. 

DEFAULT - Default; a quasi-Newton type solver
FAST - This is the initial recommended setting; Levenberg-Marquardt type with repetitive start
GNSS - Gauss Newton Subspace Solver
SIMPLEX - Nelder-Mead minimization
LRU - Low rank update; the LRU optimizer combines a Gauss-Newton trust region approach with a low rank update for both the Jacobian and Hessian matrices.
QP - Quadratic Programming approach
MIN SMOOTH - Square approximation minimizer, based on Powell's method; The minimized function is assumed to be differentiable and the constraints are assumed to be differentiable, at least on the domain border. 
DE - Differential Evolution solver"]
    }
  },
  "MODEL.HY.UNIVERSAL.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Calibration Parameter","Joint Calibration Error","Individual Calibration Error"],
      "TYPE" : ["Table()","Table()","Table()"],
      "REQUIRED" : [false,false,false],
      "ID" : [null,null,null],
      "HEADER" : [null,null,null],
      "VALUE" : [
        ">NxStd::CalibratedParameters(implementedobject)",    
        ">NxStd::JointCalibrationError(implementedobject)",    
        ">NxStd::IndividualCalibrationError(implementedobject)"],
      "CURRENCY" : [null,null,null],
      "CATEGORY" : [null,null,null],
      "DESCRIPTION" : ["Calibrated parameters details of this model. Values of calibrated parameters could be a scalar, curve (time-dependent, single array) or surface (two dimensional data)","Calibration error of this model in overall and at each instrument level.  
RMSE is root mean square error as of aggregation of individual instrument's residual. Error is deviation of model value from TARGET value. TARGET value is set through OPTION TARGET heading (eg. pricer, relative price, volatility, relative volatility, BS volatility, etc.)
RMSE (VOL) is root mean square error as of TARGET value is set to volatility
Instrument shows relative and absolute error of calibration with respect to TARGET (eg. volatility)","Calibration error of this model in overall and at each instrument level.  
RMSE is root mean square error as of aggregation of individual instrument's residual. Error is deviation of model value from TARGET value. TARGET value is set through OPTION TARGET heading (eg. pricer, relative price, volatility, relative volatility, BS volatility, etc.)
RMSE (VOL) is root mean square error as of TARGET value is set to volatility
Instrument shows relative and absolute error of calibration with respect to TARGET (eg. volatility)"],
      "PRI" : [null,null,null]
    }
  },
  "MODEL.HY.UNIVERSAL.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name","Asset Class"],
      "TYPE" : ["String","String"],
      "VALUE" : ["Pricing - Universal Hybrid Model","HY"]
    }
  },
  "MODEL.HY.UNIVERSAL.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "MODEL.HY.UNIVERSAL.EQ_MODELS_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Key" : ["String"],
      "Currency" : ["Currency"],
      "Exchange" : ["String"],
      "Ticker" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"]
    }
  },
  "MODEL.HY.UNIVERSAL.IR_MODELS_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Key" : ["String"],
      "Currency" : ["Currency"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"]
    }
  },
  "MODEL.HY.UNIVERSAL.FX_MODELS_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Key" : ["String"],
      "Base Currency" : ["Currency"],
      "Term Currency" : ["Currency"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"]
    }
  },
  "MODEL.HY.UNIVERSAL.CMDTY_MODELS_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Key" : ["String"],
      "Currency" : ["Currency"],
      "Exchange" : ["String"],
      "Symbol" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"]
    }
  },
  "MODEL.HY.UNIVERSAL.CR_MODELS_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Key" : ["String"],
      "Currency" : ["Currency"],
      "Reference Entity" : ["String"],
      "Debt Type" : ["String"],
      "Restructuring Clause" : ["String"],
      "Model Template" : ["ID"],
      "Model Parameters" : ["String"]
    }
  },
  "MODEL.HY.UNIVERSAL.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        "import \"script.nxcalibration\"",
        null,
        "//================================================================================",
        "// Implements",
        "//================================================================================",
        null,
        "function main",
        "{",
        "    call = Numerix::Object({\"eqb\", \"MODEL\", \"HY\"}) &",
        "    {",
        "        \"model\"             : \"HY UNIVERSAL\",",
        "        \"currency\"          : PayoutCurrency,",
        "        \"domestic model\" 	: universal_domesticmodel,",
        "        \"foreign 1 model\"   : universal_foreignmodels,",
        "        \"fx 1 model\"    	: universal_fxmodels,",
        "        \"equities\"         	: universal_eqmodels,",
        "        \"commodities\"       : universal_cmdtymodels,",
        "        \"cr model data\"     : universal_crmodels,",
        "        \"nowdate\"           : Numerix::MarketDate,",
        "        \"correlations\"      : universal_correlation,",
        "        \"bootstrap\"     	: true,",
        "        \"convergence\"    	: 0.99,",
        "        \"solverstep\"        : 0.01,",
        "        \"maincorrelations\"  : true,",
        "        \"solver\"       		: Solver,		",
        "        \"option TARGET\"     : \"TARGET REL VOL\",",
        "        \"joint calibration\" : \"ADAPTIVE\"",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        "// Creates the domestic model from the first entry in the IR Models table.",
        null,
        "constfunction universal_domesticmodel",
        "{",
        "    irModelData = Numerix::Load(IRModels)",
        null,
        "    foreach row in irModelData :",
        "        return Numerix::MarketResolve(row.ModelTemplate + \".\" + row.Currency, Numerix::Execute(row.ModelParameters), row.ModelTemplate)",
        "}",
        null,
        "// Creates a table of IR models for currencies other than the payout currency.",
        null,
        "constfunction universal_foreignmodels",
        "{",
        "    irModelData = Numerix::Load(IRModels)",
        null,
        "	ids = {}",
        null,
        "    first = true",
        "	foreach row in irModelData",
        "	{",
        "        if first :",
        "            first = false",
        "        else :",
        "            ids &= Numerix::MarketResolve(row.ModelTemplate + \".\" + row.Currency, Numerix::Execute(row.ModelParameters), row.ModelTemplate)",
        "	}",
        null,
        "    ifnot ids :",
        "        return \"\"",
        null,
        "	outputTable = Numerix::Table(\"ForeignModels_\" + Numerix::UniqueNumber, {\"ID\"}, {ids})",
        null,
        "	return outputTable.Create",
        "}",
        null,
        "// Creates a table of FX models from the FX Models parameter.",
        null,
        "constfunction universal_fxmodels",
        "{",
        "    ifnot FXModels :",
        "        return \"\"",
        null,
        "    fxModelData = Numerix::Load(FXModels)",
        null,
        "	ids = {}",
        "	foreach row in fxModelData :",
        "    	ids &= Numerix::MarketResolve(row.ModelTemplate + \".\" + row.BaseCurrency + row.TermCurrency, Numerix::Execute(row.ModelParameters), row.ModelTemplate)",
        null,
        "	outputTable = Numerix::Table(\"FXModels_\" + Numerix::UniqueNumber, {\"ID\"}, {ids})",
        null,
        "	return outputTable.Create          ",
        "}",
        null,
        "// Creates a table of equity models from EQ Models parameter.",
        null,
        "constfunction universal_eqmodels",
        "{",
        "    ifnot EQModels :",
        "        return \"\"",
        null,
        "    eqModelData = Numerix::Load(EQModels)",
        null,
        "	names = {}",
        "	models = {}",
        null,
        "	foreach row in eqModelData",
        "	{",
        "		names &= row.Currency + row.Exchange + row.Ticker",
        "		models &= Numerix::MarketResolve(row.ModelTemplate + \".\" + row.Currency + \"-\" + row.Exchange + \"-\" + row.Ticker, Numerix::Execute(row.ModelParameters), row.ModelTemplate)",
        "	}",
        null,
        "	outputTable = Numerix::Table(\"EQModels_\" + Numerix::UniqueNumber, {\"NAME\", \"MODEL\"}, {names, models})",
        null,
        "	return outputTable.Create",
        "}",
        null,
        "// Creates a table of commodity models from CMDTY Models parameter.",
        null,
        "constfunction universal_cmdtymodels",
        "{",
        "    ifnot CMDTYModels :",
        "        return \"\"",
        null,
        "    cmdtyModelData = Numerix::Load(CMDTYModels)",
        null,
        "	names = {}",
        "	models = {}",
        null,
        "	foreach row in cmdtyModelData",
        "	{",
        "		names &= row.Currency + row.Exchange + row.Ticker",
        "		models &= Numerix::MarketResolve(row.ModelTemplate  + \".\" + row.Currency + \"-\" + row.Exchange + \"-\" + row.Ticker, Numerix::Execute(row.ModelParameters), row.ModelTemplate)",
        "	}",
        null,
        "	outputTable = Numerix::Table(\"CMDTYModels_\" + Numerix::UniqueNumber, {\"NAME\", \"MODEL\"}, {names, models})",
        null,
        "	return outputTable.Create",
        "}",
        null,
        "// Creates a table of credit models from CR Models parameter.",
        null,
        "constfunction universal_crmodels",
        "{",
        "    ifnot CRModels :",
        "        return \"\"",
        null,
        "    crModelData = Numerix::Load(CRModels)",
        null,
        "	names = {}",
        "	models = {}",
        null,
        "	foreach row in crModelData",
        "	{",
        "		names &= row.Currency + row.ReferenceEntity + row.DebtType + row.RestructuringClause",
        "		models &= Numerix::MarketResolve(row.ModelTemplate + \".\" + row.Currency + \".\" + row.ReferenceEntity + \"-\" + row.DebtType + \"-\" + row.RestructuringClause, Numerix::Execute(row.ModelParameters), row.ModelTemplate)",
        "	}",
        null,
        "	outputTable = Numerix::Table(\"CRModels_\" + Numerix::UniqueNumber, {\"CMCDS\", \"ID\"}, {names, models})",
        null,
        "	return outputTable.Create",
        "}",
        null,
        "constfunction universal_correlation",
        "{",
        "	hyList = { \"DOMESTICMODEL\" }",
        "	underlyingList = { NxStd::IRUnderlyingAsset(PayoutCurrency) + \".1\" }",
        null,
        "    i = 1",
        "    irModelData = Numerix::Load(IRModels)",
        "    first = true",
        "	foreach row in irModelData",
        "	{",
        "        if first :",
        "            first = false",
        "        else",
        "        {",
        "            // Handle foreign.",
        null,
        "			hyList @= \"FOREIGN\" + i + \"MODEL\"",
        "			underlyingList @= NxStd::IRUnderlyingAsset(row.Currency) + \".1\"",
        null,
        "            // Handle FX.",
        null,
        "			hyList @= \"FX\" + i + \"MODEL\"",
        "			underlyingList @= NxStd::FXUnderlyingAsset(row.Currency, PayoutCurrency) + \".1\"",
        null,
        "            i += 1",
        "		}",
        "	}",
        null,
        "    if EQModels",
        "    {",
        "        eqModelData = Numerix::Load(EQModels)",
        "    	foreach row in eqModelData",
        "    	{",
        "    		hyList @= row.Currency + row.Exchange + row.Ticker",
        "    		underlyingList @= NxStd::EQUnderlyingAsset(row.Currency, row.Exchange, row.Ticker) + \".1\"",
        "    	}",
        "    }",
        null,
        "    if CMDTYModels",
        "    {",
        "        cmdtyModelData = Numerix::Load(CMDTYModels)",
        "    	foreach row in cmdtyModelData",
        "    	{",
        "    		hyList @= row.Currency + row.Exchange + row.Ticker",
        "    		underlyingList @= NxStd::CMDTYUnderlyingAsset(row.Currency, row.Exchange, row.Ticker) + \".1\"",
        "    	}",
        "    }",
        null,
        "    if CRModels",
        "    {",
        "        crModelData = Numerix::Load(CRModels)",
        null,
        "        nrows = 0",
        "        foreach row in crModelData :",
        "            nrows += 1",
        null,
        "        i = 1",
        "    	foreach row in crModelData",
        "    	{",
        "            if nrows == 1 :",
        "    		    hyList @= \"CR\"",
        "            else :",
        "                hyList @= \"CR\" + i",
        "    		underlyingList @= NxStd::CRUnderlyingAsset(row.Currency, row.ReferenceEntity, row.DebtType, row.RestructuringClause) + \".1\"",
        null,
        "            i += 1",
        "    	}",
        "    }",
        null,
        "	valueList = {}",
        null,
        "	for i = 1 to hyList.Size",
        "	{",
        "		rowList = {}",
        null,
        "		for j = 1 to hyList.Size",
        "		{",
        "			if i == j :",
        "				rowList @= 1",
        "			else",
        "			{",
        "				corrQuote = Numerix::Quote.Key == \"CORR.\" + underlyingList[i] + \"_CORR.\" + underlyingList[j]",
        "                if corrQuote.Size = 0 :",
        "					corrQuote = Numerix::Quote.Key == \"CORR.\" + underlyingList[j] + \"_CORR.\" + underlyingList[i]",
        null,
        "				if corrQuote.Size != 0 : Numerix::AddQuote(corrQuote)",
        "                rowList @= if corrQuote.Size != 0 ? Numerix::Quote(corrQuote.Key).Value : DefaultCorrelation",
        "			}",
        "		}",
        "		valueList @= rowList",
        "	}",
        null,
        "	matrix = Numerix::Matrix(\"Correlations_\" + Numerix::UniqueNumber, hyList, hyList, valueList)",
        "	return matrix.Create",
        "}"]
    }
  },
  "SCRIPT.NXCALIBRATION": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DEFINITIONS" : [
        "//*****************************************************************************",
        "// Copyright (c) 1996-2016 Numerix LLC.  All rights reserved.",
        "// This software comprises valuable trade secrets and may be used,",
        "// copied, transmitted, stored, and distributed only in accordance",
        "// with the terms of a written license or trial agreement and with the",
        "// inclusion of this copyright notice.",
        "//*****************************************************************************",
        "//*****************************************************************************",
        "// ",
        "// Calibration Error Viewer",
        "// ",
        "//*****************************************************************************",
        "function NxStd::CalibrationError(model)",
        "{",
        "	outputs = {}",
        "    model_detail_viewer = ModelDetailViewer(model)",
        "	accuracy = model.View(\"accuracy\")",
        "	rmse = CalibrationErrorView(model_detail_viewer, \"RMSE\")",
        "    instrument = CalibrationErrorView(model_detail_viewer, \"Instrument\")",
        "	",
        "	ifnot (accuracy.Size == 0) :",
        "		outputs @= {\"RMSE\", Numerix::Table(\"Accuracy_\" + Numerix::UniqueNumber, {\"Root mean square error\"}, accuracy).Create, \"Table\"}",
        "	ifnot (rmse.Size == 0) :",
        "		outputs @= {\"RMSE (VOL)\", Numerix::Table(\"RMSE_\" + Numerix::UniqueNumber, {\"Root mean square error (of volatility)\"}, rmse).Create, \"Table\"}",
        "	ifnot (instrument.Size == 0) :",
        "		outputs @= {\"Instrument\", instrument, \"Table\"}",
        "	",
        "	if (outputs.Size > 0 AND instrument.Size > 0)",
        "	{",
        "		outputTable = Numerix::Table(\"CalibrationError_\" + Numerix::UniqueNumber, {\"NAME\", \"ID\", \"TYPE\"}, outputs.Transpose)",
        "		return Numerix::Create(outputTable)",
        "	}",
        "	return \"\"",
        "}",
        null,
        "function NxStd::JointCalibrationError(model, UnderlyingAssetIDs = \"\")",
        "{",
        "    return HYCalibrationError(model, \"Joint\", UnderlyingAssetIDs)",
        "}",
        null,
        "function NxStd::IndividualCalibrationError(model, UnderlyingAssetIDs = \"\")",
        "{",
        "    return HYCalibrationError(model, \"Individual\", UnderlyingAssetIDs)",
        "}",
        null,
        "function HYCalibrationError(model, priceby, UnderlyingAssetIDs = \"\")",
        "{    ",
        "	outputs = {}",
        "    model_detail_viewer = ModelDetailViewer(model, priceby, UnderlyingAssetIDs)",
        "	",
        "    ifnot model_detail_viewer :",
        "        return \"\"",
        "    ",
        "    accuracy = model.View(\"accuracy\")",
        "	ifnot (accuracy.Size == 0) :",
        "		outputs @= {\"RMSE\", Numerix::Table(\"Accuracy_\" + Numerix::UniqueNumber, {\"Root mean square error\"}, accuracy).Create, \"Table\"}",
        "	",
        "    headers = model_detail_viewer.View.OutputHeaders",
        "    values = model_detail_viewer.View.OutputValues",
        "    foreach header in headers do",
        "        header_idx = header.CANONICAL.Find(\"GLOBALFIT\")",
        "        if header_idx > 0 :",
        "            outputs @= {header[1..header_idx-2] + \" RMSE (VOL)\", Numerix::Table(\"RMSE_\" + Numerix::UniqueNumber, {header[1..header_idx-2] + \"Root mean square error (of volatility)\"}, values[header.Iteration]).Create, \"Table\"}",
        "        header_idx = header.CANONICAL.Find(\"INSTRUMENTS\")",
        "        if header_idx > 0 :",
        "            outputs @= {header[1..header_idx-2] + \" Instrument\", values[header.Iteration], \"Table\"}",
        "    next",
        "    ",
        "	if outputs.Size > 0",
        "	{",
        "		outputTable = Numerix::Table(\"CalibrationError_\" + Numerix::UniqueNumber, {\"NAME\", \"ID\", \"TYPE\"}, outputs.Transpose)",
        "		return Numerix::Create(outputTable)",
        "	}",
        "	return \"\"",
        "}",
        null,
        "function ModelDetailViewer(model, prieby = \"\", UnderlyingAssetIDs = \"\")",
        "{",
        "    call = Numerix::Object({\"MODELVIEWER\", \"VIEWER\", \"MODEL\"}) & ",
        "    {",
        "        \"model\"      				: model,",
        "		\"reporttype\" 				: \"CalibrationInstruments\"",
        "    }",
        "	",
        "	if model.GetValue(\"type\").Canonical == \"HY\" ",
        "	{",
        "        components = HybridModelComponents(model, UnderlyingAssetIDs)",
        "        ifnot components :",
        "            return \"\"",
        "        ",
        "		call &= ",
        "        {",
        "            \"calibrationinstruments\"    : components,",
        "		    \"price by\" 				    : if prieby.Canonical == \"JOINT\" ? \"FULL HYBRID\" : \"SUB-HYBRID\"",
        "        }",
        "    }",
        "    ",
        "	try",
        "	{",
        "		return call.Create",
        "	}",
        "	catch error",
        "	{",
        "		// if not calibrated then return nothing",
        "		Numerix::SetMajor(error)",
        "        return \"\"",
        "	}",
        "}",
        null,
        "function CalibrationErrorView(viewer, type)",
        "{",
        "    ifnot viewer :",
        "        return \"\"",
        "    ",
        "    viewerHeaders = viewer.View.OutputHeaders",
        "    viewerValues = viewer.View.OutputValues",
        null,
        "	switch on type",
        "		case \"RMSE\"",
        "		{",
        "			foreach header in viewerHeaders do",
        "				if \"GLOBALFIT\" in header.Canonical : return viewerValues[header.Iteration]",
        "			next",
        "			return viewer.View(\"globalfit\")",
        "		}",
        "		default",
        "			return viewer.View(\"instruments\")",
        "	endswitch",
        "}",
        null,
        "function HybridModelComponents(model, UnderlyingAssetIDs = \"\")",
        "{",
        "	call = Numerix::Object({\"MODELPARAMETERVIEWER_\"+Numerix::UniqueNumber, \"VIEWER\", \"CALIBRATIONPARAMETERS\"}) & ",
        "    {",
        "        \"model\"      : model",
        "    }",
        "	",
        "    outputs = {}",
        "    model_components = call.Create.View(\"components\")",
        "    model_components_IDs = model_components.ID",
        "    model_components_factors = model_components.Factors",
        "    ",
        "    if UnderlyingAssetIDs",
        "    {",
        "        // return matched component models",
        "        foreach underlyingAssetID in UnderlyingAssetIDs.ID do",
        "            model_component_id = LookupModelID(model_components, underlyingAssetID)",
        "            if model_component_id : ",
        "                outputs @= model_component_id",
        "        next",
        "    }",
        "    else",
        "    {",
        "        // return all component models",
        "        foreach model_component in model_components_IDs do",
        "            if model_components_factors[model_component.Iteration] > 0 :",
        "                outputs @= model_component.View(\"ID\")",
        "        next",
        "    }",
        "    ",
        "    if outputs.Size = 0:",
        "        return \"\"",
        "    ",
        "	id_table = Numerix::Table(\"HYModelComponents_\"+Numerix::UniqueNumber, {\"Model ID\"}, outputs.Transpose)",
        "	",
        "	return id_table.Create",
        "}",
        null,
        "function LookupModelID(model_components, underlyingAssetID)",
        "{",
        "    ifnot model_components : ifnot underlyingAssetID :",
        "        return \"\"",
        "    ",
        "    target_underlying = underlyingAssetID.Replace(\"/\", \"\") // FX.<BaseCurrency>/<TermCurrency>",
        "    target_underlying = target_underlying.Replace(\"-\", \"\") // EQ.<Currency>-<Exchange>-<Ticker>, CMDTY.<Currency>-<Exchange>-<Ticker>",
        "    target_underlying = target_underlying.Replace(\"_\", \"\") // CR.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>",
        "    target_underlying = target_underlying.Replace(\"CT.\", \"CR.\") // CT.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>",
        "    target_underlying = target_underlying.Replace(\"CT.\", \"CR.\") // CT.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>",
        "    target_underlying = target_underlying.Replace(\"RR.\", \"INFL.\") // RR.<Currency>-<InflationIndex>",
        "    target_underlying = target_underlying.Replace(\"CPI.\", \"INFL.\") // CPI.<Currency>-<InflationIndex>",
        "    ",
        "    matched_model_id = \"\"",
        "    model_components_IDs = model_components.ID",
        "    model_components_assetclasses = model_components.AssetClass",
        "    ",
        "    foreach model_component in model_components_IDs do",
        "        if model_components_factors[model_component.Iteration] > 0 ",
        "        {",
        "            asset_class = model_components_assetclasses[model_component.Iteration]",
        "            model_underlying = \"\"",
        "            switch on asset_class",
        "                case \"IR\"",
        "                    model_underlying = \"IR.\" + LookupModelValue(model_component, \"Currency\")",
        "                case \"FX\"",
        "                    model_underlying = \"FX.\" + LookupModelValue(model_component, \"Foreign1Currency\") + LookupModelValue(model_component, \"Currency\")",
        "                case \"EQ\"",
        "                    model_underlying = \"EQ.\" + LookupModelValue(model_component, \"AssetName\") // EQ.USDUSIBM",
        "                case \"CMDTY\"",
        "                    model_underlying = \"CMDTY.\" + LookupModelValue(model_component, \"AssetName\") // CMDTY.USDCOMEXGCA",
        "                case \"CR\"",
        "                    model_underlying = \"CR.\" + LookupModelValue(model_component, \"AssetName\") //CR.USDJPMSNRFORXR",
        "                case \"INFL\"",
        "                    model_underlying = \"INFL.\" + LookupModelValue(model_component, \"Currency\") + LookupModelValue(model_component, \"AssetName\") // CPI.USDCPURNSA",
        "                default",
        "                    model_underlying = \"\"",
        "            endswitch",
        "            ",
        "            if model_underlying == target_underlying :",
        "                return model_component.View(\"ID\")",
        "        }",
        "    next",
        null,
        "    return \"\"",
        "}",
        null,
        null,
        "function LookupModelValue(model_component, target_header)",
        "{",
        "    model_view = model_component.ImplementedObject.View",
        "    headers = model_view.CallHeaders",
        "    values = model_view.CallValues",
        "    foreach header in headers do",
        "        if header.Canonical = target_header.Canonical :",
        "            return values[header.Iteration]",
        "    next",
        "    return \"\"",
        "}",
        null,
        "//*****************************************************************************",
        "// ",
        "// Calibrated Parameters Viewer",
        "// ",
        "//*****************************************************************************",
        "function NxStd::CalibratedParameters(model)",
        "{",
        "	model_assetclass = model.GetValue(\"type\").Canonical",
        "	model_type = model.GetValue(\"model\").Canonical",
        "	parameters = {\"all\"}",
        "	",
        "	switch on model_assetclass",
        "		case \"EQ\"",
        "			switch on model_type",
        "				case \"BLACK\"",
        "					parameters = {\"sigma1\"}",
        "				case \"BLACKSCHOLES\"",
        "					parameters = {\"sigma1\"}",
        "				case \"DUPIRE\"",
        "					parameters = {\"local vol\"}",
        "				case \"HESTON\"",
        "					parameters = {\"sigma1\", \"correlation\", \"sv vol\", \"sv reversion\", \"sv spot\", \"sv spot distribution width\", \"smile\", \"skew\"}",
        "				case \"BATES\"",
        "                    ifnot model.HasValue(\"jumptype\") : ",
        "                        return NxStd::ViewCalibratedParameters(model, {\"all\"})",
        "					switch on model.GetValue(\"jumptype\").Canonical",
        "						case \"MERTON\"",
        "							parameters = {\"sigma1\", \"correlation\", \"sv vol\", \"sv reversion\", \"sv spot\", \"jump intensity\", \"merton mu\", \"merton sigma\"} ",
        "						case \"KOU\"",
        "							parameters = {\"sigma1\", \"correlation\", \"sv vol\", \"sv reversion\", \"sv spot\", \"jump intensity\", \"kou p\", \"kou lambda pos\", \"kou lambda neg\"} ",
        "						default",
        "					endswitch",
        "				case \"EQCONVERTIBLE\"",
        "					parameters = {\"funct a values\", \"local vol\"} // viewer is not supported",
        "				default",
        "			endswitch",
        "		case \"FX\"",
        "			switch on model_type",
        "				case \"BLACK\"",
        "					parameters = {\"sigma1\"}",
        "				case \"BLACKSCHOLES\"",
        "					parameters = {\"sigma1\"}",
        "				case \"DUPIRE\"",
        "					parameters = {\"local vol\"}",
        "				case \"HESTON\"",
        "					parameters = {\"sigma1\", \"correlation\", \"sv vol\", \"sv reversion\", \"sv spot\", \"sv spot distribution width\", \"smile\", \"skew\"}",
        "				case \"BATES\"",
        "                    ifnot model.HasValue(\"jumptype\") : ",
        "                        return NxStd::ViewCalibratedParameters(model, {\"all\"})",
        "					switch on model.GetValue(\"jumptype\").Canonical",
        "						case \"MERTON\"",
        "							parameters = {\"sigma1\", \"correlation\", \"sv vol\", \"sv reversion\", \"sv spot\", \"jump intensity\", \"merton mu\", \"merton sigma\"} ",
        "						case \"KOU\"",
        "							parameters = {\"sigma1\", \"correlation\", \"sv vol\", \"sv reversion\", \"sv spot\", \"jump intensity\", \"kou p\", \"kou lambda pos\", \"kou lambda neg\"} ",
        "						default",
        "					endswitch",
        "				case \"LSV\"",
        "					parameters = {\"all\"}",
        "				default",
        "			endswitch",
        "		case \"IR\"",
        "			switch on model_type",
        "				case \"HULLWHITE1F\"",
        "					parameters = {\"sigma1\", \"lambda1\"}",
        "				case \"HULLWHITE2F\"",
        "					parameters = {\"sigma1\", \"sigma2\", \"lambda1\", \"lambda2\", \"correlations\"}",
        "				case \"LMM\"",
        "					parameters = {\"all\"} // viewer is not supported",
        "				default",
        "			endswitch",
        "		case \"CMDTY\"",
        "			switch on model_type",
        "				case \"BLACK\"",
        "					parameters = {\"vol values\"} // viewer is not supported",
        "				default",
        "			endswitch",
        "		case \"INFL\"",
        "			switch on model_type",
        "				case \"IMM\"",
        "					parameters = {\"all\"} // viewer is not supported",
        "				default",
        "			endswitch",
        "		case \"CR\"",
        "		case \"HY\"",
        "			switch on model_type",
        "				case \"HYUNIVERSAL\"",
        "					//parameters = {\"all\"} // viewer is not supported",
        "                    // in case of hybrid model, translate indexed name into asset name",
        "                    return TranslateUnderlyingNameHY(model)",
        "				default",
        "			endswitch",
        "		default",
        "	endswitch",
        "	",
        "	return NxStd::ViewCalibratedParameters(model, parameters)",
        "}",
        null,
        "function NxStd::ViewCalibratedParameters(model, parameters)",
        "{",
        "	viewer = model.View",
        "	",
        "	// Custom model setup (not calibrated) then returns parameters seen on model",
        "	try ",
        "	{",
        "		calibrated_inst = CalibrationErrorView(model, \"Instrument\") //NxStd::CalibrationErrorViewer(model, \"Instrument\")        ",
        "        ",
        "		if calibrated_inst.Size == 0 :",
        "			return NxStd::MakeCalibratedParametersTableAllFromModel(viewer) ",
        "	}",
        "	catch error",
        "	{",
        "		return NxStd::MakeCalibratedParametersTableAllFromModel(viewer) ",
        "	}",
        "	",
        "	if \"ALL\" in parameters.Canonical then",
        "		return NxStd::MakeCalibratedParametersTableAllFromModel(viewer) ",
        "	end if",
        "	",
        "	try",
        "	{",
        "		call = Numerix::Object({\"MODELPARAMETERVIEWER\", \"VIEWER\", \"CALIBRATIONPARAMETERS\"}) & ",
        "	    {",
        "	        \"model\"      : model",
        "	    }",
        "		viewer = call.Create",
        "		return NxStd::MakeCalibratedParametersTableFromViewer(viewer, parameters)",
        "	}",
        "	catch error",
        "	{",
        "		// Viewer is not supported",
        "		//Numerix::SetNormal(error)",
        "	}",
        "	",
        "	try ",
        "	{",
        "		// Parse parameters in model obj.",
        "		return NxStd::MakeCalibratedParametersTableFromModel(viewer, parameters)",
        "	}",
        "	catch error",
        "	{",
        "		//throw error",
        "		Numerix::SetNormal(error)",
        "		return NxStd::MakeCalibratedParametersTableAllFromModel(viewer) ",
        "	}",
        "	",
        "}",
        null,
        "function TranslateUnderlyingNameHY(model)",
        "{",
        "    output_table = NxStd::MakeCalibratedParametersTableAllFromModel(model.View)",
        "    headers = output_table.Headers",
        "    supported_model_types = {\"domestic\", \"foreign\", \"fx\", \"EQ\", \"CMDTY\"}",
        "    all_model_types = {}",
        "    foreach header in headers do",
        "        if header.Find(\".type\") > 0:",
        "            all_model_types &= header.replace(\".type\", \"\")",
        "        else",
        "        {   // deal with EQ models that don't have .type'",
        "            if header.Find(\"EQ\") > 0 : if header.Find(\".spot\")>0:",
        "                all_model_types &= header.replace(\".spot\", \"\")",
        "            ",
        "            if header.Find(\"fx\") > 0: if header.Find(\".spot\")>0: all_model_types &= header.replace(\".spot\",\"\")",
        "            ",
        "        }",
        "        if header.Find(\"CMDTY\") > 0 : if header.Find(\"spot\") > 0:",
        "            all_model_types &= header.replace(\".spot\", \"\")",
        null,
        "    ",
        "    next",
        "    model_types = {}",
        "    foreach supported_model_type in supported_model_types do",
        "        foreach all_model_type in all_model_types do",
        "            if all_model_type.Canonical.Find(supported_model_type.Canonical) > 0",
        "            {",
        "                model_types &= supported_model_type",
        "                break",
        "            }",
        "        next",
        "    next",
        "            ",
        "    target_headers = {}",
        "    new_headers = {}",
        "    call_map = Numerix::Map(model.ImplementedObject.View.CallHeaders, model.ImplementedObject.View.CallValues)",
        "    foreach model_type in model_types do",
        "        if model_type == \"domestic\"",
        "        {",
        "            target_headers &= \"domestic\"",
        "            new_headers &= call_map.Currency",
        "        }   ",
        "        else if model_type == \"foreign\" // foreign currency IR models",
        "        {",
        "            foreign_models = call_map.Foreign1Model.ID",
        "            foreach foreign_model in foreign_models do",
        "                foreign_model_map = Numerix::Map(foreign_model.ImplementedObject.View.CallHeaders, foreign_model.ImplementedObject.View.CallValues)",
        "                target_headers &= \"foreign\" + foreign_model.Iteration",
        "                new_headers &= foreign_model_map.Currency",
        "            next",
        "        }",
        "        else if model_type == \"fx\" // fx models",
        "        {",
        "            fx_models = call_map.FX1Model.ID",
        "            foreach fx_model in fx_models do",
        "                fx_model_map = Numerix::Map(fx_model.ImplementedObject.View.CallHeaders, fx_model.ImplementedObject.View.CallValues)",
        "                target_headers &= \"fx\" + fx_model.Iteration",
        "                new_headers &= fx_model_map.Foreign1Currency + fx_model_map.Currency",
        "            next",
        "        }",
        "        else if model_type == \"EQ\" // eq models",
        "        {",
        "            eq_models = call_map.Equities.Name",
        "            foreach eq_model in eq_models do",
        "                //eq_model_map = Numerix::Map(eq_model.ImplementedObject.View.CallHeaders, eq_model.ImplementedObject.View.CallValues)",
        "                target_headers &= \"EQ\" + eq_model.Iteration",
        "                new_headers &= eq_model//eq_model_map.AssetName",
        "            next",
        "        }",
        "        else if model_type == \"CMDTY\" // commodity models",
        "        {",
        "            cmdty_models = call_map.Commodities.Name",
        "            foreach cmdty_model in cmdty_models do",
        "                //cmdty_model_map = Numerix::Map(cmdty_model.ImplementedObject.View.CallHeaders, cmdty_model.ImplementedObject.View.CallValues)",
        "                target_headers &= \"CMDTY\" + cmdty_model.Iteration",
        "                new_headers &= cmdty_model//cmdty_model_map.AssetName",
        "            next",
        "        }",
        "    next",
        "    ",
        "    // correaltion",
        "    model_factor_cnt = 0",
        "    corr_new_headers = {}",
        "    foreach header in headers do",
        "        if header.Find(\"correlation\") == 1 // skip \"domestic.correaltion\"",
        "        {",
        "            model_factor_cnt = model_factor_cnt + 1",
        "            target_headers &= header",
        "            corr_new_headers &= \"Correlation:\" + new_headers[model_factor_cnt]",
        "        }",
        "    next",
        "    new_headers &= corr_new_headers",
        "    ",
        "    //target_headers = {\"domestic\", \"foreign1\"}",
        "    //new_headers = {\"USD\", \"EUR\"}",
        "    replaced_headers = {}",
        "    foreach header in headers do",
        "        replaced = False",
        "        foreach target_header in target_headers do",
        "            temp_str = header.split(\".\")",
        "            if temp_str is \"LIST\":",
        "                temp_str = temp_str[1]",
        null,
        "            if temp_str == target_header",
        "            {",
        "                replaced_headers &= header.replace(target_header, new_headers[target_header.Iteration])",
        "                replaced = True",
        "                break",
        "            }",
        "        next",
        "        ifnot replaced:",
        "            replaced_headers &= header",
        "    next",
        "    tbl = Numerix::Table(\"replaced\", replaced_headers, output_table.Values).Create",
        "    return tbl",
        "}",
        null,
        "function NxStd::MakeCalibratedParametersTableAllFromModel(viewer)",
        "{",
        "	output_table = viewer",
        "	notshowing = {\"accuracy\", \"defaulted headings\", \"defaulted values\", \"call headers\", \"call values\", \"output headers\", \"output values\", \"dependencies\"}",
        "	notshowing &= {\"warning level\", \"warning message\", \"quotes\", \"nowdate\"}",
        "	foreach item in notshowing do",
        "		output_table = output_table.Remove(item.Canonical)",
        "	next",
        "	return output_table",
        "}",
        null,
        "function NxStd::MakeCalibratedParametersTableFromModel(viewer, parameters)",
        "{",
        "	date_included = false",
        "	values = {}",
        "	dates = {}",
        "	table_headers = {}",
        "	table_values = {}",
        "	",
        "	try",
        "	{",
        "		foreach parameter in parameters do",
        "			ifnot (parameter.Canonical == \"LOCALVOL\")",
        "			{",
        "				value = Numerix::Execute(\"viewer.\"+parameter.Canonical)",
        "				if (value.Size > 1)",
        "				{//should change to look into calibration setting instead lookin for dates in heading",
        "					date_included = true",
        "					headers = viewer.Headers",
        "					foreach header in headers do",
        "						if (header.Canonical.Find(\"DATES\") > 0) then",
        "							dates = Numerix::Execute(\"viewer.\"+header.Canonical)",
        "						endif",
        "					next",
        "				}",
        "				values @= value",
        "			}",
        "		next",
        "		",
        "		if date_included",
        "		{",
        "			table_headers = {\"Date\"}",
        "			table_values @= dates",
        "		}",
        "		table_headers &= NxStd::DisplayParameterNames(parameters)",
        "		table_values &= values",
        "		",
        "		foreach parameter in parameters do",
        "			if (parameter.Canonical == \"LOCALVOL\")",
        "			{",
        "				table_headers &= {\"local volatility\"}",
        "				table_values &= {\"\", \"\"}",
        "				",
        "				headers = viewer.Headers",
        "				foreach header in headers do",
        "					header_str = header.String",
        "					if header_str.Canonical.Find(\"TIME\") > 0 then",
        "						table_headers @= header",
        "						table_values @= Numerix::Execute(\"viewer.\"+header_str.Canonical)",
        "					endif",
        "				next",
        "			}",
        "		next",
        "		",
        "		return Numerix::Table(NxStd::MakeID(\"CalibratedParametersTable\"), table_headers, table_values)",
        "	}",
        "	catch error",
        "	{",
        "		throw error",
        "	}",
        "}",
        null,
        "function NxStd::MakeCalibratedParametersTableFromViewer(viewer, parameters)",
        "{						",
        "	date_included = false",
        "	values = {}",
        "	dates = {}",
        "	table_headers = {}",
        "	table_values = {}",
        "	surfaces = {}",
        "	",
        "	try",
        "	{",
        "		foreach parameter in parameters do",
        "			parameter_data = viewer.View(parameter)",
        "			settings_type = parameter_data.Value(\"settings type\").Canonical",
        "			",
        "			switch on settings_type",
        "				case \"SURFACECALIBRATION\"",
        "					surfaces @= {parameter_data.Value(\"value\")}",
        "					values @= {\"\"}",
        "				case \"CURVECALIBRATION\"",
        "					if (not parameter_data.Value(\"value\") is \"double\" AND (parameter_data.Value(\"calibration type\").Canonical == \"STEP\" || parameter_data.Value(\"calibration type\").Canonical == \"LINEAR\"))",
        "					{",
        "						date_included = true",
        "						value_table = parameter_data.Value(\"value\")",
        "						dates = value_table.Value(\"date\")",
        "						values @= value_table.Value(\"value\")",
        "					}",
        "					else // flat",
        "					{",
        "						values @= {parameter_data.Value(\"value\")}",
        "					}",
        "				default",
        "					values @= {parameter_data.Value(\"value\")}",
        "			endswitch",
        "		next",
        "		",
        "		if date_included",
        "		{",
        "			table_headers = {\"Date\"}",
        "			table_values @= dates",
        "		}",
        "		table_headers &= NxStd::DisplayParameterNames(parameters)",
        "		table_values &= values",
        "		",
        "		foreach surface in surfaces do",
        "			headers = surface.Headers",
        "			table_headers &= headers",
        "			foreach header in headers do",
        "				//table_values @= {header} & Numerix::Execute(\"surface.\"+header.Canonical)",
        "				table_values @= Numerix::Execute(\"surface.\"+header.Canonical)",
        "			next",
        "		next",
        "		",
        "		return Numerix::Table(NxStd::MakeID(\"CalibratedParametersTable\"), table_headers, table_values)",
        "	}",
        "	catch error",
        "	{",
        "		throw error",
        "	}",
        "}",
        null,
        "function NxStd::DisplayParameterNames(names)",
        "{",
        "	converted = {}",
        "	foreach name in names do",
        "		converted @= NxStd::DisplayParameterName(name)",
        "	next",
        "	return converted",
        "}",
        null,
        "function NxStd::DisplayParameterName(name)",
        "{",
        "	switch on name",
        "		case \"sigma1\" 			return \"volatility\"",
        "		case \"vol values\"		return \"volatility\"								//CMDTY BS",
        "		case \"sv spot\" 			return \"stochastic volatility spot\"",
        "		case \"sv reversion\"		return \"stochastic volatility mean reversion\"	//Heston",
        "		case \"sv vol\" 			return \"stochastic volatility of volatility\"	//Heston",
        "		case \"theta\"			return \"stochastic volatility mean reversion\"	//LSV",
        "		case \"gamma\" 			return \"stochastic volatility of volatility\"	//LSV",
        "		case \"rho\" 				return \"correlation\"							//LSV",
        "		case \"lambda1\" 			return \"mean reversion\"",
        "		case \"sigma2\" 			return \"volatility 2\"",
        "		case \"lambda2\" 			return \"mean reversion 2\"",
        "		default return name",
        "	endswitch",
        "}",
        null,
        "function NxStd::CurveCalibration(type)",
        "{",
        "	call = Numerix::Object({\"CURVECALIBRATIONSETTINGS\", \"SETTINGS\", \"CURVE CALIBRATION\"}) & ",
        "    {",
        "        \"calibrate\"      	: true,",
        "		\"calibration type\"  : type",
        "    }",
        "	",
        "	return call.Create",
        "}",
        null,
        null,
        "function NxStd::LocalVolatilityTable(localvol_table)",
        "{",
        "	return Numerix::Query(localvol_table,\"TIME=<TIME>\",\"Time\")//localvol_table.Headers.String",
        "}",
        null,
        null,
        "function NxStd::ListToString(list)",
        "{",
        "	output = \"\"",
        "	foreach item in list do",
        "		output += item",
        "		ifnot list.Size == item.Iteration: output += \",\"",
        "	next",
        "	return output.String",
        "}"]
    }
  },
  "MODEL.HY.UNIVERSAL": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "MODEL.HY.UNIVERSAL",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "MODEL.HY.UNIVERSAL.PARAMETERS",
      "RESULTS" : "MODEL.HY.UNIVERSAL.RESULTS",
      "CLASSPROPERTIES" : "MODEL.HY.UNIVERSAL.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "MODEL.HY.UNIVERSAL.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "MEMBER" : "MODEL.HY.UNIVERSAL.EQ_MODELS_SPEC",
      "MEMBER" : "MODEL.HY.UNIVERSAL.IR_MODELS_SPEC",
      "MEMBER" : "MODEL.HY.UNIVERSAL.FX_MODELS_SPEC",
      "MEMBER" : "MODEL.HY.UNIVERSAL.CMDTY_MODELS_SPEC",
      "MEMBER" : "MODEL.HY.UNIVERSAL.CR_MODELS_SPEC",
      "SCRIPT" : "MODEL.HY.UNIVERSAL.SCRIPT.NXSL"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_12809_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["IRMODELS","CMDTYMODELS","QUOTETYPE","PAYOUTCURRENCY","CRMODELS","FXMODELS","EQMODELS"],
      "VALUE" : ["CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^MARKETPRICER_12440_NX_AUTOGEN^IRMODELS_CALLABLEDUALGENERICINDEXSPREADRASWAP",null,"MID","USD",null,null,null]
    }
  },
  "MODEL.IR.HW1F.ALIASES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Quote Type","Currency","IR Index","IR Index Tenor"],
      "VALUE" : ["INSTCOLL.QUOTETYPE","INSTCOLL.CURRENCY","INSTCOLL.IRINDEX","INSTCOLL.IRINDEXTENOR"]
    }
  },
  "MODEL.IR.HW1F.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Quote Type","Currency","IR Index","IR Index Tenor","Discount Curve","Inst Coll","Solver","Option Target","Weighting Scheme","Mean Reversion","Volatility","Calibration Quality","Calibration Constraints","Library Name"],
      "TYPE" : ["String","String","String","Tenor","ID","Def(DEFINITION.INSTCOLLIR)","Def(DEFINITION.SOLVER)","String","String","Def(DEFINITION.CURVECALIBRATION)","Def(DEFINITION.CURVECALIBRATION)","Table(MODEL.IR.HW1F.QUALITY_SPEC)","Table(MODEL.IR.HW1F.CALIBRATIONCONSTRAINTS_SPEC)","String"],
      "REQUIRED" : [false,true,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : ["MID",null,
        ">Numerix::GetSettings(\"Settings.Currency\", Currency, \"IRIndex\")",    
        ">Numerix::GetSettings(\"Settings.Currency\", Currency, \"IRIndexTenor\")",    
        ">Numerix::DiscountCurveID(Currency)",    null,null,"Target Rel Vol ",null,null,null,null,null,null],
      "GROUPING" : ["Common","Common","Common","Common","Common","Instruments","Calibrated","Calibrated","Calibrated","Calibrated, Custom","Calibrated, Custom","Calibrated","Calibrated",null],
      "DESCRIPTION" : ["Indiacate the Quote types used. May be Mid, Bid or Ask.","The underlying currency of the trade.","Indicate the underlying IR index","Indicate the underlying IR index tenor","The underlying currency of the trade.",null,"Solver parameters entered in the ITERATIONS, ACCURACY, CONVERGENCE, SOLVER STEP, and DE SOLVER-related input headings are now specified in the SOLVER Settings object.","Instructs the solver in the calibration algorithm which quantity to fit. Choices are TARGET Price, TARGET Vol, TARGET Rel Price, Tareget Rel Vol (default)
The solver in the calibration algorithm uses the difference between model and TARGET quantities. This heading instructs the solver which quantity to fit (price, lognormal vol, or normal vol) and the type of difference to use (absolute or relative). For example, TARGET PRICE means that the solver will fit option prices based on the absolute difference between model and TARGET prices.
*TARGET Price
*TARGET Rel Price
*Target BS Vol
*TARGET BS Rel Vol (relative Lognormal, relative Black-Scholes vol)
*TARGET Vol (Normal vol)
*Target Rel Vol  (default)","Weighting scheme to use in computing residuals.
- CUSTOM - Allows the user to pass a table of custom weights through instrument collection if specified then override WEIGHTING SCHEME
- UNIFORM - Default; gives all the options equal weights
- INVERSE PRICE - Sets the weights to the inverse of the market price
- SQUARE INVERSE PRICE - Uses the inverse of the square of the price","Only flat mean reversion is accepted on custom setting","Volatility of Process","Calibration quality of the model. If specified as a table,
Table columns: TIMESTEPS, POINTS, TOLERANCE
TIMESTEPS; Number of timesteps to use in calibration
POINTS; Model calibration routine parameter; cannot be used with user-defined mean reversion; default is 1000
TOLERANCE; Model calibration routine parameter; cannot be used with user set mean reversion; default is 0","References a table of parameters and constraints. The table has three headers: PARAMETER, LOWER BOUND, and UPPER BOUND, and allows blank rows.
* The PARAMETERS values must be the exact names of the parameters. If a value does not correspond to any named parameters, it is ignored and a warning of the form: unknown parameter [<INVALID PARAM NAME>] is ignored is generated.
* LOWER BOUND and UPPER BOUND must be doubles and one or both can be specified

Allowed PARAMETER is Volatility, Mean Reversion",null]
    }
  },
  "MODEL.IR.HW1F.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Calibrated Parameters","Calibration Error"],
      "TYPE" : ["Table()","Table()"],
      "REQUIRED" : [false,false],
      "ID" : [null,null],
      "HEADER" : [null,null],
      "VALUE" : [
        ">NxStd::CalibratedParameters(implementedobject)",    
        ">NxStd::CalibrationError(implementedobject)"],
      "CURRENCY" : [null,null],
      "CATEGORY" : ["Viewer","Viewer"],
      "DESCRIPTION" : ["Calibrated parameters details of this model. Values of calibrated parameters could be a scalar, curve (time-dependent, single array) or surface (two dimensional data)","Calibration error of this model in overall and at each instrument level.  
RMSE is root mean square error as of aggregation of individual instrument's residual. Error is deviation of model value from TARGET value. TARGET value is set through OPTION TARGET heading (eg. pricer, relative price, volatility, relative volatility, BS volatility, etc.)
RMSE (VOL) is root mean square error as of TARGET value is set to volatility
Instrument shows relative and absolute error of calibration with respect to TARGET (eg. volatility)"],
      "PRI" : [null,null]
    }
  },
  "MODEL.IR.HW1F.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name","Asset Class"],
      "TYPE" : ["String","String"],
      "VALUE" : ["IR Hull White 1-Factor Model","IR"]
    }
  },
  "MODEL.IR.HW1F.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Underlying Assets"],
      "TYPE" : ["String"],
      "VALUE" : [
        ">NxStd::IRUnderlyingAsset(Currency)"]
    }
  },
  "MODEL.IR.HW1F.CALIBRATIONCONSTRAINTS_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Parameter" : ["String"],
      "Upper Bound" : ["Double"],
      "Lower Bound" : ["Double"]
    }
  },
  "MODEL.IR.HW1F.CALIBRATIONCONSTRAINTS_AUXILIARY": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Parameter" : ["Volatility","Mean Reversion"],
      "Upper Bound" : [1,0.0700000000000000067],
      "Lower Bound" : [0.200000000000000011,0.0100000000000000002]
    }
  },
  "MODEL.IR.HW1F.QUALITY_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "TimeSteps" : ["Integer","OPTIONAL"],
      "Points" : ["Integer","OPTIONAL"],
      "Tolerance" : ["Double","OPTIONAL"]
    }
  },
  "MODEL.IR.HW1F.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//=============================================================================",
        "// Includes",
        "//=============================================================================",
        null,
        "import \"script.nxstd\"",
        "import \"script.nxrsf\"",
        "import \"script.nxcalibration\"",
        null,
        "//=============================================================================",
        "// Main Function",
        "//=============================================================================",
        null,
        "function main",
        "{",
        "    call = Numerix::Object({Currency + \"model\", \"model\", \"ir\"}) & ",
        "	{",
        "        \"model\"                 : \"hull white 1F\",",
        "        \"currency\"              : Currency,",
        "        \"domesticyieldcurve\"    : DiscountCurve,",
        "        \"libraryname\"           : LibraryName,",
        "        \"marketdata\"            : Numerix::MarketData",
        "	}",
        null,
        "    // Custom HW1F model",
        "    ifnot Volatility.GetValue(\"Calibrate\") : ifnot MeanReversion.GetValue(\"Calibrate\")",
        "    {",
        "        call &= { \"lambda1\"     : if MeanReversion.GetValue(\"Value\").Type == \"DOUBLE\" ? MeanReversion.GetValue(\"Value\") : MeanReversion.Setting }",
        "        if Volatility.GetValue(\"Value\").Type == \"DOUBLE\" : // flat volatility",
        "            call &=",
        "            {",
        "                \"startdate\"     : Numerix::MarketDate,",
        "                \"sigma1\"        : Volatility.GetValue(\"Value\")",
        "            }",
        "        else // time dependent volatility",
        "        {",
        "            dates = Volatility.GetValue(\"Value\").GetValue(\"Date\")",
        "            sigmas = Volatility.GetValue(\"Value\").GetValue(\"Value\")",
        "            tbl = Numerix::Table(\"Sigmas\" + Numerix::UniqueNumber, {\"Date\", \"Sigma1\"}, {dates, sigmas})",
        "            call &= {\"sigmas\"   : tbl.Create}",
        "        }",
        null,
        "        return call.Create",
        "    }",
        null,
        "    s1_instcoll = InstColl.Build",
        null,
        "    call &=",
        "    {",
        "        \"nowdate\"                   : Numerix::MarketDate,",
        "        \"instruments\"               : s1_instcoll,",
        "        \"sigma1\"                    : Volatility.Setting",
        "    }",
        null,
        "    // Calibrated to Swaptions with solver setting",
        "    if Solver.Setting",
        "    {",
        null,
        "        call &=",
        "        {",
        "            \"solver\"                    : Solver.Setting,",
        "            \"option TARGET\"             : OptionTARGET,",
        "            \"lambda1\"                   : MeanReversion.Setting,",
        "            \"timesteps\"                 : if CalibrationQuality ? CalibrationQuality.GetValue(\"Timesteps\")[1] : \"\"",
        "        }",
        null,
        "        if WeightingScheme.Canonical == \"CUSTOM\"",
        "        {",
        "            weights_table = NxStd::Weights(s1_instcoll)",
        "            call &= {\"weights\"          : weights_table}",
        "        }",
        "        else:",
        "            call &= {\"weighting scheme\" : WeightingScheme}",
        null,
        null,
        "        if CalibrationConstraints :",
        "            foreach parameter in CalibrationConstraints.GetValue(\"Parameter\") do",
        "                if parameter.Canonical == \"VOLATILITY\"",
        "                {",
        "                    call &= {\"max hw vol\" : CalibrationConstraints.GetValue(\"UpperBound\")[parameter.Iteration]}",
        "                    call &= {\"min hw vol\" : CalibrationConstraints.GetValue(\"LowerBound\")[parameter.Iteration]}",
        "                }",
        "                if parameter.Canonical == \"MEANREVERSION\"",
        "                {",
        "                    call &= {\"max reversion\" : CalibrationConstraints.GetValue(\"UpperBound\")[parameter.Iteration]}",
        "                    call &= {\"min reversion\" : CalibrationConstraints.GetValue(\"LowerBound\")[parameter.Iteration]}",
        "                }",
        "            next",
        null,
        "        id = call.create",
        null,
        "      //  if NxStd::CompareVersion(\"16.6\") : if not InstColl.CalibrationInstrumentType == #\"CAPFLOOR\":                  ",
        "           // NxStd::HW1FDependencyFilter(InstColl.Build)",
        "        return id",
        "    }",
        null,
        "    //Calibrated to Swaptions ",
        "    call &=",
        "    {",
        "        \"points\"                    : if CalibrationQuality ? CalibrationQuality.GetValue(\"Points\")[1] : \"\",",
        "        \"tolerance\"                 : if CalibrationQuality ? CalibrationQuality.GetValue(\"Tolerance\")[1] : \"\"",
        "    }",
        null,
        "    ifnot MeanReversion.GetValue(\"Calibrate\") : if MeanReversion.GetValue(\"Value\").Type == \"DOUBLE\" :",
        "        call &= {\"lambda1\"          : MeanReversion.GetValue(\"Value\")}",
        null,
        "    if MeanReversion.GetValue(\"Calibrate\") : if CalibrationConstraints :",
        "        foreach parameter in CalibrationConstraints.GetValue(\"Parameter\") do",
        "            if parameter.Canonical == \"MEANREVERSION\"",
        "            {",
        "                call &= {\"max reversion\" : CalibrationConstraints.GetValue(\"UpperBound\")[parameter.Iteration]}",
        "            }",
        "        next",
        null,
        "    return call.Create",
        "}"]
    }
  },
  "SCRIPT.NXRSF": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DEFINITIONS" : [
        "//*****************************************************************************",
        "// Copyright (c) 1996-2016 Numerix LLC.  All rights reserved.",
        "// This software comprises valuable trade secrets and may be used,",
        "// copied, transmitted, stored, and distributed only in accordance",
        "// with the terms of a written license or trial agreement and with the",
        "// inclusion of this copyright notice.",
        "//*****************************************************************************",
        "  ",
        "//*****************************************************************************",
        "// Standard MarketReport Utility Functions",
        "//*****************************************************************************",
        null,
        "define Percentage = Numerix::Percentage",
        "define Absolute = Numerix::Absolute",
        "define Relative = Numerix::Relative",
        "define NxRSF::RelativeShock(item, amt) = Numerix::Shock(item, Numerix::Relative(amt))",
        "define NxRSF::AbsoluteShock(item, amt) = Numerix::Shock(item, Numerix::Absolute(amt))",
        "define NxRSF::PercentageShock(item, amt) = Numerix::Shock(item, Numerix::Percentage(amt))",
        "define NxRSF::ReplaceShock(item, amt) = Numerix::Shock(item, Numerix::Replace(amt))",
        "define Print = Numerix::Print",
        "define Prop = Numerix::Property",
        "define Match = Numerix::Match",
        "define GetTableElem = Numerix::TableValue",
        "define Map = Numerix::Map",
        "define TableRowCount = Numerix::TableRowCount",
        "define DCF = Numerix::DCF",
        null,
        "define NxRSF::CreateCurveFromDF(CurveID, DFTable, IntMeth, IntVar, CCY, Basis) =",
        "begin",
        "    Imps = Curve.Implements",
        "    YC = {\"ID\": CurveID, \"OBJECT\" : \"MARKET DATA\", \"TYPE\":\"YIELD\", \"INTERPMETHOD\": IntMeth, \"INTERPVARIABLE\": IntVar, \"CURRENCY\": CCY, \"DATA\":DFTable.ID, \"BASIS\":Basis}",
        "    Numerix::Create(DFTable, Numerix::Object(YC))",
        "end",
        null,
        "function NxRSF::GetEQVolSurfaces()",
        "{",
        "	Surfaces = (Numerix::Registry.Key(\"TYPE\") ==(\"EQ VOL\")) ",
        "	return Surfaces",
        "}",
        null,
        "function NxRSF::GetCMDTYVolSurfaces()",
        "{",
        "	Surfaces = (Numerix::Registry.Key(\"TYPE\") ==(\"CMDTY VOL\")) ",
        "	return Surfaces",
        "}",
        null,
        "function NxRSF::GetFXSpotVolSurfacesUnique()",
        "{",
        "    returnlist = {}",
        "    currencylist = {}",
        "	Surfaces = (Numerix::Registry.Key(\"Type\") == \"FX VOL\")",
        "    Surfacebreak = Numerix::CreateMetaData(Surfaces) = \"<assetclass>.<vol>.<currency1>/<currency2>.<quotetype>\"",
        null,
        "    foreach Surf in Surfacebreak",
        "    {",
        "        if Surf.value(\"currency1\") != \"USD\" and Surf.value(\"currency2\") != \"USD\"",
        "        {",
        "            returnlist &= Surf.Key",
        "        }",
        "        else",
        "        {",
        "            if Surf.value(\"currency1\") == \"USD\"",
        "            {",
        "                ifnot Surf.value(\"currency2\") in currencylist",
        "                {",
        "                    currencylist &= Surf.value(\"currency2\")",
        "                    returnlist &= Surf.Key",
        "                }",
        "            }",
        "            else",
        "            {",
        "                ifnot Surf.value(\"currency1\") in currencylist",
        "                {",
        "                    currencylist &= Surf.value(\"currency1\")",
        "                    returnlist &= Surf.Key",
        "                }",
        "            }",
        "        }",
        "    }",
        "	return returnlist",
        "}",
        null,
        "function NxRSF::GetFXSpotVolSurfaces()",
        "{",
        "	Surfaces = (Numerix::Registry.Key(\"Type\") == \"FX VOL\")",
        "	return Surfaces",
        "}",
        null,
        "function NxRSF::GetYieldCurves()",
        "{ ",
        "    Curves = {}",
        "    Curvestemp = (Numerix::Registry.Key(\"TYPE\") == \"YIELD\") ",
        "    Curvestemp &= (Numerix::Registry.Key(\"TYPE\") == \"BASIS CURVE\")",
        "    Curvestemp &= (Numerix::Registry.Key(\"TYPE\") == \"LIBOR BASIS CURVE\")",
        "    ",
        "    foreach tempcrv in Curvestemp",
        "    {",
        "        ifnot tempcrv.split(\".\")[1] == \"INFL\": Curves &= tempcrv",
        "    }",
        "   ",
        "    Solvers = (Numerix::Registry.Key(\"TYPE\") == \"MULTI-CURVE SOLVER\")    ",
        "    foreach Solver in Solvers",
        "    {",
        "        foreach Curve in Solver.CURVESOUTPUT.ID",
        "        {",
        "            Curves &= Curve",
        "        }",
        "    }",
        "    return Curves",
        "}",
        null,
        null,
        "function NxRSF::GetDateList(Curve,Today)",
        "{",
        "    Dates = Curve.Dateoutput",
        "    Names = Curve.NameOutput",
        null,
        "    if Names.find(\"NOW DATE\"):  // Need to exclude \"Transition date\", \"Transition condition date\", for multi-curve solver",
        "    {",
        "        Dates_ = {}",
        "        excludeList = {\"NOW DATE\", \"TRANSITION DATE\", \"TRANSITION CONDITION DATE\", \"MEETINGS DATE\", \"PILLAR DATE\"}",
        "        foreach n in Names:",
        "            ifnot n in excludeList:",
        "                Dates_ @= Dates[n.iteration]",
        "        Dates = Dates_",
        "    }",
        null,
        "    if (Dates.size != Curve.Instruments.size)",
        "    {",
        "        if Dates.find(Today):",
        "            Dates = Dates.remove(Dates[Dates.find(Today)])",
        "    }",
        "    ",
        "    return Dates",
        "}",
        null,
        null,
        "function NxRSF::FundingSelect(FundCurves,ExtCurves)",
        "{",
        "    if ExtCurves.type == \"String\": ExtCurves = ExtCurves.type(\"List\")//convert type to list",
        "    ",
        "    if FundCurves.type == \"String\": FundCurves = FundCurves.type(\"List\")//convert type to list",
        "    ",
        "    return FundCurves && ExtCurves",
        "}",
        null,
        "function NxRSF::UnderlyingRiskFactor(Curve)",
        "{",
        "    AssetClass =  Curve.split(\".\")[1]",
        "    if (Curve.split(\".\")[2] == \"VOL\") then",
        "        if AssetClass == \"IR\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<vol>.<type>.<currency>-<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")",
        "            return Underlying",
        "        elseif AssetClass == \"EQ\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<vol>.<currency>-<exchange>-<ticker>.<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")+ \"-\" + Curvebreak.value(\"exchange\") + \"-\" + Curvebreak.value(\"ticker\")",
        "            return Underlying",
        "        else",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<vol>.<currencypair>.<indexinfo>\"",
        "            if not Curvebreak then ",
        "                Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<vol>.<currencypair>-<indexinfo>\"",
        "            endif",
        "            if Curvebreak.CurrencyPair.size = 7 then",
        "                Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currencypair\")[1..3] + \"/\" + Curvebreak.value(\"currencypair\")[5..7]",
        "            else ",
        "                Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currencypair\")[1..3] + \"/\" + Curvebreak.value(\"currencypair\")[4..6]",
        "            endif",
        "        endif",
        "    else ",
        "        if AssetClass == \"IR\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currency>-<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")",
        "            return Underlying",
        "        elseif AssetClass == \"CR\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currency>-<reference_entity>_<debt_type>_<restructuring_clause>.<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\") + \"-\" + Curvebreak.value(\"reference_entity\")+ \"_\" + Curvebreak.value(\"debt_type\")+ \"_\" + Curvebreak.value(\"restructuring_clause\")",
        "            return Underlying",
        "        elseif AssetClass == \"CMDTY\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currency>-<exchange>-<ticker>.<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")+ \"-\" + Curvebreak.value(\"exchange\") + \"-\" + Curvebreak.value(\"ticker\")",
        "            return Underlying",
        "        elseif AssetClass == \"EQ\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currency>-<exchange>-<ticker>.<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")+ \"-\" + Curvebreak.value(\"exchange\") + \"-\" + Curvebreak.value(\"ticker\")",
        "            return Underlying",
        "        else",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currencypair>.<indexinfo>\"",
        "            if not Curvebreak then ",
        "                Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currencypair>-<indexinfo>\"",
        "            endif",
        "            if Curvebreak.CurrencyPair.size = 7 then",
        "                Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currencypair\")[1..3] + \"/\" + Curvebreak.value(\"currencypair\")[5..7]",
        "            else ",
        "                Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currencypair\")[1..3] + \"/\" + Curvebreak.value(\"currencypair\")[4..6]",
        "            endif",
        "        endif",
        "    endif",
        "    ",
        "    return Underlying",
        " ",
        "}",
        null,
        null,
        "function NxRSF::TradeUnderlyingIR(TrList,Curve)",
        "{",
        "TradeTab = {}",
        "TrCurrency = {}",
        "columnheads = {\"KEY\",\"UNDERLYING\"}",
        null,
        "foreach Tr in TrList",
        "{",
        "	TradeRow = {}",
        "	TrTerm = Tr.TradeTerms",
        "	TrUnderlyingAssets = NxRSF::EvaluateProperty(TrTerm, \"Underlying Assets\").split(\",\")",
        "    foreach TrUnderlyingAsset in TrUnderlyingAssets",
        "    {",
        "        TrCurrency1 = TrUnderlyingAsset.split(\".\")[2].split(\"/\")[1].split(\"-\")[1]",
        "        // \"CR.\" + currency + \"-\" + reference_entity + \"_\" + debt_type + \"_\" + restructuring_clause",
        "        //\"CMDTY.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "        //\"EQ.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "        //\"FX.\" + base_currency + \"/\" + term_currency",
        "        //\"IR.\" + currency",
        "	    TradeRow = {}",
        "        TradeRow &= Tr",
        "	    TradeRow &= TrCurrency1",
        "        TradeTab @= TradeRow",
        "    ",
        "        try",
        "        {",
        "            TrCurrency2 = TrUnderlyingAsset.split(\".\")[2].split(\"/\")[2]",
        "            TradeRow = {}",
        "            TradeRow &= Tr",
        "            TradeRow &= TrCurrency2",
        "            TradeTab @= TradeRow",
        "        }",
        "        catch error",
        "        { ",
        "            Numerix::SetNormal(error)",
        "        }",
        "    }",
        "    	",
        "}	",
        null,
        "TradeTableT = TradeTab.transpose",
        "TradeTable = numerix::table(\"TrTable\",columnheads,TradeTableT)",
        "TradeTable = Numerix::metadata(TradeTable)",
        null,
        "TradeListInc = NxRSF::FilterTradesRF(TradeTable, Curve.Currency.Type(\"String\"))",
        "return TradeListInc",
        "}",
        null,
        null,
        "function NxRSF::TradeUnderlyingIRVol(TrList,Curve)",
        "{",
        "TradeTab = {}",
        "TrCurrency = {}",
        "columnheads = {\"KEY\",\"UNDERLYING\"}",
        null,
        "foreach Tr in TrList",
        "{",
        "	TradeRow = {}",
        "	TrTerm = Tr.TradeTerms",
        "	TrUnderlyingAssets = NxRSF::EvaluateProperty(TrTerm, \"Underlying Assets\").split(\",\")",
        "    foreach TrUnderlyingAsset in TrUnderlyingAssets",
        "    {",
        "        TrCurrency1 = TrUnderlyingAsset.split(\".\")[2].split(\"/\")[1].split(\"-\")[1]",
        "        // \"CR.\" + currency + \"-\" + reference_entity + \"_\" + debt_type + \"_\" + restructuring_clause",
        "        //\"CMDTY.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "        //\"EQ.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "        //\"FX.\" + base_currency + \"/\" + term_currency",
        "        //\"IR.\" + currency",
        "	    TradeRow = {}",
        "        TradeRow &= Tr",
        "	    TradeRow &= TrCurrency1",
        "        TradeTab @= TradeRow",
        "    ",
        "        try",
        "        {",
        "            TrCurrency2 = TrUnderlyingAsset.split(\".\")[2].split(\"/\")[2]",
        "            TradeRow = {}",
        "            TradeRow &= Tr",
        "            TradeRow &= TrCurrency2",
        "            TradeTab @= TradeRow",
        "        }",
        "        catch error",
        "        { ",
        "            Numerix::SetNormal(error)",
        "        }",
        "    }",
        "    	",
        "}	",
        null,
        "TradeTableT = TradeTab.transpose",
        "TradeTable = numerix::table(\"TrTable\",columnheads,TradeTableT)",
        "TradeTable = Numerix::metadata(TradeTable)",
        null,
        "TradeListInc = NxRSF::FilterTradesRF(TradeTable, Curve.Currency.Type(\"String\"))",
        null,
        "return TradeListInc",
        "}",
        null,
        "function NxRSF::TradeUnderlyingCR(TrList,Curve)",
        "{",
        "    TradeRow = {}",
        "    CurrencyRow = {}",
        null,
        "    foreach Trade in TrList",
        "    {",
        "	    TradeTerm = Trade.TradeTerms",
        "	    TrUnderlyingAssets = NxRSF::EvaluateProperty(TradeTerm, \"Underlying Assets\").split(\",\")",
        null,
        "        foreach TrUnderlyingAsset in TrUnderlyingAssets",
        "        {",
        "            // \"CR.\" + currency + \"-\" + reference_entity + \"_\" + debt_type + \"_\" + restructuring_clause",
        "            //\"CMDTY.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "            //\"EQ.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "            //\"FX.\" + base_currency + \"/\" + term_currency",
        "            //\"IR.\" + currency",
        "	",
        "            TradeRow @= Trade",
        "	        CurrencyRow @= TrUnderlyingAsset",
        "        }",
        "    }	",
        null,
        "    TradeTable = numerix::table(\"TrTable\",{\"KEY\",\"UNDERLYING\"},{TradeRow,CurrencyRow})",
        "    TradeTable = Numerix::metadata(TradeTable)",
        "    ",
        "    Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<asset>.<quotetype>\"",
        "    Curvename = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"asset\")",
        "    ",
        "    TradeListInc = NxRSF::FilterTradesRF(TradeTable, Curvename)",
        "    ",
        "    return TradeListInc",
        "}",
        null,
        "function NxRSF::TradeUnderlyingEQ(TrList,Curve)",
        "{",
        "    TradeRow = {}",
        "    CurrencyRow = {}",
        null,
        "    foreach Trade in TrList",
        "    {",
        "	    TradeTerm = Trade.TradeTerms",
        "	    TrUnderlyingAssets = NxRSF::EvaluateProperty(TradeTerm, \"Underlying Assets\").split(\",\")",
        "        ",
        "        foreach TrUnderlyingAsset in TrUnderlyingAssets",
        "        {",
        "            // \"CR.\" + currency + \"-\" + reference_entity + \"_\" + debt_type + \"_\" + restructuring_clause",
        "            //\"CMDTY.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "            //\"EQ.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "            //\"FX.\" + base_currency + \"/\" + term_currency",
        "            //\"IR.\" + currency",
        "	",
        "            TradeRow @= Trade",
        "	        CurrencyRow @= TrUnderlyingAsset",
        "        }",
        "    }",
        null,
        "    TradeTable = numerix::table(\"TrTable\",{\"KEY\",\"UNDERLYING\"},{TradeRow,CurrencyRow})",
        "    TradeTable = Numerix::metadata(TradeTable)",
        "    ",
        "    Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<asset>.<curvetype>.<quotetype>\"",
        "    Curvename = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"asset\")",
        "    ",
        "    TradeListInc = NxRSF::FilterTradesRF(TradeTable, Curvename)",
        "    ",
        "    return TradeListInc",
        "}",
        null,
        "function NxRSF::TradeUnderlyingFX(TrList,Curve)",
        "{",
        "    TradeTab = {}",
        "    TrCurrency = {}",
        "    TradeListInc = {}",
        "    columnheads = {\"KEY\",\"UNDERLYING\"}",
        null,
        "    foreach Tr in TrList",
        "    {",
        "        TradeRow = {}",
        "        if Tr.implements(\"TradeTerms\")",
        "        {",
        "            TrTerm = Tr.TradeTerms",
        "            TrUnderlyings = NxRSF::EvaluateProperty(TrTerm, \"Underlying Assets\").split(\",\")",
        "            foreach TrUnderlying in TrUnderlyings",
        "            {",
        "                TrCurrency1 = TrUnderlying.split(\".\")[2].split(\"/\")[1].split(\"-\")[1]",
        "                // \"CR.\" + currency + \"-\" + reference_entity + \"_\" + debt_type + \"_\" + restructuring_clause",
        "                //\"CMDTY.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "                //\"EQ.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "                //\"FX.\" + base_currency + \"/\" + term_currency",
        "                //\"IR.\" + currency",
        "                TradeRow = {}",
        "                TradeRow &= Tr",
        "                TradeRow &= TrCurrency1",
        "                TradeTab @= TradeRow",
        "    ",
        "                try",
        "                {",
        "                    TrCurrency2 = TrUnderlying.split(\".\")[2].split(\"/\")[2]",
        "                    TradeRow = {}",
        "                    TradeRow &= Tr",
        "                    TradeRow &= TrCurrency2",
        "                    TradeTab @= TradeRow",
        "                }",
        "                catch error",
        "                {    ",
        "                    Numerix::SetNormal(error)",
        "                }",
        "            }//foreach TrUnderlying in TrUnderlyings",
        "        }//if Tr.implements(\"TradeTerms\")",
        "    }//foreach Tr in TrList",
        "    TradeTableT = TradeTab.transpose",
        "    TradeTable = Numerix::table(\"TrTable\",columnheads,TradeTableT)",
        "    TradeTable = Numerix::metadata(TradeTable)",
        "    Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<asset>-<curvetype>.<quotetype>\"",
        "    if Curvebreak.value(\"asset\").size = 7",
        "    {",
        "        CurveCurr1 = Curvebreak.value(\"asset\")[1..3]",
        "        CurveCurr2 = Curvebreak.value(\"asset\")[5..7]",
        "    }",
        "    else",
        "    {",
        "        CurveCurr1 = Curvebreak.value(\"asset\")[1..3]",
        "        CurveCurr2 = Curvebreak.value(\"asset\")[4..6]",
        "    }",
        "    ",
        "    TradeListInc1 = NxRSF::FilterTradesRF(TradeTable, CurveCurr1)",
        "    TradeListInc2 = NxRSF::FilterTradesRF(TradeTable, CurveCurr2)",
        "    ",
        "    if TradeListInc1",
        "    {",
        "        if TradeListInc2:",
        "            TradeListInc = Numerix::Set(TradeListInc1, TradeListInc2)",
        "        else: ",
        "            TradeListInc = TradeListInc1",
        "    }",
        "    else",
        "    {",
        "        if TradeListInc2:",
        "			TradeListInc = TradeListInc2",
        "		else:",
        "			TradeListInc = {}",
        "    }",
        null,
        "    return TradeListInc",
        "}",
        null,
        null,
        "function NxRSF::TradeUnderlyingEQVol(TrList,Curve)",
        "{",
        "    TradeRow = {}",
        "    CurrencyRow = {}",
        null,
        "    foreach Trade in TrList",
        "    {",
        "	    TradeTerm = Trade.TradeTerms",
        "	    TrUnderlyingAssets = NxRSF::EvaluateProperty(TradeTerm, \"Underlying Assets\").split(\",\")",
        "        foreach TrUnderlyingAsset in TrUnderlyingAssets",
        "        {",
        "            // \"CR.\" + currency + \"-\" + reference_entity + \"_\" + debt_type + \"_\" + restructuring_clause",
        "            //\"CMDTY.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "            //\"EQ.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "            //\"FX.\" + base_currency + \"/\" + term_currency",
        "            //\"IR.\" + currency",
        "	",
        "            TradeRow @= Trade",
        "	        CurrencyRow @= TrUnderlyingAsset",
        "        }",
        "        ",
        "    }	",
        null,
        "    TradeTable = numerix::table(\"TrTable\",{\"KEY\",\"UNDERLYING\"},{TradeRow,CurrencyRow})",
        "    TradeTable = Numerix::metadata(TradeTable)",
        "    ",
        "    Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.VOL.<currency>-<country>-<asset>.<quotetype>\"",
        "    Curvename = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\") + \"-\" + Curvebreak.value(\"country\") + \"-\" + Curvebreak.value(\"asset\")",
        "    ",
        "    TradeListInc = NxRSF::FilterTradesRF(TradeTable, Curvename)",
        "    ",
        "    return TradeListInc",
        "}",
        null,
        "function NxRSF::TradeUnderlyingFXVol(TrList,Curve)",
        "{",
        "    TradeRow = {}",
        "    CurrencyRow = {}",
        null,
        "    foreach Trade in TrList",
        "    {",
        "	    TradeTerm = Trade.TradeTerms",
        "	    TrUnderlyingAssets = NxRSF::EvaluateProperty(TradeTerm, \"Underlying Assets\").split(\",\")",
        "        foreach TrUnderlyingAsset in TrUnderlyingAssets",
        "        {",
        "			if TrUnderlyingAsset.split(\".\")[1] == \"FX\"",
        "			{",
        "				TradeRow @= Trade",
        "				Underlyingbreaktemp = Numerix::CreateMetaData(TrUnderlyingAsset) = \"<assetclass>.<currency1>/<currency2>\"",
        "				CurrencyRow @= \"FX.\" + Underlyingbreaktemp.value(\"currency2\") + \"/\" + Underlyingbreaktemp.value(\"currency1\")",
        "			}",
        "            // \"CR.\" + currency + \"-\" + reference_entity + \"_\" + debt_type + \"_\" + restructuring_clause",
        "            //\"CMDTY.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "            //\"EQ.\" + currency + \"-\" + exchange + \"-\" + ticker",
        "            //\"FX.\" + base_currency + \"/\" + term_currency",
        "            //\"IR.\" + currency",
        "            TradeRow @= Trade",
        "	        CurrencyRow @= TrUnderlyingAsset",
        "        }",
        "    }	",
        null,
        "    TradeTable = numerix::table(\"TrTable\",{\"KEY\",\"UNDERLYING\"},{TradeRow,CurrencyRow})",
        "    TradeTable = Numerix::metadata(TradeTable)",
        "    ",
        "    Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.VOL.<currencypair>.<quotetype>\"",
        "    Curvename = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currencypair\")",
        "    ",
        "    TradeListInc = NxRSF::FilterTradesRF(TradeTable, Curvename)",
        "    ",
        "    return TradeListInc",
        "}",
        null,
        null,
        null,
        "function NxRSF::CurveInfoStream(CList)",
        "{",
        "    if CList",
        "	{",
        "	    foreach C in CList",
        "		{",
        "            //construct the ID of curve for the scenario market ",
        "            Curve_ID_B = Numerix::Market.type(\"string\") + \"^\" + C.type(\"string\")",
        "            //find the curve in the registry",
        "            try",
        "            {",
        "    		    Curve_ID = Numerix::Registry.Key(\"ID\") = Curve_ID_B",
        "    		    if Curve_ID.implements(\"bumpinput\") : Info = NxRSF::info_bump(Curve_ID) else Info = Curve_ID.info endif",
        "        		Loaded_Info = Numerix::Load(info)",
        "        		String_ID = \"mdeinfo\"",
        "                //if curveinfo exists stream it out ",
        "       			if Loaded_Info: cde = String_ID.Broadcast({\"id\": Curve_ID_B, Loaded_Info})",
        "            }",
        "            catch ",
        "            {",
        "                continue",
        "            }",
        "		}",
        "	}",
        "}",
        null,
        "function NxRSF::info_bump(CurveID)",
        "{",
        "    result = Numerix::Table(\"CurveInfo_Table\", {\"DATE\", \"DISCOUNTFACTOR\"}, {CurveID.DateOutput, CurveID.DiscountFactorOutput})",
        "   ",
        "    return result.Create",
        "}",
        null,
        "function NxRSF::EvaluateProperty(terms, propertyName)",
        "{",
        "    // Get list of trade terms properties.",
        null,
        "    props = terms.PropertyNamesOutput.Canonical",
        null,
        "	// Attempt to find the property. If not found, log error.",
        null,
        "	property = props.Find(propertyName.Canonical)",
        "    ifnot property :",
        "	    throw terms + \": could not evaluate '\" + propertyName + \"' property which is required for pricing policy resolution.\"",
        null,
        "	property = terms.PropertyValuesOutput[property]",
        "	return property",
        "}",
        null,
        "function NxRSF::Average(L)",
        "{",
        "    S = L.Size",
        "	if S == 0",
        "	{",
        "		return 0",
        "	}",
        "	else",
        "	{",
        "		Sum = 0",
        "		for i = 1 to S",
        "		{",
        "			Sum += L[i]",
        "		}",
        "		return Sum/S",
        "	}",
        "}",
        null,
        "function NxRSF::GetBaseMarket()",
        "{",
        "    Mkt = Numerix::Market()",
        "    Mkt = Mkt.Canonical",
        "    Mkts = Mkt.split(\"^\")",
        "    Mkt = Mkts[1]",
        "    return Mkt",
        "}",
        null,
        "function NxRSF::GetBase()",
        "{",
        "    AllParameters = Numerix::load(Numerix::market).id.view(\"parametername\")    ",
        "    if AllParameters: PMarkt = Numerix::load(Numerix::market).id.view(\"parametervalue\")[AllParameters.find(\"ALIAS\")].split(\"\\\"\")[2] else PMarkt = Numerix::market endif",
        "    return PMarkt",
        "}",
        null,
        null,
        "function NxRSF::FindValue(TableID, Col, Values)",
        "{",
        "    T = Numerix::Load(TableID)",
        "    list = {}",
        "    foreach R in (T) : ",
        "        foreach item in Values :",
        "            if R.Key == item :",
        "                list @= R.Value(Col)",
        "    return list",
        "}",
        null,
        "define NxRSF::FlatZeroRateShock(Key, Amt, ShockType=\"\") = ",
        "begin",
        null,
        "    switch on ShockType",
        "            case \"RELATIVE\" ",
        "                Shift = \"Percentage\"",
        "            case \"REPLACE\"",
        "                Shift = \"Absolute\"",
        "            default ",
        "                Shift = \"Additive\"",
        "            endswitch  ",
        "                ",
        "    count = 1",
        "    foreach Crv in key ",
        "	{",
        "        Bump = {\"ID\" : Crv & \"_Bump_\" & count, \"OBJECT\" : \"BUMP\" ,  \"TYPE\" : \"ZERO RATE SHIFT\" ,  \"SHIFT AMOUNT\" : Amt , \"SHIFT TYPE\" : Shift, \"CURVE ID\" : Numerix::InParent(Crv)}",
        "        YC = {\"ID\": Crv, \"OBJECT\" : \"MARKET DATA\", \"TYPE\":\"YIELD\", \"YIELD\":Numerix::InParent(Crv), \"BUMP\" : Crv & \"_Bump_\" & count}",
        "        Numerix::Create(Numerix::Object(Bump), Numerix::Object(YC))",
        "        count += 1",
        "    }",
        "end",
        null,
        "define NxRSF::ByTenorZeroRateShock(Key, TBL) = ",
        "begin",
        "    count = 1",
        "    foreach Crv in Key",
        "	{",
        "        Bump = {\"ID\":Crv+\"Bump\"+count,\"OBJECT\":\"BUMP\",\"TYPE\":\"ZERO RATE SHIFT\", \"SHIFT TYPE\" : \"Additive\" , \"DATA\":TBL.ID, \"CURVE ID\" : NumerixInParent(Crv),\"RECALIBRATE MODEL\":false, \"BUMP INTERPOLATION\" : \"FlatLeft\", \"BUMP EXTRAPOLATION\" : \"NONE\"}",
        "        YC = {\"ID\":Crv,\"OBJECT\":\"MARKET DATA\",\"TYPE\":\"YIELD\",\"YIELD\":NumerixInParent(Crv),\"BUMP\":Crv+\"Bump\"+count}",
        "        Numerix::Create( NumerixObject(Bump) , NumerixObject(YC))",
        "        count+=1",
        "    }",
        "end",
        "    ",
        "define NxRSF::ByTenorForwardRateShock(Key, ShockAmt, startTenor, endTenor, tent = False) =",
        "begin",
        "    count = 1",
        "    DailyDates = Numerix::Object({\"DAILYDATES\",\"EVENTS\",\"INTEREST DATES\"}) &",
        "    {",
        "        \"name\": \"DailyDates\",",
        "        \"startdate\": Numerix::AddTenor(Numerix::MarketDate, Numerix::Tenor(startTenor, \"F\", \"NONE\")),",
        "        \"enddate\": Numerix::AddTenor(Numerix::MarketDate, Numerix::Tenor(endTenor, \"F\", \"NONE\")),",
        "        \"freq\": \"1D\"",
        "    }",
        "    DailyDates = DailyDates.create",
        "    foreach Crv in Key",
        "	{",
        "        Bump = Numerix::Object({Crv + \"BUMP\" + count, \"BUMP\", \"ZERO RATE SHIFT\"}) & {",
        "                       \"SHIFT TYPE\": \"additive\",",
        "                       \"CURVE ID\": NumerixInParent(Crv),",
        "                       \"KEYMATURITIES\": \"200Y\",",
        "                       \"FORWARDRATEPERIODS\": DailyDates,",
        "                       \"SENSITIVITYTYPE\": \"FORWARD RATE SHIFT\",",
        "                       \"SHIFT AMOUNT\": ShockAmt}",
        "        Bump.create",
        "        YC = Numerix::Object({Crv, \"MARKET DATA\",\"YIELD\"}) & {",
        "                  \"YIELD\":NumerixInParent(Crv),",
        "                  \"BUMP\":Crv+\"Bump\"+count}",
        "        YC.create",
        "        count+=1",
        "    }",
        "end",
        null,
        "define NxRSF::KeyRateShock(TBL, Amt, Recal, Crv, Tent, ShockType=\"\")",
        "{",
        "        switch on ShockType.Canonical",
        "            case \"RELATIVE\" ",
        "                Shift = \"Percentage\"",
        "            case \"REPLACE\"",
        "                Shift = \"Absolute\"",
        "            default ",
        "                Shift = \"Additive\"",
        "            endswitch ",
        "        count = 1",
        "        foreach Cr in Crv",
        "        {",
        "            Bump = {\"ID\":Cr+\"Bump\"+count,\"OBJECT\":\"BUMP\",\"TYPE\":\"ZERO RATE SHIFT\", \"SHIFT TYPE\" : Shift , \"SHIFT TABLE\":TBL.ID, \"CURVE ID\" : Cr.ID,\"RECALIBRATE MODEL\":Recal, \"SHIFT AMOUNT\" : amt, \"TENTSHOCK\" : Tent}",
        "            YC = {\"ID\":Cr,\"OBJECT\":\"MARKET DATA\",\"TYPE\":\"YIELD\",\"YIELD\":Cr.ID,\"BUMP\":Cr+\"Bump\"+count}",
        "            Numerix::Create( NumerixObject(Bump) , NumerixObject(YC))",
        "            count+=1",
        "        }",
        "}        ",
        "    ",
        "scenario NxRSF::IRFlatQTShock(filter, ShockAmt, Recal, Curves = \"\", ShockType=\"\", CloneModel=false, MarktName = \"\", ExtList =\"\",SpreadConnFlag=false, SpreadShock = True,ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",PrntID=\"\",ScenSq=\"\",UseScenInfo=False,RFL=\"\",displayQTs=\"\",DimR=\"\")              ",
        "{",
        "	//stream market names as market container is created",
        "    ",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        ",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            //if filter.type == \"string\" : RF = NxRSF::GetIRQuote(filter) else RF = NxRSF::ConvertListString(NxRSF::GetIRQuote(filter)) endif ",
        "            if ShockType : ShType = ShockType else ShType = \"Absolute\" endif",
        "            ShAmt = ShockAmt",
        "            RFLev = RFL",
        "            Dimx = DimR",
        "            //NxRSF::ScenarioInfoStream(MtID=\"\",MtName=\"\",PtID=\"\",PtName=\"\",MtLabel=\"\",CalculateRisk=\"\",ScenSeq=\"\",RF=\"\",ShType=\"\",ShAmt=\"\",RFLev=\"\",Dim=\"\")",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,displayQTs,ShType,ShAmt,RFLev,Dimx)",
        "        }",
        "    }",
        "    ",
        "    Instruments = filter                ",
        "    FutureQuotes = {}            ",
        "    ForwardQuotes = {}            ",
        "    FWDdata = {}            ",
        "    IRQuotes = {}            ",
        "    ConnectorData = {}",
        "    ConnectorQuotes = {}",
        "    SpreadQTS = {}",
        null,
        "    foreach Inst in Instruments            ",
        "    {            ",
        "        switch on Inst.TypeInput.Canonical                ",
        "        case \"RATEFUTURES\" ",
        "            FutureQuotes @= Inst.Quotes    ",
        "        case \"AVERAGEOVERNIGHTFUTURES\"               ",
        "            FutureQuotes @= Inst.Quotes    ",
        "        case \"FXFWD\"       ",
        "            FWD = {}",
        "            FWD &= Inst.Quotes    ",
        "            if Inst.implements(\"INVERSEPRICEINPUT\") : FWD &= Inst.INVERSEPRICEINPUT else FWD &= False endif",
        "            if Inst.implements(\"SCALINGFACTORINPUT\") : FWD &= Inst.SCALINGFACTORINPUT else FWD &= 1 endif",
        "            FWDdata @= FWD",
        "        case \"FXSWAPPOINT\"       ",
        "            FWD = {}",
        "            FWD &= Inst.Quotes    ",
        "            if Inst.implements(\"INVERSEPRICEINPUT\") : FWD &= Inst.INVERSEPRICEINPUT else FWD &= False endif",
        "        case \"CONNECTOR\"       ",
        "        {        ",
        "            Diff = {}",
        "            Diff &= Inst.Quotes",
        "            Diff &= Inst.load.DifferenceOperator",
        "            ConnectorData @= Diff",
        "        }        ",
        "        case \"AVERAGEBASISSWAP\"       ",
        "        {        ",
        "            SpreadQTS @= Inst.Quotes",
        "        }        ",
        "        case \"COMPOUNDBASISSWAP\"       ",
        "        {        ",
        "            SpreadQTS @= Inst.Quotes",
        "        }        ",
        "        default       ",
        "        {        ",
        "            IRQuotes @= NxRSF::GetIRQuote(Inst)    ",
        "        }        ",
        "         endswitch",
        "    }            ",
        null,
        "	FutureQuotes = Numerix::Set(FutureQuotes)            ",
        null,
        "    IRQuotes = Numerix::Set(IRQuotes)            ",
        "    //example IR.USD-FF-ON/USD-LIBOR-3M.SWAP-1Y",
        "    SpreadQTS = Numerix::CreateMetaData(SpreadQTS) = \"IR.<Currency1>-<Leg1>-<TargetTenor>/<Currency2>-<Leg2>-<BaseTenor>.<Type>-<Maturity>\"",
        "    if FWDdata",
        "    {",
        "        ForwardQuotes = numerix::table(\"FWDQuotes\",{\"Qts\",\"InvPr\",\"Scaling\"},FWDdata.transpose)",
        "    }",
        null,
        null,
        "    if ConnectorData",
        "    {",
        "        ConnectorQuotes = numerix::table(\"ConnQuotes\",{\"Qts\",\"DiffOp\"},ConnectorData.transpose)",
        "    }",
        null,
        "    if FutureQuotes",
        "    {",
        "        switch on ShockType                ",
        "            case \"RELATIVE\"                 ",
        "                NxRSF::RelativeShock(FutureQuotes, ShockAmt / -.01) ",
        "            case \"REPLACE\"                ",
        "                NxRSF::ReplaceShock(FutureQuotes, ShockAmt / -.01) ",
        "            default                 ",
        "                NxRSF::AbsoluteShock(FutureQuotes, ShockAmt / -.01) ",
        "        endswitch                  ",
        "    }",
        null,
        null,
        null,
        "    if ForwardQuotes",
        "    {",
        "        foreach ForwardQuote in ForwardQuotes",
        "        {",
        "            ScalingFactor = ForwardQuote.Scaling.type(\"Double\")",
        "            if ForwardQuote.InvPr",
        "            {",
        "                switch on ShockType                ",
        "                    case \"RELATIVE\"                 ",
        "                        NxRSF::RelativeShock(ForwardQuote.Qts, -(ShockAmt*ScalingFactor)) ",
        "                    case \"REPLACE\"                ",
        "                        NxRSF::ReplaceShock(ForwardQuote.Qts, -(ShockAmt*ScalingFactor)) ",
        "                    default                 ",
        "                        NxRSF::AbsoluteShock(ForwardQuotes.Qts, -(ShockAmt*ScalingFactor)) ",
        "                endswitch                  ",
        "            }",
        "            else",
        "            {",
        "                switch on ShockType                ",
        "                    case \"RELATIVE\"                 ",
        "                        NxRSF::RelativeShock(ForwardQuote.Qts, ShockAmt*ScalingFactor) ",
        "                    case \"REPLACE\"                ",
        "                        NxRSF::ReplaceShock(ForwardQuote.Qts, ShockAmt*ScalingFactor) ",
        "                    default                 ",
        "                        NxRSF::AbsoluteShock(ForwardQuote.Qts, ShockAmt*ScalingFactor) ",
        "                endswitch                  ",
        "            }",
        "        }",
        "    }",
        null,
        null,
        "    if IRQuotes",
        "    {",
        "        if SpreadConnFlag",
        "        {",
        "            switch on ShockType                ",
        "            case \"RELATIVE\"                 ",
        "                NxRSF::RelativeShock(IRQuotes, -ShockAmt) ",
        "            case \"REPLACE\"                ",
        "                NxRSF::ReplaceShock(IRQuotes, -ShockAmt) ",
        "            default                 ",
        "                NxRSF::AbsoluteShock(IRQuotes, -ShockAmt) ",
        "            endswitch                 ",
        "        }",
        "        else",
        "        {",
        "            switch on ShockType                ",
        "                case \"RELATIVE\"                 ",
        "                    NxRSF::RelativeShock(IRQuotes, ShockAmt) ",
        "                case \"REPLACE\"                ",
        "                    NxRSF::ReplaceShock(IRQuotes, ShockAmt) ",
        "                default                 ",
        "                    NxRSF::AbsoluteShock(IRQuotes, ShockAmt) ",
        "            endswitch                 ",
        "        }",
        "    }",
        null,
        "    if SpreadShock",
        "    {",
        "        if SpreadQTS",
        "        {",
        "            switch on ShockType                ",
        "                case \"RELATIVE\"                 ",
        "                    NxRSF::RelativeShock(SpreadQTS.key, ShockAmt) ",
        "                case \"REPLACE\"                ",
        "                    NxRSF::ReplaceShock(SpreadQTS.key, ShockAmt) ",
        "                default                 ",
        "                    NxRSF::AbsoluteShock(SpreadQTS.key, ShockAmt) ",
        "            endswitch                 ",
        "        }",
        null,
        null,
        "        if ConnectorData",
        "        {",
        "            switch on ShockType                ",
        "                case \"RELATIVE\"                 ",
        "                    NxRSF::RelativeShock(ConnectorQuotes.Qts, ShockAmt) ",
        "                case \"REPLACE\"                ",
        "                    NxRSF::ReplaceShock(ConnectorQuotes.Qts, ShockAmt) ",
        "                default                 ",
        "                    NxRSF::AbsoluteShock(ConnectorQuotes.Qts, ShockAmt) ",
        "            endswitch                 ",
        "        }",
        "    }",
        "	",
        "     switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch ",
        "    ",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "        ",
        "    if Curves:",
        "		Cloned = Numerix::Clone(Curves)",
        "    ",
        "    //stream curve info tables",
        "    if ExtList:",
        "        NxRSF::CurveInfoStream(ExtList)",
        "     ",
        "}",
        null,
        null,
        "scenario NxRSF::IRFlatQTSpreadShock(filter, ShockAmt, Recal, Curves = \"\", ShockType=\"\", CloneModel=false, MarktName = \"\", ExtList =\"\")",
        "{",
        "	//stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "    }",
        "    ",
        "	IRQuotes = filter",
        null,
        "	IRQuotes = Numerix::Set(IRQuotes)",
        "    ",
        "    foreach quote in IRQuotes",
        "	{",
        "        switch on ShockType",
        "        case \"RELATIVE\" ",
        "            NxRSF::RelativeShock(quote,  ShockAmt)",
        "        case \"REPLACE\"",
        "            NxRSF::ReplaceShock(quote,  ShockAmt)",
        "        default ",
        "            NxRSF::AbsoluteShock(quote,  ShockAmt)",
        "        endswitch ",
        "    }",
        "	",
        "     switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch ",
        "    ",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "        ",
        "    if Curves:",
        "		Cloned = Numerix::Clone(Curves)",
        "    ",
        "    //stream curve info tables",
        "    if ExtList:",
        "        NxRSF::CurveInfoStream(ExtList)",
        "     ",
        "}",
        null,
        "scenario NxRSF::IRFlatQTShockScenario(filter, ShockAmt, Recal, Curves = \"\", CloneModel=false, MarktName = \"\",ExtList=\"\")",
        "{",
        "	//stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "    }",
        "	",
        "    Instruments = filter.Instruments",
        "	FutureQuotes = {}",
        "	IRQuotes = {}",
        null,
        "	foreach Inst in Instruments",
        "	{",
        "        if Inst.TypeInput.Canonical ==\"RATEFUTURES\" or Inst.TypeInput.Canonical == \"AVERAGEOVERNIGHTFUTURES\"",
        "		{",
        "			FutureQuotes @= Inst.Quotes",
        "		}",
        "		else",
        "		{",
        "			IRQuotes @= NxRSF::GetIRQuote(Inst)",
        "		}",
        "	}",
        null,
        "	FutureQuotes = Numerix::Set(FutureQuotes)",
        "	IRQuotes = Numerix::Set(IRQuotes)",
        "    ",
        "    foreach future in FutureQuotes",
        "	{",
        "        NxRSF::AbsoluteShock(future,  ShockAmt/-.01)",
        "    }",
        "    ",
        "    foreach quote in IRQuotes",
        "	{",
        "        NxRSF::AbsoluteShock(quote,  ShockAmt)",
        "    }",
        "	",
        "	if Recal",
        "    {",
        "		Numerix::RecalibrateModel()",
        "    }",
        "    else",
        "    {",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "    }",
        "    ",
        "    if Curves:",
        "		Cloned = Numerix::Clone(Curves)",
        "    ",
        "    //stream curve info tables ",
        "    if ExtList:",
        "        NxRSF::CurveInfoStream(ExtList)",
        "	",
        "}",
        null,
        null,
        "scenario NxRSF::IRFlatZeroRateShock(Filter, ShockAmt, Recal, ShockType=\"\",MarktName = \"\")",
        "{",
        "	//stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "    }",
        "	",
        "    foreach key in Filter :",
        "        NxRSF::FlatZeroRateShock(Key,ShockAmt)",
        "    ",
        "    switch on Recal",
        "     case 2",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch",
        "}",
        null,
        "scenario NxRSF::IRTenorZeroRateShock(filter, STenor, ETenor, ShockAmt, Recal)",
        "{",
        "    TBL = Numerix::Table(\"NX_ZeroRate_BucketTable\", {\"Bump Date\", \"Shift Amount\"}, {{Stenor, ETenor}, {ShockAmt, ShockAmt}})",
        "    Numerix::Create(TBL)",
        "    foreach key in Filter :                ",
        "        NxRSF::ByTenorZeroRateShock(Key, TBL)",
        "		",
        "    if Recal:",
        "	    Numerix::RecalibrateModel()",
        "}",
        null,
        "scenario NxRSF::IRTentForwardZeroRateShock(filter, Stenor, Etenor, ShockAmt, Recal)",
        "{",
        "    if Stenor == 0 ",
        "	{",
        "        STenor = \"0D\"",
        "    }",
        "    foreach key in Filter :                ",
        "        NxRSF::ByTenorForwardRateShock(Key, ShockAmt, Stenor, ETenor)",
        null,
        "    switch on Recal",
        "     case 2",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch",
        "}",
        null,
        "scenario NxRSF::IRForwardZeroRateShock(filter, TBL, ShockAmt, isTentShock, Recal, MarktName=\"\", Curves = \"\")",
        "{",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "    }",
        "  ",
        "	//TBL = Numerix::Table(\"BucketTable\", {\"Date Type\", \"Tenor\"},{{\"Start Date\", \"Mid Date\", \"End Date\"},{Stenor, MTenor, Etenor}})",
        "	//Numerix::Create(TBL)",
        "	foreach key in Filter :                ",
        "		NxRSF::KeyRateShock(TBL, ShockAmt, FALSE, Key, isTentShock, \"Additive\")	",
        "        ",
        "    switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch ",
        "        ",
        "    if Curves",
        "    {",
        "		Cloned = Numerix::Clone(Curves)",
        "        //stream curve info tables",
        "        NxRSF::CurveInfoStream(Curves)",
        "    }",
        "        ",
        "}",
        null,
        "scenario NxRSF::FXSpotShock(Filter, ShockAmt, Recal, ShockType=\"\", DefinedCurrency =\"\", CurrencyPair=\"\", CloneModel = false, Curves=\"\", MarktName=\"\",CurveList=\"\", FXFwdPriceQuotes=\"\",PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\")",
        "{",
        "    //stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            //if filter.type == \"string\" : RF = NxRSF::GetIRQuote(filter) else RF = NxRSF::ConvertListString(NxRSF::GetIRQuote(filter)) endif ",
        "            if ShockType : ShType = ShockType else ShType = \"Relative\" endif",
        "            ShAmt = ShockAmt",
        "            RFLev = RFL",
        "            Dimx = DimR",
        "            //NxRSF::ScenarioInfoStream(MtID=\"\",MtName=\"\",PtID=\"\",PtName=\"\",MtLabel=\"\",CalculateRisk=\"\",ScenSeq=\"\",RF=\"\",ShType=\"\",ShAmt=\"\",RFLev=\"\",Dim=\"\")",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,displayQTs,ShType,ShAmt,RFLev,Dimx)",
        "        }",
        "    }",
        "        ",
        "    if filter",
        "    {",
        "        foreach Quote in Filter",
        "        {",
        "            if DefinedCurrency",
        "            {",
        "                CurrPair = (Numerix::CreateMetaData(Quote.Key) =(\"FX.<CCYPAIR>-SPOT.MID\"))",
        "                CurrPair = CurrPair.CCYPAIR",
        "                ForeignCurrency = CurrPair[1..3]",
        "                if DefinedCurrency == ForeignCurrency",
        "                {",
        "                    switch on ShockType",
        "                    case \"ABSOLUTE\" ",
        "                        NxRSF::AbsoluteShock(Quote.Key, ShockAmt)",
        "                        if FXFwdPriceQuotes",
        "                        {",
        "                            foreach FXFwdQuote in FXFwdPriceQuotes",
        "                            {",
        "                                CurrPairFwdQuote = (Numerix::CreateMetaData(FXFwdQuote.Key) =(\"FX.<CCYPAIR>.FWD-<Date>.MID\"))",
        "                                CurrPairFwd = CurrPairFwdQuote.CCYPAIR",
        "                                if CurrPairFwd == CurrPair",
        "                                {",
        "                                    NxRSF::AbsoluteShock(FXFwdQuote.Key, ShockAmt)",
        "                                }",
        "                            }",
        "                        }",
        "                    default ",
        "                        NxRSF::RelativeShock(Quote.Key, ShockAmt)",
        "                        if FXFwdPriceQuotes",
        "                        {",
        "                            foreach FXFwdQuote in FXFwdPriceQuotes",
        "                            {",
        "                                CurrPairFwdQuote = (Numerix::CreateMetaData(FXFwdQuote.Key) =(\"FX.<CCYPAIR>.FWD-<Date>.MID\"))",
        "                                CurrPairFwd = CurrPairFwdQuote.CCYPAIR",
        "                                if CurrPairFwd == CurrPair",
        "                                {",
        "                                    if Quote.key.value.type() == \"STRING\"",
        "                                    {",
        "                                        NxRSF::AbsoluteShock(FXFwdQuote.Key, ShockAmt/(1+ShockAmt)*Quote.value)",
        "                                    }",
        "                                    else",
        "                                    {",
        "                                        NxRSF::AbsoluteShock(FXFwdQuote.Key, ShockAmt/(1+ShockAmt)*Quote.key.value)",
        "                                    }",
        "                                }",
        "                            }",
        "                        }",
        "                    endswitch ",
        "                }",
        "                else",
        "                {",
        "                    switch on ShockType",
        "                    case \"ABSOLUTE\" ",
        "                        if Quote.key.value.type() == \"STRING\"{",
        "                            AbsShockAmt = Quote.value / (1 + (ShockAmt*Quote.value))",
        "                        }                          ",
        "                        else{",
        "                            AbsShockAmt = Quote.key.value / (1 + (ShockAmt*Quote.key.value))",
        "                        }",
        "                            ",
        "                    ",
        "                    ",
        "                        ",
        "                        NxRSF::ReplaceShock(Quote.key, AbsShockAmt)",
        "                        if FXFwdPriceQuotes",
        "                        {",
        "                            foreach FXFwdQuote in FXFwdPriceQuotes",
        "                            {",
        "                                CurrPairFwdQuote = (Numerix::CreateMetaData(FXFwdQuote.Key) =(\"FX.<CCYPAIR>.FWD-<Date>.MID\"))",
        "                                CurrPairFwd = CurrPairFwdQuote.CCYPAIR",
        "                                if CurrPairFwd == CurrPair",
        "                                {",
        "                                    AbsShockAmt = FXFwdQuote.value / (1 + (ShockAmt*FXFwdQuote.value))",
        "                                    NxRSF::ReplaceShock(FXFwdQuote.Key, AbsShockAmt)",
        "                                }",
        "                            }",
        "                        }",
        "                    default ",
        "                        if Quote.key.value.type() == \"STRING\"{",
        "                            RelShockAmt = Quote.value / (1 + ShockAmt)    ",
        "                        }else{",
        "                            RelShockAmt = Quote.key.value / (1 + ShockAmt)    ",
        "                        }",
        "                        ",
        "                        NxRSF::ReplaceShock(Quote.key, RelShockAmt)",
        "                        if FXFwdPriceQuotes",
        "                        {",
        "                            foreach FXFwdQuote in FXFwdPriceQuotes",
        "                            {",
        "                                CurrPairFwdQuote = (Numerix::CreateMetaData(FXFwdQuote.Key) =(\"FX.<CCYPAIR>.FWD-<Date>.MID\"))",
        "                                CurrPairFwd = CurrPairFwdQuote.CCYPAIR",
        "                                if CurrPairFwd == CurrPair",
        "                                {",
        "                                    FXFWDRelShockAmt = FXFwdQuote.value - RelShockAmt * ShockAmt",
        "                                    NxRSF::ReplaceShock(FXFwdQuote.Key, FXFWDRelShockAmt)",
        "                                }",
        "                            }",
        "                        }",
        "                    endswitch",
        "                }",
        "            }",
        "            else",
        "            {",
        "                switch on ShockType",
        "                case \"ABSOLUTE\" ",
        "                    NxRSF::AbsoluteShock(Quote,  ShockAmt)",
        "                    if FXFwdPriceQuotes",
        "                    {",
        "                        foreach FXFwdQuote in FXFwdPriceQuotes",
        "                        {",
        "                            NxRSF::AbsoluteShock(FXFwdQuote.Key, ShockAmt)",
        "                        }",
        "                    }",
        "                    ",
        "                default ",
        "                    NxRSF::RelativeShock(Quote,  ShockAmt)",
        "                    if FXFwdPriceQuotes",
        "                    {",
        "                        foreach FXFwdQuote in FXFwdPriceQuotes",
        "                        {",
        "                            NxRSF::AbsoluteShock(FXFwdQuote.Key, ShockAmt/(1+ShockAmt)*Quote.value)",
        "                        }",
        "                    }",
        "                endswitch ",
        "            }",
        "        }",
        "    }",
        "	",
        "	switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch ",
        "    ",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "        ",
        "	if Curves",
        "    {",
        "		Cloned = Numerix::Clone(Curves)",
        "        //stream curve info tables",
        "        NxRSF::CurveInfoStream(Curves)",
        "    }",
        null,
        null,
        "}",
        null,
        "scenario NxRSF::FXCurrencyShock(filter, ShockAmt, Recal, Curves=\"\", MarktName =\"\", CloneModel =false)",
        "{",
        "	//stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "    }",
        "	",
        "    if filter",
        "	{",
        "		fxPairs = NxRSF::GetFXSpotQuotes(filter)",
        "		if fxPairs",
        "		{",
        "			foreach fxPair in fxPairs",
        "			{",
        "				MyFilter = FXPairs.Key",
        "				if fxPair.CCYPAIR[1..3] == Currency:",
        "					NxRSF::RelativeShock(MyFilter,  -ShockAmt)",
        "				else:",
        "					NxRSF::RelativeShock(MyFilter,  ShockAmt)			",
        "		    }",
        "		}",
        "		",
        "		if Recal",
        "        {",
        "		    Numerix::RecalibrateModel()",
        "        }",
        "        else",
        "        {  ",
        "            if CloneModel",
        "            {",
        "                //pull the ID of the hybrid model to be cloned in the scenario",
        "		        ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		        Cloned = Numerix::Clone(ModelID)",
        "            }",
        "        }",
        "        ",
        "        if Curves",
        "        {",
        "		    Cloned = Numerix::Clone(Curves)",
        "            //stream curve info tables",
        "            NxRSF::CurveInfoStream(Curves)",
        "        }",
        "	",
        "	}",
        "}",
        null,
        "scenario NxRSF::VarShock(filter, ShockAmt, Recal)",
        "{",
        "    NxRSF::RelativeShock(filter,  ShockAmt)",
        "    if Recal:",
        "	    Numerix::RecalibrateModel()",
        "}",
        null,
        "scenario NxRSF::ScenarioTable(Quotes, ShockType, ShockAmt, Recal, Objects = \"\",MarktName=\"\",Curves=\"\", CloneModel=false, ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",PrntID=\"\",ScenSq=\"\",RFL=\"\",UseScenInfo=False,displayQTs=\"\")",
        "{   ",
        "	//stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        ",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            if ShockType : ShType = ShockType else ShType = \"ABSOLUTE\" endif",
        "            ShAmt = ShockAmt",
        "            RFLev = RFL",
        "            ",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,displayQTs,ShType,ShAmt,RFLev)",
        "        }",
        "    }",
        "	",
        "    // Create a metadata table from arguments.",
        "	",
        "    if Quotes.Type == \"STRING\" :",
        "		Quotes = {Quotes} ",
        "    t = Quotes",
        "    shocktypes = {}",
        "    shockamts = {}",
        "    for N = 1 to Quotes.Size ",
        "    {",
        "        shocktypes @= ShockType",
        "        shockamts @= ShockAmt",
        "    }",
        "     ",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"ShockType\", \"ShockAmt\"}, {t.key,shocktypes,shockamts} )   ",
        "    tempmeta = Numerix::MetaData(temptable)",
        "    ",
        "    // Create subtables for Absolute/relative and other types of shocks.",
        "    ",
        "    ABSLTQts = (Numerix::MetaData(tempmeta).Key(\"ShockType\") == \"Absolute\")",
        "    RLTVQts = (Numerix::MetaData(tempmeta).Key(\"ShockType\").Canonical == \"Relative\")",
        "    ",
        "    // Shock quotes.",
        "	",
        "    NxRSF::RelativeShock(RLTVQts.Key, Numerix::Metadata(tempmeta, RLTVQts).Value(\"ShockAmt\"))",
        "    NxRSF::AbsoluteShock(ABSLTQts.Key, Numerix::Metadata(tempmeta, ABSLTQts).Value(\"ShockAmt\"))",
        "    ",
        "    switch on Recal",
        "     case 0 ",
        "        RecalFlag = \"No Recalibration\"",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default ",
        "        Numerix::RecalibrateFullModel()",
        "     endswitch ",
        "    ",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "    ",
        "    if Objects:",
        "        Numerix::Clone(Objects.localid)",
        "	",
        "	if Curves",
        "    {",
        "		Cloned = Numerix::Clone(Curves)",
        "        //stream curve info tables",
        "        NxRSF::CurveInfoStream(Curves)",
        "    }",
        "        ",
        "}",
        null,
        "scenario ThisMarket",
        "{",
        "}",
        null,
        "scenario NxRSF::IRSwaptionVolShock(Filter, IRVolInst, ShockAmt)",
        "{",
        "    ifnot IRVolInst :",
        "	    Inst = filter.Instruments",
        null,
        "    Insts = Filter.Instruments",
        "    NxRSF::AbsoluteShock(Insts.VolatilityQuote,  0) ",
        "    NxRSF::AbsoluteShock(IRVolInst.VolatilityQuote,  IRVolInst.ScalingFactor*ShockAmt) ",
        null,
        "	Numerix::Clone(Filter)",
        "    Numerix::RecalibrateModel() ",
        "}",
        "    ",
        "scenario NxRSF::EQVolShock(Filter, Inst = \"\", ShockAmt, Surfaces = \"\", ShockType = \"\", VolQuote=\"\",Curves=\"\",MarktName=\"\",Recal=0, CloneModel=false,PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\")",
        "{",
        "    //stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            //if filter.type == \"string\" : RF = NxRSF::GetIRQuote(filter) else RF = NxRSF::ConvertListString(NxRSF::GetIRQuote(filter)) endif ",
        "            if ShockType : ShType = ShockType else ShType = \"Absolute\" endif",
        "            ShAmt = ShockAmt",
        "            RFLev = RFL",
        "            Dimx = DimR",
        "            //NxRSF::ScenarioInfoStream(MtID=\"\",MtName=\"\",PtID=\"\",PtName=\"\",MtLabel=\"\",CalculateRisk=\"\",ScenSeq=\"\",RF=\"\",ShType=\"\",ShAmt=\"\",RFLev=\"\",Dim=\"\")",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,displayQTs,ShType,ShAmt,RFLev,Dimx)",
        "        }",
        "    }",
        "    ",
        "    //AllInsts = Filter.Instruments",
        "	if VolQuote != \"\" :",
        "		Quotes = VolQuote",
        "    elseif Inst == \"\" :",
        "        Quotes = Filter.Instruments.VolatilityQuote",
        "    else :",
        "        Quotes = Inst.VolatilityQuote",
        "    ",
        "    switch on ShockType",
        "    case \"RELATIVE\" ",
        "        NxRSF::RelativeShock(Quotes,  ShockAmt) ",
        "    case \"REPLACE\"",
        "        NxRSF::ReplaceShock(Quotes,  ShockAmt) ",
        "    default ",
        "        NxRSF::AbsoluteShock(Quotes,  ShockAmt) ",
        "    endswitch ",
        "    ",
        "    if Surfaces != \"\" :",
        "        Numerix::Clone(Surfaces)",
        "    ",
        "	Numerix::Clone(Filter)",
        "    ",
        "    switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch",
        "    ",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "        ",
        "    if Curves",
        "    {",
        "		Cloned = Numerix::Clone(Curves)",
        "        //stream curve info tables",
        "        NxRSF::CurveInfoStream(Curves)",
        "    }",
        "}",
        "    ",
        "scenario NxRSF::EQVolQTShock(QuotesFilter, ShockAmt, VolFilter = \"\", CloneModel = false, Recal, MarktName=\"\", Curves = \"\",ShockType = \"\",PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\")",
        "{",
        "	//stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            //if filter.type == \"string\" : RF = NxRSF::GetIRQuote(filter) else RF = NxRSF::ConvertListString(NxRSF::GetIRQuote(filter)) endif ",
        "            if ShockType : ShType = ShockType else ShType = \"Absolute\" endif",
        "            ShAmt = ShockAmt",
        "            RFLev = RFL",
        "            Dimx = DimR",
        "            //NxRSF::ScenarioInfoStream(MtID=\"\",MtName=\"\",PtID=\"\",PtName=\"\",MtLabel=\"\",CalculateRisk=\"\",ScenSeq=\"\",RF=\"\",ShType=\"\",ShAmt=\"\",RFLev=\"\",Dim=\"\")",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,displayQTs,ShType,ShAmt,RFLev,Dimx)",
        "        }",
        "    }",
        "    ",
        "    switch on ShockType.canonical",
        "	{",
        "        case \"Relative\"",
        "            if QuotesFilter:",
        "                if QuotesFilter isall \"string\":",
        "                    NxRSF::RelativeShock(QuotesFilter, ShockAmt) ",
        "                else:",
        "                    NxRSF::RelativeShock(QuotesFilter.key, ShockAmt)",
        "        default",
        "            if QuotesFilter:",
        "                if QuotesFilter isall \"string\":",
        "                    NxRSF::AbsoluteShock(QuotesFilter, ShockAmt) ",
        "                else:",
        "                    NxRSF::AbsoluteShock(QuotesFilter.key, ShockAmt)            ",
        "    }",
        null,
        "    switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch",
        "	",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "        ",
        "    if VolFilter:",
        "        Numerix::Clone(VolFilter)",
        "		",
        "	if Curves",
        "    {",
        "		Cloned = Numerix::Clone(Curves)",
        "        //stream curve info tables",
        "        NxRSF::CurveInfoStream(Curves)",
        "    }",
        "}",
        null,
        "scenario NxRSF::CMDTYVolQTShock(QuotesFilter, ShockAmt, VolFilter = \"\", CloneModel = false, Recal, MarktName=\"\", Curves = \"\")",
        "{",
        "	//stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "    }",
        "    ",
        "    if QuotesFilter:",
        "        if QuotesFilter isall \"string\":",
        "            NxRSF::AbsoluteShock(QuotesFilter, ShockAmt) ",
        "        else:",
        "            NxRSF::AbsoluteShock(QuotesFilter.key, ShockAmt) ",
        null,
        "    switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "     endswitch",
        "		",
        "    if VolFilter:",
        "        Numerix::Clone(VolFilter)",
        "		",
        "	if Curves:",
        "		Cloned = Numerix::Clone(Curves)",
        "        NxRSF::CurveInfoStream(Curves)",
        "}",
        "    ",
        "scenario NxRSF::FXSpotVolQTShock(QuotesFilter, ShockAmt, VolFilter = \"\", CloneModel = false, Recal, MarktName=\"\", Curves = \"\",PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\",ShockType=\"\")",
        "{",
        "	//stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            //if filter.type == \"string\" : RF = NxRSF::GetIRQuote(filter) else RF = NxRSF::ConvertListString(NxRSF::GetIRQuote(filter)) endif ",
        "            //ShType = \"Absolute\"",
        "            ShType = ShockType",
        "            ShAmt = ShockAmt",
        "            RFLev = RFL",
        "            Dimx = DimR",
        "            //NxRSF::ScenarioInfoStream(MtID=\"\",MtName=\"\",PtID=\"\",PtName=\"\",MtLabel=\"\",CalculateRisk=\"\",ScenSeq=\"\",RF=\"\",ShType=\"\",ShAmt=\"\",RFLev=\"\",Dim=\"\")",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,displayQTs,ShType,ShAmt,RFLev,Dimx)",
        "        }",
        "    }	",
        "            ",
        "    switch on ShockType.canonical",
        "	{",
        "        case \"Relative\"",
        "            if QuotesFilter:",
        "                if QuotesFilter isall \"string\":",
        "                    NxRSF::RelativeShock(QuotesFilter, ShockAmt) ",
        "                else:",
        "                    NxRSF::RelativeShock(QuotesFilter.key, ShockAmt)",
        "        default",
        "            if QuotesFilter:",
        "                if QuotesFilter isall \"string\":",
        "                    NxRSF::AbsoluteShock(QuotesFilter, ShockAmt) ",
        "                else:",
        "                    NxRSF::AbsoluteShock(QuotesFilter.key, ShockAmt)            ",
        "    }",
        "    ",
        "	switch on Recal",
        "     case 0 ",
        "        RecalFlag = \"No Recalibration\"",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default ",
        "        Numerix::RecalibrateFullModel()",
        "     endswitch",
        "	",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "        ",
        "    if VolFilter:",
        "        Numerix::Clone(VolFilter)",
        "    ",
        "    if Curves",
        "    {",
        "		Cloned = Numerix::Clone(Curves)",
        "        //stream curve info tables",
        "        NxRSF::CurveInfoStream(Curves)",
        "    }",
        "}",
        null,
        "scenario NxRSF::CMDTYFlatQTShock(filter, ShockAmt, Recal, Curves = \"\", ShockType=\"\", CloneModel=false)",
        "{",
        "    Quotes = filter",
        "    ",
        "    foreach Quote in Quotes",
        "	{",
        "        switch on ShockType",
        "        case \"ABSOLUTE\" ",
        "            NxRSF::AbsoluteShock(Quote,  ShockAmt)",
        "        case \"REPLACE\"",
        "            NxRSF::ReplaceShock(Quote,  ShockAmt)",
        "        default ",
        "            NxRSF::RelativeShock(Quote,  ShockAmt)",
        "        endswitch  ",
        "    }",
        "    ",
        "     switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "     endswitch ",
        "    ",
        "    if Curves:",
        "		Cloned = Numerix::Clone(Curves) ",
        "}",
        null,
        "define NxRSF::PopulateFixings(EndDate) = ",
        "begin",
        "    FixingsIDs = Numerix::Registry.Key(\"TYPE\") == \"FIXINGS\"",
        "    foreach FixingObj in FixingsIDs",
        "	{",
        "        FixingsData = FixingObj.FIXINGSINPUT",
        "        FixingsDataID = FixingsData.id.Localid",
        "        FixingsData = Numerix::Load(FixingsData)",
        "        FixingDates = {}",
        "        FixingValues = {}",
        "        if FixingsData.Date != {}",
        "        {",
        "            FixingDates &= Numerix::Date(FixingsData.Date)",
        "            FixingValues &= FixingsData.Value",
        "            Length = FixingsData.Size",
        "            LastFixingDate = Numerix::Date(FixingDates[Length])",
        "            LastFixingValue = FixingValues[Length]",
        "            Date = Numerix::Date(LastFixingDate)",
        "            T = Numerix::Tenor(\"1BD\", \"F\" ,\"NONE\")",
        "            while Date < EndDate -1 ",
        "            {",
        "                Date = Date + T",
        "                FixingDates &= Date",
        "                FixingValues &= LastFixingValue ",
        "            }",
        "            NewFixingsTable = Numerix::Table(FixingsDataID, {\"Date\", \"Value\"}, {FixingDates, FixingValues})",
        "            Numerix::Create(NewFixingsTable)",
        "        }",
        "    }",
        "end",
        null,
        "scenario NxRSF::FXVolShockByTenorAndDelta(VolSurfaceID, OptionTenor, OptionDelta, ShockAmt)",
        "{",
        "    if !OptionTenor && !OptionDelta",
        "	{",
        "        VOLQTFilter = VolSurfaceID.Instruments.VolatilityQuote",
        "        NxRSF::AbsoluteShock(VOLQTFilter, ShockAmt)",
        "	}",
        "    else",
        "	{",
        "        foreach S in VolSurfaceID",
        "		{",
        "            VOLINSTFilter = S.Instruments",
        "            VOLQTFilter = VOLINSTFilter.VolatilityQuote",
        null,
        "            QuotePrefix = VOLINSTFilter[1].VolatilityQuotePrefix",
        "            VOLQTFilterMD = Numerix::CreateMetaData(VOLQTFilter) == \"<QuotePrefix>::<Tenor>::<Delta>\"",
        "            if !OptionTenor :",
        "                MT = VOLQTFilter",
        "            else :",
        "                MT = (Numerix::Metadata(VOLQTFilterMD).Key(\"Tenor\").Canonical == OptionTenor.Canonical)",
        "            ",
        "            if !OptionDelta :",
        "                MD = VOLQTFilter",
        "            else :",
        "                MD =  (Numerix::Metadata(VOLQTFilterMD).Key(\"Delta\").Canonical == OptionDelta.Canonical)",
        "            ",
        "            VOLQTFilter1 = MT.key && MD.key",
        "            NxRSF::AbsoluteShock(VOLQTFilter1.Key, ShockAmt) ",
        "        }",
        "    }",
        "	",
        "	Numerix::Clone(VolSurfaceID)",
        "    Numerix::RecalibrateModel() ",
        "}",
        null,
        "scenario NxRSF::IRCAPLETVolShock(VOLFilter, VolShock)",
        "{",
        "    foreach VolObj in VOLFilter ",
        "	{",
        "        Imp = VolObj.Implements",
        "        StkList = Numerix::CreateMetadata(Imp) = \"0<Value>Output\"",
        "        RowHS = VolObj.DatesOutput",
        "        ColHS = VolObj.StrikesOutput",
        "        table = {}",
        "        VolsList = {}",
        "        for y  = 1 to ColHS.Size ",
        "		{",
        "            header = StkList.key[y]",
        "            Vols = VolObj.Value(header)",
        "            Vols +=VolShock",
        "            VolsList @=  Vols",
        "        }",
        "        InterpMeth = VolObj.INTERPMETHODINPUT",
        "        InterpVar = VolObj.INTERPVARIABLEINPUT",
        "        ExtrapolationMeth = VolObj.EXTRAPOLATIONINPUT",
        "        VolatilityB = VolObj.VOLATILITYBASISINPUT",
        "        Conv = VolObj.CONVENTIONINPUT",
        "        VolsTableID = VolObj.LocalID & \"_Shocked_Matrix\"",
        "        ShockedMatrix = Numerix::Matrix(VolsTableID, ColHS.Transpose, RowHS, VolsList)",
        "        ShockedVolObj = {\"ID\": VolObj.LocalID,\"OBJECT\": \"MARKET DATA\",\"TYPE\": \"CAP VOLATILITY\",\"NOWDATE\": \"TODAY\",\"CURRENCY\": \"USD\",\"INTERP METHOD\": InterpMeth ,\"INTERP VARIABLE\": InterpVar,\"EXTRAPOLATION\": ExtrapolationMeth,\"VOLATILITY BASIS\": VolatilityB,\"DATA\": VolsTableID, \"CONVENTION\": Conv}",
        "        Numerix::Create(ShockedMatrix, NumerixObject(ShockedVolObj))",
        "    }",
        "    Numerix::RecalibrateModel() ",
        "}",
        "function NxRSF::CurveSupport(CrvID)",
        "{",
        "    Insts = CrvID.IMPLEMENTS(\"INSTRUMENTS\")",
        "    if(Insts)",
        "	{ ",
        "        Insts = true ",
        "        inst = CrvID.INSTRUMENTS",
        "		Inst = if inst.Size == (Inst.Implements(\"QUOTES\")).Size ? true : false ",
        "		Support = Insts && Inst",
        "		return Support",
        "	}",
        "	return false",
        "}",
        null,
        "scenario NxRSF::CAPVolShock(VOLFilter, VolShock)",
        "{",
        "    foreach CAPVOLID in VOLFilter",
        "	{",
        "        VolObj = (Numerix::Registry.Key(\"Local ID.all\") == CAPVOLID)",
        "        matrix = VolObj.CapletVolatilityMatrix",
        "        matrix.ID = CAPVOLID & \"_Shocked_Matrix\"",
        "        table = matrix.Values + VolShock",
        "        matrix = NumerixMatrix(matrix.ID, matrix.ColumnHeaders, matrix.RowHeaders, table)",
        "        ShockedVolObj = {\"ID\": CAPVOLID,\"OBJECT\": \"MARKET DATA\",\"TYPE\": \"CAP VOLATILITY\",\"NOWDATE\": \"TODAY\",\"CURRENCY\": \"USD\",\"INTERP METHOD\": \"FlatLeft\",\"INTERP VARIABLE\": \"VOL\",\"EXTRAPOLATION\": \"\",\"VOLATILITY BASIS\": \"\",\"DATA\": matrix.ID}",
        "        NumerixCreate(matrix , NumerixObject(ShockedVolObj))",
        "    }",
        "	Numerix::Clone(VOLFilter)",
        "    Numerix::RecalibrateModel() ",
        "}",
        null,
        "scenario NxRSF::FXSpotMatrixShock(CCY, ShockAmt, Recal)",
        "{",
        "    // Find the spot matrix object.",
        "	",
        "    FXSPOTMATRIXID = (Numerix::Registry.Key(\"TYPE\") == \"FXSPOTMATRIX\")",
        "    ",
        "	// If found...",
        "	",
        "    if FXSPOTMATRIXID",
        "	{",
        "        // Get the base currency.",
        "		",
        "        BaseCCY = FXSPOTMATRIXID.Currency",
        "		",
        "        // Get the ID of the Quotes Table.",
        "		",
        "        QTTBLID = FXSPOTMATRIXID.DATAInput",
        "        ",
        "		// Load the Table.",
        "        ",
        "		TBL = Numerix::Load (QTTBLID)",
        "        ",
        "		// Get the list of Currencies.",
        "        ",
        "		CCYS = TBL.CURRENCY",
        "        ",
        "		// Check if currency being shocked is the base currency.",
        "        ",
        "		if (CCY == BaseCCY)",
        "		{",
        "            // Get the list of Spot Prices and perturb all of them.",
        "			",
        "            Values = TBL.SPOTPRICE",
        "            Values = Values / (1 + ShockAmt)",
        "		}",
        "        else",
        "		{",
        "            // Find the position of the currency to be shocked.",
        "			",
        "            R = CCYS.Find(CCY)",
        "			",
        "            // Get the list of Spot Prices.",
        "			",
        "            Values = TBL.SPOTPRICE",
        "			",
        "            // Apply the shock to the currency value.",
        "			",
        "            VALUES[R] = VALUES[R]* (1+ShockAmt)",
        "        }",
        "		",
        "        Headers = {\"CURRENCY\" , \"SPOTPRICE\"}",
        "        TBL = Numerix::Table(\"FX_QUOTES_TABLE\", Headers , {CCYS, VALUES} )",
        "        Numerix::Create(TBL)",
        "        FXSPOTOBJECT = Numerix::Load(FXSPOTMATRIXID)",
        "        FXSPOTOBJECT.Data = \"FX_QUOTES_TABLE\"",
        "        FXSPOTOBJECT.ID = FXSPOTMATRIXID",
        "        Numerix::Create (FXSPOTOBJECT)",
        "        switch on Recal",
        "             case 2",
        "                Numerix::RecalibrateFullModel()",
        "             case 1",
        "                Numerix::RecalibrateModel()",
        "             default",
        "                RecalFlag = \"No Recalibration\"",
        "         endswitch",
        "    } ",
        "}",
        null,
        null,
        "// Designed to work with cubes constructed from ATM Swaptions and Cap vols. the shock is applied to ATM Swaption Volatilities as well as Caplet volatilities.",
        null,
        "scenario NxRSF::IRCubeVolShock(VolCubes, ShockAmt)",
        "{",
        "    foreach VolCube in VolCubes ",
        "    {",
        "        SwaptionVol = VolCube.GetValue(\"SWAPTIONVOLATILITY\",\"\")",
        "        CapVol = VolCube.GetValue(\"CAPVOLATILITY\",\"\")",
        "        ",
        "        if SwaptionVol",
        "		{",
        "        	// Shock Swaption Vols.",
        "		    ",
        "			SwaptionInsts = SwaptionVol.Instruments",
        "            NxRSF::AbsoluteShock(SwaptionInsts.VolatilityQuote, SwaptionInsts.ScalingFactor*ShockAmt) ",
        "        }",
        "		",
        "        if CapVol",
        "		{",
        "        	// Shock Caplet Vols.",
        "			",
        "            Imp = CapVol.Implements",
        "            StkList = Numerix::CreateMetadata(Imp) = \"0<Value>Output\"",
        "            RowHS = CapVol.DatesOutput",
        "            ColHS = CapVol.StrikesOutput",
        "            table = {}",
        "            VolsList = {}",
        "            ",
        "            for y  = 1 to ColHS.Size",
        "			{",
        "                header = StkList.key[y]",
        "                Vols = CapVol.Value(header)",
        "                V = {}",
        "                foreach Vol in Vols :",
        "                  V = V & Max(Vol + ShockAmt, 0)",
        "                ",
        "                VolsList @=  V",
        "            }",
        "            ",
        "            InterpMeth = CapVol.GetValue(\"INTERPMETHOD\",\"\")",
        "            InterpVar = CapVol.GetValue(\"INTERPVARIABLE\",\"\")",
        "            ExtrapolationMeth = CapVol.GetValue(\"EXTRAPOLATION\",\"\")",
        "            VolatilityB = CapVol.GetValue(\"VOLATILITYBASIS\",\"\")",
        "            Conv = CapVol.GetValue(\"CONVENTIONINPUT\",\"\")",
        null,
        "            VolsTableID = CapVol.LocalID & \"_Shocked_Matrix\"",
        "            ShockedMatrix = Numerix::Matrix(VolsTableID, ColHS.Transpose, RowHS, VolsList)",
        "            ShockedVolObj = {\"ID\": CapVol.LocalID,\"OBJECT\": \"MARKET DATA\",\"TYPE\": \"CAP VOLATILITY\",\"NOWDATE\": \"TODAY\",\"CURRENCY\": \"USD\",\"INTERP METHOD\": InterpMeth ,\"INTERP VARIABLE\": InterpVar,\"EXTRAPOLATION\": ExtrapolationMeth,\"VOLATILITY BASIS\": VolatilityB,\"DATA\": VolsTableID, \"CONVENTION\": Conv}",
        "            Numerix::Create(ShockedMatrix , NumerixObject(ShockedVolObj))",
        "        }",
        "    }",
        null,
        "    Numerix::RecalibrateModel() ",
        "}",
        null,
        "        ",
        "scenario NxRSF::EQSpotShock(filter, ShockAmt, Recal, ShockType=\"\", CloneModel = false, Curves = \"\", MarktName = \"\",PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\")",
        "{",
        "	//stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            //if filter.type == \"string\" : RF = NxRSF::GetIRQuote(filter) else RF = NxRSF::ConvertListString(NxRSF::GetIRQuote(filter)) endif ",
        "            if ShockType : ShType = ShockType else ShType = \"Relative\" endif",
        "            ShAmt = ShockAmt",
        "            RFLev = RFL",
        "            Dimx = DimR",
        "            //NxRSF::ScenarioInfoStream(MtID=\"\",MtName=\"\",PtID=\"\",PtName=\"\",MtLabel=\"\",CalculateRisk=\"\",ScenSeq=\"\",RF=\"\",ShType=\"\",ShAmt=\"\",RFLev=\"\",Dim=\"\")",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,displayQTs,ShType,ShAmt,RFLev,Dimx)",
        "        }",
        "    }",
        "    ",
        "	",
        "    if Filter",
        "    {",
        "        //F = Filter",
        "        foreach F in Filter",
        "        {",
        "        if F isall \"String\":",
        "            filterkey = F",
        "        else:",
        "            filterkey = F.key ",
        null,
        "        switch on ShockType",
        "        case \"ABSOLUTE\" ",
        "            NxRSF::AbsoluteShock(F.key,  ShockAmt)",
        "        case \"REPLACE\"",
        "            NxRSF::ReplaceShock(F.key,  ShockAmt)",
        "        default ",
        "            NxRSF::RelativeShock(F.key,  ShockAmt)",
        "        endswitch ",
        "        }",
        "    }",
        "    ",
        "	switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch",
        "	",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "        ",
        "	if Curves",
        "    {",
        "		Cloned = Numerix::Clone(Curves)",
        "        //stream curve info tables",
        "        NxRSF::CurveInfoStream(Curves)",
        "    }",
        "}",
        null,
        null,
        null,
        "function NxRSF::CrvToDFs(CurveID,Tenor)",
        "{",
        "    // Find the curve object to convert to DFs.",
        "	",
        "    Curve = Numerix::Registry(\"ID\") == CurveID",
        "    ",
        "	// Check if curve was previously bumped.",
        "	",
        "    if Curve.Implements(\"BumpInput\")",
        "	{",
        "        Counter = 0",
        "        ",
        "		// If curve was bumped, find the original curve to get its original curve dates.",
        "		",
        "        while Curve.Implements(\"BumpInput\")",
        "		{",
        "            // Get the ID of the curbe that was bumped, this would be a global id that would need to be changed back to local id.",
        "			",
        "            Curve = Curve.YieldInput",
        "            Counter += 1",
        "            if Counter >10 : ",
        "			    break",
        "        }",
        "		",
        "        // Get the dates from which the original curve was constructed.",
        "		",
        "        NowDate = Curve.NowDateOutput",
        "        Dates = Curve.DateOutput",
        "		",
        "        // Getting the original curve construction arguments.",
        "		",
        "        IntMeth = Curve.INTERPMETHODInput",
        "        IntVar = Curve.INTERPVARIABLEInput",
        "        CCY = Curve.CurrencyInput",
        "        Basis = Curve.BasisInput",
        "		",
        "        // Changing back to the Local ID.",
        "		",
        "        Curve = Curve.LocalID",
        "		",
        "        // Getting DFs from the local curve for original dates we've gotten from the base curve.",
        "		",
        "        DFs = {}",
        "        foreach Date in Dates",
        "		{",
        "            DF =  Numerix::GetDF(Curve.id, NowDate, Date)",
        "            DFs =  DFs & DF",
        "        }",
        "        Dates = NowDate & Dates",
        "        Dates = Numerix::Date(Dates)",
        "        DFs = {1} & DFs",
        "	}",
        "    else",
        "	{",
        "        // If dealing with non-bumped curve.",
        "		",
        "        Curve = Curve.ID",
        "        NowDate = Curve.NowDateOutput",
        "        Dates = Curve.DateOutput",
        "        if Dates[1] != NowDate: Dates = {NowDate} & Dates",
        "        Dates=Numerix::AddTenor(Dates,Tenor)",
        "        DFs = Curve.DiscountFactorOutput",
        "        if DFs[1] != 1: DFs = {1} & DFs",
        "        IntMeth = Curve.INTERPMETHODInput",
        "        IntVar = Curve.INTERPVARIABLEInput",
        "        CCY = Curve.CurrencyInput",
        "        Basis = Curve.BasisInput",
        "    }",
        "	",
        "    // Creating discount factor table.",
        "	",
        "    DFTable = Numerix::Table(Curve.LocalID + \"_DFTable_\" + Numerix::UniqueNumber() , {\"Date\",\"DiscountFactor\"},{Dates, DFs})",
        "	",
        "    // Creating a yield curve from discount factors.",
        "	",
        "    NxRSF::CreateCurveFromDF(Curve.LocalID, DFTable, IntMeth, IntVar, CCY, Basis)",
        "}",
        null,
        "scenario NxRSF::CustomShock(ScenarioTable)",
        "{",
        "    ScenarioTable = Numerix::Load(ScenarioTable)",
        "    foreach Quote in ScenarioTable",
        "	{",
        "        if Quote.QuoteType == \"IR\" :",
        "            NxRSF::AbsoluteShock(Quote.Quotes,  Quote.ShockAmt) ",
        "        else : if Quote.QuoteType == \"IR.VOL\"",
        "		{",
        "            VOLQT= (Numerix::Quote.Key == (Quote.Quotes))",
        "            NxRSF::AbsoluteShock(Quote.Quotes,  Quote.ShockAmt)",
        "        }",
        "    }",
        "    ",
        "    Numerix::RecalibrateModel() ",
        "}",
        null,
        "function NxRSF::GetEQVolSurfaceProperties(Surfaces)",
        "{",
        "    SurfaceDisplayName = Surfaces.LocalID",
        "    MetaData = Numerix::CreateMetaData(SurfaceDisplayName) = \"<AssetClass>.VOL.<Currency>-<Exchange>-<Equity>.<QuoteType>\"",
        "    SurfaceName = MetaData.Currency + \"-\" + MetaData.Exchange + \"-\" + MetaData.Equity",
        "    ",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"Display\", \"RiskFactor\", \"Currency\", \"Exchange\", \"Equity\", \"QuoteType\"}, {Surfaces.Key, SurfaceDisplayName, SurfaceName, MetaData.Currency, MetaData.Exchange, MetaData.Equity, MetaData.QuoteType})",
        "	PropertyTable = Numerix::MetaData(temptable)",
        "    return PropertyTable",
        "}",
        null,
        "function NxRSF::GetCMDTYVolSurfaceProperties(Surfaces)",
        "{",
        "    SurfaceDisplayName = Surfaces.LocalID",
        "    MetaData = Numerix::CreateMetaData(SurfaceDisplayName) = \"<AssetClass>.VOL.<Currency>-<Exchange>-<Commodity>.<QuoteType>\"",
        "    SurfaceName = MetaData.Currency + \"-\" + MetaData.Exchange + \"-\" + MetaData.Commodity",
        "    ",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"Display\", \"RiskFactor\", \"Currency\", \"Exchange\", \"Commodity\", \"QuoteType\"}, {Surfaces.Key, SurfaceDisplayName, SurfaceName, MetaData.Currency, MetaData.Exchange, MetaData.Commodity, MetaData.QuoteType})",
        "	PropertyTable = Numerix::MetaData(temptable)",
        "    return PropertyTable",
        "}",
        null,
        "function NxRSF::GetFXSpotVolSurfaceProperties(Surfaces)",
        "{",
        "    Surfaces = Numerix::CreateMetaData(Surfaces) = \"FX.VOL.<BaseCurrency>/<TermCurrency>.<QuoteType>\"",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"BaseCurrency\", \"TermCurrency\", \"CurrencyPair\"}, {Surfaces.key, Surfaces.TermCurrency, Surfaces.BaseCurrency, Surfaces.BaseCurrency + Surfaces.TermCurrency} )",
        "    Surfaces = Numerix::MetaData(temptable)",
        "    return Surfaces",
        "}",
        null,
        "function NxRSF::GetSwaptionVolProperties(SwpnVols)",
        "{",
        "    if SwpnVols",
        "    {",
        "        Surfaces = Numerix::CreateMetaData(SwpnVols) = \"<AssetClass>.VOL.SWPT.<Currency>-<UIndex>-<IndexTenor>.<Strike>.<QuoteType>\"",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"Underlying\", \"Currency\", \"UIndex\", \"IndexTenor\", \"Strike\", \"QuoteType\"}, {Surfaces.key, \"IR.\" + Surfaces.Currency + \"-\" + Surfaces.UIndex+\"-\"+Surfaces.IndexTenor+\".\"+Surfaces.QuoteType, Surfaces.Currency, Surfaces.UIndex, Surfaces.IndexTenor, Surfaces.Strike, Surfaces.QuoteType})",
        "        SwpnVols = Numerix::MetaData(temptable)",
        "    }",
        "    return SwpnVols",
        "}",
        null,
        "function NxRSF::GetSwaptionCubeVolProperties(SwpnCubeVols)",
        "{",
        "    if SwpnCubeVols",
        "    {",
        "        Surfaces = Numerix::CreateMetaData(SwpnCubeVols) = \"<AssetClass>.VOL.SWPT.<Currency>-<UIndex>-<IndexTenor>.<StrikeType>.<Strike>.<VolType>.<QuoteType>\"",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"Underlying\", \"Currency\", \"UIndex\", \"IndexTenor\", \"StrikeType\", \"Strike\", \"VolType\", \"QuoteType\"}, {Surfaces.key, \"IR.\" + Surfaces.Currency + \"-\" + Surfaces.UIndex+\"-\"+Surfaces.IndexTenor+\".\"+Surfaces.QuoteType, Surfaces.Currency, Surfaces.UIndex, Surfaces.IndexTenor, Surfaces.StrikeType, Surfaces.Strike, Surfaces.VolType, Surfaces.QuoteType})",
        "        SwpnCubeVols = Numerix::MetaData(temptable)",
        "    }",
        "    return SwpnCubeVols",
        "}",
        null,
        "function NxRSF::GetSwpnVolQTProperties(SwpnVolQTs)",
        "{",
        "    // Example: IR.USD-LIBOR-3M.VOL.SWPT.ATM.MID::1M::1Y.",
        "	",
        "    if SwpnVolQTs",
        "    {",
        "        Surfaces = Numerix::CreateMetaData(SwpnVolQTs) = \"IR.<Currency>-<UIndex>-<IndexTenor>.VOL.SWPT.<StrikeType>.<Strike>.<DataType>.<QuoteType>::<MatTenor>::<Tail>\"",
        "        SwaptionMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Surfaces.MatTenor)",
        "        SwapMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Surfaces.Tail)",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"Underlying\", \"Currency\", \"MatTenor\", \"MatDate\",\"StrikeType\", \"Strike\", \"DataType\",\"QuoteType\", \"Tail\", \"TailTenor\"}, {Surfaces.key, \"IR.\" + Surfaces.Currency + \"-\" + Surfaces.UIndex+\"-\"+Surfaces.IndexTenor+\".\"+Surfaces.QuoteType, Surfaces.Currency, Surfaces.MatTenor, SwaptionMaturities, Surfaces.StrikeType, Surfaces.Strike, Surfaces.DataType, Surfaces.QuoteType, SwapMaturities, Surfaces.Tail})",
        "        SwpnVolQTs = Numerix::MetaData(temptable)",
        "    }",
        "    return SwpnVolQTs",
        "}",
        null,
        "function NxRSF::GetSwpnCubeVolATMQTProperties(SwpnCubeVolQTs)",
        "{",
        "    // Example: IR.USD-LIBOR-3M.VOL.SWPT.RLTV.ATM.LOGNORMAL.MID::1M::1Y.",
        "    if SwpnCubeVolQTs",
        "    {",
        "        Surfaces = Numerix::CreateMetaData(SwpnCubeVolQTs) = \"IR.<Currency>-<UIndex>-<IndexTenor>.VOL.SWPT.<StrikeType>.ATM.<VolType>.<QuoteType>::<MatTenor>::<Tail>\"",
        "        SwaptionMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Surfaces.MatTenor)",
        "        SwapMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Surfaces.Tail)",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"Underlying\", \"Currency\", \"MatTenor\", \"MatDate\", \"StrikeType\", \"Strike\", \"VolType\", \"QuoteType\", \"Tail\", \"TailDate\"}, {Surfaces.key, \"IR.\" + Surfaces.Currency + \"-\" + Surfaces.UIndex+\"-\"+Surfaces.IndexTenor+\".\"+Surfaces.QuoteType, Surfaces.Currency, Surfaces.MatTenor, SwaptionMaturities, Surfaces.StrikeType, \"ATM\", Surfaces.StrikeType, Surfaces.QuoteType, Surfaces.Tail, SwapMaturities})",
        "        SwpnCubeVolQTs = Numerix::MetaData(temptable)",
        "    }",
        "    return SwpnCubeVolQTs",
        "}",
        null,
        "function NxRSF::GetCapVolQTProperties(CapVolQTs)",
        "{",
        "    // Example: IR.USD-LIBOR-3M.VOL.CAP.MID::1Y::ATM.",
        "	",
        "    if CapVolQTs",
        "    {",
        "        Surfaces = Numerix::CreateMetaData(CapVolQTs) = \"IR.<Currency>-<UIndex>-<IndexTenor>.VOL.CAP.<QuoteType>::<MatTenor>::<Strike>\"",
        "        DateMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Surfaces.MatTenor, \"F\", \"NONE\")",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"Underlying\", \"Currency\", \"MatTenor\", \"MatDate\", \"Strike\", \"QuoteType\"}, {Surfaces.key, \"IR.\" + Surfaces.Currency + \"-\" + Surfaces.UIndex+\"-\"+Surfaces.IndexTenor+\".\"+Surfaces.QuoteType, Surfaces.Currency, Surfaces.MatTenor, DateMaturities, Surfaces.Strike, Surfaces.QuoteType})",
        "        CapVolQTs = Numerix::MetaData(temptable)",
        "    }",
        "    return CapVolQTs",
        "}",
        null,
        "function NxRSF::GetCapVolProperties(CapVols)",
        "{ ",
        "    // Example: IR.VOL.CAP.CAD-CDOR-3M.MID.",
        "	",
        "    if CapVols",
        "    {",
        "        Surfaces = Numerix::CreateMetaData(CapVols) = \"<AssetClass>.VOL.CAP.<Currency>-<UIndex>-<IndexTenor>.<QuoteType>\"",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"Underlying\", \"Currency\", \"QuoteType\"}, {Surfaces.key, \"IR.\" + Surfaces.Currency + \"-\" + Surfaces.UIndex+\"-\"+Surfaces.IndexTenor+\".\"+Surfaces.QuoteType, Surfaces.Currency, Surfaces.QuoteType})",
        "        CapVols = Numerix::MetaData(temptable)",
        "    }",
        "    return CapVols",
        "}",
        null,
        "function NxRSF::GetEQVolQuoteProperties1(Quotes)",
        "{",
        "    testquote = quotes[1]",
        "    testquote = testquote.split(\"::\")",
        "    testquote = testquote[2]",
        "    try ",
        "	{",
        "        testquote = testquote.type(\"Date\")",
        "        if testquote.type == \"DATE\" :",
        "            Quotes = Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<Maturity:Date>::<Strike>\"",
        "    }",
        "    catch error ",
        "	{",
        "        Quotes = Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<Maturity:Date>::<Strike>\"",
        null,
        "        DateMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Quotes.MatutityTenor, \"F\", \"NONE\")",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"SurfaceID\", \"Maturity\", \"Strike\"}, {Quotes.key, Quotes.SurfaceID, Quotes.Maturity, Quotes.Strike})",
        "        temp = Numerix::MetaData(teptable)",
        "        Quotes = temp",
        "    }",
        "    return Quotes",
        "}",
        null,
        "function NxRSF::GetCMDTYVolQuoteProperties1(Quotes)",
        "{",
        "    testquote = quotes[1]",
        "    testquote = testquote.split(\"::\")",
        "    testquote = testquote[2]",
        null,
        "    try ",
        "	{",
        "        testquote = testquote.type(\"Date\")",
        "        if testquote.type == \"DATE\" :",
        "            Quotes = Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<Maturity:Date>::<Strike>\"",
        "    }",
        "    catch error ",
        "	{",
        "        Quotes = Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<Maturity:String>::<Strike>\"",
        null,
        "        DateMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Quotes.MatutityTenor, \"F\", \"None\")",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"SurfaceID\", \"Maturity\", \"Strike\"}, {Quotes.key, Quotes.SurfaceID, Quotes.Maturity, Quotes.Strike})",
        "        temp = Numerix::MetaData(teptable)",
        "        Quotes = temp",
        "    }",
        "    return Quotes",
        "}",
        null,
        "function NxRSF::GetFXSpotVolQuoteProperties(Quotes)",
        "{",
        "    testquote = quotes[1]",
        "    testquote = testquote.split(\"::\")",
        "    testquote = testquote[2]",
        "    try ",
        "	{",
        "        testquote = testquote.type(\"Date\")",
        "        if testquote.type == \"Date\"",
        "        {",
        "            Quotes = Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<MaturityDate:Date>::<Delta>\"",
        "            MatTenor = NxRSF::DatesToTenor(NxRSF::GetMarketDate(), Quotes.MaturityDate)",
        "            temptable = Numerix::Table(\"\", {\"Key\", \"SurfaceID\", \"MaturityDate\", \"MaturityTenor\", \"Delta\"}, {Quotes.Key, Quotes.SurfaceID, Quotes. MaturityDate, MaturityTenor, Quotes.Delta})",
        "            Quotes = Numerix::MetaData(temptable)",
        "        }",
        "    }",
        "    catch error ",
        "	{",
        "        Quotes = Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<MaturityTenor:String>::<Delta>\"",
        "        DateMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Quotes.MaturityTenor, \"F\", \"NONE\")",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"SurfaceID\", \"MaturityTenor\", \"MaturityDate\", \"Delta\"}, {Quotes.key, Quotes.SurfaceID, Quotes.MaturityTenor, DateMaturities,  Quotes.Delta})",
        "        Quotes = Numerix::MetaData(temptable)",
        "    }",
        "    return Quotes",
        "}",
        null,
        "function NxRSF::GetEQVolQuoteProperties(Quotes)",
        "{",
        "    testquote = quotes[1]",
        "    testquote = testquote.split(\"::\")",
        "    testquote = testquote[2]",
        "    try ",
        "	{",
        "        testquote = testquote.type(\"Date\")",
        "        if testquote.type == \"Date\" ",
        "        {",
        "            Quotes := Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<MaturityDate:Date>::<Strike>\"",
        "            MatTenor = NxRSF::DatesToTenor(NxRSF::GetMarketDate(), Quotes.MaturityDate)",
        "            temptable = Numerix::Table(\"\", {\"Key\", \"SurfaceID\", \"MaturityTenor\", \"MaturityDate\", \"Strike\"}, {Quotes.key, Quotes.SurfaceID, MatTenor, Quotes.MaturityDate,  Quotes.Strike})",
        "            Quotes = Numerix::MetaData(temptable)",
        "        }",
        "    }",
        "    catch error ",
        "	{",
        "        Quotes = Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<MaturityTenor:String>::<Strike>\"",
        "        DateMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Quotes.MaturityTenor)",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"SurfaceID\", \"MaturityTenor\", \"MaturityDate\", \"Strike\"}, {Quotes.key, Quotes.SurfaceID, Quotes.MaturityTenor, DateMaturities,  Quotes.Strike})",
        "        Quotes = Numerix::MetaData(temptable)",
        "    }",
        null,
        "    return Quotes",
        "}",
        null,
        "function NxRSF::GetCMDTYVolQuoteProperties(Quotes)",
        "{",
        "    testquote = quotes[1]",
        "    testquote = testquote.split(\"::\")",
        "    testquote = testquote[2]",
        "      try{",
        "        testquote = testquote.type(\"Integer\")",
        "    }",
        "    catch error",
        "    {",
        "    }",
        "    ",
        "    ",
        "    try ",
        "	{",
        "        testquote = testquote.type(\"Date\")",
        "        if testquote.type == \"Date\" ",
        "        {",
        "            Quotes := Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<MaturityDate:Date>::<Strike>\"",
        "            MatTenor = NxRSF::DatesToTenor(NxRSF::GetMarketDate(), Quotes.MaturityDate)",
        "            temptable = Numerix::Table(\"\", {\"Key\", \"SurfaceID\", \"MaturityTenor\", \"MaturityDate\", \"Strike\"}, {Quotes.key, Quotes.SurfaceID, MatTenor, Quotes.MaturityDate,  Quotes.Strike})",
        "            Quotes = Numerix::MetaData(temptable)",
        "        }",
        "    }",
        "    catch error ",
        "	{",
        "        Quotes = Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<MaturityTenor:String>::<Strike>\"",
        "        DateMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Quotes.MaturityTenor)",
        "        temptable = Numerix::Table(\"\", {\"Key\", \"SurfaceID\", \"MaturityTenor\", \"MaturityDate\", \"Strike\"}, {Quotes.key, Quotes.SurfaceID, Quotes.MaturityTenor, DateMaturities,  Quotes.Strike})",
        "        Quotes = Numerix::MetaData(temptable)",
        "    }",
        null,
        "    return Quotes",
        "}",
        null,
        "function NxRSF::GetIRVolQuoteProperties(Quotes)",
        "{",
        "    Quotes = Numerix::CreateMetaData(Quotes) = \"<SurfaceID>::<Maturity:String>::<Strike>\"",
        "    DateMaturities = NxRSF::GetMarketDate + Numerix::Tenor(Quotes.Maturity)",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"SurfaceID\", \"Maturity\", \"Strike\"}, {Quotes.key, Quotes.SurfaceID, DateMaturities.Type(\"DATE\"), Quotes.Strike})",
        "    temp = Numerix::MetaData(temptable)",
        "    Quotes = temp",
        null,
        "    return Quotes",
        "}",
        null,
        "function NxRSF::GetCRCurveProperties(CRCurves)",
        "{",
        "    DisplayCurve = CRCurves.LocalID",
        "    MetaData = Numerix::CreateMetaData(DisplayCurve) = \"CR.<Currency>-<ReferenceEntity>_<DebtType>_<RestructuringClause>.<QuoteType>\"",
        "	CurveName = MetaData.Currency + \"-\" + MetaData.ReferenceEntity + \"_\" + MetaData.DebtType + \"_\" + MetaData.RestructuringClause",
        "    SectorDetails = NxRSF::MetaDataLookup(DisplayCurve, \"Sector Name\")",
        "    IndustryDetails = NxRSF::MetaDataLookup(DisplayCurve, \"Industry Name\")",
        "    ",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"Display\", \"RiskFactor\", \"Currency\", \"Sector\", \"Industry\"}, {CRCurves.Key, DisplayCurve, CurveName, MetaData.Currency, SectorDetails, IndustryDetails})",
        "	PropertyTable = Numerix::MetaData(temptable)",
        "	return PropertyTable",
        "}",
        null,
        "function NxRSF::GetIRCurveProperties(IRCurves)",
        "{",
        "    DisplayCurve = IRCurves.LocalID",
        "    CurveName = {}",
        "    foreach Curve in DisplayCurve",
        "    {",
        "        TempName = Curve.Split(\".\")",
        "        TempCheck = Curve.Find(\".\")",
        "        if TempCheck > 0",
        "        {",
        "            CurveSize = TempName.Size",
        "            if CurveSize == 3 : CurveName @= TempName[2]",
        "            if CurveSize == 4 : CurveName @= TempName[2] + \".\" + TempName[3]",
        "        }",
        "        else",
        "        {",
        "            CurveName @= Curve",
        "        }",
        "    }",
        "    ",
        "    temptable = Numerix::Table(\"\", {\"Key\", \"Display\", \"RiskFactor\", \"Currency\"}, {IRCurves.Key, DisplayCurve, CurveName, IRCurves.Currency})",
        "    PropertyTable = Numerix::MetaData(temptable)",
        "    return PropertyTable",
        "}",
        null,
        "function NxRSF::GetCMDTYProperties(CMDTYQuotes)",
        "{",
        "    CMDTYName = CMDTYQuotes.Currency + \"-\" + CMDTYQuotes.Exchange + \"-\" + CMDTYQuotes.Ticker",
        "    ",
        "	temptable = Numerix::Table(\"\", {\"Key\", \"RiskFactor\", \"Currency\"}, {CMDTYQuotes.Key, CMDTYName, CMDTYQuotes.Currency})",
        "	PropertyTable = Numerix::MetaData(temptable)",
        "	return PropertyTable",
        "}",
        null,
        "function NxRSF::GetEQProperties(EQQuotes)",
        "{",
        "    EQName = EQQuotes.Currency + \"-\" + EQQuotes.Exchange + \"-\" + EQQuotes.Ticker",
        "    SectorDetails = NxRSF::MetaDataLookup(EQQuotes.Key, \"Sector Name\")",
        "    IndustryDetails = NxRSF::MetaDataLookup(EQQuotes.Key, \"Industry Name\")",
        "    ",
        "	temptable = Numerix::Table(\"\", {\"Key\", \"RiskFactor\", \"Currency\", \"Sector\", \"Industry\"}, {EQQuotes.Key, EQName, EQQuotes.Currency, SectorDetails, IndustryDetails})",
        "	PropertyTable = Numerix::MetaData(temptable)",
        "	return PropertyTable",
        "}",
        null,
        "function NxRSF::GetFXSpotProperties(FXSpotQuotes)",
        "{",
        "    FXName = FXSpotQuotes.CCYPair",
        "    ",
        "    Currency = {}",
        "	ForeignCurrency = {}",
        "	foreach Quote in FXSpotQuotes",
        "	{",
        "		Currency @= Quote.CCYPAIR[1..3] ",
        "		ForeignCurrency @= Quote.CCYPAIR[4..6]",
        "	}",
        "    ",
        "	temptable = Numerix::Table(\"\", {\"Key\", \"Name\", \"Currency\", \"ForeignCurrecny\"}, {FXSpotQuotes.Key, FXName, Currency, ForeignCurrency})",
        "	PropertyTable = Numerix::MetaData(temptable)",
        "	return PropertyTable",
        "}",
        null,
        "function NxRSF::MetaDataLookup(DisplayMarketData, MetaDataLookupKey)",
        "{",
        "    //pull details from meta data",
        "    MetaDataDetails = {}",
        "    foreach FilterKey in DisplayMarketData",
        "    {",
        "        MetadataLookup = Numerix::Metadata.Key(\"Key\") == FilterKey",
        "        if MetadataLookup",
        "        {",
        "            MetaDataDetails @= MetadataLookup.Value(MetaDataLookupKey.Type(\"String\"))",
        "        }",
        "        else",
        "        {",
        "            MetaDataDetails @= \"\"",
        "        }",
        "    }",
        "    ",
        "    return MetaDataDetails",
        "}",
        null,
        "function CombineScenarioTable(ScenarioTable, NewScenarioTable, AssetClass)",
        "{",
        "    Size = NewScenarioTable.Size",
        "	AssetClassList = AssetClass.copy(size)",
        "	AssetClassTable = Numerix::Table(\"\",\"AssetClass\",AssetClassList)",
        null,
        "	AddScenarioTable = NewScenarioTable + AssetClassTable",
        "	if ScenarioTable",
        "    {",
        "        AddScenarioTable = Numerix::Table(\"\", AddScenarioTable.headers, AddScenarioTable.values)",
        "        ScenarioTable = ScenarioTable + AddScenarioTable ",
        "    }",
        "	else",
        "    {",
        "        ScenarioTable = AddScenarioTable",
        "    }",
        "        ",
        "    return ScenarioTable",
        "}",
        null,
        "function NxRSF::GetMarketDate()",
        "{",
        "    TODAY = (Numerix::Registry.Key(\"Local ID\") = \"TODAY\")",
        "    TodayDate = Numerix::Date(TODAY.DatesInput)",
        "    return TodayDate",
        "}",
        null,
        "function NxRSF::GetIRQuoteFromInstrument(Instrument)",
        "{",
        "    switch on Instrument.TypeInput",
        "    {",
        "    	case \"AVERAGE INDEX SWAP\" ",
        "        	QUOTES = Instrument.Quotes[2]",
        "    	default",
        "        QUOTES = Instrument.Quotes",
        "    }",
        "    ",
        "    return Quotes",
        "}",
        null,
        "function NxRSF::GetEQSpotQuotes()",
        "{",
        "    quoteTable = (Numerix::Quote.Key == (\"EQ.<Currency> - <Exchange> - <Ticker>.SPOT.<Side>\"))",
        "               ",
        "    // Remove eq vol quotes that look like spot quote by filtering out quotes containing \"::\".",
        "	",
        "    quotes = Numerix::CreateMetaData(quoteTable.Key) != \"<X>::<Y>\"",
        "               ",
        "    // Select rows from metastable that match quotes.",
        "	",
        "    return (quoteTable && quotes)",
        "}",
        null,
        "function NxRSF::GetCMDTYCurves()",
        "{ ",
        "    Curves = (Numerix::Registry.Key(\"TYPE\") == \"CMDTY FORWARD CURVE\") ",
        "    return Curves",
        "}",
        null,
        "function NxRSF::GetCMDTYQuotes()",
        "{",
        "	quoteTable = (Numerix::Quote.Key == (\"CMDTY.<Currency> - <Exchange> - <Ticker>.<Type>.<Side>\"))",
        "    // quoteTable1 = (Numerix::Quote.Key == (\"CMDTY.<Currency> - <Exchange> - <Ticker>.SPOT.<Side>\"))",
        "    // quoteTable2 = (Numerix::Quote.Key == (\"CMDTY.<Currency> - <Exchange> - <Ticker>.FWD-<Date>.<Side>\"))",
        "               ",
        "    // Remove cmdty vol quotes that look like spot quote by filtering out quotes containing \"::\".",
        "	",
        "    quotes = Numerix::CreateMetaData(quoteTable.Key) != \"<X>::<Y>\"",
        "               ",
        "    // Select rows from metastable that match quotes.",
        "	",
        "    return (quoteTable && quotes)",
        "}",
        null,
        "function NxRSF::GetCMDTYQuote(Instruments)",
        "{",
        "    qts = {}",
        "    foreach Inst in Instruments ",
        "	{   ",
        "		qts &= Inst.Quotes",
        "    }        ",
        "    ",
        "	if qts.Size == 1:",
        "		qts = qts[1]",
        "		",
        "    return qts",
        "}",
        null,
        null,
        null,
        "function NxRSF::GetFXSpotQuotes(Currencies = \"\")",
        "{",
        "	//Get a table of all FX spot Quotes.",
        "	",
        "	QuoteTable = (Numerix::Quote.Key ==(\"FX.<CCYPAIR>-SPOT.MID\"))",
        "	",
        "	if Currencies",
        "	{",
        "		MyFXQuotes = Numerix::Table(\"\", QuoteTable.ColumnHeaders)",
        "		foreach Currency in Currencies",
        "		{",
        "			foreach Quote in QuoteTable",
        "			{",
        "				abc = Quote",
        "				if Quote.CCYPAIR[1..3] == Currency || Quote.CCYPAIR[4..6] == Currency:",
        "					MyFXQuotes += Quote",
        "			}",
        "		}",
        "		QuoteTable = MyFXQuotes",
        "	}",
        "		",
        "    return (QuoteTable)",
        "}",
        null,
        "function NxRSF::GetFXSpotQuotesUnique(Currencies = \"\")",
        "{",
        "	//Get a table of all FX spot Quotes.",
        "	",
        "	QuoteTable = (Numerix::Quote.Key ==(\"FX.<CCYPAIR>-SPOT.MID\"))",
        "	",
        "	if Currencies",
        "	{",
        "		MyFXQuotes = Numerix::Table(\"\", QuoteTable.ColumnHeaders)",
        "		foreach Currency in Currencies",
        "		{",
        "			foreach Quote in QuoteTable",
        "			{",
        "				abc = Quote",
        "				if Quote.CCYPAIR[1..3] == Currency || Quote.CCYPAIR[4..6] == Currency:",
        "					MyFXQuotes += Quote",
        "			}",
        "		}",
        "		QuoteTable = MyFXQuotes",
        "        return (QuoteTable)",
        "	}",
        "    else",
        "    {",
        "        returnlist = {}",
        "        currencylist = {}",
        "        ccpair = {}",
        "        //Quotebreak = Numerix::CreateMetaData(QuoteTable) = \"<assetclass>.<vol>.<currency1>/<currency2>.<quotetype>\"",
        null,
        "        foreach Qte in QuoteTable.Key",
        "        {",
        "            if Qte[4..6] != \"USD\" and Qte[7..9] != \"USD\"",
        "            {",
        "                returnlist &= Qte",
        "                ccpair &= Qte[4..9]",
        "            }",
        "            else",
        "            {",
        "                if Qte[4..6] == \"USD\"",
        "                {",
        "                    ifnot Qte[7..9] in currencylist",
        "                    {",
        "                        currencylist &= Qte[7..9]",
        "                        returnlist &= Qte",
        "                        ccpair &= Qte[4..9]",
        "                    }",
        "                }",
        "                else",
        "                {",
        "                    ifnot Qte[4..6] in currencylist",
        "                    {",
        "                        currencylist &= Qte[4..6]",
        "                        returnlist &= Qte",
        "                        ccpair &= Qte[4..9]",
        "                    }",
        "                }",
        "            }",
        "        }",
        "        return Numerix::Table(\"\", {\"KEY\",\"CCYPAIR\"}, {returnlist,ccpair})",
        "    	return returnlist",
        "    }",
        "}",
        null,
        "function NxRSF::GetFXFwdPriceQuotes(Currencies = \"\")",
        "{",
        "	//Get a table of all FX spot Quotes.",
        "	QuoteTable = (Numerix::Quote.Key ==(\"FX.<CCYPAIR>.FWD-<Date>.MID\"))",
        "	",
        "	if Currencies",
        "	{",
        "		MyFXQuotes = Numerix::Table(\"\", QuoteTable.ColumnHeaders)",
        "		foreach Currency in Currencies",
        "		{",
        "			foreach Quote in QuoteTable",
        "			{",
        "				abc = Quote",
        "				if Quote.CCYPAIR[1..3] == Currency || Quote.CCYPAIR[4..6] == Currency:",
        "					MyFXQuotes += Quote",
        "			}",
        "		}",
        "		QuoteTable = MyFXQuotes",
        "	}",
        "		",
        "    return (QuoteTable)",
        "}",
        null,
        "function NxRSF::GetIRQuote(Instruments)",
        "{",
        "    qts = {}",
        "    foreach Inst in Instruments ",
        "	{",
        "        switch on Inst.TypeInput.Canonical",
        "		{",
        "			case \"AVERAGEINDEXSWAP\" ",
        "				qts &= Inst.Quotes[2]",
        "			default",
        "				qts &= Inst.Quotes",
        "        }",
        "    }        ",
        "    ",
        "	if qts.Size == 1:",
        "		qts = qts[1] ",
        "		",
        "    return qts",
        "}",
        null,
        "function NxRSF::ListToString(L, Delimiter)",
        "{",
        "    MyDelimiter = \"\"",
        "    NewList = \"\"",
        "    S = if L.TYPE == \"LIST\" ? L.Size : 1",
        "    for a = 1 to S",
        "	{",
        "        token = L[a]",
        "        NewList += (MyDelimiter + token)",
        "        MyDelimiter = Delimiter",
        "    }",
        "    return NewList",
        "}",
        null,
        null,
        "function NxRSF::GetATMEQVolQuotes(Qts)",
        "{",
        "   // This function only works for relative eq vol constructors.",
        "   ",
        "    if Qts",
        "	{",
        "        Quotes = Numerix::CreateMetaData(Qts.Key) == \"EQ.<Currency>-<Exchange>-<Ticker>.SPOT.VOL.STRIKE-RLTV.<Side>::<Tenor>::<Strike>\"",
        "        Quotes = Numerix::Metadata(Quotes).Key(\"Strike\").Canonical == \"1\"",
        "             ",
        "        return Quotes.key",
        "	}",
        "    else :",
        "		return Qts",
        "}",
        null,
        "function NxRSF::GetATMCMDTYVolQuotes(Qts)",
        "{",
        "   // This function only works for relative cmdty vol constructors.",
        "   ",
        "    if Qts",
        "	{",
        "        Quotes = Numerix::CreateMetaData(Qts.Key) == \"CMDTY.<Currency>-<Exchange>-<Ticker>.VOL.STRIKE-RLTV.<Side>::<Tenor>::<Strike>\"",
        "        Quotes = Numerix::Metadata(Quotes).Key(\"Strike\").Canonical == \"1\"",
        "             ",
        "        return Quotes.key",
        "	}",
        "    else :",
        "		return Qts",
        "}",
        null,
        "function NxRSF::GetATMIRVolQuotes(Qts)",
        "{",
        "    // This function only works for relative IR vol constructors.",
        "	",
        "    if Qts",
        "	{",
        "        CAPQuotes = Numerix::CreateMetaData(Qts.Key) == \"IR.<Currency>-<Curve>-<CurveTenor>.VOL.CAP.<Side>::<OptionTenor>::ATM\"",
        "        SWPTQuotes = Numerix::CreateMetaData(Qts.Key) == \"IR.<Currency>-<Curve>-<CurveTenor>.VOL.SWPT.ATM.<Side>::<OptionTenor>::<UnderlyingTenor>\"",
        "        Quotes = CAPQuotes.key & SWPTQuotes.key",
        "        return Quotes.key",
        "	}",
        "    else :",
        "	    return Qts",
        "}",
        null,
        "function NxRSF::RoundList(RoundingList, Digits = 0 , Method=\"\")",
        "{",
        "    Temp = {}",
        "    if RoundingList",
        "    {",
        "        for i=1 to RoundingList.Size :",
        "            Temp @= ROUND(RoundingList[i], 2, NONE)",
        "    }",
        "    return Temp",
        "}",
        null,
        "function NxRSF::TenorToDCF(StartDate, Tenor, Rnd=\"\")",
        "{",
        "    if Tenor is \"STRING\":",
        "		NXTenor = Numerix::Tenor(Tenor, \"NONE\", \"NONE\")",
        "	else:",
        "		NXTenor = Tenor",
        "	",
        "	MYDCF = Numerix::GetDCF(StartDate, StartDate + NXTenor, \"ACT/365\" )",
        "	",
        "    if Rnd:",
        "		MYDCF = Round(MYDCF, Rnd)",
        "	return MYDCF",
        "}",
        null,
        "function NxRSF::GetSwaptionVolsCubes()",
        "{",
        "	return (Numerix::Registry.Key(\"TYPE\") == \"SWAPTION CUBE\")",
        "}",
        null,
        "function NxRSF::GetCapVols()",
        "{",
        "	return (Numerix::Registry.Key(\"TYPE\") == \"CAP VOLATILITY\")",
        "}",
        null,
        "function NxRSF::GetATMSwaptionVols()",
        "{",
        "	return (Numerix::Registry.Key(\"TYPE\") == \"SWAPTION VOLATILITY\")",
        "}",
        null,
        "function NxRSF::IsNormalVolQuote(volsurf)",
        "{",
        "	call = volsurf.ImplementedObject.Load",
        "	foreach header in call.Key do",
        "		if header.Canonical == \"QUOTETYPE\" : if call.Value[header.Iteration].Canonical == \"NORMALVOL\" :",
        "            return true",
        "	next",
        "    return false",
        "}",
        "    ",
        "SCENARIO NxRSF::CRQTShock(filter, ShockAmt, Recal, ShockType=\"\", CloneModel = false, Curves=\"\",MarktName=\"\", ExtList = \"\",PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\")",
        "{",
        "	//stream market names as market container is created",
        "     if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            //if filter.type == \"string\" : RF = NxRSF::GetIRQuote(filter) else RF = NxRSF::ConvertListString(NxRSF::GetIRQuote(filter)) endif ",
        "            if ShockType : ShType = ShockType else ShType = \"Absolute\" endif",
        "            ShAmt = ShockAmt",
        "            RFLev = RFL",
        "            Dimx = DimR",
        "            //NxRSF::ScenarioInfoStream(MtID=\"\",MtName=\"\",PtID=\"\",PtName=\"\",MtLabel=\"\",CalculateRisk=\"\",ScenSeq=\"\",RF=\"\",ShType=\"\",ShAmt=\"\",RFLev=\"\",Dim=\"\")",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,displayQTs,ShType,ShAmt,RFLev,Dimx)",
        "        }",
        "    }",
        "	",
        "    switch on ShockType",
        "    case \"RELATIVE\" ",
        "        NxRSF::RelativeShock(filter,  ShockAmt)",
        "    case \"REPLACE\"",
        "        NxRSF::ReplaceShock(filter,  ShockAmt)",
        "    default ",
        "        NxRSF::AbsoluteShock(filter, ShockAmt)",
        "    endswitch ",
        "    ",
        "	switch on Recal",
        "     case 2 ",
        "        Numerix::RecalibrateFullModel()",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default",
        "        RecalFlag = \"No Recalibration\"",
        "     endswitch",
        "        ",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "        ",
        "    if Curves:",
        "		Cloned = Numerix::Clone(Curves)",
        "    ",
        "    //stream curve info tables",
        "    if ExtList:",
        "        NxRSF::CurveInfoStream(ExtList)",
        "}",
        null,
        "function NxRSF::CMDTYMarketData()",
        "{",
        "    MarketData = NxRSF::GetCMDTYQuotes()",
        "    return MarketData",
        "}",
        null,
        "function NxRSF::CRMarketData()",
        "{",
        "    Curves = (Numerix::Registry.Key(\"TYPE\") == \"CREDIT\")",
        "    MarketData={}",
        "    foreach Curve in Curves",
        "    {",
        "        CurveQuotes = Curve.Instruments.Quotes",
        "		IsIndex = Numerix::CreateMetaData(CurveQuotes[1]) = \"CR.<CDSIndex>.CDSINDEX-<STARTDATE:DATE>.<COUPON:DOUBLE>-<MATURITY>.SPREAD.<QuoteType>\"",
        "        ifnot IsIndex : MarketData @= Curve",
        "    }",
        "    return MarketData",
        "}",
        null,
        "function NxRSF::EQVolMarketData()",
        "{",
        "    MarketData = (Numerix::Registry.Key(\"TYPE\") == \"EQ VOL\") ",
        "    return MarketData",
        "}",
        null,
        "function NxRSF::EQMarketData()",
        "{",
        "    MarketData = NxRSF::GetEQSpotQuotes()",
        "    return MarketData",
        "}",
        null,
        "function NxRSF::IRMarketData()",
        "{",
        "    Curves = (Numerix::Registry.Key(\"TYPE\") == \"YIELD\") ",
        "    Curves &= (Numerix::Registry.Key(\"TYPE\") == \"BASIS CURVE\")",
        "    Curves &= (Numerix::Registry.Key(\"TYPE\") == \"LIBOR BASIS CURVE\")",
        "   ",
        "    Solvers = (Numerix::Registry.Key(\"TYPE\") == \"MULTI-CURVE SOLVER\")    ",
        "    foreach Solver in Solvers",
        "    {",
        "        foreach Curve in Solver.CURVESOUTPUT.ID",
        "        {",
        "            Curves &= Curve",
        "        }",
        "    }",
        "    return Curves",
        "    ",
        "}",
        null,
        null,
        "function NxRSF::FXMarketData()",
        "{",
        "    MarketData = (Numerix::Quote.Key == \"FX.<CCYPAIR>-SPOT.MID\") ",
        "    return MarketData",
        "}",
        null,
        null,
        "//filtering spread quotes from credit curve quotes",
        "function NxRSF::GetCRSpreadQuotes(Quotes)",
        "{",
        "	KRQuotes = {}",
        "	foreach Quote in Quotes",
        "        {",
        "			TempQuote = Numerix::CreateMetaData(Quote) = \"CR.<CreditDetails>.CDS-<TENOR>.SPREAD.<QuoteType>\"",
        "			if TempQuote: ",
        "                KRQuotes @= TempQuote.key",
        "        }",
        "    return KRQuotes",
        "}",
        null,
        "function NxRSF::ReduceSet(PropertySet, LookupKey, LookupColumn, SecondLookupColumn=\"\")",
        "{",
        "    SectorAdjustedSet = PropertySet.Key(LookupColumn) == LookupKey",
        "    if SecondLookupColumn",
        "    {",
        "        SectorAdjustedSet2 = PropertySet.Key(SecondLookupColumn) == LookupKey",
        "        SectorAdjustedSet = SectorAdjustedSet & SectorAdjustedSet2",
        "    }",
        "    MarketData = MarketDataSet && SectorAdjustedSet",
        "    ",
        "    return MarketData",
        "}",
        null,
        "function NxRSF::SingleBucket(Curves, StartDate, EndDate)",
        "{							  ",
        "    TodayDate = NxRSF::GetMarketDate()",
        "    BucketStartDate = Numerix::AddTenor(TodayDate, Numerix::Tenor(StartDate, \"F\", \"None\"))",
        "    BucketEndDate = Numerix::AddTenor(TodayDate, Numerix::Tenor(EndDate, \"F\", \"None\"))",
        "    ",
        "    curveInst = Curves.Instruments",
        "    DateList = NxRSF::GetDateList(Curves, TodayDate)",
        "    InstrumentMaturities = Numerix::Map(curveInst, DateList)",
        "			",
        "    if TodayDate == BucketStartDate",
        "    {",
        "        L = InstrumentMaturities >= BucketStartDate ",
        "    }",
        "    else ",
        "    {",
        "        L = InstrumentMaturities > Numerix::AddTenor(BucketStartDate, Numerix::Tenor(\"5d\", \"F\", \"None\"))",
        "    }",
        "    R = InstrumentMaturities <= Numerix::AddTenor(BucketEndDate, Numerix::Tenor(\"5d\", \"F\", \"None\"))",
        "    I = L.key && R.key",
        "    return I",
        "}",
        null,
        "function NxRSF::RemoveRiskFactors(RiskFactorSet, RemoveRiskFactors)",
        "{",
        "    foreach RiskFactor in RemoveRiskFactors",
        "    {",
        "        //remove risk factor that have been shocked from set",
        "        RiskFactorSet = RiskFactorSet.Remove(RiskFactor)",
        "    }",
        "    return RiskFactorSet",
        "}",
        null,
        "function NxRSF::GetScenarioTable(Dimension=\"\")",
        "{",
        "    //load and scenario tables",
        "    try {",
        "        IRScenarioTable = Numerix::Load(IRScenariosTable)",
        "    } catch error {",
        "        IRScenarioTable = \"\"",
        "    }",
        "    try {",
        "        CMDTYScenariosTable = Numerix::Load(CMDTYScenariosTable)",
        "    } catch error {",
        "        CMDTYScenariosTable = \"\"",
        "    }",
        "    try {",
        "        CRSpreadScenariosTable = Numerix::Load(CRSpreadScenariosTable)",
        "    } catch error {",
        "        CRSpreadScenariosTable = \"\"",
        "    }",
        "    try {",
        "        EQSpotVolScenariosTable = Numerix::Load(EQSpotVolScenariosTable)",
        "    } catch error {",
        "        EQSpotVolScenariosTable = \"\"",
        "    }",
        "    try {",
        "        EQSpotScenariosTable = Numerix::Load(EQSpotScenariosTable)",
        "    } catch error {",
        "        EQSpotScenariosTable = \"\"",
        "    }",
        "    try {",
        "        FXSpotScenariosTable = Numerix::Load(FXSpotScenariosTable)",
        "    } catch error {",
        "        FXSpotScenariosTable = \"\"",
        "    }",
        null,
        "    //combine scenario tables",
        "    ScenarioTable = {}",
        "    if IRScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, IRScenarioTable, \"IR\")",
        "	if CMDTYScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, CMDTYScenariosTable, \"CMDTY\")",
        "    if CRSpreadScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, CRSpreadScenariosTable, \"CR\")",
        "    if EQSpotVolScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, EQSpotVolScenariosTable, \"EQVol\")",
        "    if EQSpotScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, EQSpotScenariosTable, \"EQ\")",
        "    if FXSpotScenariosTable : ScenarioTable = CombineScenarioTable(ScenarioTable, FXSpotScenariosTable, \"FX\")",
        null,
        "    if ScenarioTable",
        "    {   ",
        "	    //add a uniquie key identifier to ear row",
        "        Size = {1..ScenarioTable.Size} + 100000 //add a large number to ensure proper ordering of KeyValues",
        "	    KeyValue = \"KeyValue\".Copy(ScenarioTable.Size) + Size",
        "	    KeyScenarioTable = Numerix::Table(\"\", \"Key\", KeyValue) + ScenarioTable",
        "        KeyScenarioTable = Numerix::MetaData(KeyScenarioTable)",
        "		",
        "		if Dimension",
        "        {",
        "            ScenarioKeys = KeyScenarioTable.Key(\"Dimension\").Canonical == Dimension.type(\"String\").Canonical",
        "            //DimensionTable = KeyScenarioTable and ScenarioKeys",
        "            ",
        "            DimensionTable = {}",
        "            foreach Key in ScenarioKeys",
        "            {",
        "                RowNumber = KeyScenarioTable.Key.Find(Key)",
        "                if DimensionTable: DimensionTable = DimensionTable + KeyScenarioTable[RowNumber]",
        "        		else: DimensionTable = KeyScenarioTable[RowNumber]",
        "            }",
        "            DimensionTable = Numerix::MetaData(DimensionTable)",
        "            return DimensionTable",
        "        }",
        "		",
        "        return KeyScenarioTable",
        "    }",
        "    return \"\"",
        "}",
        null,
        "function NxRSF::NameRecalList(ScenarioTable)",
        "{",
        "    TbSize = ScenarioTable.Size",
        "    FinalRecal = ScenarioTable.RecalibrateModels[TbSize]",
        "    ScenarioTable.RecalibrateModels = FALSE.Copy(TbSize - 1)",
        "    ScenarioTable.RecalibrateModels &= FinalRecal",
        "    ",
        "    ScenTable = Numerix::Table(ScenarioTable.ID, ScenarioTable.Headers, ScenarioTable.Values)",
        "    NameValue = \"\".Copy(TbSize)",
        "    NameValue[TbSize] = ScenarioTable.ScenarioName[TbSize]",
        "    ",
        "	ScenariosTable = ScenTable + Numerix::Table(\"\", \"MrktNm\", NameValue)",
        "    ScenariosTable = Numerix::MetaData(ScenariosTable)",
        "    return ScenariosTable",
        "}",
        null,
        "function NxRSF::GetScenarioShocks(ScenariosTable, ScenarioName)",
        "{",
        "    //set up meta data for referencing",
        "	ScenHeaders = ScenariosTable.Headers",
        null,
        "	//create list of unique identifiers associated with the scenario",
        "	ScenKeyList = ScenariosTable.Key(\"ScenarioName\") == ScenarioName.Type(\"String\")",
        "		",
        "	//create table for scenario set",
        "	ScenTable = Numerix::Table(\"ScenarioTable\", {}, {})",
        "	foreach Key in ScenKeyList",
        "	{",
        "		//create table for each row",
        "		RowNumber = ScenariosTable.Key.Find(Key)",
        "        ScenTable = ScenTable + ScenariosTable[RowNumber]",
        "	}",
        "    ",
        "    return ScenTable",
        "}",
        null,
        "function NxRSF::AddFXShock(Quotes, Scen, ScenarioMarket, DefinedCurrency, CurrencyPair,ScenName=\"\",ExtCurves=\"\",PtName=\"\",MktLbl=\"\",PID=\"\",ScSq=\"\",UseScenInf=False)",
        "{",
        "    //NxRSF::FXSpotShock(Filter, ShockAmt, Recal, ShockType=\"\", DefinedCurrency =\"\", CurrencyPair=\"\", CloneModel = false, Curves=\"\", MarktName=\"\",CurveList=\"\", FXFwdPriceQuotes=\"\",PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\")",
        "    if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::FXSpotShock(Quotes, Scen.ShockAmt, 0, Scen.ShockType.Canonical, DefinedCurrency, CurrencyPair, ,ExtCurves,ScenName,,,PID,PtName,MktLbl,\"NONE\",ScSq,,UseScenInf)",
        "	else : ScenarioMarket = NxRSF::FXSpotShock(Quotes, Scen.ShockAmt, 0, Scen.ShockType.Canonical, DefinedCurrency, CurrencyPair, ,ExtCurves,ScenName,,,PID,PtName,MktLbl,\"NONE\",ScSq,,UseScenInf)",
        "    ",
        "    return ScenarioMarket",
        "}",
        null,
        "function NxRSF::AddEQVolShock(MarketDataSet, Scen, ScenarioMarket, Quotes=\"\",ScenName=\"\",ExtCurves=\"\",PtName=\"\",MktLbl=\"\",PID=\"\",ScSq=\"\",UseScenInf=False)",
        "{//NxRSF::EQVolShock(Filter, Inst = \"\", ShockAmt, Surfaces = \"\", ShockType = \"\", VolQuote=\"\",Curves=\"\",MarktName=\"\",Recal=0, CloneModel=false,PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\")",
        "    if Quotes",
        "	{",
        "		if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::EQVolShock(MarketDataSet, , Scen.ShockAmt, MarketDataSet, Scen.ShockType.Canonical, Quotes,ExtCurves,ScenName,,,PID,PtName,,\"NONE\",,,UseScenInf)",
        "		else : ScenarioMarket = NxRSF::EQVolShock(MarketDataSet, , Scen.ShockAmt, MarketDataSet, Scen.ShockType.Canonical, Quotes,ExtCurves,ScenName,,,PID,PtName,,\"NONE\",,,UseScenInf)",
        "	}",
        "	else",
        "	{",
        "		if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::EQVolShock(MarketDataSet, , Scen.ShockAmt, MarketDataSet, Scen.ShockType.Canonical,,ExtCurves,ScenName,,,PID,PtName,,\"NONE\",,,UseScenInf)",
        "		else : ScenarioMarket = NxRSF::EQVolShock(MarketDataSet, , Scen.ShockAmt, MarketDataSet, Scen.ShockType.Canonical,,ExtCurves,ScenName,,,PID,PtName,,\"NONE\",,,UseScenInf)",
        "	}",
        "    ",
        "    return ScenarioMarket",
        "}",
        null,
        "function NxRSF::AddEQShock(Quotes, Scen, ScenarioMarket,ScenName=\"\",ExtCurves=\"\",PtName=\"\",MktLbl=\"\",PID=\"\",ScSq=\"\",UseScenInf=False)",
        "{   //NxRSF::EQSpotShock(filter, ShockAmt, Recal, ShockType=\"\", CloneModel = false, Curves = \"\", MarktName = \"\",PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\")",
        "    if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::EQSpotShock(Quotes, Scen.ShockAmt, 0, Scen.ShockType.Canonical, , ExtCurves,ScenName,PID,PtName,MktLbl,\"NONE\",ScSq,,UseScenInf)",
        "    else : ScenarioMarket = NxRSF::EQSpotShock(Quotes, Scen.ShockAmt, 0, Scen.ShockType.Canonical, , ExtCurves,ScenName,PID,PtName,MktLbl,\"NONE\",ScSq,,UseScenInf)",
        "    ",
        "    return ScenarioMarket",
        "}",
        null,
        "function NxRSF::AddCMDTYShock(Quotes, Scen, ScenarioMarket, ExtCurves=\"\")",
        "{",
        "    if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::CMDTYFlatQTShock(Quotes, Scen.ShockAmt, 0, ExtCurves, Scen.ShockType.Canonical)",
        "    else : ScenarioMarket = NxRSF::CMDTYFlatQTShock(Quotes, Scen.ShockAmt, 0, ExtCurves, Scen.ShockType.Canonical)",
        "    ",
        "    return ScenarioMarket",
        "}",
        null,
        "function NxRSF::AddCRShock(Quotes, Scen, ScenarioMarket,ScenName=\"\",ExtCurves=\"\",PtNm=\"\",mktLbl=\"\",PtID=\"\",UseScenInf=False)",
        "{//NxRSF::CRQTShock(filter, ShockAmt, Recal, ShockType=\"\", CloneModel = false, Curves=\"\",MarktName=\"\", ExtList = \"\",PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",displayQTs=\"\",UseScenInfo=False,RFL=\"\",DimR=\"\")",
        "    if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::CRQTShock(Quotes, Scen.ShockAmt, 0, Scen.ShockType.Canonical, , ,ScenName,ExtCurves,PtID,PtNm,,\"NONE\",,,UseScenInf)",
        "    else : ScenarioMarket = NxRSF::CRQTShock(Quotes, Scen.ShockAmt, 0, Scen.ShockType.Canonical, , ,ScenName,ExtCurves,PtID,PtNm,,\"NONE\",,,UseScenInf)",
        "    ",
        "    return ScenarioMarket",
        "}",
        null,
        null,
        "function NxRSF::AddIRShock(Instruments, Scen, ScenarioMarket, ReportType,ScenName=\"\",ExtCurves=\"\",PtNm=\"\",mktLbl=\"\",PtID=\"\",UseScenInf=False)",
        "{//NxRSF::IRFlatQTShock(filter, ShockAmt, Recal, Curves = \"\", ShockType=\"\", CloneModel=false, MarktName = \"\", ExtList =\"\",SpreadConnFlag=false, SpreadShock = True,ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",PrntID=\"\",ScenSq=\"\",UseScenInfo=False,RFL=\"\",displayQTs=\"\",DimR=\"\")",
        "    if ReportType = \"ByBucket\"",
        "    {",
        "        if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::IRFlatQTShock(Instruments, Scen.ShockAmt, 0, ,Scen.ShockType.Canonical, ,ScenName,ExtCurves, ,false,PtNm,mktLbl,\"NONE\",PtID,,UseScenInf)",
        "        else : ScenarioMarket = NxRSF::IRFlatQTShock(Instruments, Scen.ShockAmt, 0, ,Scen.ShockType.Canonical, ,ScenName,ExtCurves, ,false,PtNm,mktLbl,\"NONE\",PtID,,UseScenInf)",
        "    }",
        "    else",
        "    {",
        "        if ScenarioMarket : ScenarioMarket = ScenarioMarket.NxRSF::IRFlatQTShock(Instruments, Scen.ShockAmt, 0,MarketDataSet,Scen.ShockType.Canonical, ,ScenName,ExtCurves, ,false,PtNm,mktLbl,\"NONE\",PtID,,UseScenInf)",
        "        else : ScenarioMarket = NxRSF::IRFlatQTShock(Instruments, Scen.ShockAmt, 0,MarketDataSet,Scen.ShockType.Canonical, ,ScenName,ExtCurves, ,false,PtNm,mktLbl,\"NONE\",PtID,,UseScenInf)",
        "    }",
        "    ",
        "    return ScenarioMarket",
        "}",
        null,
        "function NxRSF::SingleVolBucket(VolSurface, StartDate, EndDate, StartStrike, EndStrike)",
        "{",
        "	//Generate a meta data table with quote keys, maturity dates, tenors and strikes",
        "	AllVolQuotes = NxRSF::GetEQVolQuoteProperties(VolSurface.Instruments.VolatilityQuote) ",
        "	",
        "	//Crate a map of quote keys and maturity dates",
        "    TodayDate = NxRSF::GetMarketDate() ",
        "	QuoteMaturities = Numerix::Map(AllVolQuotes.Key, NxRSF::RoundList(Numerix::GetDCF(TodayDate, AllVolQuotes.MaturityDate, \"ACT / ACT\"),\"DOWN\")) ",
        "    QuoteStrikes = Numerix::Map(AllVolQuotes.Key, AllVolQuotes.Strike.Type(\"Double\"))",
        "    MaturityBucketInsts = {}",
        "    StrikeBucketInsts = {}",
        "    Insts = {}",
        "    ",
        "    if StartDate.type != \"NONE\" : ",
        "        if EndDate.type != \"NONE\" : ",
        "            MaturityBucketInsts = BucketFuntion(QuoteMaturities, StartDate, EndDate)",
        "            ",
        "    if StartStrike.type != \"NONE\" :",
        "        if EndStrike.type != \"NONE\" :",
        "            StrikeBucketInsts = BucketFuntion(QuoteStrikes, StartStrike, EndStrike)",
        "    ",
        "    if StartDate.type != \"NONE\" and EndDate.type != \"NONE\"",
        "    {",
        "        if StartStrike.type != \"NONE\" and  EndStrike.type != \"NONE\" :",
        "            Insts = MaturityBucketInsts and StrikeBucketInsts",
        "        else:",
        "            Insts = MaturityBucketInsts ",
        "    }",
        "    else",
        "    {",
        "        if StartStrike.type != \"NONE\" and  EndStrike.type != \"NONE\" :",
        "            Insts = StrikeBucketInsts",
        "    }",
        "        ",
        "    return Insts",
        "}",
        null,
        null,
        null,
        "SCENARIO NxRSF::JumptoDefaultScenario(Curve, SurvProbTable)",
        "{",
        "    SurvProbTable = SurvProbTable.create",
        "    ",
        "    call = {",
        "		\"ID\"				        : 	Curve.LocalID,",
        "		\"OBJECT\"			        : 	\"MARKET DATA\",",
        "		\"TYPE\"				        : 	\"CREDIT\",",
        "		\"CURRENCY\"			        : 	Curve.Currency,",
        "        \"INTERP METHOD\"             :   Curve.InterpMethod,",
        "        \"INTERP VARIABLE\"           :   Curve.InterpVariable,",
        "        \"BASIS\"                     :   Curve.Basis,",
        "		\"DATA\"				        :	SurvProbTable",
        "		}",
        "	",
        "    ID = Numerix::Object(call)",
        "    ID = ID.Create",
        "}",
        null,
        null,
        "scenario NxRSF::DateRoll(Date1=\"\",Tenor1, Recal1, UseDFRoll=false, CloneModel=false, MarktName = \"\", ExtList =\"\",PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",RFL=\"\",displayQTs=\"\",UseScenInfo=False,ShockAmt=\"\",CalcDate=\"\")",
        "{",
        "    //stream market names as market container is created",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            //if filter.type == \"string\" : RF = NxRSF::GetIRQuote(filter) else RF = NxRSF::ConvertListString(NxRSF::GetIRQuote(filter)) endif ",
        "            ShType = \"Absolute\"",
        "            ShAmt = ShockAmt",
        "            RFLev = RFL",
        "            //NxRSF::ScenarioInfoStream(MtID=\"\",MtName=\"\",PtID=\"\",PtName=\"\",MtLabel=\"\",CalculateRisk=\"\",ScenSeq=\"\",RF=\"\",ShType=\"\",ShAmt=\"\",RFLev=\"\",Dim=\"\")",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,displayQTs,ShType,ShAmt,RFLev,,CalcDate)",
        "        }",
        "    }",
        "	//this scenario function rolls the valuation date forward by a tenor defined by a user",
        "    ",
        "    // if user has specified start date, use it. otherwise look up market date",
        "    if Date1:",
        "        RollDate = Numerix::AddTenor(Date1,Tenor1)",
        "    else:",
        "        RollDate = NxRSF::GetMarketDate()",
        "    ",
        "    ",
        "    //create a new market valuation date",
        "    EventObject={\"ID\" : \"TODAY\" , \"NAME\":\"TODAY\" , \"OBJECT\" : \"EVENTS\" , \"TYPE\" : \"SINGLE DATE\" , \"DATES\" : RollDate}",
        "    Numerix::Create(NumerixObject(EventObject))",
        "    ",
        "    //populate fixings using linear extrapolation",
        "    NxRSF::PopulateFixings(NumerixDate(RollDate))",
        "    ",
        "    //roll DFs without any business conventions",
        "    NoBCCTenor = Numerix::Tenor(Tenor1[1],\"NONE\",\"NONE\")",
        "    ",
        "    ",
        "    if UseDFRoll ",
        "    {",
        "        //get all rate curves",
        "        Curves = NxRSF::GetYieldCurves()",
        "    	",
        "        foreach Curve in Curves",
        "    	{",
        "            NxRSF::CrvToDFs(Curve,NoBCCTenor)",
        "        }",
        "    }",
        "    ",
        "    switch on Recal1",
        "     case 0 ",
        "        RecalFlag = \"No Recalibration\"",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default ",
        "        Numerix::RecalibrateFullModel()",
        "     endswitch ",
        "    ",
        "    if CloneModel",
        "    {",
        "        //pull the ID of the hybrid model to be cloned in the scenario",
        "		ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		Cloned = Numerix::Clone(ModelID)",
        "    }",
        "        ",
        "    if ExtList",
        "    {",
        "		Cloned = Numerix::Clone(ExtList)",
        "        //stream curve info tables",
        "        foreach ExtCrv in ExtList",
        "        {",
        "            if ExtCrv.implements(\"Info\")",
        "            {",
        "                NxRSF::CurveInfoStream(ExtCrv)",
        "            }",
        "            else",
        "            {",
        "                NxRSF::CurveInfoTheta(ExtCrv)",
        "            }",
        "        }",
        "    }",
        "}",
        null,
        "function NxRSF::CurveInfoTheta(CurveIn)",
        "{",
        "    settingheaders = {\"Interpolation Method\", \"Interpolation Variable\", \"Basis\"}",
        "    settingvalues = {CurveIn.InterpMethodInput, CurveIn.InterpVariableInput,CurveIn.BasisInput}",
        null,
        "    //if dftable.Rows :",
        "        result = Numerix::Table(\"CurveInfo_Table\", {\"DATE\", \"DISCOUNTFACTOR\", \"SETTINGHEADERS\", \"SETTINGVALUES\"}, {CurveIn.DateOutput, CurveIn.DiscountFactorOutput, settingheaders, settingvalues})",
        "    //else :",
        "        //result = Numerix::Table(\"CurveInfo_Table\", {\"KEY\", \"DATE\", \"DISCOUNTFACTOR\", \"SETTINGHEADERS\", \"SETTINGVALUES\"}, {CurveIn.NameOutput, CurveIn.DateOutput, CurveIn.DiscountFactorOutput, settingheaders, settingvalues})",
        null,
        "    Loaded_Info = result",
        "    String_ID = \"mdeinfo\"",
        "    //if curveinfo exists stream it out",
        "    Curve_ID_B = Numerix::Market.type(\"string\") + \"^\" + CurveIn.type(\"string\")",
        "   	if Loaded_Info: cde = String_ID.Broadcast({\"id\": Curve_ID_B, Loaded_Info})",
        "}",
        null,
        "function NxRSF::ThetaCalcDate(RolledDate)",
        "{",
        "    Pricer = Numerix::Registry.key(\"TYPE\") = \"EXPOSURE\"",
        "    observationdates = Pricer[1].load.observationdates",
        "    fixdates = observationdates.view(\"fixdate\")",
        "    for f = 1 to fixdates.size",
        "    {",
        "        if fixdates[f] >= RolledDate",
        "        {",
        "            return fixdates[f]",
        "            ",
        "        }",
        "        ",
        "    }",
        null,
        "    return startdate",
        "}",
        "function NxRSF::CreateMktNm(BaseMkt)",
        "{",
        "    temp = BaseMkt.split(\"^\")",
        "    MkName = temp[1]",
        "    templist = temp.remove(temp[1])",
        "    foreach t in templist",
        "    {",
        "        MkName = MkName + \"_\" + t",
        "    }",
        "    return MkName + \"_PRICING\"",
        "}",
        "scenario NxRSF::RecalibrateScenario(Recal=2, MarktName = \"\", ExtList =\"\", CloneModel=false,UseScenInfo=False,PrntID=\"\",ParentName=\"\",MaktLbl=\"\",CalcRisk=\"ALL\",ScenSq=\"\",Dim=\"\")",
        "{",
        "	//stream market names as market container is created\"",
        "    if MarktName",
        "    {",
        "        markt = \"marketinfo\"",
        "        abc = markt.Broadcast({\"id\": Numerix::Market, \"market name\": MarktName})",
        "        ",
        "        if UseScenInfo",
        "        {",
        "            MarktID = Numerix::Market",
        "            MarketName = MarktName",
        "            ParentID = PrntID",
        "            ParentName = ParentName",
        "            MarketLabel = MaktLbl",
        "            CalculateRisk = CalcRisk",
        "            ScenSeq = ScenSq",
        "            RF = \"\"",
        "            ShType = \"\"",
        "            ShAmt = \"\"",
        "            RFLev = \"\"",
        "            Dima = Dim",
        "            NxRSF::ScenarioInfoStream(MarktID,MarketName,ParentID,ParentName,MarketLabel,CalculateRisk,ScenSeq,RF,ShType,ShAmt,RFLev,Dima)",
        "        }",
        "    }",
        null,
        "	 switch on Recal",
        "     case 0 ",
        "        if CloneModel",
        "        {",
        "            //pull the ID of the hybrid model to be cloned in the scenario",
        "		    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "		    Cloned = Numerix::Clone(ModelID)",
        "        }",
        "     case 1",
        "        Numerix::RecalibrateModel()",
        "     default ",
        "        Numerix::RecalibrateFullModel()",
        "     endswitch",
        "    ",
        "    if ExtList:",
        "		Cloned = Numerix::Clone(ExtList)",
        "    ",
        "    //stream curve info tables",
        "    if ExtList:",
        "        NxRSF::CurveInfoStream(ExtList)",
        "     ",
        "}",
        null,
        null,
        "function NxRSF::FilterTradesRF(TradesInput, RFInput)",
        "{",
        "    masterlist = {}",
        "    foreach Tr in TradesInput",
        "    {",
        "        if Tr.UNDERLYING == RFInput: masterlist @= Tr.KEY        ",
        "    }",
        "    uniquemasterlist = Numerix::Set(masterlist)",
        "    return uniquemasterlist",
        "}",
        null,
        "function NxRSF::TenorCompare(Atenor, Btenor)",
        "{",
        "    InputTenor1 = Atenor",
        "    Accessor1 = InputTenor1[InputTenor1.size..InputTenor1.size]",
        "    TenorValue1 = InputTenor1[1..InputTenor1.size-1]",
        "    switch on Accessor1",
        "        case \"D\" ",
        "            TenorValue1 = TenorValue1.type(\"Double\")/250",
        "        case \"M\" ",
        "            TenorValue1 = TenorValue1.type(\"Double\")/12",
        "        case \"N\" ",
        "            TenorValue1 = 0.0001",
        "        default ",
        "            TenorValue1 = TenorValue1",
        "    endswitch  ",
        null,
        "    InputTenor2 = Btenor",
        "    Accessor2 = InputTenor2[InputTenor2.size..InputTenor2.size]",
        "    TenorValue2 = InputTenor2[1..InputTenor2.size-1]",
        "    switch on Accessor2",
        "        case \"D\" ",
        "            TenorValue2 = TenorValue2.type(\"Double\")/250",
        "        case \"M\" ",
        "            TenorValue2 = TenorValue2.type(\"Double\")/12",
        "        case \"N\" ",
        "            TenorValue2 = 0.0001",
        "        default ",
        "            TenorValue2 = TenorValue2",
        "    endswitch  ",
        "    return TenorValue1 < TenorValue2 ",
        "}",
        null,
        "function NxRSF::SpreadConnectorCheck(Curve)",
        "{",
        "    ConnectorData = {}",
        "    ConnectorQuotes = {}",
        "    SpreadQTS = {}",
        "    OtherQTS = {}",
        "    Instruments = Curve.Instruments",
        "    foreach Inst in Instruments            ",
        "    {            ",
        "        switch on Inst.TypeInput.Canonical                ",
        "        case \"CONNECTOR\"       ",
        "        {        ",
        "            Diff = {}",
        "            Diff &= Inst.Quotes",
        "            Diff &= Inst.load.DifferenceOperator",
        "            ConnectorData @= Diff",
        "        }        ",
        "        case \"AVERAGEBASISSWAP\"       ",
        "        {        ",
        "            SpreadQTS @= Inst.Quotes",
        "        }        ",
        "        case \"COMPOUNDBASISSWAP\"       ",
        "        {        ",
        "            SpreadQTS @= Inst.Quotes",
        "        }        ",
        "        default       ",
        "        {        ",
        "            OtherQTS @= NxRSF::GetIRQuote(Inst)    ",
        "        }        ",
        "         endswitch",
        "    }            ",
        null,
        "    if SpreadQTS",
        "    {",
        "        //IR.USD-FF-ON/USD-LIBOR-3M.SWAP-7Y",
        "        //IR.USD-LIBOR-1M/USD-LIBOR-3M.SWAP-10Y",
        "        SpreadQTS = Numerix::CreateMetaData(SpreadQTS) = \"IR.<Currency1>-<Leg1>-<TargetTenor>/<Currency2>-<Leg2>-<BaseTenor>.<Type>-<Maturity>\"",
        "        SpQT = SpreadQTS[1]",
        "        Ttenor = SpQT.TargetTenor",
        "        Btenor = SpQT.BaseTenor",
        "        return NxRSF::TenorCompare(Ttenor, Btenor)",
        "    }",
        null,
        "    if ConnectorData",
        "    {",
        "        ConnectorQuotes = numerix::table(\"ConnQuotes\",{\"Qts\",\"DiffOp\"},ConnectorData.transpose)",
        "        ConnectorQuote = ConnectorQuotes[1]",
        "        if ConnectorQuote.DiffOp = \"+\" : return true else return false endif",
        "    }",
        null,
        "    return false",
        "}",
        null,
        "function NxRSF::GetInstrumentMaturityMap(inst_list)",
        "{",
        "    // get DCF",
        "    dcff = {}",
        "    for i = 1 to inst_list.size",
        "    {",
        " ",
        "        inst_temp = Numerix::Registry(inst_list[i])",
        "        //if Numerix::Map(inst_temp.Key,inst_temp.Value).Value(\"Type\") == \"FXFwd\"",
        "        if inst_temp.typeinput.Canonical = \"CONNECTOR\"",
        "        {",
        "            inst_temp = inst_temp.load.derivedquoteinstrument",
        "        }",
        "        Switch on inst_temp.TypeInput.Canonical",
        "        {",
        "            case \"FXFWD\"",
        "                if inst_temp.implements(\"paydateinput\")",
        "                {",
        "                    mat_date = inst_temp.paydateinput",
        "                }",
        "                else",
        "                {",
        "                    if inst_temp.tenorinput.type == \"String\"",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.tenorinput))",
        "                    }",
        "                    else",
        "                    {",
        "                        mat_date = tenorinput",
        "                    }",
        "                }",
        "            //mat_date = inst_temp.paydateOutput",
        "            case \"FRA\"",
        "                if inst_temp.implements(\"endinput\")",
        "                {",
        "                    if inst_temp.endinput.type == \"String\"",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.endinput))",
        "                    }",
        "                    else",
        "                    {",
        "                        mat_date = inst_temp.endinput",
        "                    }",
        "                }",
        "                elseif inst_temp.implements(\"enddateinput\") then",
        "                {",
        "                    mat_date =  inst_temp.enddateinput",
        "                }",
        "                elseif inst_temp.implements(\"endtenorinput\") then",
        "                {",
        "                    mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.endtenorinput))",
        "                }",
        "                endif",
        "                ",
        "            case \"Rate Futures\"",
        "                mat_date = inst_temp.paydate",
        "            case \"Average Overnight Futures\"",
        "                mat_date = inst_temp.rateenddateoutput[inst_temp.rateenddateoutput.size -1]",
        "            case \"compound overnight futures\"",
        "                mat_date = inst_temp.contractenddateoutput",
        "            case \"FX SWAP POINT\"",
        "                if inst_temp.tenorinput.type == \"String\"",
        "                {",
        "                    Switch on inst_temp.tenorinput.canonical",
        "                        case \"ON\"",
        "                            mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"1D\"))",
        "                        case \"TN\"",
        "                            mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"2D\"))",
        "                        case \"SN\"",
        "                            mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"3D\"))",
        "                        default",
        "                            mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.tenorinput))",
        "                    endswitch",
        "                }",
        "                else",
        "                {               ",
        "                    mat_date = tenorinput           ",
        "                }",
        "            ",
        "            case \"SWAP\"",
        "                mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.MaturityInput))",
        "            case \"COMPOUNDINDEXSWAP\"",
        "                if inst_temp.maturityinput.type == \"String\"",
        "                {",
        "                    mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.MaturityInput))",
        "                }",
        "                else",
        "                {",
        "                    mat_date =  inst_temp.Maturityinput",
        "                }",
        "            case \"COMPOUNDBASISSWAP\"",
        "                mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.MaturityInput))",
        "            case \"AVERAGEBASISSWAP\"",
        "                mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.MaturityInput))",
        "            case \"CCBASISSWAP\"",
        "                mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.EndTenorInput))",
        "            default",
        "                if inst_temp.maturityinput.type == \"String\"",
        "                {",
        "                    if inst_temp.maturityinput == \"O/N\" || inst_temp.maturityinput == \"ON\":",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"1D\"))",
        "                    }",
        "                    elseif inst_temp.maturityinput == \"TN\":",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"2D\"))",
        "                    }",
        "                    elseif inst_temp.maturityinput == \"SN\":",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"3D\"))",
        "                    }",
        "                    else",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.maturityinput))",
        "                    }      ",
        "                }",
        "                else",
        "                {",
        "                    //mat_date = numerix::addtenor(inst_temp.referencedate, numerix::tenor(inst_temp.maturity))",
        "                    ",
        "                    mat_date = inst_temp.maturityInput",
        "                }",
        "        }",
        "        dcf_temp = Numerix::GetDCF(TodayDate, mat_date, \"ACT / ACT\")",
        "        dcff &= dcf_temp",
        "    }",
        " ",
        "// map Instrument and DCF",
        "InstrumentMaturities = Numerix::Map(inst_list, dcff) ",
        "return InstrumentMaturities",
        "}",
        null,
        null,
        "function NxRSF::CheckDomestic(Curve)",
        "{",
        "    ModelID = Numerix::Registry.Key(\"ID\") = \"HYBRID\"",
        "    DomesticCurrency = ModelID.load.DomesticModel.Currency",
        "    ",
        "    AssetClass =  Curve.split(\".\")[1]",
        "    if (Curve.split(\".\")[2] == \"VOL\") then",
        "        if AssetClass == \"IR\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<vol>.<type>.<currency>-<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")",
        "            if Curvebreak.value(\"currency\") = DomesticCurrency then",
        "                return True",
        "            else",
        "                return False",
        "            endif",
        "        elseif AssetClass == \"EQ\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<vol>.<currency>-<exchange>-<ticker>.<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")+ \"-\" + Curvebreak.value(\"exchange\") + \"-\" + Curvebreak.value(\"ticker\")",
        "            if Curvebreak.value(\"currency\") = DomesticCurrency then",
        "                return True",
        "            else",
        "                return False",
        "            endif",
        "        else",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<vol>.<currencypair>.<indexinfo>\"",
        "            if not Curvebreak then ",
        "                Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<vol>.<currencypair>-<indexinfo>\"",
        "            endif",
        "            if Curvebreak.CurrencyPair.size = 7 then",
        "                Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currencypair\")[1..3] + \"/\" + Curvebreak.value(\"currencypair\")[5..7]",
        "                if Curvebreak.value(\"currencypair\")[1..3] = DomesticCurrency then",
        "                    return True",
        "                elseif Curvebreak.value(\"currencypair\")[5..7] = DomesticCurrency then",
        "                    return True",
        "                else",
        "                    return False",
        "                endif",
        "            else ",
        "                Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currencypair\")[1..3] + \"/\" + Curvebreak.value(\"currencypair\")[4..6]",
        "                if Curvebreak.value(\"currencypair\")[1..3] = DomesticCurrency then",
        "                    return True",
        "                elseif Curvebreak.value(\"currencypair\")[4..6] = DomesticCurrency then",
        "                    return True",
        "                else",
        "                    return False",
        "                endif",
        "            endif",
        "        endif",
        "    else ",
        "        if AssetClass == \"IR\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currency>-<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")",
        "            if Curvebreak.value(\"currency\") = DomesticCurrency then",
        "                return True",
        "            else",
        "                return False",
        "            endif",
        "        elseif AssetClass == \"CR\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currency>-<reference_entity>_<debt_type>_<restructuring_clause>.<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\") + \"-\" + Curvebreak.value(\"reference_entity\")+ \"_\" + Curvebreak.value(\"debt_type\")+ \"_\" + Curvebreak.value(\"restructuring_clause\")",
        "            if Curvebreak.value(\"currency\") = DomesticCurrency then",
        "                return True",
        "            else",
        "                return False",
        "            endif",
        "        elseif AssetClass == \"CMDTY\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currency>-<exchange>-<ticker>.<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")+ \"-\" + Curvebreak.value(\"exchange\") + \"-\" + Curvebreak.value(\"ticker\")",
        "            if Curvebreak.value(\"currency\") = DomesticCurrency then",
        "                return True",
        "            else",
        "                return False",
        "            endif",
        "        elseif AssetClass == \"EQ\" then",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currency>-<exchange>-<ticker>.<indexinfo>\"",
        "            Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currency\")+ \"-\" + Curvebreak.value(\"exchange\") + \"-\" + Curvebreak.value(\"ticker\")",
        "            if Curvebreak.value(\"currency\") = DomesticCurrency then",
        "                return True",
        "            else",
        "                return False",
        "            endif",
        "        else",
        "            Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currencypair>.<indexinfo>\"",
        "            if not Curvebreak then ",
        "                Curvebreak = Numerix::CreateMetaData(Curve) = \"<assetclass>.<currencypair>-<indexinfo>\"",
        "            endif",
        "            if Curvebreak.CurrencyPair.size = 7 then",
        "                Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currencypair\")[1..3] + \"/\" + Curvebreak.value(\"currencypair\")[5..7]",
        "                if Curvebreak.value(\"currencypair\")[1..3] = DomesticCurrency then",
        "                    return True",
        "                elseif Curvebreak.value(\"currencypair\")[5..7] = DomesticCurrency then",
        "                    return True",
        "                else",
        "                    return False",
        "                endif",
        "            else ",
        "                Underlying = Curvebreak.value(\"assetclass\") + \".\" + Curvebreak.value(\"currencypair\")[1..3] + \"/\" + Curvebreak.value(\"currencypair\")[4..6]",
        "                if Curvebreak.value(\"currencypair\")[1..3] = DomesticCurrency then",
        "                    return True",
        "                elseif Curvebreak.value(\"currencypair\")[4..6] = DomesticCurrency then",
        "                    return True",
        "                else",
        "                    return False",
        "                endif",
        "            endif",
        "        endif",
        "    endif",
        "    ",
        "    return False",
        " ",
        "}",
        null,
        "function NxRSF::filteredSwaptionVolQuotes() {",
        "    // kpVolQtIDs, kpOptionDates, kpSwapDates, xCurrency, xUIndex, xIndexTenor, xStrikeType, volType, xQuoteType, kpOptionTenor, kpSwapTenor, isCube, isSurface, type, ",
        "    keptQuotes = kpVolQtIDs",
        "    foreach kpOptionDate in kpOptionDates {",
        "        foreach kpSwapDate in kpSwapDates {",
        "            // convert date to tenor",
        "            kpOptionTenor = optionMap[kpOptionDate.type(\"String\")].value",
        "            kpSwapTenor = swapMap[kpSwapDate.type(\"String\")].value",
        "            if type.canonical == \"SWAPTIONCUBE\" {",
        "                volQt = Numerix::CreateMetaData(fullQuoteDep) = \"IR.\" + xCurrency + \"-\" + xUIndex + \"-\" + xIndexTenor +\".VOL.SWPT.\" + xStrikeType + \".<ATM>.\" + volType + \".\" + xQuoteType + \"::\" + kpOptionTenor + \"::\" + kpSwapTenor",
        "            } else {",
        "                if newFormat {",
        "                    cubeStr = \"IR.\" + xCurrency + \"-\" + xUIndex + \"-\" + xIndexTenor +\".VOL.SWPT.\" + xStrikeType + \".ATM.\" + volType + \".\" + xQuoteType + \"::\" + kpOptionTenor + \"::\" + kpSwapTenor",
        "                    i = fullQuoteDep.find(cubeStr.Canonical)",
        "                    if i:",
        "                        volQt = fullQuoteDep[i]",
        "                    else:",
        "                        volQt = {}",
        "                }",
        "                if oldFormat {",
        "                    surfaceStr = \"IR.\" + xCurrency + \"-\" + xUIndex + \"-\" + xIndexTenor +\".VOL.SWPT.ATM.\" + xQuoteType + \"::\" + kpOptionTenor + \"::\" + kpSwapTenor",
        "                    i = fullQuoteDep.find(surfaceStr.Canonical)",
        "                    if i:",
        "                        volQt = fullQuoteDep[i]",
        "                    else:",
        "                        volQt = {}",
        "                }",
        "            }",
        "            volQtIDs = if volQt is \"table\" ? volQt.Value(\"Key\") : volQt",
        "            foreach volQtID in volQtIDs {",
        "                keptQuotes.push(volQtID)",
        "            }",
        "        } // foreach kpSwapDate in kpSwapDates",
        "    } // foreach kpOptionDate in kpOptionDates",
        "    return keptQuotes",
        "    ",
        "}",
        null,
        "function NxRSF::ScenarioInfoStream(MtID=\"\",MtName=\"\",PtID=\"\",PtName=\"\",MtLabel=\"\",CalculateRisk=\"\",ScenSeq=\"\",RF=\"\",ShType=\"\",ShAmt=\"\",RFLev=\"\",Dim=\"\",ClcDate=\"\")",
        "{",
        "    MtID_a = {}",
        "    MtName_a = {}",
        "    PtID_a = {}",
        "    PtName_a = {}",
        "    MtLabel_a = {}",
        "    CalculateRisk_a = {}",
        "    ScenSeq_a={}",
        "    RF_a={}",
        "    ShType_a={}",
        "    ShAmt_a={}",
        "    RFLev_a={}",
        "    Dim_a={}",
        "    ClcDate_a = {}",
        "    ",
        "    MtID_a @= MtID",
        "    MtName_a @= MtName",
        "    PtID_a @= PtID",
        "    PtName_a @= PtName",
        "    MtLabel_a @= MtLabel",
        "    CalculateRisk_a @= CalculateRisk",
        "    ScenSeq_a @= ScenSeq",
        "    RF_a @= RF",
        "    ShType_a @= ShType",
        "    ShAmt_a @= ShAmt",
        "    RFLev_a @= RFLev",
        "    Dim_a=Dim",
        "    ClcDate_a @= ClcDate",
        "    ",
        "    String_ID = \"scenarioinfo\" //to be changed to \"sceanrioinfo\" by next week",
        "    //Scenario_Table = numerix::table(\"TrTable\",{\"MarketID\",\"MarketName\",\"ParentID\",\"ParentName\", \"MarketLabel\", \"Dim1\", \"Dim2\", \"Dim3\",\"CalculateRisk\",\"ScenarioSequence\",\"RiskFactor\",\"ShockType\",\"ShockAmount\"},{MtID_a,MtName_a,PtID_a,PtName_a,MtLabel_a,Dim1_a,Dim2_a,Dim3_a,CalculateRisk_a,ScenSeq_a,RF_a,ShType_a,ShAmt_a})//,RFLev_a}),\"RiskFactorLevel\"",
        "    if ClcDate",
        "    {",
        "        Scenario_Table = numerix::table(\"TrTable\",{\"MARKET_ID\",\"MARKET_NAME\",\"PARENT_ID\",\"PARENT_MARKET_NAME\", \"MARKET_LABEL\",\"CALCULATE_RISK\",\"SCENARIO_SEQUENCE\",\"RISK_FACTOR_1\",\"RISKFACTOR1_SHOCKTYPE\",\"RISKFACTOR1_SHOCKAMT\",\"RISKFACTOR1_LEVEL\",\"DIMENSION\",\"ROLLEDDATE\"},{MtID_a,MtName_a,PtID_a,PtName_a,MtLabel_a,CalculateRisk_a,ScenSeq_a,RF_a,ShType_a,ShAmt_a,RFLev_a,Dim_a,ClcDate_a})//,RFLev_a}),\"RiskFactorLevel\"",
        "    }",
        "    else",
        "    {",
        "        Scenario_Table = numerix::table(\"TrTable\",{\"MARKET_ID\",\"MARKET_NAME\",\"PARENT_ID\",\"PARENT_MARKET_NAME\", \"MARKET_LABEL\",\"CALCULATE_RISK\",\"SCENARIO_SEQUENCE\",\"RISK_FACTOR_1\",\"RISKFACTOR1_SHOCKTYPE\",\"RISKFACTOR1_SHOCKAMT\",\"RISKFACTOR1_LEVEL\",\"DIMENSION\"},{MtID_a,MtName_a,PtID_a,PtName_a,MtLabel_a,CalculateRisk_a,ScenSeq_a,RF_a,ShType_a,ShAmt_a,RFLev_a,Dim_a})//,RFLev_a}),\"RiskFactorLevel\"",
        "    }",
        "    ScenID = Scenario_Table.create",
        "    ScenTable = numerix::load(ScenID)",
        "    cde = String_ID.Broadcast({\"id\": MtID, ScenTable})",
        "}",
        null,
        null,
        "function NxRSF::RiskList(LadderTable)",
        "{",
        "    retstr = \"\"",
        "    foreach RL in LadderTable.load",
        "    {",
        "        if RL.Calculate == TRUE",
        "        {",
        "            if retstr == \"\"",
        "            {",
        "               retstr == RL.Measure ",
        "            }",
        "            else",
        "            {",
        "                retstr = retstr + \",\" + RL.Measure",
        "            }",
        "        } ",
        "    }",
        "    return retstr",
        "    ",
        "}",
        null,
        "function NxRSF::GetBaseName()",
        "{",
        "    AllParameters = Numerix::load(Numerix::market).id.view(\"parametername\")    ",
        "    if AllParameters: PMarkt = Numerix::load(Numerix::market).id.view(\"parametervalue\")[AllParameters.find(\"ALIAS\")].split(\"\\\"\")[2] else PMarkt = \"\" endif",
        "    return PMarkt",
        "}",
        null,
        "function NxRSF::ExtractOutrights(Crvs)",
        "{",
        "    retInstr = {}",
        "    Instrs = Crvs.Instruments",
        "    foreach Inst in Instrs",
        "    {",
        "        if (Inst.TypeInput.canonical == \"CASH DEPOSIT\") or (Inst.TypeInput.canonical == \"SWAP\") or (Inst.TypeInput.canonical == \"COMPOUND INDEX SWAP\")or (Inst.TypeInput.canonical == \"AVERAGE INDEX SWAP\"): retInstr &= Inst",
        "    }",
        "    return retInstr",
        "}",
        null,
        "function NxRSF::CurrencyCurve(crvs,currfilter)",
        "{",
        "    retcrvs = {}",
        "    foreach crv in crvs",
        "    {",
        "        if not crv.implementedobject.hasvalue(\"SpotPrice\") and not crv.implementedobject.hasvalue(\"NominalRateCurve\")",
        "        {",
        "             try",
        "            {",
        "                if crv.Currency == currfilter: retcrvs &= crv ",
        "            }",
        "            catch",
        "            {",
        "                if crv.CurrencyInput == currfilter: retcrvs &= crv",
        "            }",
        "        }",
        null,
        "    }",
        "    return retcrvs",
        "}",
        null,
        "function NxRSF::IncludeSynthetic(InstrIn,CashIn)",
        "{",
        "    ",
        "    SwapInstr = Numerix::CreateMetaData(InstrIn.ID) = \"<Market>^<Curve>^SWAP.<Maturity>\"",
        "    NonBasisInstr = Numerix::CreateMetaData(CashIn.ID) != \"<Market>^<Curve>^SWAPSYNTHETIC.<Maturity>\"",
        "    AllInstr = Numerix::Set(InstrIn,NonBasisInstr.key)",
        "    BasisInstr = Numerix::CreateMetaData(CashIn.ID) = \"<Market>^<Curve>^SWAPSYNTHETIC.<Maturity>\"",
        "    ",
        "    maturitylist = SwapInstr.Maturity",
        "    foreach Ins in BasisInstr",
        "    {",
        "        ifnot Ins.Maturity in maturitylist: AllInstr &= Ins.Key",
        "    }",
        "    return AllInstr",
        "}",
        null,
        "function DatesToTenor(fromDate,toDate,calender)",
        "{",
        "    tenor = Numerix::ReportTenorfromDates(fromDate, toDate,calender)",
        "    tenor_split = tenor.split(\"/\")",
        "    if tenor_split != tenor: tenor = tenor_split[1] + tenor_split[2]",
        "    return tenor",
        "}",
        null,
        "function NxRSF::GetInstrumentMaturityTable(inst_list)",
        "{",
        "    // get date, dcf, and tenor",
        "    date = {}",
        "    dcff = {}",
        "    tenor = {}",
        "    for i = 1 to inst_list.size",
        "    {",
        "        inst_temp = Numerix::Registry(inst_list[i])",
        "        //if Numerix::Map(inst_temp.Key,inst_temp.Value).Value(\"Type\") == \"FXFwd\"",
        "        if inst_temp.typeinput.Canonical = \"CONNECTOR\"",
        "        {",
        "            inst_temp = inst_temp.load.derivedquoteinstrument",
        "        }",
        "        Switch on inst_temp.TypeInput.Canonical",
        "        {",
        "            case \"FXFWD\"",
        "                if inst_temp.implements(\"paydateinput\")",
        "                {",
        "                    mat_date = inst_temp.paydateinput",
        "                    mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "                }",
        "                else",
        "                {",
        "                    if inst_temp.tenorinput.type == \"String\"",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.tenorinput))",
        "                        mat_tenor = inst_temp.tenorinput",
        "                    }",
        "                    else",
        "                    {",
        "                        mat_date = tenorinput",
        "                        mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "                    }",
        "                }",
        "            //mat_date = inst_temp.paydateOutput",
        "            case \"FRA\"",
        "                if inst_temp.implements(\"endinput\")",
        "                {",
        "                    if inst_temp.endinput.type == \"String\"",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.endinput))",
        "                        mat_tenor = inst_temp.endinput",
        "                    }",
        "                    else",
        "                    {",
        "                        mat_date = inst_temp.endinput",
        "                        mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "                    }",
        "                }",
        "                elseif inst_temp.implements(\"enddateinput\") then",
        "                {",
        "                    mat_date =  inst_temp.enddateinput",
        "                    mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "                }",
        "                elseif inst_temp.implements(\"endtenorinput\") then",
        "                {",
        "                    mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.endtenorinput))",
        "                    mat_tenor = inst_temp.endtenorinput",
        "                }",
        "                endif",
        "                ",
        "            case \"Rate Futures\"",
        "                mat_date = inst_temp.paydate",
        "                mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "            case \"Average Overnight Futures\"",
        "                mat_date = inst_temp.rateenddateoutput[inst_temp.rateenddateoutput.size -1]",
        "                mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "            case \"compound overnight futures\"",
        "                mat_date = inst_temp.contractenddateoutput",
        "                mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "            case \"FX SWAP POINT\"",
        "                if inst_temp.tenorinput.type == \"String\"",
        "                {",
        "                    Switch on inst_temp.tenorinput.canonical",
        "                        case \"ON\"",
        "                            mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"1D\"))",
        "                            mat_tenor = \"1D\"",
        "                        case \"TN\"",
        "                            mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"2D\"))",
        "                            mat_tenor = \"2D\"",
        "                        case \"SN\"",
        "                            mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"3D\"))",
        "                            mat_tenor = numerix::tenor(\"3D\")",
        "                        default",
        "                            mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.tenorinput))",
        "                            mat_tenor = inst_temp.tenorinput",
        "                    endswitch",
        "                }",
        "                else",
        "                {               ",
        "                    mat_date = tenorinput  ",
        "                    mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "                }",
        "            ",
        "            case \"SWAP\"",
        "                mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.MaturityInput))",
        "                mat_tenor = inst_temp.MaturityInput",
        "            case \"COMPOUNDINDEXSWAP\"",
        "                if inst_temp.maturityinput.type == \"String\"",
        "                {",
        "                    mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.MaturityInput))",
        "                    mat_tenor = inst_temp.MaturityInput",
        "                }",
        "                else",
        "                {",
        "                    mat_date =  inst_temp.Maturityinput",
        "                    mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "                }",
        "            case \"COMPOUNDBASISSWAP\"",
        "                mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.MaturityInput))",
        "                mat_tenor = inst_temp.MaturityInput",
        "            case \"AVERAGEBASISSWAP\"",
        "                mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.MaturityInput))",
        "                mat_tenor = inst_temp.MaturityInput",
        "            case \"CCBASISSWAP\"",
        "                mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.EndTenorInput))",
        "                mat_tenor = inst_temp.EndTenorInput",
        "            default",
        "                if inst_temp.maturityinput.type == \"String\"",
        "                {",
        "                    if inst_temp.maturityinput == \"O/N\" || inst_temp.maturityinput == \"ON\":",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"1D\"))",
        "                        mat_tenor = \"1D\"",
        "                    }",
        "                    elseif inst_temp.maturityinput == \"TN\":",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"2D\"))",
        "                        mat_tenor = \"2D\"",
        "                    }",
        "                    elseif inst_temp.maturityinput == \"SN\":",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(\"3D\"))",
        "                        mat_tenor = \"3D\"",
        "                    }",
        "                    else",
        "                    {",
        "                        mat_date = numerix::addtenor(TodayDate, numerix::tenor(inst_temp.maturityinput))",
        "                        mat_tenor = inst_temp.maturityinput",
        "                    }      ",
        "                }",
        "                else",
        "                {",
        "                    //mat_date = numerix::addtenor(inst_temp.referencedate, numerix::tenor(inst_temp.maturity))",
        "                    ",
        "                    mat_date = inst_temp.maturityInput",
        "                    mat_tenor = DatesToTenor(TodayDate, mat_date, \"\")",
        "                }",
        "        }",
        "        date &= mat_date",
        "        tenor &= mat_tenor",
        "        dcf_temp = Numerix::GetDCF(TodayDate, mat_date, \"ACT / ACT\")",
        "        dcff &= dcf_temp",
        "    }",
        "    // table Instrument for date, dcf, and tenor",
        "    tempTable = Numerix::Table(\"\", {\"Key\", \"MatDate\", \"MatDCF\", \"MatTenor\"}, {inst_list, date, dcff, tenor})  ",
        "    InstrumentMaturitiesTable = Numerix::MetaData(tempTable) ",
        "    return InstrumentMaturitiesTable",
        "}",
        null,
        "function NxRSF::DatesToTenor(fromDate, toDate)",
        "{",
        "    x = Numerix::GetCalendarDayCount(fromDate, toDate)",
        "    if x.Type == \"LIST\"",
        "    {",
        "        tenor = {}",
        "        foreach t in x",
        "        {",
        "            if t = 1: tenor @= \"ON\"",
        "            elseif t = 2: tenor @= \"TN\"",
        "            elseif t = 3: tenor @= \"SN\"",
        "            elseif t < 7: tenor @= (t).type(\"Integer\") + \"D\"",
        "            elseif t < 28: tenor @= (t/7).type(\"Integer\") + \"W\"",
        "            elseif t < 1080: tenor @= (t/30 + .067).type(\"Integer\") + \"M\"",
        "            else: tenor @= (t/360).type(\"Integer\") + \"Y\"",
        "        }",
        "    }",
        "    else",
        "    {",
        "        if x = 1: tenor = \"ON\"",
        "        elseif x = 2: tenor = \"TN\"",
        "        elseif x = 3: tenor = \"SN\"",
        "        elseif x < 7: tenor = (x).type(\"Integer\") + \"D\"",
        "        elseif x < 28: tenor = (x/7).type(\"Integer\") + \"W\"",
        "        elseif x < 1080: tenor = (x/30 + .067).type(\"Integer\") + \"M\"",
        "        else: tenor = (x/360).type(\"Integer\") + \"Y\"",
        "    }",
        "    return tenor",
        "}"]
    }
  },
  "MODEL.IR.HW1F": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "MODEL.IR.HW1F",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "MODEL.IR.HW1F.PARAMETERS",
      "RESULTS" : "MODEL.IR.HW1F.RESULTS",
      "ALIASES" : "MODEL.IR.HW1F.ALIASES",
      "CLASSPROPERTIES" : "MODEL.IR.HW1F.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "MODEL.IR.HW1F.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "MEMBER" : "MODEL.IR.HW1F.CALIBRATIONCONSTRAINTS_SPEC",
      "MEMBER" : "MODEL.IR.HW1F.CALIBRATIONCONSTRAINTS_AUXILIARY",
      "MEMBER" : "MODEL.IR.HW1F.QUALITY_SPEC",
      "SCRIPT" : "MODEL.IR.HW1F.SCRIPT.NXSL"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_12856_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["MEANREVERSION.USEINITIALGUESS","INSTCOLL.CALIBRATIONINSTRUMENTTYPE","VOLATILITY.USEINITIALGUESS","MEANREVERSION.VALUE","INSTCOLL.INSTRUMENTCAPFLOOR","MEANREVERSION.CALIBRATE","VOLATILITY.CALIBRATE","QUOTETYPE","CURRENCY","INSTCOLL.INSTRUMENTSWAPTION"],
      "VALUE" : [false,"Swaption",false,0.0299999999999999989,"Concrete Object Script : Unexpected token not processed at token #127 near line \"        Parameter conv_currency = Currency \" in code generation.",false,true,"MID","USD","CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^TERMS.HY.CALLABLEDUALGENERICINDEXSPREADRASWAP.TRADE-1701250621129591280090^SWAPTIONCALIBRATIONINST_12666"]
    }
  },
  "DEFINITION.INSTCOLLIR.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Calibration Instrument Type","Instrument Swaption","Instrument Capfloor","Quote Type","Currency","IR Index","IR Index Tenor","Swaption Volatility Surface","Capfloor Volatility Surface","Projection Curve","Cap Floor Arrears Reset"],
      "TYPE" : ["String","Table(DEFINITION.INSTCOLLIR.INSTRUMENT_SWAPTION_SPEC)","Table(DEFINITION.INSTCOLLIR.INSTRUMENT_CAPFLOOR_SPEC)","String","Currency","String","Tenor|String","ID","ID","ID","Boolean"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : ["Swaption",
        ">SWAPTION_DIAGONAL30Y",    null,"MID",null,
        ">Numerix::DiscountCurveID(Currency).split(\".\")[2].split(\"-\")[2]",    
        ">Numerix::DiscountCurveID(Currency).split(\".\")[2].split(\"-\")[3]",    null,null,null,true],
      "GROUPING" : [null,null,null,"Alias","Alias","Alias","Alias",null,null,null,null],
      "DESCRIPTION" : ["Swaption, Capfloor or Both
-Swaption; Selecting swaption  from InstrumentSwaptiontable spec
-Capfloor; Selecting capfloor  from InstrumentCapfloor table spec
-Both; Selecting swaption and capfloor from both InstrumentSwaption, InstrumentCapfloor table specs","List of swaption instruments for calibration
Calibration Strategy accepts DiagonalSwaptions, ColumnSwaptions
-DiagonalSwaptions(Strike as String or Double, Maturity as Tenor, Flavor as String) return diagonal set of swaptions at a given maturity (option maturity+swap tenor)
-ColumnSwaptions(Strike as String or Double, OptionMaturity as Tenor, SwapTenor as Tenor, Flavor as String) returns column set of swaptions at a given swap tenor with option maturity upto given value
Strike accepts String or Double type value
Option Maturity accepts Tenor value
Swap Tenor accepts Tenor value
Flavor accepts String value like payers(default), receivers, call, put","List of capfloor instruments for calibration
Strike accepts String or Double type value
Start Tenor accepts Tenor value
End Tenor accepts Tenor value
Flavor accepts String value like cap(default), floor, call, put
",null,null,"Indicate the underlying IR index","Indicate the underlying IR index tenor","The ID of the Volatility surface or volatility cube
","The ID of the Volatility surface or volatility cube
","The ID for the projection curve.","For ARR.  By default is set to true."]
    }
  },
  "DEFINITION.INSTCOLLIR.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.INSTCOLLIR.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.INSTCOLLIR.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.INSTCOLLIR.INSTRUMENT_SWAPTION_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Calibration Strategy" : ["String"],
      "Strike" : ["String|Double"],
      "OptionMaturity" : ["Tenor"],
      "SwapTenor" : ["Tenor"],
      "Flavor" : ["String"],
      "Weight" : ["Double"]
    }
  },
  "DEFINITION.INSTCOLLIR.SWAPTION_DIAGONAL10Y": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Calibration Strategy" : ["DiagonalSwaptions(\"ATM\",\"10Y\",\"Call\")"],
      "Strike" : [null],
      "OptionMaturity" : [null],
      "SwapTenor" : [null],
      "Flavor" : [null],
      "Weight" : [null]
    }
  },
  "DEFINITION.INSTCOLLIR.SWAPTION_DIAGONAL30Y": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Calibration Strategy" : ["DiagonalSwaptions(\"ATM\",\"30Y\",\"Call\")"],
      "Strike" : [null],
      "OptionMaturity" : [null],
      "SwapTenor" : [null],
      "Flavor" : [null],
      "Weight" : [null]
    }
  },
  "DEFINITION.INSTCOLLIR.SWAPTION_AUXILIARY": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Strike" : ["ATM",0.0200000000000000004],
      "OptionMaturity" : ["1Y","2Y"],
      "SwapTenor" : ["1Y","1Y"],
      "Flavor" : ["Payers","Put"],
      "Weight" : [0.100000000000000006,0.5]
    }
  },
  "DEFINITION.INSTCOLLIR.INSTRUMENT_CAPFLOOR_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Strike" : ["String|Double"],
      "Start Tenor" : ["Tenor"],
      "End Tenor" : ["Tenor"],
      "Flavor" : ["String"]
    }
  },
  "DEFINITION.INSTCOLLIR.CAPFLOOR_1Y5Y": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Strike" : ["ATM"],
      "Start Tenor" : ["1Y"],
      "End Tenor" : ["5Y"],
      "Flavor" : ["Cap"]
    }
  },
  "DEFINITION.INSTCOLLIR.CAPFLOOR_AUXILIARY": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Strike" : ["ATM",0.0200000000000000004,"ATM"],
      "Start Tenor" : ["1Y","1Y","3M"],
      "End Tenor" : ["5Y","5Y","1Y"],
      "Flavor" : ["Cap","Cap","Floor"]
    }
  },
  "DEFINITION.INSTCOLLIR.SWAPTION_DIAGONAL15Y": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Calibration Strategy" : ["DiagonalSwaptions(\"ATM\",\"15Y\",\"Call\")"],
      "Strike" : [null],
      "OptionMaturity" : [null],
      "SwapTenor" : [null],
      "Flavor" : [null],
      "Weight" : [null]
    }
  },
  "DEFINITION.INSTCOLLIR.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "define isArr = if IRIndex == Numerix::GetSettings(\"Settings.Currency\", Currency,\"ARRIndex\") ? true : false",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        "constfunction Build",
        "{",
        "    if CalibrationInstrumentType.Canonical == \"SWAPTION\" : ",
        "        return BuildInstrumentSwaption",
        null,
        "    if CalibrationInstrumentType.Canonical == \"CAPFLOOR\" : ",
        "        return BuildInstrumentCapfloor",
        null,
        "    // CalibrationInstrumentType.Canonical == \"BOTH\" : ",
        "    call = Numerix::Object({\"IR_inst_coll_\" + Numerix::UniqueNumber, \"INSTRUMENT COLLECTION\", \"COMPONENTS\"}) &",
        "    {",
        "        \"currency\"          : Currency,",
        "        \"components\"        : BuildInstrumentSwaption,",
        "        \"components\"        : BuildInstrumentCapfloor",
        "    }",
        null,
        "    return call.Create",
        "}",
        null,
        "function BuildInstrumentSwaption",
        "{",
        "    // instantiate swaption surface",
        "    swaptionvolsurface = if SwaptionVolatilitySurface ? SwaptionVolatilitySurface : NxStd::SwaptionVolatilitySurfaceID(Currency,IRIndex,IRIndexTenor)",
        null,
        "	// Add swaption instrument",
        "	call = Numerix::Object({\"calibrationinstruments\" + Numerix::UniqueNumber, \"instrument collection\", \"components\"}) & ",
        "    {",
        "        \"currency\"      	: currency",
        "    }",
        null,
        "	ifnot InstrumentSwaption :",
        "		return call.Create",
        null,
        "	// Add swaption instrument according to calibration strategy",
        "	if InstrumentSwaption.Canonical.HasValue(\"CALIBRATIONSTRATEGY\")",
        "	{",
        "		foreach calibration_strategy in InstrumentSwaption.CalibrationStrategy",
        "		{",
        "			//Diagonal selection",
        "			if calibration_strategy.Canonical.Find(\"DIAGONAL\") > 0 :",
        "				call &= {\"components\" : instrument_ir_swaption(Numerix::Execute(calibration_strategy)) }",
        "			//Column selection",
        "			if calibration_strategy.Canonical.Find(\"COLUMN\") > 0 :",
        "				call &= {\"components\" : instrument_ir_swaption(Numerix::Execute(calibration_strategy)) }",
        null,
        "		}",
        "	}",
        null,
        "	// Add individual swaption instrument",
        "	call &= {\"components\" : instrument_ir_swaption(InstrumentSwaption)}",
        null,
        "    return call.Create",
        "}",
        null,
        "function BuildInstrumentCapfloor",
        "{",
        "    // instantiate capfloor surface",
        "    CapfloorVolSurface = if CapFloorVolatilitySurface ? CapFloorVolatilitySurface : NxStd::CapVolatilitySurfaceID(Currency,IRIndex,IRIndexTenor)",
        null,
        "	// Add capfloor instrument",
        "	call = Numerix::Object({\"calibrationinstruments\" + Numerix::UniqueNumber, \"instrument collection\", \"components\"}) & ",
        "    {",
        "        \"currency\"      	: currency",
        "    }",
        null,
        "	if InstrumentCapfloor : ",
        "		call &= {\"components\" : instrument_ir_capfloor(InstrumentCapfloor)}",
        null,
        "    return call.Create",
        "}",
        null,
        "function instrument_ir_swaption(instrument_swaption)",
        "{",
        "	ifnot instrument_swaption :",
        "		return \"\"",
        null,
        "	ifnot instrument_swaption.Canonical.HasValue(\"STRIKE\") :",
        "		return \"\"",
        null,
        "	ifnot instrument_swaption.Strike.Size > 0 :",
        "		return \"\"",
        null,
        "	strike 			= {}",
        "	swap_tenor 		= {}",
        "	option_maturity = {}",
        "	flavor 			= {}",
        "	weight 			= {}",
        null,
        "	//Clearing and setting default",
        "	// if swap tenor or option maturity is not defined then skip it",
        "	len = if instrument_swaption.Strike.Type == \"LIST\" ? instrument_swaption.Strike.Size : 1",
        "	for idx=1 to len",
        "	{",
        "		if (instrument_swaption.SwapTenor[idx] != \"\" && instrument_swaption.OptionMaturity[idx] != \"\" )",
        "		{",
        "			strike 			@= instrument_swaption.Strike[idx]",
        "			swap_tenor 		@= instrument_swaption.SwapTenor[idx]",
        "			option_maturity @= instrument_swaption.OptionMaturity[idx]",
        "			flavor 			@= if instrument_swaption.Flavor[idx] ? instrument_swaption.Flavor[idx] : \"payers\"",
        "            weight          @= instrument_swaption.Weight[idx]     ",
        "		}",
        "	}",
        null,
        "	if strike.size = 0 : ",
        "		return \"\"",
        null,
        "	type				= \"swaption\"",
        "	id					= type+\".\"+option_maturity+\".\"+swap_tenor",
        "	index_curve			= if ProjectionCurve ? ProjectionCurve : Numerix::ProjectionCurveID(currency,irindex,irindextenor)",
        "	swaption_convention	= Numerix::SwaptionConventionID(currency,irindex,irindextenor)",
        "	swap_convention		= Numerix::SwapConventionID(currency,irindex,irindextenor)",
        "	rate_convention		= Numerix::RateConventionID(currency,irindex,irindextenor)",
        null,
        "    result = NxStd::Instruments(id, type, currency, swaption_convention) + ",
        "    {",
        "        \"indexcurve\"		: index_curve,",
        "        \"flavor\"            : flavor,",
        "        \"starttenor\"        : option_maturity,",
        "        \"settlement type\"   : \"PHYSICAL\",",
        "        \"endtenor\"          : swap_tenor,",
        "        \"comment\"           : weight,",
        "	    \"strike\"            : strike,",
        "        \"quote type\"       : \"surface\",",
        "        \"quote\"            : swaptionvolsurface,",
        "        \"swapconventions\"   : swap_convention,",
        "        \"rateconventions\"   : rate_convention",
        "    }",
        null,
        "	return create_components_instrumentscollection(Numerix::Generate(result), currency)",
        "}",
        null,
        "// Create a set of diagonal Swaptions up to the specified maturity with the ",
        "// specified strike.",
        null,
        "function DiagonalSwaptions(strike, mat, flavor, weight=1)",
        "{",
        "    maturity = Numerix::Tenor(mat)",
        "    values = {}",
        null,
        "    // Create list of option tenors, swap tenors, and strikes.",
        null,
        "    span = maturity.Multiplier - 1",
        "    for i = 1 to span",
        "    {",
        "        smi = span - i + 1",
        "        values @= {strike, smi.Format(\"1\") + \"Y\", i.Format(\"1\") + \"Y\", flavor, weight}",
        "    }",
        null,
        "    // Create table and load into registry.",
        null,
        "    calibTable = Numerix::Table(\"DiagonalSwaptions_\" + Numerix::UniqueNumber, {\"Strike\", \"Option Maturity\", \"Swap Tenor\", \"Flavor\", \"Weight\"}, values.Transpose)",
        "    id = calibTable.Create",
        null,
        "    return id",
        "}",
        null,
        "// Create a set of column Swaptions up to the specified maturity with the ",
        "// specified swap tenors and strike.",
        null,
        "function ColumnSwaptions(strike, optiontenor, swaptenor, flavor, weight=1)",
        "{",
        "    optionmat = Numerix::Tenor(optiontenor)",
        "    values = {}",
        null,
        "    // Create list of option tenors, swap tenor, and strikes.",
        null,
        "    span = optionmat.Multiplier",
        "    for i = 1 to span :",
        "        values @= {strike, i.Format(\"1\") + \"Y\", swaptenor, flavor, weight}",
        null,
        "    // Create table and load into registry.",
        null,
        "    calibTable = Numerix::Table(\"ColumnSwaptions_\" + Numerix::UniqueNumber, {\"Strike\", \"Option Maturity\", \"Swap Tenor\", \"Flavor\", \"Weight\"}, values.Transpose)",
        "    id = calibTable.Create",
        null,
        "    return id",
        "}",
        null,
        "function instrument_ir_capfloor(instrumentdata_capfloor)",
        "{",
        "	ifnot instrumentdata_capfloor :",
        "		return \"\"",
        null,
        "	ifnot instrumentdata_capfloor.Canonical.HasValue(\"STRIKE\") :",
        "		return \"\"",
        null,
        "	if instrumentdata_capfloor.Strike.Size <= 0 :",
        "		return \"\"",
        null,
        "	start_tenor 	= {}",
        "	end_tenor 		= {}",
        "	strike 			= {}",
        "	flavor 			= {}",
        null,
        "	//Clearing and setting default",
        "	// if start tenor or end tenor is not defined then skip it",
        "	len = if instrumentdata_capfloor.Strike.Type == \"LIST\" ? instrumentdata_capfloor.Strike.Size : 1",
        "	for idx=1 to len",
        "	{",
        "		if (instrumentdata_capfloor.StartTenor[idx] != \"\" && instrumentdata_capfloor.EndTenor[idx] != \"\" )",
        "		{",
        "			strike 			@= instrumentdata_capfloor.Strike[idx]",
        "			start_tenor 	@= instrumentdata_capfloor.StartTenor[idx]",
        "			end_tenor 		@= instrumentdata_capfloor.EndTenor[idx]",
        "			flavor 			@= if instrumentdata_capfloor.Flavor[idx] ? instrumentdata_capfloor.Flavor[idx] : \"call\"",
        "		}",
        "	}",
        null,
        "	if strike.size = 0 : ",
        "		return \"\"",
        null,
        "	type				= \"capfloor\"",
        "	id					= type+\".\"+start_tenor+\".\"+end_tenor",
        "	index_curve			= if ProjectionCurve ? ProjectionCurve : Numerix::ProjectionCurveID(currency,irindex,irindextenor)",
        "	cap_convention		= Numerix::CapConventionID(currency,irindex,irindextenor)",
        null,
        "    if isArr",
        "    {",
        "        list_size = if strike is \"List\" ? strike.Size : 1",
        "        instruments = {}",
        "        for i = 1 to list_size",
        "        {",
        "            cap_event = Numerix::Object({\"cap_event_\" + start_tenor[i] + end_tenor[i] + strike[i] + flavor[i], \"EVENTS\", \"INTEREST DATES\"}) &",
        "            {",
        "                \"start tenor\": start_tenor[i],",
        "                \"name\": \"cap_event_\" + start_tenor[i] + end_tenor[i] + strike[i] + flavor[i],",
        "                \"end tenor\": end_tenor[i],",
        "                \"reference date\": Numerix::MarketDate,",
        "                \"arrears reset\": CapFloorArrearsReset,",
        "                \"convention\": cap_convention",
        "            }",
        null,
        "            arr_index = Numerix::Object({\"arr_index_\" + start_tenor[i] + end_tenor[i] + strike[i] + flavor[i], \"index\", \"arr\"}) &",
        "            {",
        "                \"currency\": Currency,",
        "                \"name\": Currency+IRIndex+IRIndexTenor+\"_\" + start_tenor[i] + end_tenor[i] + strike[i] + flavor[i],",
        "                \"coupon dates\": cap_event.Create,",
        "                \"index curve\": index_curve,",
        "                \"fixings\": Numerix::RateFixingsID(Currency,IRIndex,IRIndexTenor),",
        "                \"rate settings\": \"IR.RATE-SETTINGS.\"+Currency+\"-\"+IRIndex+\"-\"+IRIndexTenor, ",
        "                \"accrual frequency\": if IRIndexTenor == \"ON\" ? \"1BD\" : \"2BD\",",
        "                \"index calculation method\": \"straight\",",
        "                \"index output format\": \"annualized\",",
        "                \"convention\": cap_convention",
        "            }",
        null,
        "            cap_instrument = Numerix::Object({\"cap_\" + start_tenor[i] + end_tenor[i] + strike[i] + flavor[i], \"instrument\", \"capfloor\"}) &",
        "            {",
        "                \"currency\": Currency,",
        "                \"strike\": if strike[i] ==#\"ATM\" ? \"ATM\" : Numerix::Double(strike[i]),",
        "                \"index\": arr_index.Create,",
        "                \"flavor\": flavor[i],",
        "                \"quote\": capfloorvolsurface,",
        "                \"quote type\": \"surface\"",
        "            }",
        null,
        "            instruments @= cap_instrument.Create   ",
        "        }",
        null,
        "        cap_instruments = Numerix::Table(\"ARRCapCalibrationInstruments\", {\"ID\"},{instruments})",
        null,
        "        return create_components_instrumentscollection(cap_instruments.Create, Currency)",
        "    }",
        null,
        "    else",
        "    {",
        "        result = NxStd::Instruments(id, type, currency, cap_convention) + ",
        "        {",
        "            \"indexcurve\"		: index_curve,",
        "            \"flavor\"            : flavor,",
        "            \"starttenor\"        : start_tenor,",
        "            \"endtenor\"          : end_tenor,",
        "            \"strike\"            : strike,",
        "            \"sigma1\"            : capfloorvolsurface",
        "        }",
        null,
        "        return create_components_instrumentscollection(Numerix::Generate(result), Currency)",
        "    }",
        null,
        "}"]
    }
  },
  "DEFINITION.INSTCOLL.ALIASES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.INSTCOLL.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "DEFAULT" : [],
      "GROUPING" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.INSTCOLL.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.INSTCOLL.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.INSTCOLL.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.INSTCOLL.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        null,
        "constfunction create_components_instrumentscollection(instruments, currency, foreign_currency = \"\")",
        "{",
        "    call = Numerix::Object({\"calibrationinstruments\" + Numerix::UniqueNumber, \"instrument collection\", \"components\"}) & ",
        "    {",
        "        \"currency\"      		: currency,",
        "        \"instruments\"   		: instruments ",
        "    }",
        null,
        "	if foreign_currency : call &= {\"foreign 1 currency\"    : foreign_currency}",
        null,
        "    return call.Create",
        "}"]
    }
  },
  "DEFINITION.INSTCOLL": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.INSTCOLL",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.INSTCOLL.PARAMETERS",
      "RESULTS" : "DEFINITION.INSTCOLL.RESULTS",
      "ALIASES" : "DEFINITION.INSTCOLL.ALIASES",
      "CLASSPROPERTIES" : "DEFINITION.INSTCOLL.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.INSTCOLL.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "SCRIPT" : "DEFINITION.INSTCOLL.SCRIPT.NXSL"
    }
  },
  "DEFINITION.INSTCOLLIR": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.INSTCOLLIR",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.INSTCOLLIR.PARAMETERS",
      "RESULTS" : "DEFINITION.INSTCOLLIR.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.INSTCOLLIR.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.INSTCOLLIR.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.INSTCOLLIR.INSTRUMENT_SWAPTION_SPEC",
      "MEMBER" : "DEFINITION.INSTCOLLIR.SWAPTION_DIAGONAL10Y",
      "MEMBER" : "DEFINITION.INSTCOLLIR.SWAPTION_DIAGONAL30Y",
      "MEMBER" : "DEFINITION.INSTCOLLIR.SWAPTION_AUXILIARY",
      "MEMBER" : "DEFINITION.INSTCOLLIR.INSTRUMENT_CAPFLOOR_SPEC",
      "MEMBER" : "DEFINITION.INSTCOLLIR.CAPFLOOR_1Y5Y",
      "MEMBER" : "DEFINITION.INSTCOLLIR.CAPFLOOR_AUXILIARY",
      "MEMBER" : "DEFINITION.INSTCOLLIR.SWAPTION_DIAGONAL15Y",
      "SCRIPT" : "DEFINITION.INSTCOLLIR.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.INSTCOLL"
    }
  },
  "DEFINITION.CURVECALIBRATION.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Value","Calibration Type","Interpolation Type","Extrapolation Type"],
      "TYPE" : ["Double|Table(DEFINITION.CURVECALIBRATION.DATEVALUE_SPEC)","String","String","String"],
      "REQUIRED" : [false,false,false,false],
      "DEFAULT" : [null,"Step","Forward Step",null],
      "GROUPING" : [null,null,null,null],
      "DESCRIPTION" : ["Accepts a single number to generate a userprovided flat curve or a time-dependent table of value-date pairs with the headers VALUE (double) and DATE. 
When CALIBRATE = true, the input to this heading is treated as an initial guess by the solver that performs model calibration; 
when CALIBRATE = false, the input is used directly.","-FLAT - For flat time-independent calibration; during calibration, a single value is used for the parameter for all possible maturities.
-STEP - For time-dependent calibration, i.e., the value of the parameter depends on time For time-dependent model parameters, time direction interpolation is needed when the model parameter is needed in
between the time nodes. The time nodes are determined from all the available tenors and/or maturities in the model calibration instruments.
-LINEAR","Indicates the way interpolation is to be performed
The input to the INTERPOLATION TYPE heading is effective only in special cases; an example of such a case is when there is a user-provided initial guess in terms of a curve that is based on a set of dates different from those of the calibration instruments. In this case, the specified interpolation method is used to get the initial guess for the corresponding calibration date. However, if the model calibration convergence is perfect, then the interpolation method will not affect the result. Only when the user chooses not to calibrate by setting CALIBRATE = false (this is a less common use case) would there be
some difference in the result.
Specific support for methods may vary by model. For example, for CMDTY model calibration curves, interpolation is restricted to two types: FORWARD STEP and BACKWARD STEP. The choice affects the representation of the curve, but not the numerical results.
-LINEAR
-LOGLINEAR
-CUBIC
-LOG CUBIC
-QUADRATIC
-QUADRATIC FIT
-BACKWARD QUADRATIC
-SHAPE PRESERVING SPLINE
-LOG SHAPE PRESERVING SPLINE
-MONOTONE CONVEX
-MINIMALIST QUADRATIC
-FORWARD STEP - Default; means the corresponding model parameter is kept constant from one time node until the next, but excludes the next time node 
-BACKWARD STEP
-LINEAR FIT","Type of extrapolation to use with calibration parameter
-FLAT
-NO EXTRAPOLATION"]
    }
  },
  "DEFINITION.CURVECALIBRATION.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.CURVECALIBRATION.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CURVECALIBRATION.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CURVECALIBRATION.DATEVALUE_SPEC": {
    "TYPE" : "DATA",
    "TABLE" : {
      "Date" : ["Date"],
      "Value" : ["Value"]
    }
  },
  "DEFINITION.CURVECALIBRATION.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        null,
        "function setting(p_calibtype = \"\")",
        "{",
        "    call = Numerix::Object({\"CurveCalibration\"+Numerix::UniqueNumber, \"SETTINGS\", \"CURVE CALIBRATION\"}) &",
        "    {",
        "        \"calibrate\"          : Calibrate,",
        "        \"joint calibration\"  : JointCalibration,",
        "        \"use initial guess\"  : UseInitialGuess,",
        "        \"value\"              : Value,",
        "        \"calibration type\"   : if p_calibtype ? p_calibtype : CalibrationType,",
        "        \"interpolation type\" : InterpolationType,",
        "        \"extrapolation type\" : ExtrapolationType",
        "    }",
        null,
        "    return call.Create",
        "}"]
    }
  },
  "DEFINITION.CALIBRATIONSETTING.ALIASES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CALIBRATIONSETTING.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Calibrate","Joint Calibration","Use Initial Guess"],
      "TYPE" : ["Boolean","Boolean","Boolean"],
      "REQUIRED" : [false,false,false],
      "DEFAULT" : [true,true,true],
      "GROUPING" : [null,null,null],
      "DESCRIPTION" : ["Indicates whether to calibrate this parameter to market instruments
true (default) - the parameter is calibrated to market instruments
false - the parameter must be specified through the VALUE input heading

","Indicates whether to calibrate this parameter to market instruments in a hybrid framework
true(default) to calibrate this parameter during hybrid calibration; otherwise, false","For recalibration in scenarios within the RSF framework. Indicates whether or not to use an initial guess and \"warm start\" calibration (in which previous calibration results are used as an initial guess for recalibration)."]
    }
  },
  "DEFINITION.CALIBRATIONSETTING.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.CALIBRATIONSETTING.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CALIBRATIONSETTING.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.CALIBRATIONSETTING.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        null]
    }
  },
  "DEFINITION.CALIBRATIONSETTING": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.CALIBRATIONSETTING",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.CALIBRATIONSETTING.PARAMETERS",
      "RESULTS" : "DEFINITION.CALIBRATIONSETTING.RESULTS",
      "ALIASES" : "DEFINITION.CALIBRATIONSETTING.ALIASES",
      "CLASSPROPERTIES" : "DEFINITION.CALIBRATIONSETTING.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.CALIBRATIONSETTING.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "SCRIPT" : "DEFINITION.CALIBRATIONSETTING.SCRIPT.NXSL"
    }
  },
  "DEFINITION.CURVECALIBRATION": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.CURVECALIBRATION",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.CURVECALIBRATION.PARAMETERS",
      "RESULTS" : "DEFINITION.CURVECALIBRATION.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.CURVECALIBRATION.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.CURVECALIBRATION.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "MEMBER" : "DEFINITION.CURVECALIBRATION.DATEVALUE_SPEC",
      "SCRIPT" : "DEFINITION.CURVECALIBRATION.SCRIPT.NXSL",
      "DEFINITION" : "DEFINITION.CALIBRATIONSETTING"
    }
  },
  "DEFINITION.SOLVER.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Iterations","Accuracy","Seed","Solver Type","Convergence","Solver Step","Population","Generations","Amplifier","Crossover","Crossover Type","Crossover Prob","Keep Elite","Mutation","BLX Alpha"],
      "TYPE" : ["Double","Double","Integer","String","Double","Double","Double","Double","Double","Double","String","Double","Boolean","Double","Double"],
      "REQUIRED" : [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,null,null,"FAST",null,0.100000000000000006,null,null,null,null,null,null,null,null,null],
      "GROUPING" : ["DE, Local, GA","DE, Local, GA","DE, Local, GA","Local","Local","Local","DE, GA","DE, GA","DE","DE","GA","GA","GA","GA","GA"],
      "DESCRIPTION" : ["The maximum number of iterations after which the solver quits even though the required accuracy is not reached.
When this parameter or both ACCURACY and ITERATIONS parameters are set, the solver quits when either of these parameters reaches during calibration the value set for it. These parameters have reasonable
default values, and need only be set when the user would like to force a more accurate calibration, with additional iterations and a tighter (smaller) accuracy parameter, or a faster calibration with fewer iterations and a looser (larger) accuracy parameter.","RMS fitting error for the prices of the entire set of calibration options. 
When this parameter or both ACCURACY and ITERATIONS parameters are set, the solver quits when either of these parameters reaches during calibration the value set for it. These parameters have reasonable
default values, and need only be set when the user would like to force a more accurate calibration, with additional iterations and a tighter (smaller) accuracy parameter, or a faster calibration with fewer  iterations and a looser (larger) accuracy parameter.","The DE solver applies random numbers generators. Because of this, it needs a seed
determining a concrete sequence of the pseudo random numbers. The numbers are
drawn from the same type of probability distribution and stochastically are similar
but physically differ and allow studying the influence of randomness, which is an
inevitable property of the DE solver. It must be a positive integer number.","The type of solver to use in the calibration of a model on a generic tree. 
-DEFAULT - a quasi-Newton type solver
-FAST - This is the initial recommended setting; Levenberg-Marquardt type with repetitive start
-GNSS - Gauss Newton Subspace Solver 
-SIMPLEX - Nelder-Mead minimization
-LRU - Low rank update; the LRU optimizer combines a Gauss-Newton trust region approach with a low rank update for both the Jacobian and Hessian matrices.
-QP - Quadratic Programming approach 
-MIN SMOOTH - Square approximation minimizer, based on Powell's method; The minimized function is assumed to be differentiable and the constraints are assumed to be differentiable, at least on the domain border.","Directs the solver to do a multi-step calibration where each successive calibration step starts with an initial guess equal to the result of the previous step. When this heading is set, calibration is repeated
until the ratio of the final accuracy to the initial accuracy becomes greater than the CONVERGENCE value. The initial recommended setting is 0.95. For better convergence, the recommended setting is
0.99.
Double in the interval [0,1)","Solver parameter
Double; default is 0.1; it can be set smaller to reduce noise in complicated tasks.","For a DE solver, this is the size of a generation. As a given, it remains constant
until the end of the search. It must be greater than or equal to 4. A sample
POPULATION for a DE solver is 15. For a GA solver, this is the size of the
\"population\" vector, where each element (or individual) is a set of model parameters.
The GA solver runs an \"evolution cycle\" to generate a new population by minimizing
the \"fitness\", which is the least squares fit to the set of option prices. The solver
starts by setting up an initial population, essentially as a set of random numbers. The new generation is produced depending on the parameter settings of the GA solver","Number of generations considered by the DE solver during the space search; must be
greater than or equal to 1.","must be a positive number not exceeding two. It affects internal properties
of the DE (Differential Evolution) solver. Particularly, it is responsible for sensitivity of
the solver to a change of step made on an iteration. The recommended starting value is
0.5.
Double in (0,2]","Probability, thus, it must be a non-negative number not exceeding one. It determines the randomness contribution. The recommended starting value is 0.1.
Double in [0,1]","Indicates the crossover algorithm to apply
-BLX - A more sophisticated procedure
-UNIFORM - Switches two individuals at random","The boundary to which the drawn random number is compared.
If the random number is less than the CROSSOVER PROB, then a second member of
the previous generation is selected. If the random number is greater than the
CROSSOVER PROB, then the single individual is mutated, and becomes a member of the new generation.
Double in [0,1]","Indicates whether the first new individual is a member of the previous generation with the best accuracy.
true if the first new individual is a member of the previous generation with the best
accuracy; otherwise, false","Mutation factor; two individuals are mutated by applying a mutation factor proportional to MUTATION. The higher the value the greater
the mutation. The resulting two individuals become members of the new generation","Specifies the crossover strength in the BLX case; relevant only if CROSSOVER TYPE =
BLX."]
    }
  },
  "DEFINITION.SOLVER.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "REQUIRED" : [],
      "ID" : [],
      "HEADER" : [],
      "VALUE" : [],
      "CURRENCY" : [],
      "CATEGORY" : [],
      "DESCRIPTION" : []
    }
  },
  "DEFINITION.SOLVER.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.SOLVER.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : [],
      "TYPE" : [],
      "VALUE" : []
    }
  },
  "DEFINITION.SOLVER.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        null,
        "constfunction setting",
        "{",
        "    this_id = Numerix::ID",
        null,
        "    if this_id.HasValue(\"SolverType\") ",
        "    {",
        "        call = Numerix::Object({\"LocalSolver\"+Numerix::UniqueNumber, \"SETTINGS\", \"SOLVER\"}) &",
        "        {",
        "            \"solver\"      : SolverType,",
        "            \"iterations\"  : Iterations,",
        "            \"accuracy\"    : Accuracy,",
        "            \"convergence\" : Convergence,",
        "            \"solver step\" : SolverStep",
        "        }",
        null,
        "        return call.Create",
        "    }",
        null,
        null,
        "    if this_id.HasValue(\"Crossover\") : if this_id.HasValue(\"Amplifier\") : ",
        "    {",
        "        call = Numerix::Object({\"DESolver\"+Numerix::UniqueNumber, \"SETTINGS\", \"SOLVER\"}) &",
        "        {",
        "            \"iterations\"  : Iterations,",
        "            \"accuracy\"    : Accuracy,",
        "            \"seed\"        : Seed,",
        "            \"amplifier\"   : Amplifier,",
        "            \"crossover\"   : Crossover,",
        "            \"population\"  : Population,",
        "            \"generations\" : Generations",
        "        }",
        null,
        "        return call.Create",
        "    }",
        null,
        "    if this_id.HasValue(\"CrossoverType\") : if this_id.HasValue(\"CrossoverProb\") : ",
        "    {",
        "        call = Numerix::Object({\"GASolver\"+Numerix::UniqueNumber, \"SETTINGS\", \"SOLVER\"}) &",
        "        {",
        "            \"iterations\"        : Iterations,",
        "            \"accuracy\"          : Accuracy,",
        "            \"crossover type\"    : CrossoverType,",
        "            \"crossover prob\"    : CrossoverProb,",
        "            \"population\"        : Population,",
        "            \"generations\"       : Generation,",
        "            \"keep elite\"        : KeepElite,",
        "            \"mutation\"          : Mutation,",
        "            \"blx alpha\"         : BlxAlpha",
        "        }",
        null,
        "        return call.Create",
        "    }",
        null,
        "    return \"\"",
        "}"]
    }
  },
  "DEFINITION.SOLVER": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "DEFINITION.SOLVER",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "DEFINITION.SOLVER.PARAMETERS",
      "RESULTS" : "DEFINITION.SOLVER.RESULTS",
      "CLASSPROPERTIES" : "DEFINITION.SOLVER.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "DEFINITION.SOLVER.INSTANCEPROPERTIES",
      "IMPLEMENTS" : null,
      "SCRIPT" : "DEFINITION.SOLVER.SCRIPT.NXSL"
    }
  },
  "CONV.IR.USD-SOFR-ON.SWAPTION.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Currency","SettlementType","IgnoreCashSettlementBasis","CashSettlementYieldBasis","PremiumPaymentLag","PremiumPaymentConvention","PremiumPaymentCalendar","SpotStRategy","FixConvention","FixCalendar","NoticePeriod","NoticeConvention","SwapConventions"],
      "VALUE" : ["USD","CASH PRICE",true,"ACT/ACT","2BD","MF","NYX LNB","IR.SPOT-STRATEGY.T+0","MF","NYX","2BD","F","CONV.IR.USD-SOFR-ON.SWAP"]
    }
  },
  "CONV.IR.USD-SOFR-ON.SWAPTION": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "CONV.IR.USD-SOFR-ON.SWAPTION",
      "OBJECT" : "SETTINGS",
      "TYPE" : "CONVENTION",
      "DEFAULTVALUES" : "CONV.IR.USD-SOFR-ON.SWAPTION.DATA"
    }
  },
  "CONV.IR.USD-SOFR-ON.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["RateSpotLag","RateFixingCalendar","RateFixingConvention","RateAccrualCalendar","RateAccrualConvention"],
      "VALUE" : ["0BD","NYX","F","NYX","F"]
    }
  },
  "CONV.IR.USD-SOFR-ON": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "CONV.IR.USD-SOFR-ON",
      "OBJECT" : "SETTINGS",
      "TYPE" : "CONVENTION",
      "DEFAULTVALUES" : "CONV.IR.USD-SOFR-ON.DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_13068_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["SPOTRULE"],
      "VALUE" : ["T+0"]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.SPOT-STRATEGY.T+0": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "IR.SPOT-STRATEGY.T+0",
      "DEFINITION" : "MDE.RATESPOTSTRATEGY",
      "INSTANTIATION TYPE" : "MDE",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "REQUESTOUTPUT" : "NONE",
      "INPUTS" : "_13068_NX_AUTOGEN"
    }
  },
  "MDE.VOLATILITY.SWAPTION.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Quote Type","Currency","IR Index","IR Index Tenor","Vol Quote Type","Interpolation","Extrapolation","Volatility Basis","Convention","Scaling Factor","Vol Rate Shift","Swaption Strike","Shift Interpolation","Strike Type","Market Quote"],
      "TYPE" : ["String","String","String","Tenor","String","String","String","Basis","ID","Double","Double|ID","String","String","String","ID|Double"],
      "REQUIRED" : [false,true,false,false,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : ["MID",null,
        ">Numerix::GetSettings(\"Settings.Currency\", Currency, \"IRIndex\")",    
        ">Numerix::GetSettings(\"Settings.Currency\", Currency, \"IRIndexTenor\")",    "LogNormal","BILINEAR","FLAT EXTRAPOLATION","ACT/365",
        ">Numerix::SwapConventionID(Currency, IRIndex, IRIndexTenor)",    1,null,"ATM","Linear","RLTV",null],
      "GROUPING" : [null,null,null,null,null,null,null,"Conventions","Conventions",null,null,null,null,null,"Pricing Parameters"],
      "DESCRIPTION" : ["Indicate the Quote types used. May be Mid, Bid or Ask","The underlying currency of the surface","Indicate the underlying IR index","Indicate the underlying IR index tenor","Lognormal, Normal, TruncatedNormal, ShiftedLogNormal.","Indicate interpolation method. Possible inputs: Linear, CubicSpline, BiLinear, BiCubicSpline","Method to use when extrapolation values of the volatility surface. Default is flat extrapolation. Possible values are Flat Extrapolation (default) or No Extrapolation.","Day-count basis convention used to measure time when calculating volatility. If unspecified ACT/365 is used.","Convention set for default parameters.","Used to convert volatilities supplied in the grid; 
the scaling factor is used as a divisor on all supplied volatilities. 
This functionality is useful where live market feeds and system data takes the form 14.5 rather that 14.5%. 
In this case, the SCALING FACTOR should be entered as 100.","The shift to be used when QUOTE TYPE = SHIFTED LOGNORMAL VOL and one needs to pass a single value.
It takes precedence over shift value passed with quote surface.

Double or QUOTE Market Data object ID.
","Strike for the swaption vol surface.","Specifies how to interpolate the vol shift when it is not constant (with QUOTE TYPE=SHIFTED LOGNORMAL VOL).

LINEAR - Uses linear interpolation for pricing between option expiries or swap tenors. For pricing between both expiries and tenors, this first interpolates linearly in expiries and then in tenors. 
FLATLEFT - Uses flat left interpolation for pricing between option expiries or swap tenors. For pricing between both expiries and tenors, this first interpolates flat left in expiries and then in tenors. 
FLATLEFTLINEAR - Uses linear interpolation between expiries and flat left between tenors. For pricing between both expiries and tenors, this first interpolates linearly
","ABSLT or RLTV","Reference a two-dimensional matrix of swaption volatilities. The column headers should be the underlying swap tenors while the row headers should be option expiries expressed as either tenors or dates.The matrix entries should be the rates.
The dates provided explicitly or computed from the supplied tenors must form an increasing series, with no duplication allowed. All supplied volatilities must be strictly positive."]
    }
  },
  "MDE.VOLATILITY.SWAPTION.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name","MDE Output"],
      "TYPE" : ["String","Table()"],
      "REQUIRED" : [false,false],
      "ID" : [null,null],
      "HEADER" : [null,null],
      "VALUE" : [
        ">displayname",    
        ">NxStd::VolSurfInformation(ImplementedObject)"],
      "CURRENCY" : [null,null],
      "CATEGORY" : [null,null],
      "DESCRIPTION" : [null,null],
      "PRI" : [null,null]
    }
  },
  "MDE.VOLATILITY.SWAPTION.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name","MDE Type","Asset Class"],
      "TYPE" : ["String","String","String"],
      "VALUE" : ["Swaption Volatility Surface","Volatility","IR"]
    }
  },
  "MDE.VOLATILITY.SWAPTION.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Quote Patterns","Underlying Assets"],
      "TYPE" : ["String","String"],
      "VALUE" : [
        ">#\"IR.P(Currency)-P(IRIndex)-P(IRIndexTenor).VOL.SWPT.P(SwaptionStrike)::<Expiry>::<SwapTenor>::P(QuoteType),IR.P(Currency)-P(IRIndex)-P(IRIndexTenor).VOL.SWPT.P(StrikeType).P(SwaptionStrike).P(VolQuoteType)::<OptionTenor>::<SWAPTENOR>::P(QuoteType)\"",    
        ">Numerix::IRUnderlyingAsset(Currency)"]
    }
  },
  "MDE.VOLATILITY.SWAPTION.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        "import \"script.nxmarket\"",
        null,
        "//================================================================================",
        "// Functions",
        "//================================================================================",
        null,
        "function main",
        "{",
        "    call = Numerix::Object({\"surface\", \"market data\", \"swaption volatility\"}) & ",
        "    {",
        "        \"interp\"                    : Interpolation,",
        "        \"nowdate\"                   : Numerix::MarketDate,",
        "        \"currency\"                  : Currency,",
        "        \"quote type\"                : VolQuoteType + \"Vol\",",
        "        \"volatility basis\"          : VolatilityBasis,",
        "        \"scaling factor\"            : ScalingFactor,",
        "        \"convention\"                : Convention,",
        "        \"extrapolation\"             : Extrapolation,",
        "        \"marketdata\"                : Numerix::MarketData ",
        "    }",
        "    ",
        "    if MarketQuote:",
        "        call &=",
        "        {",
        "            \"data\"                  : if MarketQuote is \"DOUBLE\" ? Numerix::Matrix(NxStd::MakeID(\"Matrix\"), {\"1Y\"}, {\"1Y\"}, {MarketQuote}).create : MarketQuote",
        "        }",
        "    else:",
        "        call &=",
        "        {",
        "            \"quoteprefix\"           : volquote_prefix",
        "        }",
        null,
        "    if VolQuoteType == #\"SHIFTEDLOGNORMAL\" :",
        "        call &= {\"vol rate shift\"   : VolRateShift}",
        null,
        "    if VolQuoteType == #\"SHIFTEDLOGNORMAL\" : ifnot VolRateShift :",
        "        call &=",
        "        {",
        "            \"shift interpolation\"   : ShiftInterpolation,",
        "            \"shifts quote prefix\"   : \"IR.\" + Currency + \"-\" + IRIndex + \"-\" + IRIndexTenor + \".VOL.SWPT.\" + StrikeType + \".\" + SwaptionStrike + \".SHIFT.\" + QuoteType",
        "        }",
        null,
        "    return call.Create",
        "}",
        null,
        "function volquote_prefix",
        "{",
        "    quotekeyprefix = \"IR.\" + Currency + \"-\" + IRIndex + \"-\" + IRIndexTenor + \".VOL.SWPT.\"",
        null,
        "    if VolQuoteType == #\"LOGNORMAL\"",
        "    {",
        "        quote_results = Numerix::Quote.Key = quotekeyprefix + SwaptionStrike + \".\" + QuoteType + \"::<OPTIONTENOR>::<SWAPTENOR>\"",
        "        if quote_results :",
        "            return quotekeyprefix + SwaptionStrike + \".\" + QuoteType",
        "    }",
        null,
        "    quote_results = Numerix::Quote.Key = quotekeyprefix + StrikeType + \".\" + SwaptionStrike + \".\" + VolQuoteType + \".\" + QuoteType + \"::<OPTIONTENOR>::<SWAPTENOR>\"",
        "    if quote_results :",
        "        return quotekeyprefix + StrikeType + \".\" + SwaptionStrike + \".\" + VolQuoteType + \".\" + QuoteType",
        null,
        "    Numerix::SetFatal(Currency + \" Swaption \" + VolQuoteType + \" Volatility Matrix not found in the market\")",
        "    return \"\"",
        "}",
        null,
        "constfunction displayname",
        "{",
        "    return \"IR.VOL.SWPT.\" + Currency + \"-\" + IRIndex + \"-\" + IRIndexTenor + \".ATM.\" + QuoteType",
        "}"]
    }
  },
  "SCRIPT.NXMARKET": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DEFINITIONS" : [
        "//*****************************************************************************",
        "// Copyright (c) 1996-2017 Numerix LLC.  All rights reserved.",
        "// This software comprises valuable trade secrets and may be used,",
        "// copied, transmitted, stored, and distributed only in accordance",
        "// with the terms of a written license or trial agreement and with the",
        "// inclusion of this copyright notice.",
        "//*****************************************************************************",
        null,
        null,
        "//*****************************************************************************",
        "// ",
        "// Curve Information",
        "// ",
        "//*****************************************************************************",
        "function NxStd::CurveInformation(curve_obj)",
        "{",
        "    try",
        "    {",
        "        return Numerix::Query(curve_obj, \"NAME=<KEY>\", \"Key, Date, Discount Factor\")",
        "    }",
        "    catch {}",
        "    try",
        "    {",
        "        return Numerix::Query(curve_obj, \"DATE=<DATE>\", \"Date, Discount Factor\")",
        "    }",
        "    catch {}",
        "    try",
        "    {",
        "        return Numerix::Query(curve_obj, \"NAME=<KEY>\", \"Key, Date, Survival Probability\")",
        "    }",
        "    catch {}",
        "    try",
        "    {",
        "        return Numerix::Query(curve_obj, \"DATE=<DATE>\", \"Date, Survival Probability\")",
        "    }",
        "    catch {}",
        null,
        "    return \"\"",
        "}",
        null,
        "function NxStd::CurveFactoryInformation(curvefactory_obj)",
        "{",
        "    query_result = \"\"",
        "    // case of IM curve factory",
        "    try",
        "    {",
        "        curvefactory_obj = curvefactory_obj.View.IndexMatchedBuilder",
        "    }",
        "    catch {}",
        "    ",
        "    try",
        "    {",
        "        query_result = Numerix::Query(curvefactory_obj, \"NAME=<Name>\", \"Name,Curve ID\")",
        "    }",
        "    catch { return \"\" }",
        "    names = query_result.Name",
        "    curveids = query_result.CurveID",
        "    outputs = {}",
        "    foreach curveid in curveids do",
        "        outputs @= {names[curveid.Iteration], NxStd::CurveInformation(curveid.ImplementedObject), \"Table\"}",
        "    next",
        "    ",
        "    outputTable = Numerix::Table(\"curvefactory_info_\" + Numerix::UniqueNumber, {\"NAME\", \"ID\", \"TYPE\"}, outputs.Transpose)",
        "	",
        "    return Numerix::Create(outputTable)",
        "}",
        null,
        "function NxStd::BaseCorrSurfaceInformation(basecorrsurf_obj)",
        "{",
        "    curveids = \"\"",
        "    try",
        "    {",
        "        curveids = basecorrsurf_obj.View.BaseCorrelationCurve",
        "    }",
        "    catch {return \"\"}",
        "    ",
        "    outputs = {}    ",
        "    foreach curveid in basecorrsurf_obj.View.BaseCorrelationCurve do",
        "        curve_table = \"\"",
        "        try",
        "        {",
        "            curve_table = Numerix::Query(curveid, \"Base Tranche Detachment=<Base Tranche Detachment>\", \"Base Tranche Detachment, Base Correlation, Accuracies, Iterations\")",
        "        }",
        "        catch ",
        "        {",
        "            curve_table = Numerix::Query(curveid, \"Base Tranche Detachment=<Base Tranche Detachment>\", \"Base Tranche Detachment, Base Correlation\") // Custom BCS",
        "        }",
        "        outputs @= {curveid.LocalID, curve_table, \"Table\"}",
        "    next",
        "    try",
        "    {",
        "        foreach riskmeasure in basecorrsurf_obj.View.BaseRiskMeasure do",
        "            outputs @= {riskmeasure.LocalID, riskmeasure, \"Table\"}",
        "        next",
        "    }",
        "    catch {}",
        "    ",
        "    outputTable = Numerix::Table(\"basecorrelationsurface_info_\" + Numerix::UniqueNumber, {\"NAME\", \"ID\", \"TYPE\"}, outputs.Transpose)",
        "	",
        "    return Numerix::Create(outputTable)",
        "}",
        null,
        "function NxStd::SpotInformation(spot_obj)",
        "{",
        "    try",
        "    {",
        "        query_result = Numerix::Query(spot_obj, \"SpotFX=<SpotFX>\", \"SpotFX\")",
        "        curr_list = {\"FX Spot Matrix\"}",
        "        curr_list &= query_result.SpotFX",
        "        ",
        "        valuelist = {}",
        "        valuelist @= query_result.SpotFX",
        "        for i = 2 to curr_list.Size",
        "        {",
        "            columnlist = {}",
        "            ",
        "            columnlist &= spot_obj.View(curr_list[i])",
        "            valuelist @= columnlist",
        "        }",
        "        ",
        "        OutputTable = Numerix::Table(\"FXMatrix_\"+Numerix::UniqueNumber,curr_list,valuelist)",
        "        ",
        "        return outputtable.Create",
        "        ",
        "        ",
        "        ",
        "        return query_string",
        "        query_result = Numerix::Query(spot_obj, \"SpotFX=<SpotFX>\", query_string)",
        "        return query_result.id.id",
        "        return query_result.GetValue(term_ccy)[1]",
        "    }",
        "    catch {}",
        "    return \"\"",
        "}",
        null,
        "function NxStd::VolSurfInformation(volsurf_obj)",
        "{",
        "    // case of swaption vol",
        "    try ",
        "    {",
        "        fixdates = volsurf_obj.View.FixDate",
        "        tenors = {\"1Y\", \"2Y\", \"3Y\", \"4Y\", \"5Y\", \"6Y\", \"7Y\", \"8Y\", \"9Y\", \"10Y\", \"12Y\", \"15Y\", \"20Y\", \"25Y\", \"30Y\"}",
        "        mat = {}",
        "        foreach fixdate in fixdates do",
        "            row = {fixdate}",
        "            foreach tenor in tenors do",
        "                row &= Numerix::GetVolMatrix(volsurf_obj, fixdate, tenor)",
        "            next",
        "            mat @= row",
        "        next",
        "        table_headers = {\"Fix Date\"} & tenors",
        "        return Numerix::Table(\"SwaptionVolMatrix\" + Numerix::UniqueNumber, table_headers, mat.Transpose).Create",
        "    } catch {}",
        "    ",
        "    // else print out everything except some",
        "    try",
        "    {",
        "    	output_table = volsurf_obj.View",
        "    	notshowing = {\"strikes\", \"defaulted headings\", \"defaulted values\", \"call headers\", \"call values\", \"output headers\", \"output values\", \"dependencies\"}",
        "    	notshowing &= {\"warning level\", \"warning message\", \"quotes\", \"nowdate\", \"matrix quotes\"}",
        "    	foreach item in notshowing do",
        "    		output_table = output_table.Remove(item.Canonical)",
        "    	next",
        "    	return output_table",
        "    }",
        "    catch {}",
        "    return \"\"",
        "}",
        null,
        null,
        "function NxStd::VolCubeInformation(volcube_obj)",
        "{",
        "    // case of swaption cube",
        "    //fixtenors = {\"1M\", \"3M\", \"6M\", \"9M\", \"1Y\", \"2Y\", \"3Y\", \"4Y\", \"5Y\", \"6Y\", \"7Y\", \"8Y\", \"9Y\", \"10Y\", \"15Y\", \"20Y\", \"25Y\", \"30Y\"}",
        "    fixtenors = {\"3M\", \"6M\", \"9M\", \"1Y\", \"2Y\", \"3Y\", \"4Y\", \"5Y\", \"7Y\", \"10Y\", \"15Y\", \"20Y\", \"30Y\"}",
        "    fixdates = Numerix::AddTenor(Numerix::MarketDate, Numerix::Tenor(fixtenors, \"NONE\", \"NONE\"))",
        "    //tenors = {\"1Y\", \"2Y\", \"3Y\", \"4Y\", \"5Y\", \"6Y\", \"7Y\", \"8Y\", \"9Y\", \"10Y\", \"12Y\", \"15Y\", \"20Y\", \"25Y\", \"30Y\"}",
        "    tenors = {\"1Y\", \"2Y\", \"3Y\", \"4Y\", \"5Y\", \"7Y\", \"10Y\", \"15Y\", \"20Y\", \"30Y\"}",
        "    //strikes_output = {\"ATM-100bps\", \"ATM-50bps\", \"ATM\", \"ATM+50bps\", \"ATM+100bps\"}",
        "    //strikes = {-0.01, -0.005, 0, 0.005, 0.01}",
        "    strikes_output = {\"ATM-10bps\", \"ATM-5bps\", \"ATM\", \"ATM+50bps\", \"ATM+100bps\"}",
        "    strikes = {-0.001, -0.0005, 0, 0.005, 0.01}",
        "    //strikes_output = {\"ATM\", \"ATM+50bps\", \"ATM+100bps\"}",
        "    //strikes = {0, 0.005, 0.01}",
        "    ",
        "    outputs = {}",
        "    foreach strike in strikes do",
        "        mat = {}",
        "        foreach fixdate in fixdates do",
        "            row = {fixdate}",
        "            foreach tenor in tenors do",
        "                row &= Numerix::GetVolMatrix(volcube_obj, fixdate, tenor, strike, false)",
        "            next",
        "            mat @= row",
        "        next",
        "        table_headers = {\"Fix Date\"} & tenors",
        "        volmat = Numerix::Table(\"Strike \" + strike, table_headers, mat.Transpose).Create",
        "        outputs @= {\"Strike \" + strikes_output[strike.Iteration], volmat, \"Table\"}",
        "    next",
        null,
        "    //adding SABR parameters, if available.    ",
        "    if volcube_obj.View(\"BETA\")",
        "    {",
        "        name_list = {}   ",
        "        interp_type = false",
        null,
        "        if StrikeInterpolation==#\"MIXTURESABR\" || StrikeInterpolation ==#\"REDUCEDMIXTURESABR\" :",
        "            interp_type = true",
        null,
        "        if interp_type :",
        "            name_list = {\"ALPHA1\",\"ALPHA2\",\"BETA\",\"NU1\",\"NU2\",\"RHO\",\"P\"}",
        "        else :",
        "            name_list = {\"ALPHA\",\"BETA\",\"RHO\",\"NU\"}",
        null,
        "        list_size = name_list.Size",
        "        for i = 1 to list_size",
        "        {",
        "           outputs @= {name_list[i],volcube_obj.View(name_list[i]),\"TABLE\"} ",
        "        }              ",
        "        ",
        "    }",
        "                 ",
        "    outputTable = Numerix::Table(\"volcube_info_\" + Numerix::UniqueNumber, {\"NAME\", \"ID\", \"TYPE\"}, outputs.Transpose)",
        "	",
        "    return Numerix::Create(outputTable)",
        "}",
        null,
        "//get the fx ON, TN, SN date using fx spot strategy.",
        "function NxStd::FXFowardONTNSNDate(fx_tenor, fx_spotstrategy = \"\")",
        "{",
        "    cals = \"\" ",
        "    if fx_spotstrategy ",
        "    {",
        "        cal = fx_spotstrategy.ImplementedObject.Load",
        "        fx_spotstrategy_map = Numerix::Map(cal.Key, cal.Value)",
        "        cals += fx_spotstrategy_map.CCY1CALENDAR",
        "        cals += \" \"",
        "        cals += fx_spotstrategy_map.CCY2CALENDAR",
        "    }",
        "    ",
        "    switch on fx_tenor",
        "        case \"ON\" // 1BD",
        "            return Numerix::AddTenor(Numerix::MarketDate,Numerix::Tenor(\"1BD\",\"F\",cals))",
        "        case \"TN\" // 2BD",
        "            return Numerix::AddTenor(Numerix::MarketDate,Numerix::Tenor(\"2BD\",\"F\",cals))",
        "        case \"SN\" // SpotDate + 1BD",
        "        {",
        "            ifnot fx_spotstrategy :",
        "                return Numerix::AddTenor(Numerix::MarketDate,Numerix::Tenor(\"3BD\",\"F\",cals))",
        "                ",
        "            call = Numerix::Object({\"SN_DATE\", \"NUMERIX INTERNAL\", \"SPOT STRATEGY DISPLAY\"}) & ",
        "            {",
        "                \"tenor\"              : \"1M\",",
        "                \"now date\"           : Numerix::MarketDate,",
        "                \"spot strategy\"      : fx_spotstrategy",
        "            }",
        null,
        "            spotdateviewer = call.Create",
        "            ",
        "            return Numerix::AddTenor(spotdateviewer.View(\"SPOTDATE\"),Numerix::Tenor(\"1BD\",\"F\",cals))",
        "        }",
        "        default ",
        "            return Numerix::MarketDate",
        "    endswitch",
        "    ",
        "}"]
    }
  },
  "MDE.VOLATILITY.SWAPTION": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "MDE.VOLATILITY.SWAPTION",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "MDE.VOLATILITY.SWAPTION.PARAMETERS",
      "RESULTS" : "MDE.VOLATILITY.SWAPTION.RESULTS",
      "CLASSPROPERTIES" : "MDE.VOLATILITY.SWAPTION.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "MDE.VOLATILITY.SWAPTION.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "SCRIPT" : "MDE.VOLATILITY.SWAPTION.SCRIPT.NXSL"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_13178_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["CURRENCY","IRINDEXTENOR","VOLATILITYBASIS","INTERPOLATION","EXTRAPOLATION","VOLQUOTETYPE","QUOTETYPE","IRINDEX"],
      "VALUE" : ["USD","ON","ACT/365","BiLinear","Flat Extrapolation","NORMAL","MID","SOFR"]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.VOL.SWPT.USD-SOFR-ON.ATM.MID": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "IR.VOL.SWPT.USD-SOFR-ON.ATM.MID",
      "DEFINITION" : "MDE.VOLATILITY.SWAPTION",
      "INSTANTIATION TYPE" : "MDE",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "REQUESTOUTPUT" : "NONE",
      "INPUTS" : "_13178_NX_AUTOGEN"
    }
  },
  "CALENDAR.LNB.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "DATES" : [
        39495,
        39501,
        39502,
        39508,
        39509,
        39515,
        39516,
        39522,
        39523,
        39528,
        39529,
        39530,
        39531,
        39536,
        39537,
        39543,
        39544,
        39550,
        39551,
        39557,
        39558,
        39564,
        39565,
        39571,
        39572,
        39573,
        39578,
        39579,
        39585,
        39586,
        39592,
        39593,
        39594,
        39599,
        39600,
        39606,
        39607,
        39613,
        39614,
        39620,
        39621,
        39627,
        39628,
        39634,
        39635,
        39641,
        39642,
        39648,
        39649,
        39655,
        39656,
        39662,
        39663,
        39669,
        39670,
        39676,
        39677,
        39683,
        39684,
        39685,
        39690,
        39691,
        39697,
        39698,
        39704,
        39705,
        39711,
        39712,
        39718,
        39719,
        39725,
        39726,
        39732,
        39733,
        39739,
        39740,
        39746,
        39747,
        39753,
        39754,
        39760,
        39761,
        39767,
        39768,
        39774,
        39775,
        39781,
        39782,
        39788,
        39789,
        39795,
        39796,
        39802,
        39803,
        39382,
        39807,
        39808,
        39809,
        39810,
        39814,
        39816,
        39817,
        39823,
        39824,
        39830,
        39831,
        39837,
        39838,
        39844,
        39845,
        39851,
        39852,
        39858,
        39859,
        39865,
        39866,
        39872,
        39873,
        39879,
        39880,
        39886,
        39887,
        39893,
        39894,
        39900,
        39901,
        39907,
        39908,
        39913,
        39914,
        39915,
        39916,
        39921,
        39922,
        39928,
        39929,
        39935,
        39936,
        39937,
        39942,
        39943,
        39949,
        39950,
        39956,
        39957,
        39958,
        39963,
        39964,
        39970,
        39971,
        39977,
        39978,
        39984,
        39985,
        39991,
        39992,
        39998,
        39999,
        40005,
        40006,
        40012,
        40013,
        40019,
        40020,
        40026,
        40027,
        40033,
        40034,
        40040,
        40041,
        40047,
        40048,
        40054,
        40055,
        40056,
        40061,
        40062,
        40068,
        40069,
        40075,
        40076,
        40082,
        40083,
        40089,
        40090,
        40096,
        40097,
        40103,
        40104,
        40110,
        40111,
        40117,
        40118,
        40124,
        40125,
        40131,
        40132,
        40138,
        40139,
        40145,
        40146,
        40152,
        40153,
        40159,
        40160,
        40166,
        40167,
        40172,
        40173,
        40174,
        40175,
        40179,
        40180,
        40181,
        40187,
        40188,
        40194,
        40195,
        40201,
        40202,
        40208,
        40209,
        40215,
        40216,
        40222,
        40223,
        40229,
        40230,
        40236,
        40237,
        40243,
        40244,
        40250,
        40251,
        40257,
        40258,
        40264,
        40265,
        40270,
        40271,
        40272,
        40273,
        40278,
        40279,
        40285,
        40286,
        40292,
        40293,
        40299,
        40300,
        40301,
        40306,
        40307,
        40313,
        40314,
        40320,
        40321,
        40327,
        40328,
        40329,
        40334,
        40335,
        40341,
        40342,
        40348,
        40349,
        40355,
        40356,
        40362,
        40363,
        40369,
        40370,
        40376,
        40377,
        40383,
        40384,
        40390,
        40391,
        40397,
        40398,
        40404,
        40405,
        40411,
        40412,
        40418,
        40419,
        40420,
        40425,
        40426,
        40432,
        40433,
        40439,
        40440,
        40446,
        40447,
        40453,
        40454,
        40460,
        40461,
        40467,
        40468,
        40474,
        40475,
        40481,
        40482,
        40488,
        40489,
        40495,
        40496,
        40502,
        40503,
        40509,
        40510,
        40516,
        40517,
        40523,
        40524,
        40530,
        40531,
        40537,
        40538,
        40539,
        40540,
        40544,
        40545,
        40546,
        40551,
        40552,
        40558,
        40559,
        40565,
        41048,
        41049,
        41055,
        41056,
        41062,
        41063,
        41064,
        41065,
        41069,
        41070,
        41076,
        41077,
        41083,
        41084,
        41090,
        41091,
        41097,
        41098,
        41104,
        41105,
        41111,
        41112,
        41118,
        41119,
        41125,
        41126,
        41132,
        41133,
        41139,
        41140,
        41146,
        41147,
        41148,
        41153,
        41154,
        41160,
        41161,
        41167,
        41168,
        41174,
        41175,
        41181,
        41182,
        41188,
        41189,
        41195,
        41196,
        41202,
        41203,
        41209,
        41210,
        41216,
        41217,
        41223,
        41224,
        41230,
        41231,
        41237,
        41238,
        41244,
        41245,
        41251,
        41252,
        41258,
        41259,
        41265,
        41266,
        41268,
        41269,
        41272,
        41273,
        41275,
        41279,
        41280,
        41286,
        41287,
        41293,
        41294,
        41300,
        41301,
        41307,
        41308,
        41314,
        41315,
        41321,
        41322,
        41328,
        41329,
        41335,
        41336,
        41342,
        41343,
        41349,
        41350,
        40566,
        40572,
        40573,
        40579,
        40580,
        40586,
        40587,
        40593,
        40594,
        40600,
        40601,
        40607,
        40608,
        40614,
        40615,
        40621,
        40622,
        40628,
        40629,
        40635,
        40636,
        40642,
        40643,
        40649,
        40650,
        40655,
        40656,
        40657,
        40658,
        40662,
        40663,
        40664,
        40665,
        40670,
        40671,
        40677,
        40678,
        40684,
        40685,
        40691,
        40692,
        40693,
        40698,
        40699,
        40705,
        40706,
        40712,
        40713,
        40719,
        40720,
        40726,
        40727,
        40733,
        40734,
        40740,
        40741,
        40747,
        40748,
        40754,
        40755,
        40761,
        40762,
        40768,
        40769,
        40775,
        40776,
        40782,
        40783,
        40784,
        40789,
        40790,
        40796,
        40797,
        40803,
        40804,
        40810,
        40811,
        40817,
        40818,
        40824,
        40825,
        40831,
        40832,
        40838,
        40839,
        40845,
        40846,
        40852,
        40853,
        40859,
        40860,
        40866,
        40867,
        40873,
        40874,
        40880,
        40881,
        40887,
        40888,
        40894,
        40895,
        40901,
        40902,
        40903,
        40904,
        40908,
        40909,
        40910,
        40915,
        40916,
        40922,
        40923,
        40929,
        40930,
        40936,
        40937,
        40943,
        40944,
        40950,
        40951,
        40957,
        40958,
        40964,
        40965,
        40971,
        40972,
        40978,
        40979,
        40985,
        40986,
        40992,
        40993,
        40999,
        41000,
        41005,
        41006,
        41007,
        41008,
        41013,
        41014,
        41020,
        41021,
        41027,
        41028,
        41034,
        41035,
        41036,
        41041,
        41042,
        44030,
        44031,
        42015,
        46767,
        46768,
        46774,
        46775,
        46781,
        46782,
        46788,
        46789,
        46795,
        46796,
        46802,
        46803,
        46809,
        46810,
        46816,
        46817,
        46823,
        46824,
        46830,
        46831,
        46837,
        46838,
        46844,
        46845,
        46851,
        46852,
        46857,
        46858,
        46859,
        46860,
        46865,
        46866,
        46872,
        46873,
        46874,
        46879,
        46880,
        46886,
        46887,
        46893,
        46894,
        46900,
        46901,
        46902,
        46907,
        46908,
        46914,
        46915,
        46921,
        46922,
        46928,
        46929,
        46935,
        46936,
        46942,
        46943,
        46949,
        46950,
        46956,
        46957,
        46963,
        46964,
        46970,
        46971,
        46977,
        46978,
        46984,
        46985,
        41356,
        41357,
        41362,
        41363,
        41364,
        41365,
        41370,
        41371,
        41377,
        41378,
        41384,
        41385,
        41391,
        44037,
        44038,
        44044,
        44045,
        44051,
        44052,
        44058,
        44059,
        44065,
        44066,
        44072,
        44073,
        44074,
        44079,
        44080,
        44086,
        44087,
        44093,
        44094,
        44100,
        44101,
        44107,
        44108,
        44114,
        44115,
        44121,
        44122,
        44128,
        44129,
        44135,
        44136,
        44142,
        44143,
        44149,
        44150,
        44156,
        44157,
        44163,
        44164,
        44170,
        44171,
        44177,
        44178,
        44184,
        44185,
        45227,
        45228,
        45234,
        45235,
        45241,
        45242,
        45248,
        45249,
        45255,
        45256,
        45262,
        45263,
        45269,
        45270,
        45276,
        45277,
        45283,
        45284,
        45285,
        45286,
        45290,
        45291,
        45292,
        45297,
        45298,
        45304,
        45305,
        45311,
        45312,
        45318,
        45319,
        45325,
        45326,
        45332,
        45333,
        45339,
        45340,
        45346,
        45347,
        45353,
        45354,
        45360,
        45361,
        45367,
        45368,
        45374,
        45375,
        45380,
        45381,
        45382,
        45383,
        45388,
        45389,
        45395,
        45396,
        45402,
        45403,
        45409,
        45410,
        45416,
        45417,
        45418,
        45423,
        45424,
        45430,
        45431,
        45437,
        45438,
        45439,
        45444,
        45445,
        45451,
        45452,
        45458,
        45459,
        45465,
        45466,
        45472,
        45473,
        45479,
        45480,
        45486,
        45487,
        45493,
        45494,
        45500,
        45501,
        45507,
        45508,
        45514,
        45515,
        45521,
        45522,
        45528,
        45529,
        45530,
        45535,
        45536,
        45542,
        45543,
        45549,
        45550,
        42021,
        42022,
        42028,
        42029,
        42035,
        42036,
        42042,
        42043,
        42049,
        42050,
        42056,
        42057,
        42063,
        42064,
        42070,
        42071,
        42077,
        42078,
        42084,
        42085,
        42091,
        42092,
        42097,
        42098,
        42099,
        42100,
        42105,
        42106,
        42112,
        42113,
        42119,
        42120,
        42126,
        42127,
        42128,
        42133,
        42134,
        42140,
        42141,
        42147,
        42148,
        42149,
        42154,
        42155,
        42161,
        42162,
        42168,
        42169,
        42175,
        42176,
        42182,
        42183,
        42189,
        42190,
        42196,
        42197,
        42203,
        42204,
        42210,
        42211,
        42217,
        42218,
        42224,
        42225,
        42231,
        42232,
        42238,
        42239,
        42245,
        42246,
        42247,
        42252,
        42253,
        42259,
        42260,
        42266,
        42267,
        42273,
        42274,
        42280,
        42281,
        42287,
        42288,
        42294,
        42295,
        42301,
        42302,
        42308,
        42309,
        42315,
        42316,
        42322,
        42323,
        42329,
        42330,
        42336,
        42337,
        42343,
        42344,
        42350,
        42351,
        42357,
        42358,
        41392,
        41398,
        41399,
        41400,
        41405,
        41406,
        41412,
        41413,
        41419,
        41420,
        41421,
        41426,
        41427,
        41433,
        41434,
        41440,
        41441,
        41447,
        41448,
        41454,
        41455,
        41461,
        41462,
        41468,
        41469,
        41475,
        41476,
        41482,
        41483,
        41489,
        41490,
        41496,
        41497,
        41503,
        41504,
        41510,
        41511,
        41512,
        41517,
        41518,
        41524,
        41525,
        41531,
        41532,
        41538,
        41539,
        41545,
        41546,
        41552,
        41553,
        41559,
        41560,
        41566,
        41567,
        41573,
        41574,
        41580,
        41581,
        41587,
        41588,
        41594,
        41595,
        41601,
        41602,
        41608,
        41609,
        41615,
        41616,
        41622,
        41623,
        41629,
        41630,
        41633,
        41634,
        41636,
        41637,
        41640,
        41643,
        41644,
        41650,
        41651,
        41657,
        41658,
        41664,
        41665,
        41671,
        41672,
        41678,
        41679,
        41685,
        44190,
        44191,
        44192,
        44193,
        44197,
        44198,
        44199,
        44205,
        44206,
        44212,
        44213,
        44219,
        44220,
        44226,
        44227,
        44233,
        44234,
        44240,
        44241,
        44247,
        44248,
        44254,
        44255,
        44261,
        44262,
        44268,
        44269,
        44275,
        44276,
        44282,
        44283,
        44288,
        44289,
        44290,
        44291,
        44296,
        44297,
        44303,
        44304,
        44310,
        44311,
        44317,
        44318,
        44319,
        44324,
        44325,
        44331,
        44332,
        44338,
        44339,
        44345,
        44346,
        44347,
        44352,
        44353,
        44359,
        44360,
        44366,
        44367,
        44373,
        44374,
        44380,
        44381,
        44387,
        44388,
        44394,
        44395,
        44401,
        39383,
        39389,
        39390,
        39396,
        39397,
        39403,
        39404,
        39410,
        39411,
        39417,
        39418,
        39424,
        39425,
        39431,
        39432,
        39438,
        39439,
        39441,
        39442,
        39445,
        39446,
        39448,
        39452,
        39453,
        39459,
        39460,
        39466,
        39467,
        39473,
        39474,
        39480,
        39481,
        39487,
        39488,
        39494,
        44402,
        45556,
        47978,
        47979,
        47985,
        47986,
        47992,
        47993,
        47994,
        47999,
        48000,
        48006,
        48007,
        48013,
        48014,
        48020,
        48021,
        48027,
        48028,
        48034,
        48035,
        48041,
        48042,
        48048,
        48049,
        48055,
        48056,
        48062,
        48063,
        48069,
        48070,
        48076,
        48077,
        48083,
        48084,
        48085,
        48090,
        48091,
        48097,
        48098,
        48104,
        48105,
        48111,
        48112,
        48118,
        48119,
        48125,
        48126,
        48132,
        48133,
        48139,
        48140,
        48146,
        48147,
        48153,
        48154,
        48160,
        48161,
        48167,
        48168,
        48174,
        42363,
        41686,
        41692,
        41693,
        41699,
        41700,
        41706,
        41707,
        41713,
        41714,
        41720,
        41721,
        41727,
        41728,
        41734,
        41735,
        41741,
        41742,
        41747,
        48175,
        48181,
        48182,
        48188,
        48189,
        48195,
        48196,
        48202,
        48203,
        41748,
        41749,
        41750,
        41755,
        41756,
        41762,
        41763,
        41764,
        41769,
        41770,
        41776,
        41777,
        41783,
        41784,
        41785,
        41790,
        41791,
        41797,
        41798,
        41804,
        41805,
        41811,
        41812,
        41818,
        41819,
        41825,
        41826,
        41832,
        41833,
        41839,
        41840,
        41846,
        41847,
        41853,
        41854,
        41860,
        41861,
        41867,
        41868,
        41874,
        41875,
        41876,
        41881,
        41882,
        41888,
        41889,
        41895,
        41896,
        41902,
        41903,
        41909,
        41910,
        41916,
        41917,
        41923,
        41924,
        41930,
        41931,
        41937,
        41938,
        41944,
        41945,
        41951,
        41952,
        41958,
        41959,
        41965,
        41966,
        41972,
        41973,
        41979,
        41980,
        41986,
        41987,
        41993,
        41994,
        41998,
        41999,
        42000,
        42001,
        42005,
        42007,
        42008,
        42014,
        48207,
        49224,
        49225,
        49231,
        49232,
        49238,
        49239,
        49245,
        49246,
        49252,
        49253,
        49259,
        49260,
        49266,
        49267,
        49273,
        49274,
        49280,
        49281,
        49287,
        49288,
        49294,
        49295,
        49301,
        49302,
        49303,
        49304,
        49308,
        49309,
        49310,
        49315,
        49316,
        49322,
        49323,
        49329,
        49330,
        49336,
        49337,
        49343,
        49344,
        49350,
        49351,
        49357,
        49358,
        49364,
        49365,
        49371,
        49372,
        49378,
        49379,
        49385,
        49386,
        49391,
        49392,
        49393,
        49394,
        49399,
        49400,
        49406,
        49407,
        49413,
        49414,
        49420,
        49421,
        49427,
        49428,
        49434,
        49435,
        49436,
        49441,
        49442,
        49448,
        49449,
        49455,
        49456,
        49457,
        49462,
        49463,
        49469,
        49470,
        49476,
        46991,
        48208,
        48209,
        48210,
        48214,
        48216,
        48217,
        48223,
        48224,
        48230,
        48231,
        48237,
        48238,
        48244,
        48245,
        48251,
        48252,
        48258,
        48259,
        48265,
        48266,
        48272,
        48273,
        48279,
        48280,
        48286,
        48287,
        48293,
        48294,
        48299,
        48300,
        48301,
        48302,
        48307,
        48308,
        48314,
        48315,
        48321,
        48322,
        48328,
        48329,
        48335,
        48336,
        48337,
        48342,
        48343,
        48349,
        48350,
        48356,
        42364,
        42365,
        42366,
        42370,
        42371,
        42372,
        42378,
        42379,
        42385,
        42386,
        42392,
        42393,
        42399,
        42400,
        42406,
        42407,
        42413,
        42414,
        42420,
        42421,
        42427,
        42428,
        42434,
        42435,
        42441,
        42442,
        42448,
        42449,
        42454,
        42455,
        42456,
        42457,
        42462,
        42463,
        42469,
        42470,
        42476,
        42477,
        42483,
        42484,
        42490,
        42491,
        42492,
        42497,
        42498,
        42504,
        42505,
        42511,
        42512,
        42518,
        42519,
        42520,
        42525,
        42526,
        42532,
        42533,
        42539,
        42540,
        42546,
        42547,
        42553,
        42554,
        42560,
        42561,
        42567,
        42568,
        42574,
        42575,
        42581,
        42582,
        42588,
        42589,
        42595,
        42596,
        42602,
        42603,
        42609,
        42610,
        42611,
        42616,
        42617,
        42623,
        42624,
        42630,
        42631,
        42637,
        42638,
        42644,
        42645,
        42651,
        42652,
        42658,
        42659,
        42665,
        42666,
        42672,
        42673,
        42679,
        42680,
        42686,
        42687,
        42693,
        48357,
        49477,
        46992,
        46993,
        46998,
        46999,
        47005,
        47006,
        47012,
        47013,
        47019,
        47020,
        47026,
        47027,
        47033,
        47034,
        47040,
        47041,
        47047,
        47048,
        47054,
        47055,
        47061,
        47062,
        47068,
        47069,
        47075,
        47076,
        47082,
        47083,
        47089,
        47090,
        47096,
        47097,
        47103,
        47104,
        47110,
        47111,
        47112,
        47113,
        47117,
        47118,
        47119,
        47124,
        47125,
        47131,
        47132,
        47138,
        47139,
        47145,
        47146,
        47152,
        47153,
        47159,
        47160,
        47166,
        47167,
        47173,
        47174,
        47180,
        47181,
        47187,
        47188,
        47194,
        47195,
        47201,
        47202,
        47207,
        47208,
        47209,
        47210,
        47215,
        47216,
        47222,
        47223,
        47229,
        47230,
        47236,
        47237,
        47243,
        47244,
        47245,
        47250,
        47251,
        47257,
        47258,
        47264,
        47265,
        47266,
        47271,
        47272,
        47278,
        47279,
        47285,
        47286,
        47292,
        47293,
        47299,
        47300,
        47306,
        47307,
        48363,
        48364,
        48365,
        48370,
        48371,
        48377,
        48378,
        48384,
        48385,
        48391,
        48392,
        48398,
        48399,
        48405,
        48406,
        48412,
        48413,
        48419,
        48420,
        48426,
        48427,
        48433,
        48434,
        48440,
        48441,
        48447,
        48448,
        48454,
        48455,
        48456,
        48461,
        48462,
        48468,
        48469,
        48475,
        48476,
        48482,
        48483,
        48489,
        48490,
        48496,
        48497,
        48503,
        48504,
        48510,
        48511,
        48517,
        48518,
        48524,
        48525,
        48531,
        48532,
        48538,
        48539,
        48545,
        48546,
        48552,
        48553,
        48559,
        48560,
        48566,
        48567,
        48573,
        48574,
        48575,
        48576,
        48580,
        48581,
        48582,
        48587,
        48588,
        48594,
        48595,
        48601,
        48602,
        48608,
        48609,
        48615,
        48616,
        48622,
        48623,
        48629,
        48630,
        48636,
        48637,
        48643,
        48644,
        48650,
        48651,
        48657,
        48658,
        48664,
        48665,
        48671,
        48672,
        48678,
        48679,
        48684,
        48685,
        48686,
        48687,
        49483,
        49484,
        49490,
        49491,
        49497,
        49498,
        49504,
        49505,
        49511,
        49512,
        49518,
        49519,
        49525,
        42694,
        48692,
        48693,
        48699,
        49526,
        49532,
        49533,
        49539,
        49540,
        49546,
        49547,
        49548,
        49553,
        49554,
        49560,
        49561,
        49567,
        49568,
        49574,
        49575,
        49581,
        49582,
        49588,
        49589,
        49595,
        49596,
        49602,
        49603,
        49609,
        49610,
        49616,
        49617,
        49623,
        49624,
        49630,
        49631,
        49637,
        49638,
        49644,
        49645,
        49651,
        49652,
        49658,
        49659,
        49665,
        49666,
        49668,
        49669,
        49672,
        49673,
        49675,
        49679,
        49680,
        49686,
        49687,
        49693,
        49694,
        49700,
        49701,
        49707,
        49708,
        49714,
        49715,
        49721,
        49722,
        49728,
        49729,
        49735,
        49736,
        49742,
        49743,
        49749,
        49750,
        49756,
        49757,
        49763,
        49764,
        49770,
        49771,
        49776,
        49777,
        49778,
        49779,
        49784,
        49785,
        49791,
        49792,
        49798,
        49799,
        49800,
        49805,
        49806,
        49812,
        47313,
        47314,
        47320,
        47321,
        47327,
        47328,
        47334,
        47335,
        47341,
        47342,
        47348,
        47349,
        47355,
        47356,
        47357,
        47362,
        47363,
        47369,
        48700,
        48701,
        48706,
        48707,
        48713,
        48714,
        48720,
        48721,
        48727,
        48728,
        48729,
        48734,
        48735,
        48741,
        48742,
        48748,
        48749,
        48755,
        48756,
        48762,
        48763,
        48769,
        48770,
        48776,
        48777,
        48783,
        48784,
        48790,
        48791,
        48797,
        48798,
        48804,
        49813,
        47370,
        47376,
        47377,
        47383,
        47384,
        47390,
        47391,
        47397,
        47398,
        47404,
        47405,
        47411,
        47412,
        47418,
        47419,
        47425,
        47426,
        47432,
        47433,
        47439,
        47440,
        47446,
        47447,
        47453,
        47454,
        47460,
        47461,
        47467,
        47468,
        47474,
        47475,
        47477,
        47478,
        47481,
        47482,
        47484,
        47488,
        47489,
        47495,
        47496,
        47502,
        47503,
        47509,
        47510,
        47516,
        47517,
        47523,
        47524,
        47530,
        47531,
        47537,
        47538,
        47544,
        47545,
        47551,
        47552,
        47558,
        47559,
        47565,
        47566,
        47572,
        47573,
        47579,
        47580,
        47586,
        47587,
        47592,
        47593,
        47594,
        47595,
        47600,
        47601,
        47607,
        47608,
        47609,
        47614,
        47615,
        47621,
        47622,
        47628,
        47629,
        47630,
        47635,
        47636,
        47642,
        47643,
        44408,
        44409,
        44415,
        44416,
        44422,
        44423,
        44429,
        44430,
        44436,
        44437,
        44438,
        44443,
        44444,
        44450,
        44451,
        44457,
        44458,
        44464,
        44465,
        44471,
        44472,
        44478,
        44479,
        44485,
        44486,
        44492,
        44493,
        44499,
        44500,
        44506,
        44507,
        44513,
        44514,
        44520,
        44521,
        44527,
        44528,
        44534,
        44535,
        44541,
        44542,
        44548,
        44549,
        44555,
        44556,
        44557,
        44558,
        44562,
        44563,
        44564,
        44569,
        44570,
        44576,
        44577,
        44583,
        44584,
        44590,
        44591,
        44597,
        44598,
        44604,
        44605,
        44611,
        44612,
        44618,
        44619,
        44625,
        44626,
        44632,
        44633,
        44639,
        44640,
        44646,
        44647,
        44653,
        44654,
        44660,
        44661,
        47649,
        47650,
        47656,
        47657,
        47663,
        47664,
        47670,
        47671,
        47677,
        47678,
        47684,
        47685,
        47691,
        47692,
        47698,
        47699,
        47705,
        47706,
        47712,
        47713,
        47719,
        47720,
        47721,
        47726,
        47727,
        47733,
        47734,
        47740,
        47741,
        47747,
        47748,
        47754,
        47755,
        47761,
        47762,
        47768,
        47769,
        47775,
        47776,
        47782,
        47783,
        47789,
        47790,
        47796,
        47797,
        47803,
        47804,
        47810,
        47811,
        47817,
        47818,
        47824,
        47825,
        47831,
        47832,
        47838,
        47839,
        47842,
        47843,
        47845,
        47846,
        47849,
        47852,
        47853,
        47859,
        47860,
        47866,
        47867,
        47873,
        47874,
        47880,
        47881,
        47887,
        47888,
        47894,
        47895,
        47901,
        47902,
        47908,
        47909,
        47915,
        47916,
        47922,
        47923,
        47929,
        47930,
        47936,
        47937,
        47943,
        47944,
        47949,
        47950,
        47951,
        47952,
        47957,
        47958,
        47964,
        47965,
        47971,
        47972,
        47973,
        48805,
        45557,
        45563,
        45564,
        45570,
        45571,
        45577,
        45578,
        45584,
        42700,
        42701,
        42707,
        42708,
        42714,
        42715,
        42721,
        42722,
        42728,
        42729,
        42730,
        42731,
        42735,
        42736,
        42737,
        42742,
        42743,
        42749,
        42750,
        42756,
        42757,
        42763,
        42764,
        42770,
        42771,
        42777,
        42778,
        42784,
        42785,
        42791,
        42792,
        42798,
        42799,
        42805,
        42806,
        42812,
        42813,
        42819,
        42820,
        42826,
        42827,
        42833,
        42834,
        42839,
        42840,
        42841,
        42842,
        42847,
        42848,
        42854,
        42855,
        42856,
        42861,
        42862,
        42868,
        42869,
        42875,
        42876,
        42882,
        42883,
        42884,
        42889,
        42890,
        42896,
        42897,
        42903,
        42904,
        42910,
        42911,
        42917,
        42918,
        42924,
        42925,
        42931,
        42932,
        42938,
        42939,
        42945,
        42946,
        42952,
        42953,
        42959,
        42960,
        42966,
        42967,
        42973,
        42974,
        42975,
        42980,
        42981,
        42987,
        42988,
        42994,
        42995,
        43001,
        43002,
        43008,
        43009,
        43015,
        43016,
        43022,
        43023,
        43029,
        45585,
        45591,
        45592,
        45598,
        45599,
        45605,
        45606,
        45612,
        45613,
        45619,
        45620,
        45626,
        45627,
        45633,
        45634,
        45640,
        45641,
        45647,
        45648,
        45651,
        45652,
        45654,
        45655,
        45658,
        45661,
        45662,
        45668,
        45669,
        45675,
        45676,
        45682,
        45683,
        45689,
        45690,
        45696,
        45697,
        45703,
        45704,
        45710,
        45711,
        45717,
        45718,
        45724,
        45725,
        45731,
        45732,
        45738,
        45739,
        45745,
        45746,
        45752,
        45753,
        45759,
        45760,
        45765,
        45766,
        45767,
        45768,
        45773,
        45774,
        45780,
        45781,
        45782,
        45787,
        45788,
        45794,
        45795,
        45801,
        45802,
        45803,
        45808,
        45809,
        45815,
        45816,
        45822,
        45823,
        45829,
        45830,
        45836,
        45837,
        45843,
        45844,
        45850,
        45851,
        45857,
        45858,
        45864,
        45865,
        45871,
        45872,
        45878,
        45879,
        45885,
        44666,
        44667,
        44668,
        44669,
        44674,
        44675,
        44681,
        44682,
        44683,
        44688,
        44689,
        44695,
        44696,
        44702,
        44703,
        44709,
        44710,
        44714,
        44715,
        44716,
        44717,
        44723,
        44724,
        44730,
        44731,
        44737,
        44738,
        44744,
        44745,
        44751,
        44752,
        44758,
        44759,
        44765,
        44766,
        44772,
        44773,
        44779,
        44780,
        44786,
        44787,
        44793,
        44794,
        44800,
        44801,
        44802,
        44807,
        44808,
        44814,
        44815,
        44821,
        44822,
        44828,
        44829,
        44835,
        44836,
        44842,
        44843,
        44849,
        44850,
        44856,
        44857,
        44863,
        44864,
        44870,
        44871,
        44877,
        44878,
        44884,
        44885,
        44891,
        44892,
        48811,
        48812,
        48818,
        48819,
        48820,
        48825,
        48826,
        48832,
        48833,
        48839,
        48840,
        48846,
        48847,
        48853,
        48854,
        48860,
        48861,
        48867,
        48868,
        48874,
        48875,
        48881,
        48882,
        48888,
        48889,
        48895,
        48896,
        48902,
        48903,
        48909,
        48910,
        48916,
        48917,
        48923,
        48924,
        48930,
        48931,
        48937,
        48938,
        48939,
        48940,
        48944,
        48945,
        48946,
        48951,
        48952,
        48958,
        48959,
        48965,
        48966,
        48972,
        48973,
        48979,
        48980,
        48986,
        48987,
        48993,
        48994,
        49000,
        49001,
        49007,
        49008,
        49014,
        49015,
        49021,
        49022,
        49028,
        49029,
        49035,
        49036,
        49041,
        49042,
        49043,
        49044,
        49049,
        49050,
        49056,
        49057,
        49063,
        49064,
        49065,
        49070,
        49071,
        49077,
        49078,
        49084,
        49085,
        49091,
        49092,
        49093,
        49098,
        49819,
        49820,
        49821,
        49826,
        49827,
        49833,
        49834,
        49840,
        49841,
        49847,
        49848,
        49854,
        49855,
        49861,
        49862,
        49868,
        49869,
        49875,
        49876,
        49882,
        49883,
        49889,
        49890,
        49896,
        49897,
        49903,
        49904,
        49910,
        49911,
        49912,
        49917,
        49918,
        49924,
        49925,
        49931,
        49099,
        49105,
        49106,
        49112,
        49113,
        49119,
        49120,
        49126,
        49127,
        49133,
        49134,
        49140,
        49141,
        49147,
        49148,
        49154,
        49155,
        49161,
        49162,
        49168,
        49169,
        49175,
        49176,
        43030,
        43036,
        43037,
        43043,
        43044,
        43050,
        43051,
        43057,
        43058,
        43064,
        43065,
        43071,
        43072,
        43078,
        43079,
        43085,
        43086,
        43092,
        43093,
        43094,
        43095,
        43099,
        43100,
        43101,
        43106,
        43107,
        43113,
        43114,
        43120,
        43121,
        43127,
        43128,
        43134,
        43135,
        43141,
        43142,
        43148,
        43149,
        43155,
        43156,
        43162,
        43163,
        43169,
        43170,
        43176,
        43177,
        43183,
        43184,
        43189,
        43190,
        43191,
        43192,
        43197,
        43198,
        43204,
        43205,
        43211,
        43212,
        43218,
        43219,
        43225,
        43226,
        43227,
        43232,
        43233,
        43239,
        43240,
        43246,
        43247,
        43248,
        43253,
        43254,
        43260,
        43261,
        43267,
        43268,
        43274,
        43275,
        43281,
        43282,
        43288,
        43289,
        43295,
        43296,
        43302,
        43303,
        43309,
        43310,
        43316,
        43317,
        43323,
        43324,
        43330,
        43331,
        43337,
        43338,
        43339,
        43344,
        43345,
        43351,
        43352,
        49182,
        49183,
        49184,
        49189,
        49190,
        49196,
        49197,
        49203,
        49204,
        49210,
        49211,
        49217,
        45886,
        45892,
        45893,
        45894,
        45899,
        45900,
        45906,
        45907,
        45913,
        45914,
        45920,
        45921,
        45927,
        45928,
        45934,
        45935,
        45941,
        45942,
        45948,
        45949,
        45955,
        45956,
        45962,
        45963,
        45969,
        45970,
        45976,
        45977,
        45983,
        45984,
        45990,
        45991,
        45997,
        45998,
        46004,
        46005,
        46011,
        46012,
        46016,
        46017,
        46018,
        46019,
        46023,
        46025,
        46026,
        46032,
        46033,
        46039,
        46040,
        46046,
        46047,
        46053,
        46054,
        46060,
        46061,
        46067,
        46068,
        46074,
        46075,
        46081,
        46082,
        46088,
        46089,
        46095,
        46096,
        46102,
        46103,
        46109,
        46110,
        46115,
        46116,
        43358,
        44898,
        46117,
        44899,
        44905,
        44906,
        44912,
        44913,
        44919,
        44920,
        44921,
        44922,
        44926,
        44927,
        44928,
        44933,
        44934,
        44940,
        44941,
        44947,
        44948,
        44954,
        44955,
        44961,
        44962,
        44968,
        44969,
        44975,
        44976,
        44982,
        44983,
        44989,
        44990,
        44996,
        44997,
        45003,
        45004,
        45010,
        45011,
        45017,
        45018,
        45023,
        45024,
        45025,
        45026,
        45031,
        45032,
        45038,
        45039,
        45045,
        45046,
        45047,
        45052,
        45053,
        45059,
        45060,
        45066,
        45067,
        45073,
        45074,
        45075,
        45080,
        45081,
        45087,
        45088,
        45094,
        45095,
        45101,
        45102,
        45108,
        45109,
        45115,
        45116,
        45122,
        45123,
        45129,
        45130,
        45136,
        45137,
        45143,
        45144,
        45150,
        45151,
        45157,
        45158,
        45164,
        45165,
        45166,
        45171,
        45172,
        45178,
        45179,
        45185,
        45186,
        45192,
        45193,
        45199,
        45200,
        45206,
        45207,
        45213,
        45214,
        45220,
        45221,
        43359,
        43365,
        43366,
        43372,
        43373,
        43379,
        43380,
        43386,
        43387,
        43393,
        43394,
        43400,
        43401,
        43407,
        43408,
        43414,
        43415,
        43421,
        43422,
        43428,
        43429,
        43435,
        43436,
        43442,
        43443,
        43449,
        43450,
        43456,
        43457,
        43459,
        43460,
        43463,
        43464,
        43466,
        43470,
        43471,
        43477,
        43478,
        43484,
        43485,
        43491,
        43492,
        43498,
        43499,
        43505,
        43506,
        43512,
        43513,
        43519,
        43520,
        43526,
        43527,
        43533,
        43534,
        43540,
        43541,
        43547,
        43548,
        43554,
        43555,
        43561,
        43562,
        43568,
        43569,
        43574,
        43575,
        43576,
        43577,
        46118,
        46123,
        46124,
        46130,
        46131,
        46137,
        46138,
        46144,
        46145,
        46146,
        46151,
        46152,
        46158,
        46159,
        46165,
        46166,
        46167,
        46172,
        46173,
        46179,
        46180,
        46186,
        46187,
        46193,
        46194,
        46200,
        46201,
        46207,
        46208,
        46214,
        46215,
        46221,
        46222,
        46228,
        46229,
        46235,
        46236,
        46242,
        46243,
        46249,
        46250,
        46256,
        46257,
        46263,
        46264,
        46265,
        46270,
        46271,
        46277,
        46278,
        46284,
        46285,
        46291,
        46292,
        46298,
        46299,
        46305,
        46306,
        46312,
        46313,
        46319,
        46320,
        46326,
        46327,
        46333,
        46334,
        46340,
        46341,
        46347,
        46348,
        46354,
        46355,
        46361,
        46362,
        46368,
        46369,
        46375,
        46376,
        46381,
        46382,
        46383,
        46384,
        46388,
        46389,
        46390,
        46396,
        46397,
        46403,
        46404,
        46410,
        46411,
        46417,
        46418,
        46424,
        46425,
        46431,
        46432,
        46438,
        49218,
        46439,
        46445,
        46446,
        46452,
        46453,
        46459,
        46460,
        46466,
        46467,
        46472,
        46473,
        46474,
        46475,
        46480,
        46481,
        46487,
        46488,
        46494,
        46495,
        46501,
        46502,
        46508,
        46509,
        46510,
        46515,
        46516,
        46522,
        46523,
        46529,
        46530,
        46536,
        46537,
        46538,
        46543,
        46544,
        46550,
        46551,
        46557,
        46558,
        46564,
        46565,
        46571,
        46572,
        46578,
        46579,
        46585,
        46586,
        46592,
        46593,
        46599,
        46600,
        46606,
        46607,
        46613,
        46614,
        46620,
        46621,
        46627,
        46628,
        46629,
        46634,
        46635,
        46641,
        46642,
        46648,
        46649,
        46655,
        46656,
        46662,
        46663,
        46669,
        46670,
        46676,
        46677,
        46683,
        46684,
        46690,
        46691,
        46697,
        46698,
        46704,
        46705,
        46711,
        46712,
        46718,
        46719,
        46725,
        46726,
        46732,
        46733,
        46739,
        46740,
        46746,
        46747,
        46748,
        46749,
        46753,
        46754,
        46755,
        46760,
        43582,
        43583,
        43589,
        43590,
        43591,
        43596,
        43597,
        43603,
        43604,
        43610,
        43611,
        43612,
        43617,
        43618,
        43624,
        43625,
        43631,
        43632,
        43638,
        43639,
        43645,
        43646,
        43652,
        43653,
        43659,
        43660,
        43666,
        43667,
        43673,
        43674,
        43680,
        43681,
        43687,
        43688,
        43694,
        43695,
        43701,
        43702,
        43703,
        43708,
        43709,
        43715,
        43716,
        43722,
        43723,
        43729,
        43730,
        43736,
        43737,
        43743,
        43744,
        43750,
        43751,
        43757,
        43758,
        43764,
        43765,
        43771,
        43772,
        43778,
        43779,
        43785,
        43786,
        43792,
        43793,
        43799,
        43800,
        43806,
        43807,
        43813,
        43814,
        43820,
        43821,
        43824,
        43825,
        43827,
        43828,
        43831,
        43834,
        43835,
        43841,
        43842,
        43848,
        43849,
        43855,
        43856,
        43862,
        43863,
        43869,
        43870,
        43876,
        43877,
        43883,
        43884,
        43890,
        43891,
        43897,
        46761,
        43898,
        43904,
        43905,
        43911,
        43912,
        43918,
        43919,
        43925,
        43926,
        43931,
        43932,
        43933,
        43934,
        43939,
        43940,
        43946,
        43947,
        43953,
        43954,
        43959,
        43960,
        43961,
        43967,
        43968,
        43974,
        43975,
        43976,
        43981,
        43982,
        43988,
        43989,
        43995,
        43996,
        44002,
        44003,
        44009,
        44010,
        44016,
        44017,
        44023,
        44024,
        50225,
        50226,
        50232,
        50233,
        50239,
        50240,
        50246,
        50247,
        50253,
        50254,
        50260,
        50261,
        50267,
        50268,
        50274,
        50275,
        50281,
        50282,
        50283,
        50288,
        50289,
        50295,
        50296,
        50302,
        50303,
        50309,
        50310,
        50316,
        50317,
        50323,
        50324,
        50330,
        50331,
        50337,
        50338,
        50344,
        50345,
        50351,
        50352,
        50358,
        50359,
        50365,
        50366,
        50372,
        50373,
        50379,
        50380,
        50386,
        50387,
        50393,
        50394,
        50399,
        50400,
        50401,
        50402,
        50406,
        50407,
        50408,
        50414,
        50415,
        50421,
        50422,
        50428,
        50429,
        50435,
        50436,
        50442,
        50443,
        50449,
        50450,
        50456,
        50457,
        50463,
        50464,
        50470,
        50471,
        50477,
        50478,
        50484,
        50485,
        50491,
        50492,
        50498,
        50499,
        50505,
        50506,
        50512,
        50513,
        50518,
        50519,
        50520,
        50521,
        50526,
        50527,
        50528,
        50533,
        50534,
        50540,
        50541,
        50547,
        50548,
        50554,
        50555,
        50556,
        50898,
        50904,
        50905,
        50911,
        50912,
        50918,
        50919,
        50920,
        50925,
        50926,
        50932,
        50933,
        50939,
        50940,
        50946,
        50947,
        50953,
        50954,
        50960,
        50961,
        50967,
        50968,
        50974,
        50975,
        50981,
        50982,
        50988,
        50989,
        50995,
        50996,
        51002,
        51003,
        51009,
        51010,
        51011,
        51016,
        51017,
        51023,
        51024,
        51030,
        51031,
        51037,
        51038,
        51044,
        51045,
        51051,
        51052,
        51058,
        51059,
        51065,
        51066,
        51072,
        51073,
        51387,
        51388,
        51394,
        51395,
        51401,
        51402,
        51408,
        51409,
        51415,
        51416,
        51422,
        51423,
        51429,
        51430,
        51436,
        51437,
        51443,
        51444,
        51450,
        51451,
        51457,
        51458,
        51464,
        51465,
        51471,
        51472,
        51478,
        51479,
        51485,
        51486,
        51492,
        51493,
        51495,
        51496,
        51499,
        49932,
        49938,
        49939,
        49945,
        49946,
        49952,
        49953,
        49959,
        49960,
        49966,
        49967,
        49973,
        49974,
        49980,
        49981,
        49987,
        49988,
        49994,
        49995,
        50001,
        50002,
        50008,
        50009,
        50015,
        50016,
        50022,
        50023,
        50029,
        50030,
        50034,
        50035,
        50036,
        50037,
        50041,
        50043,
        50044,
        50050,
        50051,
        51500,
        50057,
        50058,
        50064,
        50065,
        50071,
        50072,
        50078,
        50079,
        50085,
        50086,
        50092,
        50093,
        50099,
        50100,
        50106,
        50107,
        50113,
        50114,
        50120,
        50121,
        50127,
        50128,
        50133,
        50134,
        50135,
        50136,
        50141,
        50142,
        50148,
        50149,
        50155,
        50156,
        50162,
        50163,
        50164,
        50169,
        50170,
        50176,
        50177,
        50183,
        50184,
        50185,
        50190,
        50191,
        50197,
        50198,
        50204,
        50205,
        50211,
        50212,
        50218,
        50219,
        51079,
        53369,
        53375,
        53376,
        53382,
        53383,
        53389,
        53390,
        53396,
        53397,
        53403,
        53404,
        53409,
        53410,
        53411,
        53412,
        53417,
        53418,
        53424,
        53425,
        53431,
        53432,
        53438,
        53439,
        53445,
        53446,
        53452,
        53453,
        53454,
        53459,
        53460,
        53466,
        53467,
        53473,
        53474,
        53475,
        53480,
        53481,
        53487,
        53488,
        53494,
        53495,
        53501,
        53502,
        53508,
        53509,
        53515,
        53516,
        53522,
        53523,
        53529,
        53530,
        53536,
        53537,
        53543,
        53544,
        53550,
        53551,
        53557,
        53558,
        53564,
        53565,
        53566,
        53571,
        53572,
        53578,
        53579,
        53585,
        53586,
        53592,
        53593,
        53599,
        53600,
        53606,
        53607,
        53613,
        53614,
        53620,
        53621,
        53627,
        53628,
        53634,
        53635,
        53641,
        53642,
        53648,
        53649,
        53655,
        53656,
        53662,
        53663,
        53669,
        53670,
        51502,
        51506,
        51507,
        51513,
        51514,
        51520,
        51521,
        51527,
        51528,
        51534,
        51535,
        51541,
        51542,
        51548,
        51549,
        51555,
        51556,
        51562,
        51563,
        51569,
        51570,
        51576,
        51577,
        51583,
        51584,
        51590,
        51591,
        51597,
        51598,
        51604,
        51605,
        51610,
        51611,
        51612,
        51613,
        51618,
        51619,
        51625,
        51626,
        51627,
        51632,
        51633,
        51639,
        51640,
        51646,
        51647,
        51648,
        51653,
        51654,
        51660,
        51661,
        51667,
        51668,
        51674,
        51675,
        51681,
        51682,
        51688,
        51689,
        51695,
        51696,
        51702,
        51703,
        51709,
        51710,
        51716,
        51717,
        51723,
        51724,
        51730,
        51731,
        51737,
        51738,
        51739,
        51744,
        51745,
        51751,
        51752,
        51758,
        51759,
        51765,
        51766,
        51772,
        51773,
        51779,
        51780,
        51786,
        51787,
        51793,
        51794,
        51800,
        51801,
        51807,
        51808,
        51814,
        51815,
        51080,
        51086,
        51087,
        51093,
        51094,
        51100,
        51101,
        51107,
        51108,
        51114,
        51115,
        51121,
        51122,
        51128,
        51129,
        51130,
        51131,
        51135,
        51136,
        51137,
        51142,
        51143,
        51149,
        51150,
        51156,
        51157,
        51163,
        51164,
        51170,
        51171,
        51177,
        51178,
        51184,
        51185,
        51191,
        51192,
        51198,
        51199,
        51205,
        51206,
        51212,
        51213,
        51219,
        51220,
        51225,
        51226,
        51227,
        51228,
        51233,
        51234,
        51240,
        51241,
        51247,
        51248,
        51254,
        51255,
        51261,
        51262,
        51263,
        51268,
        52046,
        52052,
        52053,
        52059,
        52060,
        52066,
        52067,
        52073,
        52074,
        52080,
        52081,
        52087,
        52088,
        52094,
        52095,
        52101,
        52102,
        52103,
        52108,
        52109,
        52115,
        53676,
        53677,
        53683,
        53684,
        53686,
        53687,
        53690,
        53691,
        53693,
        53697,
        53698,
        53704,
        53705,
        53711,
        53712,
        53718,
        53719,
        53725,
        53726,
        53732,
        53733,
        53739,
        53740,
        53746,
        53747,
        53753,
        54853,
        54859,
        54860,
        54866,
        54867,
        54873,
        54874,
        54880,
        54881,
        54886,
        54887,
        54888,
        54889,
        54894,
        54895,
        54901,
        54902,
        54908,
        54909,
        54910,
        54915,
        54916,
        54922,
        54923,
        54929,
        54930,
        54936,
        54937,
        54938,
        54943,
        54944,
        54950,
        54951,
        54957,
        54958,
        54964,
        54965,
        54971,
        54972,
        54978,
        54979,
        54985,
        54986,
        54992,
        54993,
        54999,
        55000,
        55006,
        55007,
        55013,
        55014,
        55020,
        55021,
        55027,
        55028,
        55029,
        55034,
        55035,
        55041,
        55042,
        55048,
        55049,
        55055,
        55056,
        55062,
        55063,
        55069,
        55070,
        55076,
        55077,
        55083,
        55084,
        55090,
        55091,
        55097,
        55098,
        55104,
        55105,
        55111,
        55112,
        55118,
        55119,
        55125,
        55126,
        55132,
        55133,
        55139,
        55140,
        55146,
        55147,
        55148,
        55149,
        55153,
        52116,
        52122,
        52123,
        52129,
        52130,
        52136,
        52137,
        52143,
        52144,
        52150,
        52151,
        52157,
        52158,
        52164,
        52165,
        52171,
        52172,
        52178,
        52179,
        52185,
        52186,
        52192,
        52193,
        52199,
        52200,
        52206,
        52207,
        52213,
        52214,
        52220,
        52221,
        52225,
        52226,
        52227,
        52228,
        52232,
        52234,
        52235,
        52241,
        52242,
        52248,
        52249,
        52255,
        52256,
        52262,
        52263,
        52269,
        52270,
        52276,
        52277,
        52283,
        52284,
        52290,
        52291,
        52297,
        52298,
        52304,
        52305,
        52311,
        52312,
        52317,
        52318,
        52319,
        52320,
        52325,
        52326,
        52332,
        52333,
        52339,
        52340,
        52346,
        52347,
        52353,
        52354,
        52355,
        52360,
        52361,
        52367,
        52368,
        52374,
        52375,
        52376,
        52381,
        51269,
        53754,
        53760,
        53761,
        53767,
        53768,
        53774,
        53775,
        53781,
        53782,
        53788,
        53789,
        53794,
        53795,
        53796,
        53797,
        53802,
        53803,
        53809,
        53810,
        53816,
        53817,
        53818,
        53823,
        53824,
        53830,
        53831,
        53837,
        53838,
        53839,
        53844,
        53845,
        53851,
        53852,
        53858,
        53859,
        53865,
        53866,
        53872,
        52382,
        52388,
        52389,
        52395,
        52396,
        52402,
        52403,
        52409,
        52410,
        52416,
        52417,
        52423,
        52424,
        52430,
        52431,
        52437,
        52438,
        52444,
        52445,
        52451,
        52452,
        52458,
        52459,
        52465,
        52466,
        52472,
        52473,
        52474,
        52479,
        52480,
        52486,
        52487,
        52493,
        52494,
        52500,
        52501,
        52507,
        52508,
        52514,
        52515,
        52521,
        52522,
        52528,
        52529,
        52535,
        52536,
        52542,
        52543,
        52549,
        52550,
        52556,
        52557,
        52563,
        52564,
        52570,
        52571,
        52577,
        52578,
        52584,
        52585,
        52590,
        52591,
        52592,
        52593,
        52597,
        52598,
        52599,
        52605,
        52606,
        52612,
        52613,
        52619,
        52620,
        52626,
        52627,
        52633,
        52634,
        52640,
        52641,
        52647,
        52648,
        52654,
        52655,
        52661,
        52662,
        52668,
        52669,
        52675,
        52676,
        52682,
        52683,
        52689,
        52690,
        52696,
        52697,
        52702,
        52703,
        52704,
        52705,
        52710,
        52711,
        52717,
        52718,
        52719,
        53873,
        53879,
        53880,
        53886,
        53887,
        53893,
        53894,
        53900,
        53901,
        53907,
        53908,
        53914,
        53915,
        53921,
        53922,
        53928,
        53929,
        53930,
        53935,
        53936,
        53942,
        53943,
        53949,
        53950,
        53956,
        53957,
        53963,
        53964,
        53970,
        53971,
        53977,
        53978,
        53984,
        53985,
        53991,
        53992,
        53998,
        53999,
        54005,
        54006,
        54012,
        54013,
        54019,
        54020,
        54026,
        54027,
        54033,
        54034,
        54040,
        54041,
        54047,
        54048,
        54051,
        54052,
        54054,
        54055,
        54058,
        54061,
        54062,
        54068,
        54069,
        54075,
        54076,
        54082,
        54083,
        54089,
        54090,
        54096,
        54097,
        54103,
        54104,
        54110,
        54111,
        54117,
        54118,
        54124,
        54125,
        54131,
        54132,
        54138,
        54139,
        54145,
        54146,
        54151,
        54152,
        54153,
        54154,
        54159,
        54160,
        54166,
        54167,
        54173,
        54174,
        54180,
        54181,
        54182,
        54187,
        54188,
        54194,
        54195,
        54201,
        54202,
        54203,
        54208,
        54209,
        52724,
        52725,
        52731,
        52732,
        52738,
        52739,
        52745,
        52746,
        52747,
        52752,
        52753,
        52759,
        52760,
        52766,
        52767,
        52773,
        52774,
        52780,
        52781,
        52787,
        52788,
        52794,
        52795,
        52801,
        52802,
        52808,
        52809,
        52815,
        52816,
        52822,
        52823,
        52829,
        52830,
        52836,
        52837,
        52838,
        52843,
        52844,
        52850,
        52851,
        52857,
        52858,
        52864,
        52865,
        52871,
        52872,
        52878,
        52879,
        52885,
        52886,
        52892,
        52893,
        52899,
        52900,
        52906,
        52907,
        52913,
        52914,
        52920,
        52921,
        52927,
        52928,
        52934,
        52935,
        52941,
        52942,
        52948,
        52949,
        52955,
        52956,
        52957,
        52958,
        52962,
        52963,
        52964,
        52969,
        52970,
        52976,
        52977,
        52983,
        52984,
        52990,
        52991,
        52997,
        52998,
        53004,
        53005,
        53011,
        53012,
        53018,
        53019,
        53025,
        53026,
        53032,
        53033,
        53039,
        53040,
        53046,
        53047,
        53053,
        53054,
        53059,
        53060,
        53061,
        50561,
        50562,
        50568,
        50569,
        50575,
        50576,
        50582,
        50583,
        50589,
        50590,
        50596,
        50597,
        50603,
        50604,
        50610,
        50611,
        50617,
        50618,
        50624,
        50625,
        50631,
        50632,
        50638,
        50639,
        50645,
        50646,
        50647,
        50652,
        50653,
        50659,
        50660,
        50666,
        50667,
        50673,
        50674,
        50680,
        50681,
        50687,
        50688,
        50694,
        50695,
        50701,
        50702,
        50708,
        50709,
        50715,
        50716,
        50722,
        50723,
        50729,
        50730,
        50736,
        50737,
        50743,
        50744,
        50750,
        50751,
        50757,
        50758,
        50764,
        50765,
        50766,
        50767,
        50771,
        50772,
        50773,
        50778,
        50779,
        50785,
        50786,
        50792,
        50793,
        50799,
        50800,
        50806,
        50807,
        50813,
        50814,
        50820,
        50821,
        50827,
        50828,
        50834,
        50835,
        50841,
        50842,
        50848,
        50849,
        50855,
        50856,
        50862,
        50863,
        50868,
        50869,
        50870,
        50871,
        50876,
        50877,
        50883,
        50884,
        50890,
        50891,
        50892,
        50897,
        54215,
        54216,
        54222,
        54223,
        54229,
        54230,
        54236,
        54237,
        54243,
        54244,
        54250,
        54251,
        54257,
        54258,
        54264,
        54265,
        54271,
        54272,
        54278,
        54279,
        54285,
        54286,
        54292,
        54293,
        54299,
        54300,
        54301,
        54306,
        54307,
        54313,
        54314,
        54320,
        54321,
        54327,
        54328,
        51821,
        51822,
        51828,
        51829,
        51835,
        51836,
        51842,
        51843,
        51849,
        51850,
        51856,
        51857,
        51860,
        51861,
        51863,
        51864,
        51867,
        51870,
        51871,
        51877,
        51878,
        51884,
        51885,
        51891,
        54334,
        51892,
        53062,
        53067,
        53068,
        53074,
        53075,
        53081,
        53082,
        53083,
        53088,
        53089,
        53095,
        53096,
        53102,
        53103,
        53109,
        53110,
        53111,
        53116,
        53117,
        53123,
        53124,
        53130,
        53131,
        53137,
        53138,
        53144,
        53145,
        54335,
        54341,
        54342,
        54348,
        54349,
        54355,
        54356,
        54362,
        54363,
        54369,
        54370,
        54376,
        54377,
        54383,
        54384,
        54390,
        54391,
        54397,
        54398,
        54404,
        54405,
        54411,
        54412,
        54417,
        54418,
        54419,
        54420,
        54424,
        54425,
        54426,
        54432,
        54433,
        54439,
        54440,
        54446,
        54447,
        54453,
        54454,
        54460,
        54461,
        54467,
        54468,
        54474,
        54475,
        54481,
        54482,
        54488,
        54489,
        54495,
        54496,
        54502,
        54503,
        54509,
        54510,
        51275,
        51276,
        51282,
        51283,
        51284,
        51289,
        51290,
        51296,
        51297,
        51303,
        51304,
        51310,
        51311,
        51317,
        51318,
        51324,
        51325,
        51331,
        51332,
        51338,
        51339,
        51345,
        51346,
        51352,
        51353,
        51359,
        51360,
        51366,
        51367,
        51373,
        51374,
        51375,
        51380,
        51381,
        54516,
        53151,
        53152,
        53158,
        53159,
        53165,
        53166,
        53172,
        53173,
        53179,
        53180,
        53186,
        53187,
        53193,
        53194,
        53200,
        53201,
        53202,
        53207,
        53208,
        53214,
        53215,
        53221,
        53222,
        53228,
        53229,
        53235,
        53236,
        53242,
        53243,
        53249,
        53250,
        53256,
        53257,
        53263,
        53264,
        53270,
        53271,
        53277,
        53278,
        53284,
        53285,
        53291,
        53292,
        53298,
        53299,
        54517,
        54523,
        54524,
        54529,
        54530,
        54531,
        54532,
        54537,
        54538,
        54544,
        54545,
        54546,
        54551,
        54552,
        54558,
        54559,
        54565,
        54566,
        54572,
        54573,
        54574,
        54579,
        54580,
        54586,
        54587,
        54593,
        54594,
        54600,
        54601,
        54607,
        54608,
        54614,
        54615,
        54621,
        54622,
        54628,
        54629,
        54635,
        54636,
        54642,
        54643,
        54649,
        54650,
        54656,
        54657,
        54663,
        54664,
        54665,
        54670,
        54671,
        54677,
        54678,
        54684,
        54685,
        54691,
        54692,
        54698,
        54699,
        54705,
        54706,
        54712,
        54713,
        54719,
        54720,
        54726,
        54727,
        54733,
        54734,
        54740,
        54741,
        54747,
        54748,
        54754,
        54755,
        54761,
        54762,
        54768,
        54769,
        54775,
        54776,
        54782,
        54783,
        54784,
        54785,
        54789,
        54790,
        54791,
        54796,
        54797,
        54803,
        54804,
        54810,
        54811,
        54817,
        54818,
        54824,
        54825,
        54831,
        54832,
        54838,
        54839,
        54845,
        54846,
        53305,
        53306,
        53312,
        53313,
        53319,
        53320,
        53321,
        53322,
        53326,
        53327,
        53328,
        53333,
        53334,
        53340,
        53341,
        53347,
        53348,
        53354,
        53355,
        53361,
        53362,
        54852,
        51898,
        51899,
        51905,
        51906,
        51912,
        51913,
        51919,
        51920,
        51926,
        51927,
        51933,
        51934,
        51940,
        51941,
        51947,
        51948,
        51954,
        51955,
        51960,
        51961,
        51962,
        51963,
        51968,
        51969,
        51975,
        51976,
        51982,
        51983,
        51989,
        51990,
        51991,
        51996,
        51997,
        52003,
        52004,
        52010,
        52011,
        52012,
        52017,
        52018,
        52024,
        52025,
        52031,
        52032,
        52038,
        52039,
        52045,
        53368,
        39083,
        39088,
        39089,
        39095,
        39096,
        39102,
        39103,
        39109,
        39110,
        39116,
        39117,
        39123,
        39124,
        39130,
        39131,
        39137,
        39138,
        39144,
        39145,
        39151,
        39152,
        39158,
        39159,
        39165,
        39166,
        39172,
        39173,
        39178,
        39179,
        39180,
        39181,
        39186,
        39187,
        39193,
        39194,
        39200,
        39201,
        39207,
        39208,
        39209,
        39214,
        39215,
        39221,
        39222,
        39228,
        39229,
        39230,
        39235,
        39236,
        39242,
        39243,
        39249,
        39250,
        39256,
        39257,
        39263,
        39264,
        39270,
        39271,
        39277,
        39278,
        39284,
        39285,
        39291,
        39292,
        39298,
        39299,
        39305,
        39306,
        39312,
        39313,
        39319,
        39320,
        39321,
        39326,
        39327,
        39333,
        39334,
        39340,
        39341,
        39347,
        39348,
        39354,
        39355,
        39361,
        39362,
        39368,
        39369,
        39375,
        39376]
    }
  },
  "CALENDAR.LNB": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "CALENDAR.LNB",
      "OBJECT" : "SETTINGS",
      "TYPE" : "CALENDAR",
      "CODE" : "LNB",
      "SUNDAY" : true,
      "MONDAY" : true,
      "TUESDAY" : true,
      "WEDNESDAY" : true,
      "THURSDAY" : true,
      "FRIDAY" : true,
      "SATURDAY" : true,
      "DATES" : "CALENDAR.LNB.DATA"
    }
  },
  "MDE.CURVE.ARR.PARAMETERS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Currency","IR Index","IR Index Tenor","Quote Type","Fixings","Interpolation Method","Interpolation Variable","Basis","Cash Convention Short","Swap Convention Short","Swap Convention","Futures Cutoff Tenor"],
      "TYPE" : ["Currency","String","String","String","ID","String","String","Basis","ID","ID","ID","Tenor"],
      "REQUIRED" : [true,false,false,false,false,false,false,false,false,false,false,false],
      "DEFAULT" : [null,null,null,"MID",
        ">Numerix::RateFixingsID(Currency, IRIndex, IRIndexTenor)",    "LogLInear","DF","ACT/360",
        ">Numerix::CashConventionID(Currency, IRIndex, IRIndexTenor)",    
        ">Numerix::SwapConventionID(Currency, IRIndex, IRIndexTenor,\" SHORT\")",    
        "> Numerix::SwapConventionID(Currency, IRIndex, IRIndexTenor)",    null],
      "GROUPING" : [null,null,null,null,null,null,null,null,null,null,null,null],
      "DESCRIPTION" : ["The underlying currency","Indicate the underlying IR index","Indicate the underlying IR index tenor","Indicate the Quote types used. May be Mid, Bid or Ask","The ID of historical fixings for the underlying IR index","Indicate interpolation method. Possible inputs: BiCubicSpline, Cubic, Bilinear, Linear, Flat Left, FlatRight, LogCubic, LogShapePreservingSpline, ShapePreservingSpline, LogLinear,MontoneConvex, MinimalistQuadratic ","Indicate interpolation variable. Possible inputs: ContinuousRate, DF, LogDF, PowerDF(only for Linear), SP, LogSP, Vol, VolSquareT, VolRootT, Continious Spread","Day-count basis convention for interpolation. Default is set to ACT/360","Cash Convention","Swap Convention Short","Swap Convention ",null]
    }
  },
  "MDE.CURVE.ARR.RESULTS": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name","Curve","MDE Output"],
      "TYPE" : ["String","Table()","Table()"],
      "REQUIRED" : [false,false,true],
      "ID" : [null,null,null],
      "HEADER" : [null,null,null],
      "VALUE" : [
        ">displayname",    
        ">NxStd::CurveInformation(ImplementedObject)",    ">info"],
      "CURRENCY" : [null,null,null],
      "CATEGORY" : [null,null,null],
      "DESCRIPTION" : [null,null,"Returns discount factors"],
      "PRI" : [null,null,null]
    }
  },
  "MDE.CURVE.ARR.CLASSPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Display Name","MDE Type","Asset Class"],
      "TYPE" : ["String","String","String"],
      "VALUE" : ["Alternative Reference Rate (ARR) Curve","Yield Curve","CURVE"]
    }
  },
  "MDE.CURVE.ARR.INSTANCEPROPERTIES": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Quote Patterns","Underlying Assets"],
      "TYPE" : ["String","String"],
      "VALUE" : [
        ">#\"IR.P(Currency)-P(IRIndex).CASH-<Maturity>.<QUOTETYPE>, IR.P(Currency)-P(IRIndex).CASH-1D.<QuoteType>,  IR.P(Currency)-P(IRIndex)-P(IRIndexTenor).SWAP-<MATURITY>.<QUOTETYPE>, IR.P(Currency)-P(IRIndex)-P(IRIndexTenor).DF-<DATE>.<QUOTETYPE>, IR.P(Currency)-LIBOR-3M/P(Currency)-P(IRIndex)-P(IRIndexTenor).BASIS-<MATURITY>.<QUOTETYPE>, IR.P(Currency)-P(IRIndex)-P(IRIndexTenor).<EXCHANGE>-<FUTURESTYPE>.FUTURE-<MATURITY>.PRICE.<QUOTETYPE>\"",    
        ">Numerix::IRUnderlyingAsset(Currency)"]
    }
  },
  "MDE.CURVE.ARR.SCRIPT.NXSL": {
    "TYPE" : "DATA",
    "TABLE" : {
      "SCRIPT DEFINITIONS" : [
        "//================================================================================",
        "// Includes",
        "//================================================================================",
        null,
        "import \"script.nxstd\"",
        "import \"script.nxmarket\"",
        null,
        "//================================================================================",
        "// Main function",
        "//================================================================================",
        null,
        "function main",
        "{",
        "    yc = Numerix::Object({\"yc\", \"market data\", \"yield\"}) & ",
        "    {",
        "        \"currency\"              : Currency,",
        "        \"interpmethod\"          : InterpolationMethod,",
        "        \"interpvariable\"        : InterpolationVariable ",
        "    }",
        null,
        "    query = #\"NAME=IR.P(Currency)-P(IRIndex)-P(IRIndexTenor).DF-<DATE:DATE>.P(QuoteType),VALUE=<DF:DOUBLE>\"",
        "    dftable = NxStd::Query(query, \"DATE,DF\")",
        null,
        "    if dftable :",
        "        yc &= ",
        "        {",
        "            \"basis\"             : Basis,",
        "            \"data\"              : dftable ",
        "        }",
        "    else :",
        "        yc &= ",
        "        {",
        "            \"basis\"             : Basis,",
        "            \"instruments\"       : collection,",
        "            \"nowdate\"           : Numerix::MarketDate ",
        "        }",
        null,
        "    Numerix::Export(\"dftable\", dftable)",
        null,
        "    id = yc.Create",
        "    return id",
        "}",
        null,
        "//=============================================================================",
        "// Functions",
        "//=============================================================================",
        null,
        "constfunction collection",
        "{",
        "    coll = Numerix::Object({\"collection\", \"instrument collection\", \"components\"}) & ",
        "    {",
        "        \"currency\"    : Currency,",
        "        \"instruments\" : cashshort,",
        "        \"instruments\" : cashshortd,",
        "        \"instruments\" : ais,",
        "        \"instruments\" : avgfut,",
        "        \"instruments\" : cmpfut,",
        "        \"instruments\" : swap ",
        "    }",
        null,
        "    id = coll.Create",
        "    return id",
        "}",
        null,
        "constfunction cashshort",
        "{",
        "    query = #\"NAME=IR.P(Currency)-P(IRIndex).CASH-ON.P(QuoteType)\"",
        "    results = NxStd::Query(query, \"NAME\")",
        null,
        "    ifnot results :",
        "        return \"\"",
        null,
        "    result = NxStd::Instruments(\"cash.on\", \"cash deposit\", Currency, CashConventionShort) + ",
        "    {",
        "        \"priority\"   : 1,",
        "        \"maturity\"   : \"1BD\",",
        "        \"endofmonth\" : false,",
        "        \"interval\"   : \"0BD\",",
        "        \"start\"      : Numerix::MarketDate,",
        "        \"couponrate\" : results.Name ",
        "    }",
        null,
        "    id = Numerix::GenerateFromMarketDataQuotesQuery(result)",
        "    return id",
        "}",
        null,
        "constfunction cashshortd",
        "{",
        "    query = #\"NAME=IR.P(Currency)-P(IRIndex).CASH-1D.P(QuoteType)\"",
        "    results = NxStd::Query(query, \"NAME\")",
        null,
        "    ifnot results :",
        "        return \"\"",
        null,
        "    result = NxStd::Instruments(\"cash.d\", \"cash deposit\", Currency, CashConventionShort) + ",
        "    {",
        "        \"priority\"   : 1,",
        "        \"maturity\"   : \"1BD\",",
        "        \"endofmonth\" : false,",
        "        \"interval\"   : \"0BD\",",
        "        \"start\"      : Numerix::MarketDate,",
        "        \"couponrate\" : results.Name ",
        "    }",
        null,
        "    id = Numerix::GenerateFromMarketDataQuotesQuery(result)",
        "    return id",
        "}",
        null,
        "constfunction swap",
        "{",
        "    query = #\"NAME=IR.P(Currency)-P(IRIndex)-P(IRIndexTenor).SWAP-<MATURITY>.P(QuoteType)\"",
        "    results = NxStd::Query(query, \"NAME,MATURITY\")",
        null,
        "    ifnot results :",
        "        return \"\"",
        null,
        "    maturity_list = results.Maturity",
        "    name_list = results.Name",
        "    maturity_size = if maturity_list is \"LIST\" ? maturity_list.Size : 1",
        "    filtered_m_list = {}",
        "    filtered_n_list = {}",
        "    //filter out the meeting date swaps",
        "    for i = 1 to maturity_size",
        "    {",
        "        ifnot maturity_list[i].Find(\"MD\"): ifnot maturity_list[i].Find(\"ON\"): ifnot maturity_list[i].Find(\"TN\"): ifnot maturity_list[i].Find(\"SN\")",
        "        {",
        "            filtered_m_list @=maturity_list[i]",
        "            filtered_n_list @=name_list[i]",
        "        }",
        "    }",
        null,
        "    if filtered_m_list :",
        "        results = Numerix::Table(\"ois swap table\",{\"NAME\",\"MATURITY\"},{filtered_n_list,filtered_m_list}).Create",
        "    else :",
        "        return \"\"",
        null,
        null,
        "    convention = tenorcompare1(Numerix::MarketDate, results.Maturity, \"13M\")",
        null,
        "    result = NxStd::Instruments(\"oisswap.\" + results.Maturity, \"compound index swap\", Currency, convention) + ",
        "    {",
        "        \"priority\"  : if FuturesCutoffTenor ? tenorcompare2(Numerix::MarketDate, results.Maturity, FuturesCutoffTenor, 999, 3) : 3,",
        "        \"maturity\"  : results.Maturity,",
        "        \"fixedrate\" : results.Name,",
        "        \"interval\"  : \"1D\",",
        "        \"fixings\"   : Fixings",
        "    }",
        null,
        "    id = Numerix::GenerateFromMarketDataQuotesQuery(result)",
        "    return id       ",
        "}",
        null,
        "//=============================================================================",
        null,
        "constfunction ais",
        "{",
        "    query = #\"NAME=IR.P(Currency)-LIBOR-3M/P(Currency)-P(IRIndex)-P(IRIndexTenor).BASIS-<MATURITY>.P(QuoteType)\"",
        "    results = NxStd::Query(query, \"NAME,MATURITY\")",
        null,
        "    ifnot results :",
        "        return \"\"",
        null,
        "    convention = Numerix::SwapConventionID(Currency, IRIndex, IRIndexTenor, \"SYNTHETIC\")",
        null,
        "    result = NxStd::Instruments(\"SWAPSYNTHETIC.\" + results.Maturity, \"average index swap\", Currency, convention) + ",
        "    {",
        "        \"priority\"           : 2,",
        "        \"maturity\"           : results.Maturity,",
        "        \"fixedrate\"          : \"IR.\" + Currency + \"-LIBOR-3M.SWAP-\" +  results.Maturity + \".\" + QuoteType,",
        "        \"float rate spread\"  : results.Name,",
        "        \"interval\"           : \"1M\",",
        "        \"fixings\"            : Fixings",
        "    }",
        null,
        "    id = Numerix::GenerateFromMarketDataQuotesQuery(result)",
        "    return id",
        "}",
        null,
        "//=============================================================================",
        "constfunction avgfut",
        "{",
        "    ticker =\"\"",
        "    if Currency ==#\"USD\" :",
        "        ticker =\"SR1\"",
        "    if Currency ==#\"GBP\" :",
        "        ticker = \"SOA\"",
        null,
        "    query = #\"NAME=IR.P(Currency)-P(IRIndex)-P(IRIndexTenor).<EXCHANGE>-\"+ticker +\".STIR-FUT.<MATURITY>.PRICE.\"+QuoteType",
        "    results = NxStd::Query(query, \"NAME,EXCHANGE,MATURITY\")",
        null,
        "    ifnot results :",
        "        return \"\"",
        null,
        "    convention = Numerix::OvernightFuturesConventionID(Currency, IRIndex, irindextenor, results.Exchange, ticker,\"AVG\")",
        null,
        "    result = NxStd::Instruments(\"avgovernightfuture.\" + results.Maturity, \"average overnight futures\", Currency, convention) + ",
        "    {",
        "        \"priority\"      : 1,",
        "        \"ticker\"        : ticker,",
        "        \"maturity\"      : results.Maturity,",
        "        \"quoteprice\"    : results.Name,",
        "        \"fixings\"       : Fixings,",
        "        \"exchange\"      : results.Exchange ",
        "    }",
        null,
        "    id = Numerix::GenerateFromMarketDataQuotesQuery(result)",
        "    return id",
        "}",
        null,
        "constfunction cmpfut",
        "{",
        null,
        "    ticker = \"\"",
        null,
        "    if Currency ==#\"USD\" :",
        "        ticker =\"SR3\"",
        "    if Currency ==\"GBP\" :",
        "        ticker =\"SO3\"",
        null,
        "    query = #\"NAME=IR.P(Currency)-P(IRIndex)-P(IRIndexTenor).<EXCHANGE>-\"+ticker+\".STIR-FUT.<MATURITY>.PRICE.\"+QuoteType",
        "    results = NxStd::Query(query, \"NAME,EXCHANGE,MATURITY\")",
        null,
        "    ifnot results :",
        "        return \"\"",
        null,
        "    convention = Numerix::OvernightFuturesConventionID(Currency, IRIndex, irindextenor, results.Exchange, ticker,\"COMP\")",
        null,
        "    result = NxStd::Instruments(\"cmpovernightfuture.\" + results.Maturity, \"compound overnight futures\", Currency, convention) + ",
        "    {",
        "        \"priority\"      : 1,",
        "        \"contract code\" : results.Maturity,",
        "        \"fixings\"       : Fixings,",
        "        \"quoteprice\"    : results.Name",
        "    }",
        null,
        "    id = Numerix::GenerateFromMarketDataQuotesQuery(result)",
        "    return id    ",
        null,
        "}",
        null,
        "//=============================================================================",
        "// Utility functions",
        "//=============================================================================",
        null,
        "constfunction tenorcompare1(date, list, tenor)",
        "{",
        "    result = {}",
        "    conv_short = SwapConvention",
        "    if Numerix::TryResolve(SwapConventionShort):",
        "        conv_short = SwapConventionShort",
        "    foreach item in list :",
        "        if NxStd::TenorLT(date, item, tenor) :",
        "            result &= conv_short",
        "        else :",
        "            result &= SwapConvention",
        null,
        "    return result",
        "}",
        null,
        "constfunction tenorcompare2(date, list, tenor, a, b)",
        "{",
        "    ret = {}",
        "    foreach item in list :",
        "        if NxStd::TenorLT(date, item, tenor) :",
        "            ret &= a",
        "        elseif NxStd::TenorEQ(date, item, tenor) :",
        "            ret &= a",
        "        else :",
        "            ret &= b",
        null,
        "    return ret",
        "}",
        null,
        "constfunction info",
        "{",
        "    settingheaders = {\"Interpolation Method\", \"Interpolation Variable\", \"Basis\"}",
        "    settingvalues = {InterpolationMethod, InterpolationVariable, Basis}",
        null,
        "    if dftable.Rows :",
        "        result = Numerix::Table(\"CurveInfo_Table\", {\"DATE\", \"DISCOUNTFACTOR\", \"SETTINGHEADERS\", \"SETTINGVALUES\"}, {ImplementedObject.DateOutput, ImplementedObject.DiscountFactorOutput, settingheaders, settingvalues})",
        "    else :",
        "        result = Numerix::Table(\"CurveInfo_Table\", {\"KEY\", \"DATE\", \"DISCOUNTFACTOR\", \"SETTINGHEADERS\", \"SETTINGVALUES\"}, {ImplementedObject.NameOutput, ImplementedObject.DateOutput, ImplementedObject.DiscountFactorOutput, settingheaders, settingvalues})",
        null,
        "    return result.Create",
        "}",
        null,
        "constfunction displayname",
        "{",
        "    return #\"IR.\" + Currency + \"-\" + IRIndex + \"-\" + IRIndexTenor + \".ARR.\" + QuoteType",
        "}"]
    }
  },
  "MDE.CURVE.ARR": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "MDE.CURVE.ARR",
      "OBJECT" : "SCRIPT",
      "TYPE" : "DEFINITION",
      "PARAMETERS" : "MDE.CURVE.ARR.PARAMETERS",
      "RESULTS" : "MDE.CURVE.ARR.RESULTS",
      "CLASSPROPERTIES" : "MDE.CURVE.ARR.CLASSPROPERTIES",
      "INSTANCEPROPERTIES" : "MDE.CURVE.ARR.INSTANCEPROPERTIES",
      "IMPLEMENTS" : ">main",
      "SCRIPT" : "MDE.CURVE.ARR.SCRIPT.NXSL"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^_13313_NX_AUTOGEN": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "NAME" : ["CURRENCY","IRINDEX","QUOTETYPE","INTERPOLATIONMETHOD","INTERPOLATIONVARIABLE","IRINDEXTENOR","BASIS"],
      "VALUE" : ["USD","SOFR","MID","Linear","Continuous Rate","ON","ACT/360"]
    }
  },
  "CONV.IR.USD-SOFR-ON.CASH.DATA": {
    "TYPE" : "DATA",
    "TABLE" : {
      "NAME" : ["Currency","SpotStRategy","Basis","Start","End","EndOfMonth","AccrualConvention","AccrualCalendar","PayConvention","PayCalendar"],
      "VALUE" : ["USD","IR.SPOT-STRATEGY.USD-SOFR.T+0","ACT/360","0D","1BD",false,"F","NYX","MF","NYX"]
    }
  },
  "CONV.IR.USD-SOFR-ON.CASH": {
    "TYPE" : "CALL",
    "INPUTS" : {
      "ID" : "CONV.IR.USD-SOFR-ON.CASH",
      "OBJECT" : "SETTINGS",
      "TYPE" : "CONVENTION",
      "DEFAULTVALUES" : "CONV.IR.USD-SOFR-ON.CASH.DATA"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-SOFR-ON.DATA": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "DATE" : [43950,43951,43952,43953,43954,43955,43956,43957,43958,43959,43960,43961,43962,43963,43964,43965,43966,43967,43968,43969,43970,43971,43972,43973,43974,43975,43976,43977,43978,43979,43980,43981,43982,43983,43984,43985,43986,43987,43988,43989,43990,43991,43992,43993,43994,43995,43996,43997,43998,43999,44000,44001,44002,44003,44004,44005,44006,44007,44008,44009,44010,44011,44012,44013,44014,44015,44016,44017,44018,44019,44020,44021,44022,44023,44024,44025,44026,44027,44028,44029,44030,44031,44032,44033,44034,44035,44036,44037,44038,44039,44040,44041,44042,44043,44044,44045,44046,44047,44048,44049,44050,44051,44052,44053,44054,44055,44056,44057,44058,44059,44060,44061,44062,44063,44064,44065,44066,44067,44068,44069,44070,44071,44072,44073,44074,44075,44076,44077,44078,44079,44080,44081,44082,44083,44084,44085,44086,44087,44088,44089,44090,44091,44092,44093,44094,44095,44096,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44107,44108,44109,44110,44111,44112,44113,44114,44115,44116,44117,44118,44119,44120,44121,44122,44123,44124,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44144,44145,44146,44147,44148,44149,44150,44151,44152,44153,44154,44155,44156,44157,44158,44159,44160,44161,44162,44163,44164,44165,44166,44167,44168,44169,44170,44171,44172,44173,44174,44175,44176,44177,44178,44179,44180,44181,44182,44183,44184,44185,44186,44187,44188,44189,44190,44191,44192,44193,44194,44195,44196,44197,44198,44199,44200,44201,44202,44203,44204,44205,44206,44207,44208,44209,44210,44211,44212,44213,44214,44215,44216,44217,44218,44219,44220,44221,44222,44223,44224,44225,44226,44227,44228,44229,44230,44231,44232,44233,44234,44235,44236,44237,44238,44239,44240,44241,44242,44243,44244,44245,44246,44247,44248,44249,44250,44251,44252,44253,44254,44255,44256,44257,44258,44259,44260,44261,44262,44263,44264,44265,44266,44267,44268,44269,44270,44271,44272,44273,44274,44275,44276,44277,44278,44279,44280,44281,44282,44283,44284,44285,44286,44287,44288,44289,44290,44291,44292,44293,44294,44295,44296,44297,44298,44299,44300,44301,44302,44303,44304,44305,44306,44307,44308,44309,44310,44311,44312,44313,44314,44315,44316,44317,44318,44319,44320,44321,44322,44323,44324,44325,44326,44327,44328,44329,44330,44331,44332,44333,44334,44335,44336,44337,44338,44339,44340,44341,44342,44343,44344,44345,44346,44347,44348,44349,44350,44351,44352,44353,44354,44355,44356,44357,44358,44359,44360,44361,44362,44363,44364,44365,44366,44367,44368,44369,44370,44371,44372,44373,44374,44375,44376,44377,44378,44379,44380,44381,44382,44383,44384,44385,44386,44387,44388,44389,44390,44391,44392,44393,44394,44395,44396,44397,44398,44399,44400,44401,44402,44403,44404,44405,44406,44407,44408,44409,44410,44411,44412,44413,44414,44415,44416,44417,44418,44419,44420,44421,44422,44423,44424,44425,44426,44427,44428,44429,44430,44431,44432,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44444,44445,44446,44447,44448,44449,44450,44451,44452,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44473,44501,44502,44503,44504,44505,44508,44509,44510,44512,44515,44516,44517,44518,44519,44522,44523,44524,44526,44529,44530,44531,44532,44533,44536,44537,44538,44539,44540,44543,44544,44545,44546,44547,44550,44551,44552,44553,44557,44558,44559,44560,44561,44564,44565,44566,44567,44568,44571,44572,44573,44574,44575,44579,44580,44581,44582,44585,44586,44587,44588,44589,44592,44593,44594,44595,44596,44599,44600,44601,44602,44603,44606,44607,44608,44609,44610,44614,44615,44616,44617,44620,44621,44622,44623,44624,44627,44628,44629,44630,44631,44634,44635,44636,44637,44638,44641,44642,44643,44644,44645,44648,44649,44650,44651,44652,44655,44656,44657,44658,44659,44662,44663,44664,44665,44669,44670,44671,44672,44673,44676,44677,44678,44679,44680,44683,44684,44685,44686,44687,44690,44691,44692,44693,44694,44697,44698,44699,44700,44701,44704,44705,44706,44707,44708,44712,44713,44714,44715,44718,44719,44720,44721,44722,44725,44726,44727,44728,44729,44733,44734,44735,44736,44739,44740,44741,44742,44743,44747,44748,44749,44750,44753,44754,44755,44756,44757,44760,44761,44762,44763,44764,44767,44768,44769,44770,44771,44774,44775,44776,44777,44778,44781,44782,44783,44784,44785,44788,44789,44790,44791,44792,44795,44796,44797,44798,44799,44802,44803,44804,44805,44806,44810,44811,44812,44813,44816,44817,44818,44819,44820,44823,44824,44825,44826,44827,44830,44831,44832,44833,44834,44837,44838,44839,44840,44841,44845,44846,44847,44848,44851,44852,44853,44854,44855,44858,44859,44860,44861,44862,44865,44866,44867,44868,44869,44872,44873,44874,44875,44879,44880,44881,44882,44883,44886,44887,44888,44890,44893,44894,44895,44896,44897,44900,44901,44902,44903,44904,44907,44908,44909,44910,44911,44914,44915,44916,44917,44918,44922,44923,44924,44925,44929,44930,44931,44932,44935,44936,44937,44938,44939,44943,44944,44945,44946,44949,44950,44951,44952,44953,44956,44957,44958,44959,44960,44963,44964,44965,44966,44967,44970,44971,44972,44973,44974,44978,44979,44980,44981,44984,44985,44986,44987,44988,44991,44992,44993,44994,44995,44998,44999,45000,45001,45002,45005,45006,45007,45008,45009,45012,45013,45014,45015,45016,45019,45020,45021,45022,45026,45027,45028,45029,45030,45033,45034,45035,45036,45037,45040,45041,45042,45043,45044,45047,45048,45049,45050,45051,45054,45055,45056,45057,45058,45059,45060,45061,45062,45063,45064,45065,45066,45067,45068,45069,45070,45071,45072,45073,45074,45075,45076,45077,45078,45079,45080,45081,45082,45083,45084,45085,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45096,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45124,45125,45126,45127,45128,45129,45130,45131,45132,45133,45134,45135,45136,45137,45138,45139,45140,45141,45142,45143,45144,45145,45146,45147,45148,45149,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45180,45181,45182,45183,45184,45185,45186,45187,45188,45189,45190,45191,45192,45193,45194,45195,45196,45197,45198,45199,45200,45201,45202,45203,45204,45205,45206,45207,45208,45209,45210,45211,45212,45213,45214,45215,45216],
      "VALUE" : [0.000100000000000000005,0.000400000000000000019,0.000299999999999999974,0.000299999999999999974,0.000299999999999999974,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.000599999999999999947,0.000599999999999999947,0.000599999999999999947,0.000599999999999999947,0.000599999999999999947,0.000400000000000000019,0.00020000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.000400000000000000019,0.000400000000000000019,0.000100000000000000005,0.00020000000000000001,0.000400000000000000019,0.000400000000000000019,0.000400000000000000019,0.000400000000000000019,0.000599999999999999947,0.000599999999999999947,0.000599999999999999947,0.000599999999999999947,0.000599999999999999947,0.000599999999999999947,0.000599999999999999947,0.000699999999999999993,0.000599999999999999947,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.000800000000000000038,0.000699999999999999993,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000800000000000000038,0.000699999999999999993,0.000800000000000000038,0.000899999999999999975,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.00100000000000000002,0.00110000000000000007,0.00110000000000000007,0.00110000000000000007,0.00110000000000000007,0.00110000000000000007,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00110000000000000007,0.00129999999999999994,0.00119999999999999989,0.00119999999999999989,0.00119999999999999989,0.00119999999999999989,0.00119999999999999989,0.00110000000000000007,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.000899999999999999975,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.00100000000000000002,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.00100000000000000002,0.000899999999999999975,0.000899999999999999975,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.000800000000000000038,0.000800000000000000038,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.00100000000000000002,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000800000000000000038,0.000699999999999999993,0.000599999999999999947,0.000699999999999999993,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000699999999999999993,0.000800000000000000038,0.000800000000000000038,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.000899999999999999975,0.00100000000000000002,0.000899999999999999975,0.000800000000000000038,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.00100000000000000002,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000800000000000000038,0.000699999999999999993,0.000699999999999999993,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000899999999999999975,0.000899999999999999975,0.000800000000000000038,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.00110000000000000007,0.00100000000000000002,0.00100000000000000002,0.00110000000000000007,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.00100000000000000002,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.00100000000000000002,0.000899999999999999975,0.000699999999999999993,0.000599999999999999947,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.000699999999999999993,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000899999999999999975,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000800000000000000038,0.000699999999999999993,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000699999999999999993,0.000599999999999999947,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000899999999999999975,0.00100000000000000002,0.000899999999999999975,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.00100000000000000002,0.00110000000000000007,0.00100000000000000002,0.00100000000000000002,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000899999999999999975,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000800000000000000038,0.000699999999999999993,0.000599999999999999947,0.000400000000000000019,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.000599999999999999947,0.000299999999999999974,0.000299999999999999974,0.000400000000000000019,0.000599999999999999947,0.000599999999999999947,0.000599999999999999947,0.000699999999999999993,0.000699999999999999993,0.000699999999999999993,0.00050000000000000001,0.00020000000000000001,0.00020000000000000001,0.00020000000000000001,0.00020000000000000001,0.00050000000000000001,0.000599999999999999947,0.000599999999999999947,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.000599999999999999947,0.000599999999999999947,0.000299999999999999974,0.00020000000000000001,0.00020000000000000001,0.00020000000000000001,0.000299999999999999974,0.000100000000000000005,0.00020000000000000001,0.000299999999999999974,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.00020000000000000001,0.000400000000000000019,0.000400000000000000019,0.00020000000000000001,0.00020000000000000001,0.00020000000000000001,0.00020000000000000001,0.00020000000000000001,0.00020000000000000001,0.00020000000000000001,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.000100000000000000005,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.000400000000000000019,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.000400000000000000019,0.00050000000000000001,0.000400000000000000019,0.00050000000000000001,0.000400000000000000019,0.000400000000000000019,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.000400000000000000019,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00050000000000000001,0.00300000000000000006,0.00300000000000000006,0.0028999999999999998,0.00279999999999999997,0.00270000000000000014,0.00270000000000000014,0.00279999999999999997,0.00279999999999999997,0.00279999999999999997,0.00270000000000000014,0.0028999999999999998,0.00300000000000000006,0.00300000000000000006,0.00300000000000000006,0.00300000000000000006,0.00300000000000000006,0.00300000000000000006,0.00300000000000000006,0.0028999999999999998,0.0028999999999999998,0.0028999999999999998,0.0028999999999999998,0.00279999999999999997,0.00270000000000000014,0.00259999999999999988,0.00270000000000000014,0.00270000000000000014,0.00270000000000000014,0.00279999999999999997,0.00279999999999999997,0.00279999999999999997,0.00300000000000000006,0.00300000000000000006,0.00300000000000000006,0.00790000000000000077,0.00779999999999999964,0.00779999999999999964,0.00779999999999999964,0.00779999999999999964,0.00790000000000000077,0.00790000000000000077,0.00800000000000000017,0.00800000000000000017,0.00790000000000000077,0.00790000000000000077,0.00779999999999999964,0.00779999999999999964,0.00779999999999999964,0.00779999999999999964,0.00779999999999999964,0.00779999999999999964,0.00790000000000000077,0.00800000000000000017,0.00790000000000000077,0.00779999999999999964,0.00779999999999999964,0.00770000000000000025,0.00759999999999999998,0.00749999999999999972,0.00749999999999999972,0.00730000000000000007,0.00689999999999999988,0.00700000000000000015,0.0145000000000000007,0.0145000000000000007,0.0145000000000000007,0.0145000000000000007,0.0143999999999999996,0.0146000000000000001,0.0149999999999999994,0.0152,0.0151000000000000006,0.0149999999999999994,0.0152,0.0154000000000000005,0.0154000000000000005,0.0154000000000000005,0.0152999999999999994,0.0152999999999999994,0.0154000000000000005,0.0152999999999999994,0.0152999999999999994,0.0154000000000000005,0.0154000000000000005,0.0154000000000000005,0.0152999999999999994,0.0152999999999999994,0.0152,0.0152999999999999994,0.0152999999999999994,0.0152999999999999994,0.0228000000000000008,0.0227000000000000014,0.0228000000000000008,0.0229999999999999996,0.0229000000000000002,0.0229000000000000002,0.0228000000000000008,0.0228000000000000008,0.0229000000000000002,0.0228000000000000008,0.0228000000000000008,0.0228000000000000008,0.0229000000000000002,0.0229000000000000002,0.0229000000000000002,0.0228000000000000008,0.0228000000000000008,0.0228000000000000008,0.0227000000000000014,0.0227000000000000014,0.0228000000000000008,0.0228000000000000008,0.0228000000000000008,0.0229000000000000002,0.0229000000000000002,0.0229000000000000002,0.0229000000000000002,0.0229000000000000002,0.0228000000000000008,0.0228000000000000008,0.0228000000000000008,0.0228000000000000008,0.0228000000000000008,0.0227000000000000014,0.0228000000000000008,0.0227000000000000014,0.0227000000000000014,0.0225999999999999986,0.0224999999999999992,0.0298999999999999995,0.0298999999999999995,0.0298999999999999995,0.0298000000000000001,0.0298000000000000001,0.0296000000000000013,0.0298000000000000001,0.0299999999999999989,0.0303999999999999999,0.0303999999999999999,0.0304999999999999993,0.0304999999999999993,0.0304999999999999993,0.0303999999999999999,0.0303999999999999999,0.0303999999999999999,0.0304999999999999993,0.0303999999999999999,0.0303999999999999999,0.0303000000000000005,0.0302000000000000011,0.0300999999999999983,0.0302000000000000011,0.0303000000000000005,0.0303999999999999999,0.0304999999999999993,0.0304999999999999993,0.0304999999999999993,0.0304999999999999993,0.0379999999999999991,0.0379999999999999991,0.0378000000000000003,0.0378000000000000003,0.0378000000000000003,0.0378000000000000003,0.0379000000000000031,0.0379999999999999991,0.0381000000000000019,0.0379999999999999991,0.0379999999999999991,0.0379999999999999991,0.0379999999999999991,0.0379000000000000031,0.0379999999999999991,0.0379999999999999991,0.0381000000000000019,0.0381999999999999978,0.0381999999999999978,0.0381000000000000019,0.0381000000000000019,0.0379999999999999991,0.0379999999999999991,0.0379999999999999991,0.0379999999999999991,0.0379999999999999991,0.0379999999999999991,0.0379999999999999991,0.0432000000000000023,0.0432000000000000023,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0430999999999999994,0.0429999999999999966,0.0430999999999999994,0.0430999999999999994,0.0430999999999999994,0.0430999999999999994,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0430999999999999994,0.0429999999999999966,0.0430999999999999994,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0430999999999999994,0.0429999999999999966,0.0429999999999999966,0.0429999999999999966,0.0430999999999999994,0.0430999999999999994,0.0456000000000000016,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0458000000000000004,0.0456999999999999976,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.0454999999999999988,0.048000000000000001,0.048000000000000001,0.0480999999999999969,0.0483999999999999986,0.0483000000000000027,0.0481999999999999998,0.0487000000000000002,0.0483999999999999986,0.0483000000000000027,0.0480999999999999969,0.0480999999999999969,0.0480999999999999969,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.048000000000000001,0.0480999999999999969,0.0480999999999999969,0.0480999999999999969,0.0480999999999999969,0.0480999999999999969,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505000000000000032,0.0505000000000000032,0.0505999999999999991,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0507999999999999979,0.0507999999999999979,0.0507999999999999979,0.0507999999999999979,0.050700000000000002,0.0505999999999999991,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505999999999999991,0.0505999999999999991,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0509000000000000008,0.0509000000000000008,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505999999999999991,0.0505000000000000032,0.0505999999999999991,0.0505999999999999991,0.0505000000000000032,0.0505000000000000032,0.0505000000000000032,0.0505999999999999991,0.0505000000000000032,0.0505000000000000032,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0505999999999999991,0.0531000000000000014,0.0529999999999999985,0.0531000000000000014,0.0531000000000000014,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0531000000000000014,0.0531000000000000014,0.0531000000000000014,0.0531000000000000014,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0531000000000000014,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0531000000000000014,0.0531000000000000014,0.0531000000000000014,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0529999999999999985,0.0531000000000000014,0.0531000000000000014,0.0531999999999999973,0.0531999999999999973,0.0531999999999999973,0.0531000000000000014,0.0531000000000000014,0.0531999999999999973,0.0533000000000000002,0.0531999999999999973,0.0531999999999999973,0.0531999999999999973,0.0531999999999999973,0.0531999999999999973,0.0531000000000000014,0.0531000000000000014,0.0531000000000000014,0.0531000000000000014,0.0531000000000000014,0.0531000000000000014,0.0531000000000000014]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-SOFR-ON": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "MARKET DATA",
      "TYPE" : "FIXINGS",
      "ID" : "FIXINGS.USD-SOFR-ON",
      "FIXINGS" : "FIXINGS.USD-SOFR-ON.DATA",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "INTERP METHOD" : "Flat Right"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^IR.USD-SOFR-ON.ARR.MID": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "IR.USD-SOFR-ON.ARR.MID",
      "DEFINITION" : "MDE.CURVE.ARR",
      "INSTANTIATION TYPE" : "MDE",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "REQUESTOUTPUT" : "NONE",
      "INPUTS" : "_13313_NX_AUTOGEN"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-CIS-10Y.DATA": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "DATE" : [44501,44502,44503,44504,44505,44508,44509,44510,44511,44512,44515,44516,44517,44518,44519,44522,44523,44524,44525,44526,44529,44530,44531,44532,44533,44536,44537,44538,44539,44540,44543,44544,44545,44546,44547,44550,44551,44552,44553,44554,44557,44558,44559,44560,44561,44564,44565,44566,44567,44568,44571,44572,44573,44574,44575,44578,44579,44580,44581,44582,44585,44586,44587,44588,44589,44592,44593,44594,44595,44596,44599,44600,44601,44602,44603,44606,44607,44608,44609,44610,44613,44614,44615,44616,44617,44620,44621,44622,44623,44624,44627,44628,44629,44630,44631,44634,44635,44636,44637,44638,44641,44642,44643,44644,44645,44648,44649,44650,44651,44652,44655,44656,44657,44658,44659,44662,44663,44664,44665,44666,44669,44670,44671,44672,44673,44676,44677,44678,44679,44680,44683,44684,44685,44686,44687,44690,44691,44692,44693,44694,44697,44698,44699,44700,44701,44704,44705,44706,44707,44708,44712,44713,44714,44715,44718,44719,44720,44721,44722,44725,44726,44727,44728,44729,44732,44733,44734,44735,44736,44739,44740,44741,44742,44743,44746,44747,44748,44749,44750,44753,44754,44755,44756,44757,44760,44761,44762,44763,44764,44767,44768,44769,44770,44771,44774,44775,44776,44777,44778,44781,44782,44783,44784,44785,44788,44789,44790,44791,44792,44795,44796,44797,44798,44799,44802,44803,44804,44805,44806,44809,44810,44811,44812,44813,44816,44817,44818,44819,44820,44823,44824,44825,44826,44827,44830,44831,44832,44833,44834,44837,44838,44839,44840,44841,44845,44846,44847,44848,44851,44852,44853,44854,44855,44858,44859,44860,44861,44862,44865,44866,44867,44868,44869,44872,44873,44874,44875,44876,44879,44880,44881,44882,44883,44886,44887,44888,44889,44890,44893,44894,44895,44896,44897,44900,44901,44902,44903,44904,44907,44908,44909,44910,44911,44914,44915,44916,44917,44918,44922,44923,44924,44925,44929,44930,44931,44932,44935,44936,44937,44938,44939,44942,44943,44944,44945,44946,44949,44950,44951,44952,44953,44956,44957,44958,44959,44960,44963,44964,44965,44966,44967,44970,44971,44972,44973,44974,44978,44979,44980,44981,44984,44985,44986,44987,44988,44991,44992,44993,44994,44995,44998,44999,45000,45001,45002,45005,45006,45007,45008,45009,45012,45013,45014,45015,45016,45019,45020,45021,45022,45023,45026,45027,45028,45029,45030,45033,45034,45035,45036,45037,45040,45041,45042,45043,45044,45047,45048,45049,45050,45051,45054,45055,45056,45057,45058,45059,45060,45061,45062,45063,45064,45065,45066,45067,45068,45069,45070,45071,45072,45073,45074,45075,45076,45077,45078,45079,45080,45081,45082,45083,45084,45085,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45096,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45124,45125,45126,45127,45128,45129,45130,45131,45132,45133,45134,45135,45136,45137,45138,45139,45140,45141,45142,45143,45144,45145,45146,45147,45148,45149,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45180,45181,45182,45183,45184,45185,45186,45187,45188,45189,45190,45191,45192,45193,45194,45195,45196,45197,45198,45199,45200,45201,45202,45203,45204,45205,45206,45207,45208,45209,45210,45211,45212,45213,45214,45215,45216],
      "VALUE" : [0.0131030000000000001,0.0131880000000000001,0.0137699999999999993,0.0130089999999999997,0.0121709999999999995,0.0125699999999999996,0.0121250000000000004,0.0132379999999999998,0.0131299999999999993,0.0135499999999999995,0.0140109999999999991,0.0141969999999999996,0.0137610000000000007,0.0136469999999999994,0.0132999999999999993,0.0141849999999999997,0.0145649999999999998,0.0142260000000000008,0.0142419999999999995,0.0126320000000000009,0.0128950000000000002,0.0125509999999999997,0.0121250000000000004,0.0125190000000000006,0.0117359999999999999,0.0126400000000000002,0.0130469999999999996,0.0133489999999999998,0.0131909999999999996,0.0131280000000000008,0.0124639999999999994,0.0126929999999999994,0.0127320000000000003,0.0121340000000000007,0.0120420000000000006,0.0123219999999999996,0.0127650000000000003,0.0127349999999999998,0.0130760000000000008,0.0130600000000000004,0.0128900000000000004,0.0129409999999999994,0.0136189999999999992,0.0131769999999999995,0.0132130000000000008,0.0142369999999999997,0.0143700000000000008,0.0149940000000000004,0.0152400000000000001,0.0156470000000000012,0.0157099999999999983,0.0153899999999999992,0.0153819999999999998,0.0149829999999999998,0.0158559999999999986,0.0158000000000000015,0.016750000000000001,0.016525999999999999,0.016015999999999999,0.0155999999999999993,0.0156969999999999991,0.0157580000000000012,0.0167020000000000016,0.0160819999999999991,0.0158699999999999987,0.0158909999999999989,0.0159609999999999995,0.0158499999999999995,0.0163780000000000002,0.017198999999999999,0.017252,0.0177080000000000015,0.01754,0.0185050000000000006,0.0175300000000000004,0.0180990000000000005,0.018605,0.0185339999999999984,0.0177439999999999994,0.0174109999999999994,0.0174120000000000004,0.0176070000000000011,0.0181219999999999992,0.0178870000000000001,0.0178029999999999994,0.0164779999999999996,0.0153690000000000007,0.0170179999999999984,0.0165970000000000006,0.0154299999999999993,0.0158140000000000017,0.0165049999999999988,0.0176739999999999987,0.0179600000000000003,0.0180400000000000005,0.0194600000000000016,0.0196309999999999991,0.0201999999999999992,0.0199800000000000012,0.0198329999999999999,0.0211639999999999988,0.0219330000000000011,0.0209240000000000016,0.0217749999999999992,0.0227809999999999992,0.0226659999999999986,0.0219969999999999992,0.0214570000000000004,0.0212870000000000004,0.0216900000000000009,0.021645000000000001,0.0231309999999999988,0.0236279999999999997,0.0241560000000000004,0.0247700000000000004,0.0256580000000000003,0.0249109999999999991,0.0246970000000000002,0.0259300000000000017,0.0258800000000000002,0.0261949999999999995,0.0272009999999999995,0.0260099999999999984,0.026755000000000001,0.0266550000000000016,0.0258689999999999996,0.0249979999999999994,0.0262119999999999992,0.0263089999999999991,0.0273620000000000009,0.0277799999999999991,0.0276600000000000006,0.0273830000000000011,0.0282449999999999993,0.0291200000000000001,0.0280600000000000016,0.0277239999999999986,0.027144999999999999,0.0265719999999999984,0.0271419999999999995,0.0267210000000000017,0.0277230000000000011,0.0267170000000000012,0.0262490000000000015,0.0255949999999999997,0.0261949999999999995,0.0252649999999999993,0.0253320000000000004,0.0254449999999999989,0.0253770000000000003,0.0264600000000000009,0.0269619999999999999,0.0270670000000000008,0.0273440000000000003,0.0284590000000000017,0.0277360000000000002,0.0281210000000000002,0.0283029999999999983,0.0293969999999999995,0.0315589999999999968,0.032599999999999997,0.0306270000000000014,0.0295799999999999987,0.0300899999999999987,0.0301300000000000005,0.0306500000000000002,0.0294990000000000009,0.0288199999999999984,0.029335,0.0299479999999999989,0.0296650000000000004,0.0288969999999999991,0.0281099999999999996,0.0267720000000000007,0.0267900000000000013,0.026020999999999999,0.0273019999999999999,0.0280299999999999994,0.0289069999999999987,0.0279399999999999996,0.0276729999999999997,0.0273399999999999997,0.0275350000000000004,0.0270479999999999991,0.0276750000000000017,0.0280150000000000017,0.028108000000000001,0.0266580000000000011,0.0253810000000000008,0.0258670000000000011,0.0259899999999999992,0.0257859999999999999,0.024670000000000001,0.0243729999999999988,0.0235089999999999986,0.025349,0.0248999999999999985,0.0246789999999999995,0.0260449999999999987,0.0252849999999999984,0.0254640000000000005,0.0254549999999999985,0.0265640000000000008,0.0259750000000000016,0.0254470000000000009,0.0255920000000000002,0.0266759999999999983,0.0264449999999999998,0.0274469999999999992,0.0279809999999999989,0.0284599999999999992,0.0290769999999999987,0.0283139999999999989,0.0284650000000000007,0.0291390000000000017,0.0291599999999999984,0.0299850000000000012,0.0306629999999999993,0.0300419999999999993,0.0300969999999999988,0.0314899999999999972,0.0306209999999999989,0.031130999999999999,0.0310700000000000004,0.0315020000000000022,0.0319790000000000005,0.0319819999999999965,0.0324559999999999987,0.0324349999999999986,0.0328169999999999989,0.0334940000000000029,0.033163999999999999,0.0348269999999999968,0.0345070000000000029,0.0365790000000000004,0.0364340000000000011,0.034851,0.0355520000000000003,0.0359039999999999984,0.0338880000000000015,0.0335299999999999973,0.035076000000000003,0.0356549999999999992,0.0361329999999999985,0.0367849999999999983,0.0363699999999999996,0.0366239999999999968,0.0373249999999999971,0.0371819999999999998,0.0371239999999999973,0.0384719999999999993,0.0396400000000000016,0.0393999999999999975,0.0396750000000000019,0.0384279999999999969,0.0373409999999999992,0.0364949999999999997,0.0376099999999999976,0.0380250000000000032,0.038115000000000003,0.0387269999999999975,0.0390319999999999973,0.039116999999999999,0.0394320000000000018,0.0384690000000000032,0.0380529999999999965,0.0352719999999999978,0.0352690000000000017,0.0355520000000000003,0.0346619999999999984,0.0336489999999999984,0.0345729999999999996,0.0352729999999999988,0.0353289999999999993,0.0343699999999999978,0.0337929999999999967,0.0338050000000000017,0.0337420000000000012,0.0336839999999999987,0.0342379999999999976,0.0327799999999999966,0.0317669999999999966,0.0316340000000000024,0.0326209999999999972,0.0320879999999999985,0.0310700000000000004,0.0317559999999999995,0.0328509999999999983,0.0330999999999999975,0.0320459999999999981,0.0318010000000000029,0.0315440000000000026,0.0318649999999999975,0.0327199999999999991,0.033499000000000001,0.0334800000000000028,0.033725999999999999,0.0343649999999999997,0.0351319999999999966,0.0356899999999999995,0.0350309999999999996,0.0355750000000000025,0.0339850000000000013,0.0335550000000000015,0.0338719999999999993,0.0321909999999999974,0.0319600000000000023,0.0328039999999999998,0.0321400000000000019,0.0312979999999999994,0.0318840000000000026,0.0318779999999999966,0.0323150000000000034,0.0306379999999999986,0.03074,0.0316140000000000032,0.0319540000000000032,0.0313550000000000009,0.0313449999999999979,0.0319670000000000024,0.0320580000000000032,0.0324240000000000014,0.0320669999999999983,0.0313080000000000025,0.0311150000000000003,0.0324209999999999984,0.0333999999999999991,0.0337510000000000032,0.0331050000000000025,0.0336310000000000012,0.0344220000000000012,0.0341090000000000004,0.0345830000000000026,0.0352000000000000021,0.0358119999999999966,0.0353730000000000017,0.0367649999999999991,0.0364519999999999983,0.0359999999999999973,0.0367750000000000021,0.0364500000000000032,0.0365499999999999992,0.0373049999999999979,0.0379589999999999997,0.036979999999999999,0.0368990000000000012,0.0369330000000000006,0.0371900000000000008,0.0362760000000000027,0.0340389999999999998,0.0329199999999999979,0.0345000000000000029,0.0323099999999999984,0.0333999999999999991,0.0317549999999999985,0.0322249999999999967,0.0335519999999999985,0.0317399999999999974,0.0312899999999999984,0.0307799999999999983,0.0323509999999999978,0.0326950000000000018,0.0327799999999999966,0.0325900000000000009,0.0317399999999999974,0.0311999999999999986,0.0304430000000000013,0.0302499999999999991,0.0302229999999999999,0.0311199999999999984,0.0313719999999999971,0.0314110000000000014,0.0309499999999999983,0.0314660000000000009,0.032155000000000003,0.0330799999999999983,0.0329500000000000001,0.0330049999999999996,0.0324100000000000013,0.0328600000000000003,0.0320550000000000002,0.0311039999999999997,0.0316499999999999976,0.0323599999999999999,0.0314880000000000021,0.0331120000000000025,0.0316849999999999979,0.0309329999999999987,0.031189999999999999,0.0317599999999999966,0.0319600000000000023,0.0320850000000000024,0.0322399999999999978,0.0314950000000000022,0.031191,0.031191,0.031191,0.0319800000000000015,0.0316400000000000015,0.0323499999999999968,0.0328499999999999973,0.0333019999999999983,0.0333019999999999983,0.0333019999999999983,0.0336279999999999982,0.0344899999999999998,0.0342980000000000021,0.0346500000000000002,0.0352029999999999982,0.0352029999999999982,0.0352029999999999982,0.035414000000000001,0.034729999999999997,0.0340000000000000024,0.0342579999999999968,0.0335999999999999979,0.0335999999999999979,0.0335999999999999979,0.0349900000000000003,0.0341899999999999982,0.034290000000000001,0.0352519999999999986,0.0347789999999999974,0.0347789999999999974,0.0347789999999999974,0.0350260000000000016,0.0345299999999999982,0.0351899999999999991,0.0353899999999999978,0.0348800000000000013,0.0348800000000000013,0.0348800000000000013,0.0350099999999999995,0.0351669999999999969,0.0348299999999999998,0.034849999999999999,0.0346399999999999972,0.0346399999999999972,0.0346399999999999972,0.034389999999999997,0.03474,0.0348989999999999995,0.0348699999999999982,0.0362200000000000022,0.0362200000000000022,0.0362200000000000022,0.0359159999999999965,0.0360209999999999975,0.0359420000000000017,0.0370469999999999966,0.0378500000000000017,0.0378500000000000017,0.0378500000000000017,0.0381449999999999984,0.0370409999999999975,0.0368020000000000014,0.0356100000000000028,0.0353499999999999995,0.0353499999999999995,0.0353499999999999995,0.0355820000000000025,0.0348250000000000018,0.0348019999999999996,0.0352000000000000021,0.0358300000000000007,0.0358300000000000007,0.0358300000000000007,0.0356399999999999981,0.0361899999999999999,0.0363209999999999991,0.0361000000000000001,0.0375110000000000027,0.0375110000000000027,0.0375110000000000027,0.0372800000000000006,0.0370699999999999988,0.0375800000000000023,0.038664999999999998,0.0390129999999999991,0.0390129999999999991,0.0390129999999999991,0.0380710000000000007,0.0371500000000000025,0.037208999999999999,0.0372699999999999976,0.038101999999999997,0.038101999999999997,0.038101999999999997,0.0387899999999999981,0.0395199999999999996,0.0390599999999999975,0.0401509999999999992,0.0395790000000000031,0.0395790000000000031,0.0395790000000000031,0.0401600000000000013,0.0405389999999999986,0.039899999999999998,0.0393099999999999977,0.039789999999999999,0.039789999999999999,0.039789999999999999,0.0395000000000000004,0.0391999999999999987,0.0386200000000000015,0.0383399999999999991,0.0382390000000000022,0.0382390000000000022,0.0382390000000000022,0.0389019999999999991,0.0393299999999999969,0.0396979999999999972,0.0398499999999999965,0.0394989999999999994,0.0394989999999999994,0.0394989999999999994,0.0399600000000000025,0.0399209999999999982,0.0400319999999999981,0.0397110000000000032,0.0401579999999999993,0.0401579999999999993,0.0401579999999999993,0.0405099999999999974,0.0401800000000000004,0.0406530000000000016,0.0412430000000000019,0.0418099999999999999,0.0418099999999999999,0.0418099999999999999,0.0418899999999999967,0.0423409999999999967,0.0420900000000000024,0.0430800000000000002,0.0424150000000000013,0.0424150000000000013,0.0424150000000000013,0.0431910000000000002,0.0437470000000000012,0.0451999999999999971,0.0443520000000000025,0.0443399999999999975,0.0443399999999999975,0.0443399999999999975,0.0449299999999999977,0.0436599999999999974,0.0427900000000000016,0.0426399999999999973,0.0433160000000000003,0.0433160000000000003,0.0433160000000000003,0.043729999999999998,0.0442449999999999996]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-CIS-10Y": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "MARKET DATA",
      "TYPE" : "FIXINGS",
      "ID" : "FIXINGS.USD-CIS-10Y",
      "FIXINGS" : "FIXINGS.USD-CIS-10Y.DATA",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "INTERP METHOD" : "Flat Right"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-CIS-30Y.DATA": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "DATE" : [44501,44502,44503,44504,44505,44508,44509,44510,44511,44512,44515,44516,44517,44518,44519,44522,44523,44524,44525,44526,44529,44530,44531,44532,44533,44536,44537,44538,44539,44540,44543,44544,44545,44546,44547,44550,44551,44552,44553,44554,44557,44558,44559,44560,44561,44564,44565,44566,44567,44568,44571,44572,44573,44574,44575,44578,44579,44580,44581,44582,44585,44586,44587,44588,44589,44592,44593,44594,44595,44596,44599,44600,44601,44602,44603,44606,44607,44608,44609,44610,44613,44614,44615,44616,44617,44620,44621,44622,44623,44624,44627,44628,44629,44630,44631,44634,44635,44636,44637,44638,44641,44642,44643,44644,44645,44648,44649,44650,44651,44652,44655,44656,44657,44658,44659,44662,44663,44664,44665,44666,44669,44670,44671,44672,44673,44676,44677,44678,44679,44680,44683,44684,44685,44686,44687,44690,44691,44692,44693,44694,44697,44698,44699,44700,44701,44704,44705,44706,44707,44708,44711,44712,44713,44714,44715,44718,44719,44720,44721,44722,44725,44726,44727,44728,44729,44732,44733,44734,44735,44736,44739,44740,44741,44742,44743,44746,44747,44748,44749,44750,44753,44754,44755,44756,44757,44760,44761,44762,44763,44764,44767,44768,44769,44770,44771,44774,44775,44776,44777,44778,44781,44782,44783,44784,44785,44788,44789,44790,44791,44792,44795,44796,44797,44798,44799,44802,44803,44804,44805,44806,44810,44811,44812,44813,44816,44817,44818,44819,44820,44823,44824,44825,44826,44827,44830,44831,44832,44833,44834,44837,44838,44839,44840,44841,44845,44846,44847,44848,44851,44852,44853,44854,44855,44858,44859,44860,44861,44862,44865,44866,44867,44868,44869,44872,44873,44874,44875,44876,44879,44880,44881,44882,44883,44886,44887,44888,44889,44890,44893,44894,44895,44896,44897,44900,44901,44902,44903,44904,44907,44908,44909,44910,44911,44914,44915,44916,44917,44918,44922,44923,44924,44925,44929,44930,44931,44932,44935,44936,44937,44938,44939,44943,44944,44945,44946,44949,44950,44951,44952,44953,44956,44957,44958,44959,44960,44963,44964,44965,44966,44967,44970,44971,44972,44973,44974,44978,44979,44980,44981,44984,44985,44986,44987,44988,44991,44992,44993,44994,44995,44998,44999,45000,45001,45002,45005,45006,45007,45008,45009,45012,45013,45014,45015,45016,45019,45020,45021,45022,45023,45026,45027,45028,45029,45030,45033,45034,45035,45036,45037,45040,45041,45042,45043,45044,45047,45048,45049,45050,45051,45054,45055,45056,45057,45058,45059,45060,45061,45062,45063,45064,45065,45066,45067,45068,45069,45070,45071,45072,45073,45074,45075,45076,45077,45078,45079,45080,45081,45082,45083,45084,45085,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45096,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45124,45125,45126,45127,45128,45129,45130,45131,45132,45133,45134,45135,45136,45137,45138,45139,45140,45141,45142,45143,45144,45145,45146,45147,45148,45149,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45180,45181,45182,45183,45184,45185,45186,45187,45188,45189,45190,45191,45192,45193,45194,45195,45196,45197,45198,45199,45200,45201,45202,45203,45204,45205,45206,45207,45208,45209,45210,45211,45212,45213,45214,45215,45216],
      "VALUE" : [0.0147030000000000008,0.0148100000000000002,0.0154800000000000007,0.0147799999999999997,0.0139970000000000008,0.0140310000000000001,0.0134509999999999994,0.014449,0.0143999999999999996,0.014808,0.0153069999999999994,0.0155239999999999996,0.0151079999999999999,0.0150049999999999992,0.0145000000000000007,0.0151870000000000008,0.0157920000000000005,0.0151780000000000005,0.0152739999999999994,0.0138849999999999998,0.0141320000000000005,0.0136189999999999992,0.0131000000000000005,0.0133799999999999995,0.0127060000000000003,0.0136550000000000005,0.0139399999999999993,0.0145279999999999992,0.0143759999999999999,0.0144530000000000006,0.0137400000000000005,0.0140319999999999993,0.0141890000000000002,0.0139150000000000003,0.0134970000000000003,0.013965,0.0142190000000000007,0.0142509999999999998,0.0146999999999999995,0.0147200000000000004,0.0144899999999999994,0.0146040000000000007,0.0151990000000000007,0.0146879999999999997,0.0146099999999999997,0.0155519999999999999,0.0158599999999999991,0.0162899999999999989,0.0163249999999999992,0.0166399999999999985,0.016528000000000001,0.0162580000000000016,0.016409,0.0159879999999999987,0.0166919999999999985,0.0166999999999999996,0.0173400000000000012,0.0171159999999999993,0.0166630000000000007,0.0162279999999999994,0.0165879999999999986,0.0166269999999999994,0.0171600000000000016,0.0166019999999999987,0.0164049999999999994,0.0166220000000000014,0.0166210000000000004,0.0166439999999999991,0.0170200000000000004,0.0175590000000000017,0.0175699999999999988,0.0179349999999999996,0.0178010000000000009,0.0184299999999999985,0.0175270000000000009,0.018093999999999999,0.0187870000000000016,0.0188000000000000007,0.0182599999999999985,0.0178099999999999994,0.0177499999999999984,0.0177800000000000007,0.0183059999999999994,0.0180540000000000006,0.0179729999999999994,0.0167850000000000013,0.0159350000000000012,0.0174950000000000001,0.0171019999999999991,0.0160499999999999983,0.0161220000000000009,0.0165140000000000009,0.0178350000000000002,0.0180699999999999993,0.0180680000000000007,0.0194269999999999998,0.01967,0.0198189999999999998,0.0199900000000000008,0.0197570000000000003,0.0207920000000000015,0.0215330000000000001,0.02035,0.0209930000000000012,0.0214449999999999988,0.0208950000000000004,0.0205299999999999996,0.0202109999999999998,0.0197360000000000001,0.0194740000000000017,0.0195619999999999995,0.0208279999999999993,0.0213999999999999989,0.0220149999999999998,0.0226480000000000015,0.023663,0.0234579999999999997,0.0234849999999999989,0.0244200000000000007,0.0243769999999999994,0.0243799999999999989,0.0251299999999999996,0.0238799999999999985,0.0243060000000000012,0.0243850000000000004,0.0237930000000000016,0.0232279999999999986,0.0242750000000000014,0.024114,0.025007999999999999,0.0251739999999999985,0.0249240000000000017,0.0251739999999999985,0.0258449999999999999,0.0268480000000000003,0.0259799999999999996,0.0258309999999999998,0.0250909999999999987,0.0249899999999999983,0.0256249999999999985,0.0256989999999999996,0.0264630000000000004,0.0252560000000000007,0.0250660000000000015,0.0243500000000000001,0.0249850000000000003,0.0243529999999999996,0.0245700000000000016,0.0247999999999999991,0.0246259999999999986,0.0246299999999999991,0.0255349999999999987,0.0256319999999999985,0.0258789999999999992,0.0259500000000000008,0.0271319999999999999,0.0263299999999999992,0.0267259999999999998,0.0265880000000000005,0.0267319999999999988,0.0281829999999999997,0.0287029999999999993,0.027647999999999999,0.0265050000000000008,0.0271789999999999983,0.0275999999999999995,0.0278669999999999994,0.0271680000000000012,0.0267279999999999983,0.027427,0.0279030000000000007,0.0275719999999999993,0.0270519999999999997,0.0266480000000000015,0.0258929999999999993,0.0258969999999999999,0.0252089999999999988,0.0257600000000000016,0.0264500000000000013,0.0271300000000000013,0.0264390000000000007,0.0263189999999999986,0.0259400000000000013,0.0256860000000000005,0.0253080000000000006,0.026023000000000001,0.0262469999999999995,0.0262089999999999997,0.0251499999999999987,0.0244750000000000002,0.0248319999999999999,0.0250019999999999999,0.0253400000000000014,0.0248139999999999993,0.0244939999999999984,0.0234429999999999986,0.0244970000000000014,0.0238279999999999985,0.0239620000000000007,0.0249100000000000016,0.0240469999999999989,0.0241169999999999995,0.0244429999999999994,0.0257819999999999994,0.0251940000000000011,0.025009,0.0248580000000000016,0.0255869999999999986,0.0253199999999999988,0.0261300000000000004,0.0263310000000000002,0.0267820000000000003,0.0274359999999999986,0.0267329999999999998,0.0262630000000000016,0.0267830000000000013,0.0266219999999999998,0.0273039999999999984,0.027935999999999999,0.0276199999999999987,0.0290000000000000015,0.0281190000000000016,0.0287649999999999989,0.0284799999999999984,0.0291270000000000001,0.0289370000000000009,0.0287099999999999994,0.0289130000000000012,0.0292970000000000001,0.029392999999999999,0.0298129999999999992,0.0291579999999999999,0.0303649999999999996,0.0296350000000000016,0.0306519999999999987,0.0307669999999999992,0.0300230000000000011,0.0303299999999999993,0.0306739999999999999,0.0295850000000000002,0.0295300000000000007,0.0304850000000000017,0.0306799999999999989,0.0311500000000000006,0.0317800000000000027,0.0315500000000000017,0.0315700000000000008,0.0323319999999999996,0.0326590000000000005,0.0327500000000000013,0.033730000000000003,0.0348549999999999971,0.0357820000000000013,0.0360699999999999979,0.0349900000000000003,0.033727,0.0331950000000000023,0.0338999999999999996,0.0341530000000000028,0.0337029999999999968,0.0340999999999999984,0.0344640000000000016,0.0350159999999999985,0.0354319999999999982,0.0349280000000000007,0.0349099999999999966,0.0327980000000000008,0.0328039999999999998,0.0329959999999999976,0.032374,0.0311120000000000008,0.0315360000000000015,0.0320449999999999971,0.031808999999999997,0.0308709999999999991,0.0300349999999999992,0.0300270000000000016,0.0301569999999999998,0.0299449999999999994,0.0307249999999999988,0.0300720000000000015,0.0289550000000000016,0.028660999999999999,0.0291299999999999996,0.0285650000000000001,0.0277500000000000004,0.0278650000000000009,0.0292639999999999983,0.0293670000000000007,0.0288160000000000013,0.028667999999999999,0.0283270000000000015,0.0287390000000000007,0.029447000000000001,0.0301750000000000004,0.0301629999999999988,0.0305050000000000009,0.0312340000000000013,0.0319050000000000028,0.0324450000000000016,0.0316400000000000015,0.0320850000000000024,0.030637000000000001,0.0305349999999999996,0.0305050000000000009,0.0294349999999999994,0.0291949999999999987,0.0301520000000000017,0.0296000000000000013,0.0289899999999999984,0.0293759999999999993,0.0299250000000000002,0.0288440000000000016,0.0287980000000000007,0.0296550000000000008,0.0299059999999999986,0.0292280000000000005,0.0292430000000000016,0.0298089999999999987,0.0296690000000000009,0.0299540000000000015,0.0295809999999999997,0.0291700000000000015,0.0291550000000000004,0.0297110000000000013,0.0301960000000000006,0.0306410000000000016,0.0301799999999999985,0.0306969999999999986,0.0315199999999999994,0.0311230000000000014,0.0310089999999999984,0.0316070000000000031,0.0323449999999999988,0.0318200000000000011,0.0328799999999999995,0.032370999999999997,0.0320599999999999982,0.0325399999999999995,0.0324810000000000029,0.0323830000000000021,0.032825,0.0332399999999999987,0.0321209999999999968,0.0321929999999999994,0.0318840000000000026,0.0320599999999999982,0.0314940000000000012,0.0298950000000000014,0.0298700000000000007,0.0311869999999999994,0.0296310000000000011,0.0299519999999999995,0.0290240000000000012,0.0293159999999999983,0.0299929999999999988,0.0293519999999999996,0.029513000000000001,0.0289799999999999988,0.0300400000000000007,0.0300799999999999991,0.0301699999999999989,0.0299899999999999993,0.0292649999999999993,0.0292220000000000014,0.0288950000000000005,0.0287770000000000005,0.0286399999999999988,0.0292439999999999992,0.0293199999999999988,0.0291700000000000015,0.0290429999999999994,0.0297000000000000007,0.0302079999999999987,0.0309999999999999998,0.0309080000000000014,0.0308529999999999985,0.0304239999999999997,0.0308299999999999998,0.0301890000000000006,0.0295839999999999992,0.0300099999999999985,0.030464999999999999,0.0297669999999999983,0.031191,0.0302399999999999995,0.0300899999999999987,0.0302340000000000005,0.0305559999999999998,0.0307599999999999991,0.0308480000000000004,0.0309649999999999995,0.0307300000000000004,0.0304099999999999995,0.0304099999999999995,0.0304099999999999995,0.0308700000000000016,0.0307100000000000012,0.031189999999999999,0.0314339999999999967,0.0317599999999999966,0.0317599999999999966,0.0317599999999999966,0.0320280000000000009,0.0326400000000000023,0.0325300000000000034,0.0327809999999999976,0.0327329999999999982,0.0327329999999999982,0.0327329999999999982,0.0326400000000000023,0.0320749999999999993,0.0318039999999999989,0.0319139999999999979,0.0315109999999999973,0.0315109999999999973,0.0315109999999999973,0.0325399999999999995,0.0319100000000000009,0.0316900000000000029,0.0325659999999999977,0.0322199999999999986,0.0322199999999999986,0.0322199999999999986,0.0322399999999999978,0.0318700000000000025,0.0322510000000000019,0.0322199999999999986,0.0319800000000000015,0.0319800000000000015,0.0319800000000000015,0.0318789999999999976,0.0321999999999999995,0.0316900000000000029,0.0317199999999999982,0.0315399999999999986,0.0315399999999999986,0.0315399999999999986,0.0312699999999999992,0.0316900000000000029,0.0317409999999999984,0.0317800000000000027,0.032599999999999997,0.032599999999999997,0.032599999999999997,0.0319619999999999974,0.032039999999999999,0.0320900000000000005,0.0327799999999999966,0.0333229999999999985,0.0333229999999999985,0.0333229999999999985,0.0339100000000000026,0.0333499999999999977,0.0331120000000000025,0.0327599999999999975,0.0325399999999999995,0.0325399999999999995,0.0325399999999999995,0.0326429999999999984,0.0321719999999999992,0.0319689999999999974,0.0320480000000000001,0.0324100000000000013,0.0324100000000000013,0.0324100000000000013,0.0324100000000000013,0.0327899999999999997,0.0329199999999999979,0.0330200000000000007,0.0341409999999999977,0.0341409999999999977,0.0341409999999999977,0.0338800000000000004,0.033717999999999998,0.0344980000000000009,0.0359599999999999989,0.0361539999999999986,0.0361539999999999986,0.0361539999999999986,0.0356500000000000011,0.034959999999999998,0.0349720000000000031,0.034849999999999999,0.0357410000000000019,0.0357410000000000019,0.0357410000000000019,0.035864,0.0364840000000000025,0.0362569999999999976,0.0371399999999999994,0.0367299999999999988,0.0367299999999999988,0.0367299999999999988,0.0374499999999999972,0.0376099999999999976,0.0366809999999999983,0.0359599999999999989,0.0364500000000000032,0.0364500000000000032,0.0364500000000000032,0.0360299999999999995,0.0361090000000000022,0.0357700000000000032,0.0355600000000000013,0.0354599999999999985,0.0354599999999999985,0.0354599999999999985,0.0361799999999999969,0.0365810000000000024,0.036990000000000002,0.03687,0.036639999999999999,0.036639999999999999,0.036639999999999999,0.0369599999999999998,0.0369700000000000029,0.0369610000000000008,0.0368360000000000007,0.0372999999999999998,0.0372999999999999998,0.0372999999999999998,0.0374799999999999994,0.037205000000000002,0.0375160000000000007,0.0378259999999999985,0.0388099999999999973,0.0388099999999999973,0.0388099999999999973,0.0389299999999999993,0.0396130000000000024,0.0394899999999999973,0.0402800000000000033,0.0398700000000000027,0.0398700000000000027,0.0398700000000000027,0.040469999999999999,0.041030999999999998,0.0425799999999999998,0.0418999999999999997,0.0421899999999999983,0.0421899999999999983,0.0421899999999999983,0.0428510000000000002,0.0416600000000000026,0.0406600000000000017,0.0401779999999999984,0.0411100000000000007,0.0411100000000000007,0.0411100000000000007,0.0413699999999999971,0.0419150000000000009]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-CIS-30Y": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "MARKET DATA",
      "TYPE" : "FIXINGS",
      "ID" : "FIXINGS.USD-CIS-30Y",
      "FIXINGS" : "FIXINGS.USD-CIS-30Y.DATA",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "INTERP METHOD" : "Flat Right"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-CIS-5Y.DATA": {
    "TYPE" : "DATA",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "TABLE" : {
      "DATE" : [44501,44502,44503,44504,44505,44508,44509,44510,44511,44512,44515,44516,44517,44518,44519,44522,44523,44524,44525,44526,44529,44530,44531,44532,44533,44536,44537,44538,44539,44540,44543,44544,44545,44546,44547,44550,44551,44552,44553,44554,44557,44558,44559,44560,44561,44564,44565,44566,44567,44568,44571,44572,44573,44574,44575,44579,44580,44581,44582,44585,44586,44587,44588,44589,44592,44593,44594,44595,44596,44599,44600,44601,44602,44603,44606,44607,44608,44609,44610,44614,44615,44616,44617,44620,44621,44622,44623,44624,44627,44628,44629,44630,44631,44634,44635,44636,44637,44638,44641,44642,44643,44644,44645,44648,44649,44650,44651,44652,44655,44656,44657,44658,44659,44662,44663,44664,44665,44666,44669,44670,44671,44672,44673,44676,44677,44678,44679,44680,44683,44684,44685,44686,44687,44690,44691,44692,44693,44694,44697,44698,44699,44700,44701,44704,44705,44706,44707,44708,44712,44713,44714,44715,44718,44719,44720,44721,44722,44725,44726,44727,44728,44729,44733,44734,44735,44736,44739,44740,44741,44742,44743,44746,44747,44748,44749,44750,44753,44754,44755,44756,44757,44760,44761,44762,44763,44764,44767,44768,44769,44770,44771,44774,44775,44776,44777,44778,44781,44782,44783,44784,44785,44788,44789,44790,44791,44792,44795,44796,44797,44798,44799,44802,44803,44804,44805,44806,44810,44811,44812,44813,44816,44817,44818,44819,44820,44823,44824,44825,44826,44827,44830,44831,44832,44833,44834,44837,44838,44839,44840,44841,44845,44846,44847,44848,44851,44852,44853,44854,44855,44858,44859,44860,44861,44862,44865,44866,44867,44868,44869,44872,44873,44874,44875,44876,44879,44880,44881,44882,44883,44886,44887,44888,44889,44890,44893,44894,44895,44896,44897,44900,44901,44902,44903,44904,44907,44908,44909,44910,44911,44914,44915,44916,44917,44918,44922,44923,44924,44925,44929,44930,44931,44932,44935,44936,44937,44938,44939,44943,44944,44945,44946,44949,44950,44951,44952,44953,44956,44957,44958,44959,44960,44963,44964,44965,44966,44967,44970,44971,44972,44973,44974,44978,44979,44980,44981,44984,44985,44986,44987,44988,44991,44992,44993,44994,44995,44998,44999,45000,45001,45002,45005,45006,45007,45008,45009,45012,45013,45014,45015,45016,45019,45020,45021,45022,45023,45026,45027,45028,45029,45030,45033,45034,45035,45036,45037,45040,45041,45042,45043,45044,45047,45048,45049,45050,45051,45054,45055,45056,45057,45058,45059,45060,45061,45062,45063,45064,45065,45066,45067,45068,45069,45070,45071,45072,45073,45074,45075,45076,45077,45078,45079,45080,45081,45082,45083,45084,45085,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45096,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45124,45125,45126,45127,45128,45129,45130,45131,45132,45133,45134,45135,45136,45137,45138,45139,45140,45141,45142,45143,45144,45145,45146,45147,45148,45149,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45180,45181,45182,45183,45184,45185,45186,45187,45188,45189,45190,45191,45192,45193,45194,45195,45196,45197,45198,45199,45200,45201,45202,45203,45204,45205,45206,45207,45208,45209,45210,45211,45212,45213,45214,45215,45216],
      "VALUE" : [0.0100000000000000002,0.00992400000000000053,0.0103800000000000003,0.00968800000000000043,0.00907799999999999926,0.00966000000000000018,0.00931200000000000083,0.0105800000000000009,0.0101300000000000001,0.0107600000000000005,0.0110580000000000001,0.0112440000000000005,0.0109219999999999994,0.0107449999999999993,0.0108170000000000002,0.0117350000000000006,0.0118619999999999993,0.0119480000000000003,0.0119399999999999992,0.0101799999999999998,0.0101820000000000001,0.0102950000000000003,0.0100079999999999995,0.0105950000000000003,0.00994300000000000045,0.0107100000000000008,0.0112200000000000008,0.0113500000000000007,0.0113069999999999993,0.0111120000000000003,0.0106280000000000003,0.0109099999999999996,0.0109250000000000007,0.01009,0.0101910000000000004,0.0102670000000000001,0.0107930000000000005,0.0108550000000000001,0.0110869999999999996,0.01107,0.0110449999999999993,0.0110299999999999999,0.0114649999999999995,0.0111669999999999998,0.0112339999999999992,0.0120219999999999997,0.0119959999999999997,0.0127460000000000004,0.0131610000000000008,0.0134400000000000006,0.0137029999999999999,0.0133969999999999992,0.0134999999999999998,0.0130989999999999995,0.0140020000000000006,0.0150259999999999994,0.0148800000000000009,0.0143190000000000001,0.0140249999999999993,0.0138309999999999995,0.0139249999999999999,0.0151660000000000007,0.0148920000000000007,0.0145140000000000009,0.014475,0.0145240000000000005,0.0144300000000000001,0.0150860000000000005,0.0160490000000000008,0.0160290000000000016,0.0165390000000000016,0.0165369999999999996,0.0178829999999999996,0.0169450000000000017,0.0175310000000000014,0.017762,0.0175179999999999989,0.0166950000000000015,0.0164580000000000004,0.016971,0.0173500000000000008,0.0170049999999999993,0.0170200000000000004,0.0155239999999999996,0.0140979999999999994,0.0157780000000000004,0.0155800000000000001,0.0145450000000000006,0.0150650000000000003,0.0157200000000000013,0.0168039999999999995,0.0172210000000000002,0.0175200000000000009,0.0189880000000000014,0.019108,0.0199650000000000001,0.0195399999999999983,0.0195770000000000007,0.0212579999999999991,0.0219390000000000002,0.0210499999999999993,0.0219570000000000008,0.0233800000000000015,0.0235600000000000011,0.0229479999999999996,0.0223019999999999989,0.0224630000000000003,0.0233949999999999991,0.0232079999999999995,0.0246399999999999987,0.0245320000000000017,0.0247840000000000005,0.0253920000000000014,0.0257800000000000008,0.0246779999999999985,0.0243260000000000004,0.0254500000000000004,0.0254799999999999992,0.0256329999999999995,0.0270169999999999993,0.0263830000000000002,0.0274970000000000006,0.0270689999999999993,0.0263590000000000005,0.0252140000000000003,0.0262830000000000008,0.0265519999999999992,0.027650000000000001,0.0281199999999999992,0.0282479999999999988,0.0272949999999999998,0.0280749999999999993,0.0287449999999999997,0.0272589999999999985,0.0269500000000000017,0.0267690000000000011,0.0260050000000000003,0.0263810000000000017,0.0258710000000000016,0.0272179999999999991,0.0265099999999999988,0.02597,0.0254720000000000016,0.0260930000000000016,0.0248950000000000005,0.0247950000000000011,0.0248510000000000016,0.0249669999999999996,0.0258490000000000004,0.0267300000000000003,0.0267399999999999999,0.0270120000000000013,0.0280639999999999987,0.0275849999999999984,0.0279839999999999985,0.0283400000000000006,0.0302019999999999997,0.0325329999999999994,0.0335430000000000034,0.0312660000000000021,0.0303949999999999984,0.0310400000000000016,0.0312419999999999989,0.0298749999999999988,0.0289930000000000014,0.0294720000000000017,0.0300710000000000005,0.0298759999999999998,0.0290429999999999994,0.0279399999999999996,0.0262970000000000009,0.0262700000000000017,0.0256760000000000009,0.027314999999999999,0.0278429999999999997,0.0287850000000000016,0.0279249999999999984,0.0274630000000000013,0.0275080000000000012,0.0278559999999999988,0.027480000000000001,0.0280530000000000015,0.0285219999999999987,0.0286509999999999994,0.0268560000000000014,0.0254699999999999996,0.0259239999999999991,0.0262249999999999983,0.025791999999999999,0.0244319999999999989,0.0242120000000000009,0.0238060000000000008,0.0260440000000000012,0.0258120000000000016,0.0255279999999999986,0.0270829999999999994,0.0265360000000000006,0.0270279999999999999,0.0267249999999999988,0.0274569999999999988,0.0271680000000000012,0.0265199999999999984,0.0269950000000000016,0.0280299999999999994,0.0277330000000000007,0.0284149999999999993,0.0291410000000000002,0.0293159999999999983,0.0299500000000000009,0.029453,0.0300300000000000011,0.0305729999999999995,0.0307160000000000002,0.0315039999999999973,0.0319530000000000022,0.0308949999999999989,0.0324110000000000023,0.0314680000000000029,0.0320669999999999983,0.0322300000000000017,0.0324050000000000032,0.0336779999999999996,0.0339930000000000024,0.0346800000000000025,0.034396999999999997,0.0349449999999999969,0.0356170000000000028,0.0358489999999999989,0.0374079999999999968,0.0377349999999999977,0.039571000000000002,0.0390389999999999973,0.0370600000000000027,0.0378329999999999986,0.0385450000000000029,0.0364970000000000017,0.0360409999999999967,0.0373360000000000011,0.0381729999999999986,0.0389120000000000021,0.0391550000000000023,0.0387050000000000033,0.0393130000000000007,0.0399989999999999998,0.0396180000000000004,0.0395370000000000027,0.0409530000000000033,0.0419949999999999976,0.0408600000000000005,0.0411159999999999998,0.0402730000000000032,0.0393739999999999993,0.0382489999999999983,0.0396089999999999984,0.0400650000000000034,0.040573999999999999,0.0411209999999999978,0.0416450000000000015,0.0412830000000000003,0.041597000000000002,0.0406610000000000027,0.0400300000000000031,0.0370619999999999977,0.0370590000000000017,0.0374130000000000018,0.0364529999999999993,0.0359469999999999998,0.0369120000000000004,0.037775000000000003,0.0379750000000000018,0.0371879999999999988,0.0366179999999999978,0.0365820000000000034,0.036428000000000002,0.0364480000000000012,0.0368059999999999984,0.0348680000000000032,0.0341380000000000017,0.0339389999999999969,0.0352540000000000006,0.0349469999999999989,0.0338219999999999979,0.0346430000000000002,0.0353359999999999994,0.0355410000000000031,0.034279999999999998,0.0339069999999999996,0.0339749999999999983,0.0340350000000000028,0.0347869999999999985,0.0354900000000000007,0.035411999999999999,0.0357499999999999971,0.0362859999999999988,0.0368780000000000011,0.0372969999999999968,0.0370170000000000013,0.0374569999999999972,0.0362239999999999993,0.0357249999999999998,0.0364529999999999993,0.034285000000000003,0.0340700000000000031,0.034625000000000003,0.0340369999999999978,0.0329679999999999973,0.033724999999999998,0.0338079999999999978,0.0321649999999999991,0.0325340000000000004,0.0332799999999999971,0.0338450000000000001,0.0333699999999999969,0.0331730000000000011,0.0338089999999999988,0.0339930000000000024,0.0344879999999999978,0.0340159999999999976,0.0331250000000000017,0.0328950000000000006,0.0346049999999999969,0.0361749999999999988,0.0361910000000000009,0.0357540000000000011,0.0363199999999999981,0.0369970000000000021,0.0369550000000000017,0.0379719999999999988,0.0383630000000000013,0.038670000000000003,0.038225000000000002,0.0396480000000000027,0.0394899999999999973,0.0391379999999999992,0.0402599999999999972,0.039796999999999999,0.0399769999999999986,0.0407010000000000011,0.0413019999999999984,0.0405980000000000021,0.0405430000000000026,0.0410519999999999982,0.0413740000000000011,0.0397860000000000019,0.0373259999999999981,0.0345890000000000017,0.03653,0.0338800000000000004,0.0356300000000000019,0.0331450000000000009,0.033945999999999997,0.0355800000000000005,0.0331899999999999973,0.0323210000000000025,0.0319050000000000028,0.0336499999999999994,0.034389999999999997,0.0345350000000000032,0.0345200000000000021,0.0334100000000000022,0.032710000000000003,0.0316040000000000001,0.031473000000000001,0.0315430000000000016,0.0328149999999999969,0.0331050000000000025,0.033161999999999997,0.0325200000000000003,0.0328499999999999973,0.0338859999999999995,0.0348960000000000034,0.0347529999999999992,0.0349350000000000008,0.0341499999999999998,0.0345449999999999993,0.033611000000000002,0.0323140000000000024,0.0328600000000000003,0.033841000000000003,0.0328700000000000034,0.0344450000000000034,0.0325900000000000009,0.0312349999999999989,0.031480000000000001,0.0322710000000000011,0.0325500000000000025,0.0326330000000000023,0.0329580000000000012,0.0319059999999999969,0.0316130000000000022,0.0316130000000000022,0.0316130000000000022,0.0325900000000000009,0.0320599999999999982,0.0330200000000000007,0.0337099999999999969,0.0343400000000000025,0.0343400000000000025,0.0343400000000000025,0.0346269999999999981,0.0356399999999999981,0.0353539999999999965,0.0359900000000000012,0.0368100000000000024,0.0368100000000000024,0.0368100000000000024,0.037324000000000003,0.0366809999999999983,0.0357299999999999979,0.0359410000000000007,0.0349399999999999988,0.0349399999999999988,0.0349399999999999988,0.0368300000000000016,0.0357900000000000024,0.0361759999999999998,0.037089999999999998,0.036639999999999999,0.036639999999999999,0.036639999999999999,0.0371700000000000016,0.0365499999999999992,0.0374600000000000002,0.0379200000000000023,0.0374499999999999972,0.0374499999999999972,0.0374499999999999972,0.0376799999999999982,0.0377800000000000011,0.0376399999999999998,0.0376999999999999974,0.0376200000000000007,0.0376200000000000007,0.0376200000000000007,0.0373399999999999982,0.0376700000000000021,0.0379000000000000031,0.0379400000000000015,0.0396499999999999977,0.0396499999999999977,0.0396499999999999977,0.0396499999999999977,0.0397399999999999975,0.0395199999999999996,0.0406180000000000013,0.0414119999999999974,0.0414119999999999974,0.0414119999999999974,0.0412510000000000029,0.039899999999999998,0.0397290000000000004,0.0378240000000000035,0.0378109999999999974,0.0378109999999999974,0.0378109999999999974,0.0381500000000000034,0.037324000000000003,0.0374089999999999978,0.0380899999999999989,0.0388099999999999973,0.0388099999999999973,0.0388099999999999973,0.0386499999999999969,0.0393299999999999969,0.0394199999999999967,0.0389899999999999969,0.0402230000000000018,0.0402230000000000018,0.0402230000000000018,0.0400360000000000021,0.0397500000000000006,0.0399400000000000033,0.0405970000000000011,0.0409269999999999981,0.0409269999999999981,0.0409269999999999981,0.039911000000000002,0.0389299999999999993,0.0389689999999999967,0.0392199999999999979,0.0398599999999999996,0.0398599999999999996,0.0398599999999999996,0.0408200000000000021,0.0416320000000000023,0.0410080000000000028,0.0420299999999999979,0.0414500000000000007,0.0414500000000000007,0.0414500000000000007,0.0418800000000000006,0.0423600000000000018,0.0420799999999999993,0.0416230000000000003,0.0420900000000000024,0.0420900000000000024,0.0420900000000000024,0.0420519999999999991,0.0415400000000000005,0.0408299999999999982,0.0404100000000000015,0.0402599999999999972,0.0402599999999999972,0.0402599999999999972,0.0407280000000000003,0.0410630000000000023,0.041473999999999997,0.0418499999999999983,0.0413800000000000001,0.0413800000000000001,0.0413800000000000001,0.041930000000000002,0.0419689999999999994,0.0422010000000000024,0.0417889999999999998,0.0422500000000000028,0.0422500000000000028,0.0422500000000000028,0.0426300000000000012,0.0423699999999999979,0.0429010000000000016,0.0436199999999999991,0.043730999999999999,0.043730999999999999,0.043730999999999999,0.043729999999999998,0.0438800000000000023,0.0435180000000000011,0.0445199999999999971,0.0435600000000000015,0.0435600000000000015,0.0435600000000000015,0.0443399999999999975,0.0447680000000000022,0.0459299999999999986,0.0448300000000000018,0.0446999999999999967,0.0446999999999999967,0.0446999999999999967,0.0451799999999999979,0.0439859999999999973,0.0434200000000000003,0.0435719999999999996,0.0440199999999999966,0.0440199999999999966,0.0440199999999999966,0.0444449999999999984,0.0449400000000000008]
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^FIXINGS.USD-CIS-5Y": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "MARKET DATA",
      "TYPE" : "FIXINGS",
      "ID" : "FIXINGS.USD-CIS-5Y",
      "FIXINGS" : "FIXINGS.USD-CIS-5Y.DATA",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "INTERP METHOD" : "Flat Right"
    }
  },
  "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00^PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.TRADE-1701250621129591280090": {
    "TYPE" : "CALL",
    "CONTAINER": "CONTEXT^MID_PRICINGTEST_26-SEP-2023-00-00-00",
    "INPUTS" : {
      "OBJECT" : "SCRIPT",
      "TYPE" : "INSTANTIATION",
      "ID" : "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP.TRADE-1701250621129591280090",
      "DEFINITION" : "PRICER.HY.IRQUANTOCALLABLEGENERICSWAP",
      "INSTANTIATION TYPE" : "PRICER",
      "CONTAINER" : "Context^MID_PricingTest_26-Sep-2023-00-00-00",
      "REQUESTOUTPUT" : "OPTION",
      "REQUESTOUTPUT" : "OUTSTANDINGNOTIONAL",
      "REQUESTOUTPUT" : "EXPECTEDMATURITYDATE",
      "REQUESTOUTPUT" : "PREMIUMPV",
      "REQUESTOUTPUT" : "FEEPV",
      "REQUESTOUTPUT" : "ACCRUEDINTEREST",
      "REQUESTOUTPUT" : "PV",
      "REQUESTOUTPUT" : "EXPECTEDMATURITY",
      "REQUESTOUTPUT" : "LEG2ACCRUEDINTEREST",
      "REQUESTOUTPUT" : "LEG2PV",
      "REQUESTOUTPUT" : "SWAP",
      "REQUESTOUTPUT" : "CASHFLOW",
      "REQUESTOUTPUT" : "EVENTPV",
      "REQUESTOUTPUT" : "CALLPROBABILITY",
      "REQUESTOUTPUT" : "LEG1ACCRUEDINTEREST",
      "REQUESTOUTPUT" : "FEECASHFLOW",
      "REQUESTOUTPUT" : "LEG1CLEANPRICE",
      "REQUESTOUTPUT" : "NPV",
      "REQUESTOUTPUT" : "PVCLEANPRICE",
      "REQUESTOUTPUT" : "LEG2CLEANPRICE",
      "REQUESTOUTPUT" : "LEG1PV",
      "REQUESTOUTPUT" : "LEG1CASHFLOW",
      "REQUESTOUTPUT" : "STRUCTUREDPV",
      "REQUESTOUTPUT" : "FUNDINGPV",
      "REQUESTOUTPUT" : "LEG2CASHFLOW",
      "REQUESTOUTPUT" : "NOTESPV",
      "REQUESTOUTPUT" : "NONCREDITPV",
      "INPUTS" : "_12768_NX_AUTOGEN"
    }
  }
}
